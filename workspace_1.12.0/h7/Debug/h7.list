
h7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000216c  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002418  08002418  00012418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002428  08002428  00012428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800242c  0800242c  0001242c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  08002430  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000006c  24000010  08002440  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2400007c  08002440  0002007c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000c6b0  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001834  00000000  00000000  0002c6ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000bd0  00000000  00000000  0002df28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000b18  00000000  00000000  0002eaf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0002eca0  00000000  00000000  0002f610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000cd32  00000000  00000000  0005e2b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0013614b  00000000  00000000  0006afe2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001a112d  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003170  00000000  00000000  001a1180  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	08002400 	.word	0x08002400

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	08002400 	.word	0x08002400

080002ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80002f0:	f000 f8f8 	bl	80004e4 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002f4:	f000 fa58 	bl	80007a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002f8:	f000 f80c 	bl	8000314 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002fc:	f000 f8c8 	bl	8000490 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000300:	f000 f86c 	bl	80003dc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 8000304:	213c      	movs	r1, #60	; 0x3c
 8000306:	4802      	ldr	r0, [pc, #8]	; (8000310 <main+0x24>)
 8000308:	f001 fe52 	bl	8001fb0 <HAL_TIM_Encoder_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800030c:	e7fe      	b.n	800030c <main+0x20>
 800030e:	bf00      	nop
 8000310:	2400002c 	.word	0x2400002c

08000314 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b09c      	sub	sp, #112	; 0x70
 8000318:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800031a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800031e:	224c      	movs	r2, #76	; 0x4c
 8000320:	2100      	movs	r1, #0
 8000322:	4618      	mov	r0, r3
 8000324:	f002 f864 	bl	80023f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000328:	1d3b      	adds	r3, r7, #4
 800032a:	2220      	movs	r2, #32
 800032c:	2100      	movs	r1, #0
 800032e:	4618      	mov	r0, r3
 8000330:	f002 f85e 	bl	80023f0 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000334:	4b27      	ldr	r3, [pc, #156]	; (80003d4 <SystemClock_Config+0xc0>)
 8000336:	f04f 32ff 	mov.w	r2, #4294967295
 800033a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800033e:	2004      	movs	r0, #4
 8000340:	f000 fdd4 	bl	8000eec <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000344:	2300      	movs	r3, #0
 8000346:	603b      	str	r3, [r7, #0]
 8000348:	4b23      	ldr	r3, [pc, #140]	; (80003d8 <SystemClock_Config+0xc4>)
 800034a:	699b      	ldr	r3, [r3, #24]
 800034c:	4a22      	ldr	r2, [pc, #136]	; (80003d8 <SystemClock_Config+0xc4>)
 800034e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000352:	6193      	str	r3, [r2, #24]
 8000354:	4b20      	ldr	r3, [pc, #128]	; (80003d8 <SystemClock_Config+0xc4>)
 8000356:	699b      	ldr	r3, [r3, #24]
 8000358:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800035c:	603b      	str	r3, [r7, #0]
 800035e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000360:	bf00      	nop
 8000362:	4b1d      	ldr	r3, [pc, #116]	; (80003d8 <SystemClock_Config+0xc4>)
 8000364:	699b      	ldr	r3, [r3, #24]
 8000366:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800036a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800036e:	d1f8      	bne.n	8000362 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000370:	2302      	movs	r3, #2
 8000372:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000374:	2301      	movs	r3, #1
 8000376:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000378:	2340      	movs	r3, #64	; 0x40
 800037a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800037c:	2300      	movs	r3, #0
 800037e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000380:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000384:	4618      	mov	r0, r3
 8000386:	f000 fe0b 	bl	8000fa0 <HAL_RCC_OscConfig>
 800038a:	4603      	mov	r3, r0
 800038c:	2b00      	cmp	r3, #0
 800038e:	d001      	beq.n	8000394 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000390:	f000 f8d4 	bl	800053c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000394:	233f      	movs	r3, #63	; 0x3f
 8000396:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000398:	2300      	movs	r3, #0
 800039a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800039c:	2300      	movs	r3, #0
 800039e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80003a0:	2300      	movs	r3, #0
 80003a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80003a4:	2340      	movs	r3, #64	; 0x40
 80003a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80003a8:	2340      	movs	r3, #64	; 0x40
 80003aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80003ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003b0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80003b2:	2340      	movs	r3, #64	; 0x40
 80003b4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003b6:	1d3b      	adds	r3, r7, #4
 80003b8:	2102      	movs	r1, #2
 80003ba:	4618      	mov	r0, r3
 80003bc:	f001 fa22 	bl	8001804 <HAL_RCC_ClockConfig>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d001      	beq.n	80003ca <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80003c6:	f000 f8b9 	bl	800053c <Error_Handler>
  }
}
 80003ca:	bf00      	nop
 80003cc:	3770      	adds	r7, #112	; 0x70
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	bf00      	nop
 80003d4:	58024400 	.word	0x58024400
 80003d8:	58024800 	.word	0x58024800

080003dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b08c      	sub	sp, #48	; 0x30
 80003e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80003e2:	f107 030c 	add.w	r3, r7, #12
 80003e6:	2224      	movs	r2, #36	; 0x24
 80003e8:	2100      	movs	r1, #0
 80003ea:	4618      	mov	r0, r3
 80003ec:	f002 f800 	bl	80023f0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003f0:	463b      	mov	r3, r7
 80003f2:	2200      	movs	r2, #0
 80003f4:	601a      	str	r2, [r3, #0]
 80003f6:	605a      	str	r2, [r3, #4]
 80003f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003fa:	4b23      	ldr	r3, [pc, #140]	; (8000488 <MX_TIM1_Init+0xac>)
 80003fc:	4a23      	ldr	r2, [pc, #140]	; (800048c <MX_TIM1_Init+0xb0>)
 80003fe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000400:	4b21      	ldr	r3, [pc, #132]	; (8000488 <MX_TIM1_Init+0xac>)
 8000402:	2200      	movs	r2, #0
 8000404:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000406:	4b20      	ldr	r3, [pc, #128]	; (8000488 <MX_TIM1_Init+0xac>)
 8000408:	2200      	movs	r2, #0
 800040a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800040c:	4b1e      	ldr	r3, [pc, #120]	; (8000488 <MX_TIM1_Init+0xac>)
 800040e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000412:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000414:	4b1c      	ldr	r3, [pc, #112]	; (8000488 <MX_TIM1_Init+0xac>)
 8000416:	2200      	movs	r2, #0
 8000418:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800041a:	4b1b      	ldr	r3, [pc, #108]	; (8000488 <MX_TIM1_Init+0xac>)
 800041c:	2200      	movs	r2, #0
 800041e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000420:	4b19      	ldr	r3, [pc, #100]	; (8000488 <MX_TIM1_Init+0xac>)
 8000422:	2200      	movs	r2, #0
 8000424:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000426:	2303      	movs	r3, #3
 8000428:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800042a:	2300      	movs	r3, #0
 800042c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800042e:	2301      	movs	r3, #1
 8000430:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000432:	2300      	movs	r3, #0
 8000434:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000436:	2300      	movs	r3, #0
 8000438:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800043a:	2300      	movs	r3, #0
 800043c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800043e:	2301      	movs	r3, #1
 8000440:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000442:	2300      	movs	r3, #0
 8000444:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000446:	2300      	movs	r3, #0
 8000448:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800044a:	f107 030c 	add.w	r3, r7, #12
 800044e:	4619      	mov	r1, r3
 8000450:	480d      	ldr	r0, [pc, #52]	; (8000488 <MX_TIM1_Init+0xac>)
 8000452:	f001 fd07 	bl	8001e64 <HAL_TIM_Encoder_Init>
 8000456:	4603      	mov	r3, r0
 8000458:	2b00      	cmp	r3, #0
 800045a:	d001      	beq.n	8000460 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 800045c:	f000 f86e 	bl	800053c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000460:	2300      	movs	r3, #0
 8000462:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000464:	2300      	movs	r3, #0
 8000466:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000468:	2300      	movs	r3, #0
 800046a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800046c:	463b      	mov	r3, r7
 800046e:	4619      	mov	r1, r3
 8000470:	4805      	ldr	r0, [pc, #20]	; (8000488 <MX_TIM1_Init+0xac>)
 8000472:	f001 ff0b 	bl	800228c <HAL_TIMEx_MasterConfigSynchronization>
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	d001      	beq.n	8000480 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800047c:	f000 f85e 	bl	800053c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000480:	bf00      	nop
 8000482:	3730      	adds	r7, #48	; 0x30
 8000484:	46bd      	mov	sp, r7
 8000486:	bd80      	pop	{r7, pc}
 8000488:	2400002c 	.word	0x2400002c
 800048c:	40010000 	.word	0x40010000

08000490 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000490:	b480      	push	{r7}
 8000492:	b083      	sub	sp, #12
 8000494:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000496:	4b12      	ldr	r3, [pc, #72]	; (80004e0 <MX_GPIO_Init+0x50>)
 8000498:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800049c:	4a10      	ldr	r2, [pc, #64]	; (80004e0 <MX_GPIO_Init+0x50>)
 800049e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004a2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80004a6:	4b0e      	ldr	r3, [pc, #56]	; (80004e0 <MX_GPIO_Init+0x50>)
 80004a8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80004ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004b0:	607b      	str	r3, [r7, #4]
 80004b2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004b4:	4b0a      	ldr	r3, [pc, #40]	; (80004e0 <MX_GPIO_Init+0x50>)
 80004b6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80004ba:	4a09      	ldr	r2, [pc, #36]	; (80004e0 <MX_GPIO_Init+0x50>)
 80004bc:	f043 0310 	orr.w	r3, r3, #16
 80004c0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80004c4:	4b06      	ldr	r3, [pc, #24]	; (80004e0 <MX_GPIO_Init+0x50>)
 80004c6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80004ca:	f003 0310 	and.w	r3, r3, #16
 80004ce:	603b      	str	r3, [r7, #0]
 80004d0:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004d2:	bf00      	nop
 80004d4:	370c      	adds	r7, #12
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop
 80004e0:	58024400 	.word	0x58024400

080004e4 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b084      	sub	sp, #16
 80004e8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80004ea:	463b      	mov	r3, r7
 80004ec:	2200      	movs	r2, #0
 80004ee:	601a      	str	r2, [r3, #0]
 80004f0:	605a      	str	r2, [r3, #4]
 80004f2:	609a      	str	r2, [r3, #8]
 80004f4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80004f6:	f000 facd 	bl	8000a94 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80004fa:	2301      	movs	r3, #1
 80004fc:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80004fe:	2300      	movs	r3, #0
 8000500:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000502:	2300      	movs	r3, #0
 8000504:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000506:	231f      	movs	r3, #31
 8000508:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800050a:	2387      	movs	r3, #135	; 0x87
 800050c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800050e:	2300      	movs	r3, #0
 8000510:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000512:	2300      	movs	r3, #0
 8000514:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000516:	2301      	movs	r3, #1
 8000518:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800051a:	2301      	movs	r3, #1
 800051c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800051e:	2300      	movs	r3, #0
 8000520:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000522:	2300      	movs	r3, #0
 8000524:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000526:	463b      	mov	r3, r7
 8000528:	4618      	mov	r0, r3
 800052a:	f000 faeb 	bl	8000b04 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800052e:	2004      	movs	r0, #4
 8000530:	f000 fac8 	bl	8000ac4 <HAL_MPU_Enable>

}
 8000534:	bf00      	nop
 8000536:	3710      	adds	r7, #16
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}

0800053c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000540:	b672      	cpsid	i
}
 8000542:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000544:	e7fe      	b.n	8000544 <Error_Handler+0x8>
	...

08000548 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000548:	b480      	push	{r7}
 800054a:	b083      	sub	sp, #12
 800054c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800054e:	4b0a      	ldr	r3, [pc, #40]	; (8000578 <HAL_MspInit+0x30>)
 8000550:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000554:	4a08      	ldr	r2, [pc, #32]	; (8000578 <HAL_MspInit+0x30>)
 8000556:	f043 0302 	orr.w	r3, r3, #2
 800055a:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800055e:	4b06      	ldr	r3, [pc, #24]	; (8000578 <HAL_MspInit+0x30>)
 8000560:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000564:	f003 0302 	and.w	r3, r3, #2
 8000568:	607b      	str	r3, [r7, #4]
 800056a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800056c:	bf00      	nop
 800056e:	370c      	adds	r7, #12
 8000570:	46bd      	mov	sp, r7
 8000572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000576:	4770      	bx	lr
 8000578:	58024400 	.word	0x58024400

0800057c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b08a      	sub	sp, #40	; 0x28
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000584:	f107 0314 	add.w	r3, r7, #20
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
 800058e:	609a      	str	r2, [r3, #8]
 8000590:	60da      	str	r2, [r3, #12]
 8000592:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a1a      	ldr	r2, [pc, #104]	; (8000604 <HAL_TIM_Encoder_MspInit+0x88>)
 800059a:	4293      	cmp	r3, r2
 800059c:	d12e      	bne.n	80005fc <HAL_TIM_Encoder_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800059e:	4b1a      	ldr	r3, [pc, #104]	; (8000608 <HAL_TIM_Encoder_MspInit+0x8c>)
 80005a0:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80005a4:	4a18      	ldr	r2, [pc, #96]	; (8000608 <HAL_TIM_Encoder_MspInit+0x8c>)
 80005a6:	f043 0301 	orr.w	r3, r3, #1
 80005aa:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 80005ae:	4b16      	ldr	r3, [pc, #88]	; (8000608 <HAL_TIM_Encoder_MspInit+0x8c>)
 80005b0:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80005b4:	f003 0301 	and.w	r3, r3, #1
 80005b8:	613b      	str	r3, [r7, #16]
 80005ba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80005bc:	4b12      	ldr	r3, [pc, #72]	; (8000608 <HAL_TIM_Encoder_MspInit+0x8c>)
 80005be:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80005c2:	4a11      	ldr	r2, [pc, #68]	; (8000608 <HAL_TIM_Encoder_MspInit+0x8c>)
 80005c4:	f043 0310 	orr.w	r3, r3, #16
 80005c8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80005cc:	4b0e      	ldr	r3, [pc, #56]	; (8000608 <HAL_TIM_Encoder_MspInit+0x8c>)
 80005ce:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80005d2:	f003 0310 	and.w	r3, r3, #16
 80005d6:	60fb      	str	r3, [r7, #12]
 80005d8:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80005da:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80005de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005e0:	2302      	movs	r3, #2
 80005e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e4:	2300      	movs	r3, #0
 80005e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e8:	2300      	movs	r3, #0
 80005ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80005ec:	2301      	movs	r3, #1
 80005ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005f0:	f107 0314 	add.w	r3, r7, #20
 80005f4:	4619      	mov	r1, r3
 80005f6:	4805      	ldr	r0, [pc, #20]	; (800060c <HAL_TIM_Encoder_MspInit+0x90>)
 80005f8:	f000 fac8 	bl	8000b8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80005fc:	bf00      	nop
 80005fe:	3728      	adds	r7, #40	; 0x28
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	40010000 	.word	0x40010000
 8000608:	58024400 	.word	0x58024400
 800060c:	58021000 	.word	0x58021000

08000610 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000614:	e7fe      	b.n	8000614 <NMI_Handler+0x4>

08000616 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000616:	b480      	push	{r7}
 8000618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800061a:	e7fe      	b.n	800061a <HardFault_Handler+0x4>

0800061c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000620:	e7fe      	b.n	8000620 <MemManage_Handler+0x4>

08000622 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000622:	b480      	push	{r7}
 8000624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000626:	e7fe      	b.n	8000626 <BusFault_Handler+0x4>

08000628 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800062c:	e7fe      	b.n	800062c <UsageFault_Handler+0x4>

0800062e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800062e:	b480      	push	{r7}
 8000630:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000632:	bf00      	nop
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr

0800063c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000640:	bf00      	nop
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr

0800064a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800064a:	b480      	push	{r7}
 800064c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800064e:	bf00      	nop
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr

08000658 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800065c:	f000 f916 	bl	800088c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000660:	bf00      	nop
 8000662:	bd80      	pop	{r7, pc}

08000664 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000668:	4b32      	ldr	r3, [pc, #200]	; (8000734 <SystemInit+0xd0>)
 800066a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800066e:	4a31      	ldr	r2, [pc, #196]	; (8000734 <SystemInit+0xd0>)
 8000670:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000674:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000678:	4b2f      	ldr	r3, [pc, #188]	; (8000738 <SystemInit+0xd4>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f003 030f 	and.w	r3, r3, #15
 8000680:	2b02      	cmp	r3, #2
 8000682:	d807      	bhi.n	8000694 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000684:	4b2c      	ldr	r3, [pc, #176]	; (8000738 <SystemInit+0xd4>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f023 030f 	bic.w	r3, r3, #15
 800068c:	4a2a      	ldr	r2, [pc, #168]	; (8000738 <SystemInit+0xd4>)
 800068e:	f043 0303 	orr.w	r3, r3, #3
 8000692:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000694:	4b29      	ldr	r3, [pc, #164]	; (800073c <SystemInit+0xd8>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a28      	ldr	r2, [pc, #160]	; (800073c <SystemInit+0xd8>)
 800069a:	f043 0301 	orr.w	r3, r3, #1
 800069e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006a0:	4b26      	ldr	r3, [pc, #152]	; (800073c <SystemInit+0xd8>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006a6:	4b25      	ldr	r3, [pc, #148]	; (800073c <SystemInit+0xd8>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	4924      	ldr	r1, [pc, #144]	; (800073c <SystemInit+0xd8>)
 80006ac:	4b24      	ldr	r3, [pc, #144]	; (8000740 <SystemInit+0xdc>)
 80006ae:	4013      	ands	r3, r2
 80006b0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006b2:	4b21      	ldr	r3, [pc, #132]	; (8000738 <SystemInit+0xd4>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	f003 030c 	and.w	r3, r3, #12
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d007      	beq.n	80006ce <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006be:	4b1e      	ldr	r3, [pc, #120]	; (8000738 <SystemInit+0xd4>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	f023 030f 	bic.w	r3, r3, #15
 80006c6:	4a1c      	ldr	r2, [pc, #112]	; (8000738 <SystemInit+0xd4>)
 80006c8:	f043 0303 	orr.w	r3, r3, #3
 80006cc:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80006ce:	4b1b      	ldr	r3, [pc, #108]	; (800073c <SystemInit+0xd8>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80006d4:	4b19      	ldr	r3, [pc, #100]	; (800073c <SystemInit+0xd8>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80006da:	4b18      	ldr	r3, [pc, #96]	; (800073c <SystemInit+0xd8>)
 80006dc:	2200      	movs	r2, #0
 80006de:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80006e0:	4b16      	ldr	r3, [pc, #88]	; (800073c <SystemInit+0xd8>)
 80006e2:	4a18      	ldr	r2, [pc, #96]	; (8000744 <SystemInit+0xe0>)
 80006e4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80006e6:	4b15      	ldr	r3, [pc, #84]	; (800073c <SystemInit+0xd8>)
 80006e8:	4a17      	ldr	r2, [pc, #92]	; (8000748 <SystemInit+0xe4>)
 80006ea:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80006ec:	4b13      	ldr	r3, [pc, #76]	; (800073c <SystemInit+0xd8>)
 80006ee:	4a17      	ldr	r2, [pc, #92]	; (800074c <SystemInit+0xe8>)
 80006f0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80006f2:	4b12      	ldr	r3, [pc, #72]	; (800073c <SystemInit+0xd8>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80006f8:	4b10      	ldr	r3, [pc, #64]	; (800073c <SystemInit+0xd8>)
 80006fa:	4a14      	ldr	r2, [pc, #80]	; (800074c <SystemInit+0xe8>)
 80006fc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80006fe:	4b0f      	ldr	r3, [pc, #60]	; (800073c <SystemInit+0xd8>)
 8000700:	2200      	movs	r2, #0
 8000702:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000704:	4b0d      	ldr	r3, [pc, #52]	; (800073c <SystemInit+0xd8>)
 8000706:	4a11      	ldr	r2, [pc, #68]	; (800074c <SystemInit+0xe8>)
 8000708:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800070a:	4b0c      	ldr	r3, [pc, #48]	; (800073c <SystemInit+0xd8>)
 800070c:	2200      	movs	r2, #0
 800070e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000710:	4b0a      	ldr	r3, [pc, #40]	; (800073c <SystemInit+0xd8>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a09      	ldr	r2, [pc, #36]	; (800073c <SystemInit+0xd8>)
 8000716:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800071a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800071c:	4b07      	ldr	r3, [pc, #28]	; (800073c <SystemInit+0xd8>)
 800071e:	2200      	movs	r2, #0
 8000720:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000722:	4b0b      	ldr	r3, [pc, #44]	; (8000750 <SystemInit+0xec>)
 8000724:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000728:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800072a:	bf00      	nop
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr
 8000734:	e000ed00 	.word	0xe000ed00
 8000738:	52002000 	.word	0x52002000
 800073c:	58024400 	.word	0x58024400
 8000740:	eaf6ed7f 	.word	0xeaf6ed7f
 8000744:	02020200 	.word	0x02020200
 8000748:	01ff0000 	.word	0x01ff0000
 800074c:	01010280 	.word	0x01010280
 8000750:	52004000 	.word	0x52004000

08000754 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000754:	f8df d034 	ldr.w	sp, [pc, #52]	; 800078c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000758:	f7ff ff84 	bl	8000664 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800075c:	480c      	ldr	r0, [pc, #48]	; (8000790 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800075e:	490d      	ldr	r1, [pc, #52]	; (8000794 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000760:	4a0d      	ldr	r2, [pc, #52]	; (8000798 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000762:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000764:	e002      	b.n	800076c <LoopCopyDataInit>

08000766 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000766:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000768:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800076a:	3304      	adds	r3, #4

0800076c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 800076c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800076e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000770:	d3f9      	bcc.n	8000766 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000772:	4a0a      	ldr	r2, [pc, #40]	; (800079c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000774:	4c0a      	ldr	r4, [pc, #40]	; (80007a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000776:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000778:	e001      	b.n	800077e <LoopFillZerobss>

0800077a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800077a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800077c:	3204      	adds	r2, #4

0800077e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800077e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000780:	d3fb      	bcc.n	800077a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000782:	f001 fe11 	bl	80023a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000786:	f7ff fdb1 	bl	80002ec <main>
  bx  lr
 800078a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800078c:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000790:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000794:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000798:	08002430 	.word	0x08002430
  ldr r2, =_sbss
 800079c:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 80007a0:	2400007c 	.word	0x2400007c

080007a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007a4:	e7fe      	b.n	80007a4 <ADC_IRQHandler>
	...

080007a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007ae:	2003      	movs	r0, #3
 80007b0:	f000 f93e 	bl	8000a30 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80007b4:	f001 f9dc 	bl	8001b70 <HAL_RCC_GetSysClockFreq>
 80007b8:	4602      	mov	r2, r0
 80007ba:	4b15      	ldr	r3, [pc, #84]	; (8000810 <HAL_Init+0x68>)
 80007bc:	699b      	ldr	r3, [r3, #24]
 80007be:	0a1b      	lsrs	r3, r3, #8
 80007c0:	f003 030f 	and.w	r3, r3, #15
 80007c4:	4913      	ldr	r1, [pc, #76]	; (8000814 <HAL_Init+0x6c>)
 80007c6:	5ccb      	ldrb	r3, [r1, r3]
 80007c8:	f003 031f 	and.w	r3, r3, #31
 80007cc:	fa22 f303 	lsr.w	r3, r2, r3
 80007d0:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80007d2:	4b0f      	ldr	r3, [pc, #60]	; (8000810 <HAL_Init+0x68>)
 80007d4:	699b      	ldr	r3, [r3, #24]
 80007d6:	f003 030f 	and.w	r3, r3, #15
 80007da:	4a0e      	ldr	r2, [pc, #56]	; (8000814 <HAL_Init+0x6c>)
 80007dc:	5cd3      	ldrb	r3, [r2, r3]
 80007de:	f003 031f 	and.w	r3, r3, #31
 80007e2:	687a      	ldr	r2, [r7, #4]
 80007e4:	fa22 f303 	lsr.w	r3, r2, r3
 80007e8:	4a0b      	ldr	r2, [pc, #44]	; (8000818 <HAL_Init+0x70>)
 80007ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80007ec:	4a0b      	ldr	r2, [pc, #44]	; (800081c <HAL_Init+0x74>)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007f2:	200f      	movs	r0, #15
 80007f4:	f000 f814 	bl	8000820 <HAL_InitTick>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80007fe:	2301      	movs	r3, #1
 8000800:	e002      	b.n	8000808 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000802:	f7ff fea1 	bl	8000548 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000806:	2300      	movs	r3, #0
}
 8000808:	4618      	mov	r0, r3
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	58024400 	.word	0x58024400
 8000814:	08002418 	.word	0x08002418
 8000818:	24000004 	.word	0x24000004
 800081c:	24000000 	.word	0x24000000

08000820 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000828:	4b15      	ldr	r3, [pc, #84]	; (8000880 <HAL_InitTick+0x60>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d101      	bne.n	8000834 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000830:	2301      	movs	r3, #1
 8000832:	e021      	b.n	8000878 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000834:	4b13      	ldr	r3, [pc, #76]	; (8000884 <HAL_InitTick+0x64>)
 8000836:	681a      	ldr	r2, [r3, #0]
 8000838:	4b11      	ldr	r3, [pc, #68]	; (8000880 <HAL_InitTick+0x60>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	4619      	mov	r1, r3
 800083e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000842:	fbb3 f3f1 	udiv	r3, r3, r1
 8000846:	fbb2 f3f3 	udiv	r3, r2, r3
 800084a:	4618      	mov	r0, r3
 800084c:	f000 f915 	bl	8000a7a <HAL_SYSTICK_Config>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000856:	2301      	movs	r3, #1
 8000858:	e00e      	b.n	8000878 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	2b0f      	cmp	r3, #15
 800085e:	d80a      	bhi.n	8000876 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000860:	2200      	movs	r2, #0
 8000862:	6879      	ldr	r1, [r7, #4]
 8000864:	f04f 30ff 	mov.w	r0, #4294967295
 8000868:	f000 f8ed 	bl	8000a46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800086c:	4a06      	ldr	r2, [pc, #24]	; (8000888 <HAL_InitTick+0x68>)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000872:	2300      	movs	r3, #0
 8000874:	e000      	b.n	8000878 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000876:	2301      	movs	r3, #1
}
 8000878:	4618      	mov	r0, r3
 800087a:	3708      	adds	r7, #8
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	2400000c 	.word	0x2400000c
 8000884:	24000000 	.word	0x24000000
 8000888:	24000008 	.word	0x24000008

0800088c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000890:	4b06      	ldr	r3, [pc, #24]	; (80008ac <HAL_IncTick+0x20>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	461a      	mov	r2, r3
 8000896:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <HAL_IncTick+0x24>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4413      	add	r3, r2
 800089c:	4a04      	ldr	r2, [pc, #16]	; (80008b0 <HAL_IncTick+0x24>)
 800089e:	6013      	str	r3, [r2, #0]
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	2400000c 	.word	0x2400000c
 80008b0:	24000078 	.word	0x24000078

080008b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  return uwTick;
 80008b8:	4b03      	ldr	r3, [pc, #12]	; (80008c8 <HAL_GetTick+0x14>)
 80008ba:	681b      	ldr	r3, [r3, #0]
}
 80008bc:	4618      	mov	r0, r3
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	24000078 	.word	0x24000078

080008cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b085      	sub	sp, #20
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	f003 0307 	and.w	r3, r3, #7
 80008da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008dc:	4b0b      	ldr	r3, [pc, #44]	; (800090c <__NVIC_SetPriorityGrouping+0x40>)
 80008de:	68db      	ldr	r3, [r3, #12]
 80008e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008e2:	68ba      	ldr	r2, [r7, #8]
 80008e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008e8:	4013      	ands	r3, r2
 80008ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80008f4:	4b06      	ldr	r3, [pc, #24]	; (8000910 <__NVIC_SetPriorityGrouping+0x44>)
 80008f6:	4313      	orrs	r3, r2
 80008f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008fa:	4a04      	ldr	r2, [pc, #16]	; (800090c <__NVIC_SetPriorityGrouping+0x40>)
 80008fc:	68bb      	ldr	r3, [r7, #8]
 80008fe:	60d3      	str	r3, [r2, #12]
}
 8000900:	bf00      	nop
 8000902:	3714      	adds	r7, #20
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr
 800090c:	e000ed00 	.word	0xe000ed00
 8000910:	05fa0000 	.word	0x05fa0000

08000914 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000918:	4b04      	ldr	r3, [pc, #16]	; (800092c <__NVIC_GetPriorityGrouping+0x18>)
 800091a:	68db      	ldr	r3, [r3, #12]
 800091c:	0a1b      	lsrs	r3, r3, #8
 800091e:	f003 0307 	and.w	r3, r3, #7
}
 8000922:	4618      	mov	r0, r3
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr
 800092c:	e000ed00 	.word	0xe000ed00

08000930 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	4603      	mov	r3, r0
 8000938:	6039      	str	r1, [r7, #0]
 800093a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800093c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000940:	2b00      	cmp	r3, #0
 8000942:	db0a      	blt.n	800095a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	b2da      	uxtb	r2, r3
 8000948:	490c      	ldr	r1, [pc, #48]	; (800097c <__NVIC_SetPriority+0x4c>)
 800094a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800094e:	0112      	lsls	r2, r2, #4
 8000950:	b2d2      	uxtb	r2, r2
 8000952:	440b      	add	r3, r1
 8000954:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000958:	e00a      	b.n	8000970 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	b2da      	uxtb	r2, r3
 800095e:	4908      	ldr	r1, [pc, #32]	; (8000980 <__NVIC_SetPriority+0x50>)
 8000960:	88fb      	ldrh	r3, [r7, #6]
 8000962:	f003 030f 	and.w	r3, r3, #15
 8000966:	3b04      	subs	r3, #4
 8000968:	0112      	lsls	r2, r2, #4
 800096a:	b2d2      	uxtb	r2, r2
 800096c:	440b      	add	r3, r1
 800096e:	761a      	strb	r2, [r3, #24]
}
 8000970:	bf00      	nop
 8000972:	370c      	adds	r7, #12
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr
 800097c:	e000e100 	.word	0xe000e100
 8000980:	e000ed00 	.word	0xe000ed00

08000984 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000984:	b480      	push	{r7}
 8000986:	b089      	sub	sp, #36	; 0x24
 8000988:	af00      	add	r7, sp, #0
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	60b9      	str	r1, [r7, #8]
 800098e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	f003 0307 	and.w	r3, r3, #7
 8000996:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000998:	69fb      	ldr	r3, [r7, #28]
 800099a:	f1c3 0307 	rsb	r3, r3, #7
 800099e:	2b04      	cmp	r3, #4
 80009a0:	bf28      	it	cs
 80009a2:	2304      	movcs	r3, #4
 80009a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009a6:	69fb      	ldr	r3, [r7, #28]
 80009a8:	3304      	adds	r3, #4
 80009aa:	2b06      	cmp	r3, #6
 80009ac:	d902      	bls.n	80009b4 <NVIC_EncodePriority+0x30>
 80009ae:	69fb      	ldr	r3, [r7, #28]
 80009b0:	3b03      	subs	r3, #3
 80009b2:	e000      	b.n	80009b6 <NVIC_EncodePriority+0x32>
 80009b4:	2300      	movs	r3, #0
 80009b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009b8:	f04f 32ff 	mov.w	r2, #4294967295
 80009bc:	69bb      	ldr	r3, [r7, #24]
 80009be:	fa02 f303 	lsl.w	r3, r2, r3
 80009c2:	43da      	mvns	r2, r3
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	401a      	ands	r2, r3
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009cc:	f04f 31ff 	mov.w	r1, #4294967295
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	fa01 f303 	lsl.w	r3, r1, r3
 80009d6:	43d9      	mvns	r1, r3
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009dc:	4313      	orrs	r3, r2
         );
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3724      	adds	r7, #36	; 0x24
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
	...

080009ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	3b01      	subs	r3, #1
 80009f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009fc:	d301      	bcc.n	8000a02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009fe:	2301      	movs	r3, #1
 8000a00:	e00f      	b.n	8000a22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a02:	4a0a      	ldr	r2, [pc, #40]	; (8000a2c <SysTick_Config+0x40>)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	3b01      	subs	r3, #1
 8000a08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a0a:	210f      	movs	r1, #15
 8000a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a10:	f7ff ff8e 	bl	8000930 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a14:	4b05      	ldr	r3, [pc, #20]	; (8000a2c <SysTick_Config+0x40>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a1a:	4b04      	ldr	r3, [pc, #16]	; (8000a2c <SysTick_Config+0x40>)
 8000a1c:	2207      	movs	r2, #7
 8000a1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a20:	2300      	movs	r3, #0
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	e000e010 	.word	0xe000e010

08000a30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a38:	6878      	ldr	r0, [r7, #4]
 8000a3a:	f7ff ff47 	bl	80008cc <__NVIC_SetPriorityGrouping>
}
 8000a3e:	bf00      	nop
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}

08000a46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a46:	b580      	push	{r7, lr}
 8000a48:	b086      	sub	sp, #24
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	60b9      	str	r1, [r7, #8]
 8000a50:	607a      	str	r2, [r7, #4]
 8000a52:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a54:	f7ff ff5e 	bl	8000914 <__NVIC_GetPriorityGrouping>
 8000a58:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a5a:	687a      	ldr	r2, [r7, #4]
 8000a5c:	68b9      	ldr	r1, [r7, #8]
 8000a5e:	6978      	ldr	r0, [r7, #20]
 8000a60:	f7ff ff90 	bl	8000984 <NVIC_EncodePriority>
 8000a64:	4602      	mov	r2, r0
 8000a66:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a6a:	4611      	mov	r1, r2
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff ff5f 	bl	8000930 <__NVIC_SetPriority>
}
 8000a72:	bf00      	nop
 8000a74:	3718      	adds	r7, #24
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	b082      	sub	sp, #8
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a82:	6878      	ldr	r0, [r7, #4]
 8000a84:	f7ff ffb2 	bl	80009ec <SysTick_Config>
 8000a88:	4603      	mov	r3, r0
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
	...

08000a94 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000a98:	f3bf 8f5f 	dmb	sy
}
 8000a9c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000a9e:	4b07      	ldr	r3, [pc, #28]	; (8000abc <HAL_MPU_Disable+0x28>)
 8000aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aa2:	4a06      	ldr	r2, [pc, #24]	; (8000abc <HAL_MPU_Disable+0x28>)
 8000aa4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000aa8:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000aaa:	4b05      	ldr	r3, [pc, #20]	; (8000ac0 <HAL_MPU_Disable+0x2c>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	605a      	str	r2, [r3, #4]
}
 8000ab0:	bf00      	nop
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	e000ed00 	.word	0xe000ed00
 8000ac0:	e000ed90 	.word	0xe000ed90

08000ac4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000acc:	4a0b      	ldr	r2, [pc, #44]	; (8000afc <HAL_MPU_Enable+0x38>)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	f043 0301 	orr.w	r3, r3, #1
 8000ad4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000ad6:	4b0a      	ldr	r3, [pc, #40]	; (8000b00 <HAL_MPU_Enable+0x3c>)
 8000ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ada:	4a09      	ldr	r2, [pc, #36]	; (8000b00 <HAL_MPU_Enable+0x3c>)
 8000adc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ae0:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000ae2:	f3bf 8f4f 	dsb	sy
}
 8000ae6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ae8:	f3bf 8f6f 	isb	sy
}
 8000aec:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000aee:	bf00      	nop
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	e000ed90 	.word	0xe000ed90
 8000b00:	e000ed00 	.word	0xe000ed00

08000b04 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	785a      	ldrb	r2, [r3, #1]
 8000b10:	4b1d      	ldr	r3, [pc, #116]	; (8000b88 <HAL_MPU_ConfigRegion+0x84>)
 8000b12:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d029      	beq.n	8000b70 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8000b1c:	4a1a      	ldr	r2, [pc, #104]	; (8000b88 <HAL_MPU_ConfigRegion+0x84>)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	7b1b      	ldrb	r3, [r3, #12]
 8000b28:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	7adb      	ldrb	r3, [r3, #11]
 8000b2e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000b30:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	7a9b      	ldrb	r3, [r3, #10]
 8000b36:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000b38:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	7b5b      	ldrb	r3, [r3, #13]
 8000b3e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000b40:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	7b9b      	ldrb	r3, [r3, #14]
 8000b46:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000b48:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	7bdb      	ldrb	r3, [r3, #15]
 8000b4e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000b50:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	7a5b      	ldrb	r3, [r3, #9]
 8000b56:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000b58:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	7a1b      	ldrb	r3, [r3, #8]
 8000b5e:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000b60:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000b62:	687a      	ldr	r2, [r7, #4]
 8000b64:	7812      	ldrb	r2, [r2, #0]
 8000b66:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000b68:	4a07      	ldr	r2, [pc, #28]	; (8000b88 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000b6a:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000b6c:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8000b6e:	e005      	b.n	8000b7c <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8000b70:	4b05      	ldr	r3, [pc, #20]	; (8000b88 <HAL_MPU_ConfigRegion+0x84>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8000b76:	4b04      	ldr	r3, [pc, #16]	; (8000b88 <HAL_MPU_ConfigRegion+0x84>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	611a      	str	r2, [r3, #16]
}
 8000b7c:	bf00      	nop
 8000b7e:	370c      	adds	r7, #12
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	e000ed90 	.word	0xe000ed90

08000b8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b089      	sub	sp, #36	; 0x24
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000b96:	2300      	movs	r3, #0
 8000b98:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000b9a:	4b89      	ldr	r3, [pc, #548]	; (8000dc0 <HAL_GPIO_Init+0x234>)
 8000b9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000b9e:	e194      	b.n	8000eca <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	69fb      	ldr	r3, [r7, #28]
 8000ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bac:	4013      	ands	r3, r2
 8000bae:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000bb0:	693b      	ldr	r3, [r7, #16]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	f000 8186 	beq.w	8000ec4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	f003 0303 	and.w	r3, r3, #3
 8000bc0:	2b01      	cmp	r3, #1
 8000bc2:	d005      	beq.n	8000bd0 <HAL_GPIO_Init+0x44>
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	f003 0303 	and.w	r3, r3, #3
 8000bcc:	2b02      	cmp	r3, #2
 8000bce:	d130      	bne.n	8000c32 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	689b      	ldr	r3, [r3, #8]
 8000bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000bd6:	69fb      	ldr	r3, [r7, #28]
 8000bd8:	005b      	lsls	r3, r3, #1
 8000bda:	2203      	movs	r2, #3
 8000bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000be0:	43db      	mvns	r3, r3
 8000be2:	69ba      	ldr	r2, [r7, #24]
 8000be4:	4013      	ands	r3, r2
 8000be6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	68da      	ldr	r2, [r3, #12]
 8000bec:	69fb      	ldr	r3, [r7, #28]
 8000bee:	005b      	lsls	r3, r3, #1
 8000bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf4:	69ba      	ldr	r2, [r7, #24]
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	69ba      	ldr	r2, [r7, #24]
 8000bfe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c06:	2201      	movs	r2, #1
 8000c08:	69fb      	ldr	r3, [r7, #28]
 8000c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0e:	43db      	mvns	r3, r3
 8000c10:	69ba      	ldr	r2, [r7, #24]
 8000c12:	4013      	ands	r3, r2
 8000c14:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	091b      	lsrs	r3, r3, #4
 8000c1c:	f003 0201 	and.w	r2, r3, #1
 8000c20:	69fb      	ldr	r3, [r7, #28]
 8000c22:	fa02 f303 	lsl.w	r3, r2, r3
 8000c26:	69ba      	ldr	r2, [r7, #24]
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	69ba      	ldr	r2, [r7, #24]
 8000c30:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	f003 0303 	and.w	r3, r3, #3
 8000c3a:	2b03      	cmp	r3, #3
 8000c3c:	d017      	beq.n	8000c6e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	68db      	ldr	r3, [r3, #12]
 8000c42:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c44:	69fb      	ldr	r3, [r7, #28]
 8000c46:	005b      	lsls	r3, r3, #1
 8000c48:	2203      	movs	r2, #3
 8000c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4e:	43db      	mvns	r3, r3
 8000c50:	69ba      	ldr	r2, [r7, #24]
 8000c52:	4013      	ands	r3, r2
 8000c54:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	689a      	ldr	r2, [r3, #8]
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	005b      	lsls	r3, r3, #1
 8000c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c62:	69ba      	ldr	r2, [r7, #24]
 8000c64:	4313      	orrs	r3, r2
 8000c66:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	69ba      	ldr	r2, [r7, #24]
 8000c6c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	f003 0303 	and.w	r3, r3, #3
 8000c76:	2b02      	cmp	r3, #2
 8000c78:	d123      	bne.n	8000cc2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	08da      	lsrs	r2, r3, #3
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	3208      	adds	r2, #8
 8000c82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000c88:	69fb      	ldr	r3, [r7, #28]
 8000c8a:	f003 0307 	and.w	r3, r3, #7
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	220f      	movs	r2, #15
 8000c92:	fa02 f303 	lsl.w	r3, r2, r3
 8000c96:	43db      	mvns	r3, r3
 8000c98:	69ba      	ldr	r2, [r7, #24]
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	691a      	ldr	r2, [r3, #16]
 8000ca2:	69fb      	ldr	r3, [r7, #28]
 8000ca4:	f003 0307 	and.w	r3, r3, #7
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	69ba      	ldr	r2, [r7, #24]
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000cb4:	69fb      	ldr	r3, [r7, #28]
 8000cb6:	08da      	lsrs	r2, r3, #3
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	3208      	adds	r2, #8
 8000cbc:	69b9      	ldr	r1, [r7, #24]
 8000cbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000cc8:	69fb      	ldr	r3, [r7, #28]
 8000cca:	005b      	lsls	r3, r3, #1
 8000ccc:	2203      	movs	r2, #3
 8000cce:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd2:	43db      	mvns	r3, r3
 8000cd4:	69ba      	ldr	r2, [r7, #24]
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	f003 0203 	and.w	r2, r3, #3
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	005b      	lsls	r3, r3, #1
 8000ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cea:	69ba      	ldr	r2, [r7, #24]
 8000cec:	4313      	orrs	r3, r2
 8000cee:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	69ba      	ldr	r2, [r7, #24]
 8000cf4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	f000 80e0 	beq.w	8000ec4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d04:	4b2f      	ldr	r3, [pc, #188]	; (8000dc4 <HAL_GPIO_Init+0x238>)
 8000d06:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000d0a:	4a2e      	ldr	r2, [pc, #184]	; (8000dc4 <HAL_GPIO_Init+0x238>)
 8000d0c:	f043 0302 	orr.w	r3, r3, #2
 8000d10:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000d14:	4b2b      	ldr	r3, [pc, #172]	; (8000dc4 <HAL_GPIO_Init+0x238>)
 8000d16:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000d1a:	f003 0302 	and.w	r3, r3, #2
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d22:	4a29      	ldr	r2, [pc, #164]	; (8000dc8 <HAL_GPIO_Init+0x23c>)
 8000d24:	69fb      	ldr	r3, [r7, #28]
 8000d26:	089b      	lsrs	r3, r3, #2
 8000d28:	3302      	adds	r3, #2
 8000d2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	f003 0303 	and.w	r3, r3, #3
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	220f      	movs	r2, #15
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	43db      	mvns	r3, r3
 8000d40:	69ba      	ldr	r2, [r7, #24]
 8000d42:	4013      	ands	r3, r2
 8000d44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4a20      	ldr	r2, [pc, #128]	; (8000dcc <HAL_GPIO_Init+0x240>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d052      	beq.n	8000df4 <HAL_GPIO_Init+0x268>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4a1f      	ldr	r2, [pc, #124]	; (8000dd0 <HAL_GPIO_Init+0x244>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d031      	beq.n	8000dba <HAL_GPIO_Init+0x22e>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4a1e      	ldr	r2, [pc, #120]	; (8000dd4 <HAL_GPIO_Init+0x248>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d02b      	beq.n	8000db6 <HAL_GPIO_Init+0x22a>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4a1d      	ldr	r2, [pc, #116]	; (8000dd8 <HAL_GPIO_Init+0x24c>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d025      	beq.n	8000db2 <HAL_GPIO_Init+0x226>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4a1c      	ldr	r2, [pc, #112]	; (8000ddc <HAL_GPIO_Init+0x250>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d01f      	beq.n	8000dae <HAL_GPIO_Init+0x222>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4a1b      	ldr	r2, [pc, #108]	; (8000de0 <HAL_GPIO_Init+0x254>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d019      	beq.n	8000daa <HAL_GPIO_Init+0x21e>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4a1a      	ldr	r2, [pc, #104]	; (8000de4 <HAL_GPIO_Init+0x258>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d013      	beq.n	8000da6 <HAL_GPIO_Init+0x21a>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4a19      	ldr	r2, [pc, #100]	; (8000de8 <HAL_GPIO_Init+0x25c>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d00d      	beq.n	8000da2 <HAL_GPIO_Init+0x216>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4a18      	ldr	r2, [pc, #96]	; (8000dec <HAL_GPIO_Init+0x260>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d007      	beq.n	8000d9e <HAL_GPIO_Init+0x212>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4a17      	ldr	r2, [pc, #92]	; (8000df0 <HAL_GPIO_Init+0x264>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d101      	bne.n	8000d9a <HAL_GPIO_Init+0x20e>
 8000d96:	2309      	movs	r3, #9
 8000d98:	e02d      	b.n	8000df6 <HAL_GPIO_Init+0x26a>
 8000d9a:	230a      	movs	r3, #10
 8000d9c:	e02b      	b.n	8000df6 <HAL_GPIO_Init+0x26a>
 8000d9e:	2308      	movs	r3, #8
 8000da0:	e029      	b.n	8000df6 <HAL_GPIO_Init+0x26a>
 8000da2:	2307      	movs	r3, #7
 8000da4:	e027      	b.n	8000df6 <HAL_GPIO_Init+0x26a>
 8000da6:	2306      	movs	r3, #6
 8000da8:	e025      	b.n	8000df6 <HAL_GPIO_Init+0x26a>
 8000daa:	2305      	movs	r3, #5
 8000dac:	e023      	b.n	8000df6 <HAL_GPIO_Init+0x26a>
 8000dae:	2304      	movs	r3, #4
 8000db0:	e021      	b.n	8000df6 <HAL_GPIO_Init+0x26a>
 8000db2:	2303      	movs	r3, #3
 8000db4:	e01f      	b.n	8000df6 <HAL_GPIO_Init+0x26a>
 8000db6:	2302      	movs	r3, #2
 8000db8:	e01d      	b.n	8000df6 <HAL_GPIO_Init+0x26a>
 8000dba:	2301      	movs	r3, #1
 8000dbc:	e01b      	b.n	8000df6 <HAL_GPIO_Init+0x26a>
 8000dbe:	bf00      	nop
 8000dc0:	58000080 	.word	0x58000080
 8000dc4:	58024400 	.word	0x58024400
 8000dc8:	58000400 	.word	0x58000400
 8000dcc:	58020000 	.word	0x58020000
 8000dd0:	58020400 	.word	0x58020400
 8000dd4:	58020800 	.word	0x58020800
 8000dd8:	58020c00 	.word	0x58020c00
 8000ddc:	58021000 	.word	0x58021000
 8000de0:	58021400 	.word	0x58021400
 8000de4:	58021800 	.word	0x58021800
 8000de8:	58021c00 	.word	0x58021c00
 8000dec:	58022000 	.word	0x58022000
 8000df0:	58022400 	.word	0x58022400
 8000df4:	2300      	movs	r3, #0
 8000df6:	69fa      	ldr	r2, [r7, #28]
 8000df8:	f002 0203 	and.w	r2, r2, #3
 8000dfc:	0092      	lsls	r2, r2, #2
 8000dfe:	4093      	lsls	r3, r2
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e06:	4938      	ldr	r1, [pc, #224]	; (8000ee8 <HAL_GPIO_Init+0x35c>)
 8000e08:	69fb      	ldr	r3, [r7, #28]
 8000e0a:	089b      	lsrs	r3, r3, #2
 8000e0c:	3302      	adds	r3, #2
 8000e0e:	69ba      	ldr	r2, [r7, #24]
 8000e10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	43db      	mvns	r3, r3
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	4013      	ands	r3, r2
 8000e24:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d003      	beq.n	8000e3a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000e32:	69ba      	ldr	r2, [r7, #24]
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000e3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e3e:	69bb      	ldr	r3, [r7, #24]
 8000e40:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000e42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	43db      	mvns	r3, r3
 8000e4e:	69ba      	ldr	r2, [r7, #24]
 8000e50:	4013      	ands	r3, r2
 8000e52:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d003      	beq.n	8000e68 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000e68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d003      	beq.n	8000e94 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	69ba      	ldr	r2, [r7, #24]
 8000e98:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	43db      	mvns	r3, r3
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d003      	beq.n	8000ebe <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	f47f ae63 	bne.w	8000ba0 <HAL_GPIO_Init+0x14>
  }
}
 8000eda:	bf00      	nop
 8000edc:	bf00      	nop
 8000ede:	3724      	adds	r7, #36	; 0x24
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	58000400 	.word	0x58000400

08000eec <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8000ef4:	4b29      	ldr	r3, [pc, #164]	; (8000f9c <HAL_PWREx_ConfigSupply+0xb0>)
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	f003 0307 	and.w	r3, r3, #7
 8000efc:	2b06      	cmp	r3, #6
 8000efe:	d00a      	beq.n	8000f16 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8000f00:	4b26      	ldr	r3, [pc, #152]	; (8000f9c <HAL_PWREx_ConfigSupply+0xb0>)
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000f08:	687a      	ldr	r2, [r7, #4]
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	d001      	beq.n	8000f12 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e040      	b.n	8000f94 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8000f12:	2300      	movs	r3, #0
 8000f14:	e03e      	b.n	8000f94 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8000f16:	4b21      	ldr	r3, [pc, #132]	; (8000f9c <HAL_PWREx_ConfigSupply+0xb0>)
 8000f18:	68db      	ldr	r3, [r3, #12]
 8000f1a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8000f1e:	491f      	ldr	r1, [pc, #124]	; (8000f9c <HAL_PWREx_ConfigSupply+0xb0>)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8000f26:	f7ff fcc5 	bl	80008b4 <HAL_GetTick>
 8000f2a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000f2c:	e009      	b.n	8000f42 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8000f2e:	f7ff fcc1 	bl	80008b4 <HAL_GetTick>
 8000f32:	4602      	mov	r2, r0
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	1ad3      	subs	r3, r2, r3
 8000f38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f3c:	d901      	bls.n	8000f42 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e028      	b.n	8000f94 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000f42:	4b16      	ldr	r3, [pc, #88]	; (8000f9c <HAL_PWREx_ConfigSupply+0xb0>)
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f4e:	d1ee      	bne.n	8000f2e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2b1e      	cmp	r3, #30
 8000f54:	d008      	beq.n	8000f68 <HAL_PWREx_ConfigSupply+0x7c>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2b2e      	cmp	r3, #46	; 0x2e
 8000f5a:	d005      	beq.n	8000f68 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2b1d      	cmp	r3, #29
 8000f60:	d002      	beq.n	8000f68 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2b2d      	cmp	r3, #45	; 0x2d
 8000f66:	d114      	bne.n	8000f92 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8000f68:	f7ff fca4 	bl	80008b4 <HAL_GetTick>
 8000f6c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8000f6e:	e009      	b.n	8000f84 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8000f70:	f7ff fca0 	bl	80008b4 <HAL_GetTick>
 8000f74:	4602      	mov	r2, r0
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f7e:	d901      	bls.n	8000f84 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8000f80:	2301      	movs	r3, #1
 8000f82:	e007      	b.n	8000f94 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8000f84:	4b05      	ldr	r3, [pc, #20]	; (8000f9c <HAL_PWREx_ConfigSupply+0xb0>)
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f90:	d1ee      	bne.n	8000f70 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8000f92:	2300      	movs	r3, #0
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3710      	adds	r7, #16
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	58024800 	.word	0x58024800

08000fa0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b08c      	sub	sp, #48	; 0x30
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d102      	bne.n	8000fb4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	f000 bc1f 	b.w	80017f2 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f003 0301 	and.w	r3, r3, #1
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	f000 80b3 	beq.w	8001128 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000fc2:	4b95      	ldr	r3, [pc, #596]	; (8001218 <HAL_RCC_OscConfig+0x278>)
 8000fc4:	691b      	ldr	r3, [r3, #16]
 8000fc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000fca:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000fcc:	4b92      	ldr	r3, [pc, #584]	; (8001218 <HAL_RCC_OscConfig+0x278>)
 8000fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fd0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8000fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fd4:	2b10      	cmp	r3, #16
 8000fd6:	d007      	beq.n	8000fe8 <HAL_RCC_OscConfig+0x48>
 8000fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fda:	2b18      	cmp	r3, #24
 8000fdc:	d112      	bne.n	8001004 <HAL_RCC_OscConfig+0x64>
 8000fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fe0:	f003 0303 	and.w	r3, r3, #3
 8000fe4:	2b02      	cmp	r3, #2
 8000fe6:	d10d      	bne.n	8001004 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fe8:	4b8b      	ldr	r3, [pc, #556]	; (8001218 <HAL_RCC_OscConfig+0x278>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	f000 8098 	beq.w	8001126 <HAL_RCC_OscConfig+0x186>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	f040 8093 	bne.w	8001126 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001000:	2301      	movs	r3, #1
 8001002:	e3f6      	b.n	80017f2 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800100c:	d106      	bne.n	800101c <HAL_RCC_OscConfig+0x7c>
 800100e:	4b82      	ldr	r3, [pc, #520]	; (8001218 <HAL_RCC_OscConfig+0x278>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a81      	ldr	r2, [pc, #516]	; (8001218 <HAL_RCC_OscConfig+0x278>)
 8001014:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001018:	6013      	str	r3, [r2, #0]
 800101a:	e058      	b.n	80010ce <HAL_RCC_OscConfig+0x12e>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d112      	bne.n	800104a <HAL_RCC_OscConfig+0xaa>
 8001024:	4b7c      	ldr	r3, [pc, #496]	; (8001218 <HAL_RCC_OscConfig+0x278>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a7b      	ldr	r2, [pc, #492]	; (8001218 <HAL_RCC_OscConfig+0x278>)
 800102a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800102e:	6013      	str	r3, [r2, #0]
 8001030:	4b79      	ldr	r3, [pc, #484]	; (8001218 <HAL_RCC_OscConfig+0x278>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a78      	ldr	r2, [pc, #480]	; (8001218 <HAL_RCC_OscConfig+0x278>)
 8001036:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800103a:	6013      	str	r3, [r2, #0]
 800103c:	4b76      	ldr	r3, [pc, #472]	; (8001218 <HAL_RCC_OscConfig+0x278>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a75      	ldr	r2, [pc, #468]	; (8001218 <HAL_RCC_OscConfig+0x278>)
 8001042:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001046:	6013      	str	r3, [r2, #0]
 8001048:	e041      	b.n	80010ce <HAL_RCC_OscConfig+0x12e>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001052:	d112      	bne.n	800107a <HAL_RCC_OscConfig+0xda>
 8001054:	4b70      	ldr	r3, [pc, #448]	; (8001218 <HAL_RCC_OscConfig+0x278>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a6f      	ldr	r2, [pc, #444]	; (8001218 <HAL_RCC_OscConfig+0x278>)
 800105a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800105e:	6013      	str	r3, [r2, #0]
 8001060:	4b6d      	ldr	r3, [pc, #436]	; (8001218 <HAL_RCC_OscConfig+0x278>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a6c      	ldr	r2, [pc, #432]	; (8001218 <HAL_RCC_OscConfig+0x278>)
 8001066:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800106a:	6013      	str	r3, [r2, #0]
 800106c:	4b6a      	ldr	r3, [pc, #424]	; (8001218 <HAL_RCC_OscConfig+0x278>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a69      	ldr	r2, [pc, #420]	; (8001218 <HAL_RCC_OscConfig+0x278>)
 8001072:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001076:	6013      	str	r3, [r2, #0]
 8001078:	e029      	b.n	80010ce <HAL_RCC_OscConfig+0x12e>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8001082:	d112      	bne.n	80010aa <HAL_RCC_OscConfig+0x10a>
 8001084:	4b64      	ldr	r3, [pc, #400]	; (8001218 <HAL_RCC_OscConfig+0x278>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a63      	ldr	r2, [pc, #396]	; (8001218 <HAL_RCC_OscConfig+0x278>)
 800108a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800108e:	6013      	str	r3, [r2, #0]
 8001090:	4b61      	ldr	r3, [pc, #388]	; (8001218 <HAL_RCC_OscConfig+0x278>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a60      	ldr	r2, [pc, #384]	; (8001218 <HAL_RCC_OscConfig+0x278>)
 8001096:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800109a:	6013      	str	r3, [r2, #0]
 800109c:	4b5e      	ldr	r3, [pc, #376]	; (8001218 <HAL_RCC_OscConfig+0x278>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a5d      	ldr	r2, [pc, #372]	; (8001218 <HAL_RCC_OscConfig+0x278>)
 80010a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010a6:	6013      	str	r3, [r2, #0]
 80010a8:	e011      	b.n	80010ce <HAL_RCC_OscConfig+0x12e>
 80010aa:	4b5b      	ldr	r3, [pc, #364]	; (8001218 <HAL_RCC_OscConfig+0x278>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a5a      	ldr	r2, [pc, #360]	; (8001218 <HAL_RCC_OscConfig+0x278>)
 80010b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010b4:	6013      	str	r3, [r2, #0]
 80010b6:	4b58      	ldr	r3, [pc, #352]	; (8001218 <HAL_RCC_OscConfig+0x278>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a57      	ldr	r2, [pc, #348]	; (8001218 <HAL_RCC_OscConfig+0x278>)
 80010bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010c0:	6013      	str	r3, [r2, #0]
 80010c2:	4b55      	ldr	r3, [pc, #340]	; (8001218 <HAL_RCC_OscConfig+0x278>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a54      	ldr	r2, [pc, #336]	; (8001218 <HAL_RCC_OscConfig+0x278>)
 80010c8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80010cc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d013      	beq.n	80010fe <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010d6:	f7ff fbed 	bl	80008b4 <HAL_GetTick>
 80010da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80010dc:	e008      	b.n	80010f0 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010de:	f7ff fbe9 	bl	80008b4 <HAL_GetTick>
 80010e2:	4602      	mov	r2, r0
 80010e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e6:	1ad3      	subs	r3, r2, r3
 80010e8:	2b64      	cmp	r3, #100	; 0x64
 80010ea:	d901      	bls.n	80010f0 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 80010ec:	2303      	movs	r3, #3
 80010ee:	e380      	b.n	80017f2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80010f0:	4b49      	ldr	r3, [pc, #292]	; (8001218 <HAL_RCC_OscConfig+0x278>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d0f0      	beq.n	80010de <HAL_RCC_OscConfig+0x13e>
 80010fc:	e014      	b.n	8001128 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010fe:	f7ff fbd9 	bl	80008b4 <HAL_GetTick>
 8001102:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001104:	e008      	b.n	8001118 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001106:	f7ff fbd5 	bl	80008b4 <HAL_GetTick>
 800110a:	4602      	mov	r2, r0
 800110c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110e:	1ad3      	subs	r3, r2, r3
 8001110:	2b64      	cmp	r3, #100	; 0x64
 8001112:	d901      	bls.n	8001118 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8001114:	2303      	movs	r3, #3
 8001116:	e36c      	b.n	80017f2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001118:	4b3f      	ldr	r3, [pc, #252]	; (8001218 <HAL_RCC_OscConfig+0x278>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001120:	2b00      	cmp	r3, #0
 8001122:	d1f0      	bne.n	8001106 <HAL_RCC_OscConfig+0x166>
 8001124:	e000      	b.n	8001128 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001126:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f003 0302 	and.w	r3, r3, #2
 8001130:	2b00      	cmp	r3, #0
 8001132:	f000 808c 	beq.w	800124e <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001136:	4b38      	ldr	r3, [pc, #224]	; (8001218 <HAL_RCC_OscConfig+0x278>)
 8001138:	691b      	ldr	r3, [r3, #16]
 800113a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800113e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001140:	4b35      	ldr	r3, [pc, #212]	; (8001218 <HAL_RCC_OscConfig+0x278>)
 8001142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001144:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001146:	6a3b      	ldr	r3, [r7, #32]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d007      	beq.n	800115c <HAL_RCC_OscConfig+0x1bc>
 800114c:	6a3b      	ldr	r3, [r7, #32]
 800114e:	2b18      	cmp	r3, #24
 8001150:	d137      	bne.n	80011c2 <HAL_RCC_OscConfig+0x222>
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	f003 0303 	and.w	r3, r3, #3
 8001158:	2b00      	cmp	r3, #0
 800115a:	d132      	bne.n	80011c2 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800115c:	4b2e      	ldr	r3, [pc, #184]	; (8001218 <HAL_RCC_OscConfig+0x278>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f003 0304 	and.w	r3, r3, #4
 8001164:	2b00      	cmp	r3, #0
 8001166:	d005      	beq.n	8001174 <HAL_RCC_OscConfig+0x1d4>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d101      	bne.n	8001174 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	e33e      	b.n	80017f2 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001174:	4b28      	ldr	r3, [pc, #160]	; (8001218 <HAL_RCC_OscConfig+0x278>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f023 0219 	bic.w	r2, r3, #25
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	4925      	ldr	r1, [pc, #148]	; (8001218 <HAL_RCC_OscConfig+0x278>)
 8001182:	4313      	orrs	r3, r2
 8001184:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001186:	f7ff fb95 	bl	80008b4 <HAL_GetTick>
 800118a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800118c:	e008      	b.n	80011a0 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800118e:	f7ff fb91 	bl	80008b4 <HAL_GetTick>
 8001192:	4602      	mov	r2, r0
 8001194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	2b02      	cmp	r3, #2
 800119a:	d901      	bls.n	80011a0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800119c:	2303      	movs	r3, #3
 800119e:	e328      	b.n	80017f2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80011a0:	4b1d      	ldr	r3, [pc, #116]	; (8001218 <HAL_RCC_OscConfig+0x278>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f003 0304 	and.w	r3, r3, #4
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d0f0      	beq.n	800118e <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ac:	4b1a      	ldr	r3, [pc, #104]	; (8001218 <HAL_RCC_OscConfig+0x278>)
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	691b      	ldr	r3, [r3, #16]
 80011b8:	061b      	lsls	r3, r3, #24
 80011ba:	4917      	ldr	r1, [pc, #92]	; (8001218 <HAL_RCC_OscConfig+0x278>)
 80011bc:	4313      	orrs	r3, r2
 80011be:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011c0:	e045      	b.n	800124e <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	68db      	ldr	r3, [r3, #12]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d028      	beq.n	800121c <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80011ca:	4b13      	ldr	r3, [pc, #76]	; (8001218 <HAL_RCC_OscConfig+0x278>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f023 0219 	bic.w	r2, r3, #25
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	68db      	ldr	r3, [r3, #12]
 80011d6:	4910      	ldr	r1, [pc, #64]	; (8001218 <HAL_RCC_OscConfig+0x278>)
 80011d8:	4313      	orrs	r3, r2
 80011da:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011dc:	f7ff fb6a 	bl	80008b4 <HAL_GetTick>
 80011e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80011e2:	e008      	b.n	80011f6 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011e4:	f7ff fb66 	bl	80008b4 <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	2b02      	cmp	r3, #2
 80011f0:	d901      	bls.n	80011f6 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80011f2:	2303      	movs	r3, #3
 80011f4:	e2fd      	b.n	80017f2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80011f6:	4b08      	ldr	r3, [pc, #32]	; (8001218 <HAL_RCC_OscConfig+0x278>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0304 	and.w	r3, r3, #4
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d0f0      	beq.n	80011e4 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001202:	4b05      	ldr	r3, [pc, #20]	; (8001218 <HAL_RCC_OscConfig+0x278>)
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	691b      	ldr	r3, [r3, #16]
 800120e:	061b      	lsls	r3, r3, #24
 8001210:	4901      	ldr	r1, [pc, #4]	; (8001218 <HAL_RCC_OscConfig+0x278>)
 8001212:	4313      	orrs	r3, r2
 8001214:	604b      	str	r3, [r1, #4]
 8001216:	e01a      	b.n	800124e <HAL_RCC_OscConfig+0x2ae>
 8001218:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800121c:	4b97      	ldr	r3, [pc, #604]	; (800147c <HAL_RCC_OscConfig+0x4dc>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a96      	ldr	r2, [pc, #600]	; (800147c <HAL_RCC_OscConfig+0x4dc>)
 8001222:	f023 0301 	bic.w	r3, r3, #1
 8001226:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001228:	f7ff fb44 	bl	80008b4 <HAL_GetTick>
 800122c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800122e:	e008      	b.n	8001242 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001230:	f7ff fb40 	bl	80008b4 <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	2b02      	cmp	r3, #2
 800123c:	d901      	bls.n	8001242 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800123e:	2303      	movs	r3, #3
 8001240:	e2d7      	b.n	80017f2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001242:	4b8e      	ldr	r3, [pc, #568]	; (800147c <HAL_RCC_OscConfig+0x4dc>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 0304 	and.w	r3, r3, #4
 800124a:	2b00      	cmp	r3, #0
 800124c:	d1f0      	bne.n	8001230 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0310 	and.w	r3, r3, #16
 8001256:	2b00      	cmp	r3, #0
 8001258:	d06a      	beq.n	8001330 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800125a:	4b88      	ldr	r3, [pc, #544]	; (800147c <HAL_RCC_OscConfig+0x4dc>)
 800125c:	691b      	ldr	r3, [r3, #16]
 800125e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001262:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001264:	4b85      	ldr	r3, [pc, #532]	; (800147c <HAL_RCC_OscConfig+0x4dc>)
 8001266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001268:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	2b08      	cmp	r3, #8
 800126e:	d007      	beq.n	8001280 <HAL_RCC_OscConfig+0x2e0>
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	2b18      	cmp	r3, #24
 8001274:	d11b      	bne.n	80012ae <HAL_RCC_OscConfig+0x30e>
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	f003 0303 	and.w	r3, r3, #3
 800127c:	2b01      	cmp	r3, #1
 800127e:	d116      	bne.n	80012ae <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001280:	4b7e      	ldr	r3, [pc, #504]	; (800147c <HAL_RCC_OscConfig+0x4dc>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001288:	2b00      	cmp	r3, #0
 800128a:	d005      	beq.n	8001298 <HAL_RCC_OscConfig+0x2f8>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	69db      	ldr	r3, [r3, #28]
 8001290:	2b80      	cmp	r3, #128	; 0x80
 8001292:	d001      	beq.n	8001298 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	e2ac      	b.n	80017f2 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001298:	4b78      	ldr	r3, [pc, #480]	; (800147c <HAL_RCC_OscConfig+0x4dc>)
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6a1b      	ldr	r3, [r3, #32]
 80012a4:	061b      	lsls	r3, r3, #24
 80012a6:	4975      	ldr	r1, [pc, #468]	; (800147c <HAL_RCC_OscConfig+0x4dc>)
 80012a8:	4313      	orrs	r3, r2
 80012aa:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80012ac:	e040      	b.n	8001330 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	69db      	ldr	r3, [r3, #28]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d023      	beq.n	80012fe <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80012b6:	4b71      	ldr	r3, [pc, #452]	; (800147c <HAL_RCC_OscConfig+0x4dc>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a70      	ldr	r2, [pc, #448]	; (800147c <HAL_RCC_OscConfig+0x4dc>)
 80012bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012c2:	f7ff faf7 	bl	80008b4 <HAL_GetTick>
 80012c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80012c8:	e008      	b.n	80012dc <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80012ca:	f7ff faf3 	bl	80008b4 <HAL_GetTick>
 80012ce:	4602      	mov	r2, r0
 80012d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d901      	bls.n	80012dc <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 80012d8:	2303      	movs	r3, #3
 80012da:	e28a      	b.n	80017f2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80012dc:	4b67      	ldr	r3, [pc, #412]	; (800147c <HAL_RCC_OscConfig+0x4dc>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d0f0      	beq.n	80012ca <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80012e8:	4b64      	ldr	r3, [pc, #400]	; (800147c <HAL_RCC_OscConfig+0x4dc>)
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6a1b      	ldr	r3, [r3, #32]
 80012f4:	061b      	lsls	r3, r3, #24
 80012f6:	4961      	ldr	r1, [pc, #388]	; (800147c <HAL_RCC_OscConfig+0x4dc>)
 80012f8:	4313      	orrs	r3, r2
 80012fa:	60cb      	str	r3, [r1, #12]
 80012fc:	e018      	b.n	8001330 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80012fe:	4b5f      	ldr	r3, [pc, #380]	; (800147c <HAL_RCC_OscConfig+0x4dc>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a5e      	ldr	r2, [pc, #376]	; (800147c <HAL_RCC_OscConfig+0x4dc>)
 8001304:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001308:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800130a:	f7ff fad3 	bl	80008b4 <HAL_GetTick>
 800130e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001310:	e008      	b.n	8001324 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001312:	f7ff facf 	bl	80008b4 <HAL_GetTick>
 8001316:	4602      	mov	r2, r0
 8001318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	2b02      	cmp	r3, #2
 800131e:	d901      	bls.n	8001324 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8001320:	2303      	movs	r3, #3
 8001322:	e266      	b.n	80017f2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001324:	4b55      	ldr	r3, [pc, #340]	; (800147c <HAL_RCC_OscConfig+0x4dc>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800132c:	2b00      	cmp	r3, #0
 800132e:	d1f0      	bne.n	8001312 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 0308 	and.w	r3, r3, #8
 8001338:	2b00      	cmp	r3, #0
 800133a:	d036      	beq.n	80013aa <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	695b      	ldr	r3, [r3, #20]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d019      	beq.n	8001378 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001344:	4b4d      	ldr	r3, [pc, #308]	; (800147c <HAL_RCC_OscConfig+0x4dc>)
 8001346:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001348:	4a4c      	ldr	r2, [pc, #304]	; (800147c <HAL_RCC_OscConfig+0x4dc>)
 800134a:	f043 0301 	orr.w	r3, r3, #1
 800134e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001350:	f7ff fab0 	bl	80008b4 <HAL_GetTick>
 8001354:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001356:	e008      	b.n	800136a <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001358:	f7ff faac 	bl	80008b4 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b02      	cmp	r3, #2
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e243      	b.n	80017f2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800136a:	4b44      	ldr	r3, [pc, #272]	; (800147c <HAL_RCC_OscConfig+0x4dc>)
 800136c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	2b00      	cmp	r3, #0
 8001374:	d0f0      	beq.n	8001358 <HAL_RCC_OscConfig+0x3b8>
 8001376:	e018      	b.n	80013aa <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001378:	4b40      	ldr	r3, [pc, #256]	; (800147c <HAL_RCC_OscConfig+0x4dc>)
 800137a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800137c:	4a3f      	ldr	r2, [pc, #252]	; (800147c <HAL_RCC_OscConfig+0x4dc>)
 800137e:	f023 0301 	bic.w	r3, r3, #1
 8001382:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001384:	f7ff fa96 	bl	80008b4 <HAL_GetTick>
 8001388:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800138a:	e008      	b.n	800139e <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800138c:	f7ff fa92 	bl	80008b4 <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	2b02      	cmp	r3, #2
 8001398:	d901      	bls.n	800139e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e229      	b.n	80017f2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800139e:	4b37      	ldr	r3, [pc, #220]	; (800147c <HAL_RCC_OscConfig+0x4dc>)
 80013a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013a2:	f003 0302 	and.w	r3, r3, #2
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d1f0      	bne.n	800138c <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0320 	and.w	r3, r3, #32
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d036      	beq.n	8001424 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	699b      	ldr	r3, [r3, #24]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d019      	beq.n	80013f2 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80013be:	4b2f      	ldr	r3, [pc, #188]	; (800147c <HAL_RCC_OscConfig+0x4dc>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a2e      	ldr	r2, [pc, #184]	; (800147c <HAL_RCC_OscConfig+0x4dc>)
 80013c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013c8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80013ca:	f7ff fa73 	bl	80008b4 <HAL_GetTick>
 80013ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80013d0:	e008      	b.n	80013e4 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80013d2:	f7ff fa6f 	bl	80008b4 <HAL_GetTick>
 80013d6:	4602      	mov	r2, r0
 80013d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d901      	bls.n	80013e4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80013e0:	2303      	movs	r3, #3
 80013e2:	e206      	b.n	80017f2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80013e4:	4b25      	ldr	r3, [pc, #148]	; (800147c <HAL_RCC_OscConfig+0x4dc>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d0f0      	beq.n	80013d2 <HAL_RCC_OscConfig+0x432>
 80013f0:	e018      	b.n	8001424 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80013f2:	4b22      	ldr	r3, [pc, #136]	; (800147c <HAL_RCC_OscConfig+0x4dc>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a21      	ldr	r2, [pc, #132]	; (800147c <HAL_RCC_OscConfig+0x4dc>)
 80013f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80013fc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80013fe:	f7ff fa59 	bl	80008b4 <HAL_GetTick>
 8001402:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001404:	e008      	b.n	8001418 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001406:	f7ff fa55 	bl	80008b4 <HAL_GetTick>
 800140a:	4602      	mov	r2, r0
 800140c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	2b02      	cmp	r3, #2
 8001412:	d901      	bls.n	8001418 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8001414:	2303      	movs	r3, #3
 8001416:	e1ec      	b.n	80017f2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001418:	4b18      	ldr	r3, [pc, #96]	; (800147c <HAL_RCC_OscConfig+0x4dc>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001420:	2b00      	cmp	r3, #0
 8001422:	d1f0      	bne.n	8001406 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 0304 	and.w	r3, r3, #4
 800142c:	2b00      	cmp	r3, #0
 800142e:	f000 80af 	beq.w	8001590 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001432:	4b13      	ldr	r3, [pc, #76]	; (8001480 <HAL_RCC_OscConfig+0x4e0>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a12      	ldr	r2, [pc, #72]	; (8001480 <HAL_RCC_OscConfig+0x4e0>)
 8001438:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800143c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800143e:	f7ff fa39 	bl	80008b4 <HAL_GetTick>
 8001442:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001444:	e008      	b.n	8001458 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001446:	f7ff fa35 	bl	80008b4 <HAL_GetTick>
 800144a:	4602      	mov	r2, r0
 800144c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	2b64      	cmp	r3, #100	; 0x64
 8001452:	d901      	bls.n	8001458 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8001454:	2303      	movs	r3, #3
 8001456:	e1cc      	b.n	80017f2 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001458:	4b09      	ldr	r3, [pc, #36]	; (8001480 <HAL_RCC_OscConfig+0x4e0>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001460:	2b00      	cmp	r3, #0
 8001462:	d0f0      	beq.n	8001446 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	2b01      	cmp	r3, #1
 800146a:	d10b      	bne.n	8001484 <HAL_RCC_OscConfig+0x4e4>
 800146c:	4b03      	ldr	r3, [pc, #12]	; (800147c <HAL_RCC_OscConfig+0x4dc>)
 800146e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001470:	4a02      	ldr	r2, [pc, #8]	; (800147c <HAL_RCC_OscConfig+0x4dc>)
 8001472:	f043 0301 	orr.w	r3, r3, #1
 8001476:	6713      	str	r3, [r2, #112]	; 0x70
 8001478:	e05b      	b.n	8001532 <HAL_RCC_OscConfig+0x592>
 800147a:	bf00      	nop
 800147c:	58024400 	.word	0x58024400
 8001480:	58024800 	.word	0x58024800
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d112      	bne.n	80014b2 <HAL_RCC_OscConfig+0x512>
 800148c:	4b9d      	ldr	r3, [pc, #628]	; (8001704 <HAL_RCC_OscConfig+0x764>)
 800148e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001490:	4a9c      	ldr	r2, [pc, #624]	; (8001704 <HAL_RCC_OscConfig+0x764>)
 8001492:	f023 0301 	bic.w	r3, r3, #1
 8001496:	6713      	str	r3, [r2, #112]	; 0x70
 8001498:	4b9a      	ldr	r3, [pc, #616]	; (8001704 <HAL_RCC_OscConfig+0x764>)
 800149a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800149c:	4a99      	ldr	r2, [pc, #612]	; (8001704 <HAL_RCC_OscConfig+0x764>)
 800149e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80014a2:	6713      	str	r3, [r2, #112]	; 0x70
 80014a4:	4b97      	ldr	r3, [pc, #604]	; (8001704 <HAL_RCC_OscConfig+0x764>)
 80014a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014a8:	4a96      	ldr	r2, [pc, #600]	; (8001704 <HAL_RCC_OscConfig+0x764>)
 80014aa:	f023 0304 	bic.w	r3, r3, #4
 80014ae:	6713      	str	r3, [r2, #112]	; 0x70
 80014b0:	e03f      	b.n	8001532 <HAL_RCC_OscConfig+0x592>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	2b05      	cmp	r3, #5
 80014b8:	d112      	bne.n	80014e0 <HAL_RCC_OscConfig+0x540>
 80014ba:	4b92      	ldr	r3, [pc, #584]	; (8001704 <HAL_RCC_OscConfig+0x764>)
 80014bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014be:	4a91      	ldr	r2, [pc, #580]	; (8001704 <HAL_RCC_OscConfig+0x764>)
 80014c0:	f043 0304 	orr.w	r3, r3, #4
 80014c4:	6713      	str	r3, [r2, #112]	; 0x70
 80014c6:	4b8f      	ldr	r3, [pc, #572]	; (8001704 <HAL_RCC_OscConfig+0x764>)
 80014c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ca:	4a8e      	ldr	r2, [pc, #568]	; (8001704 <HAL_RCC_OscConfig+0x764>)
 80014cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80014d0:	6713      	str	r3, [r2, #112]	; 0x70
 80014d2:	4b8c      	ldr	r3, [pc, #560]	; (8001704 <HAL_RCC_OscConfig+0x764>)
 80014d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014d6:	4a8b      	ldr	r2, [pc, #556]	; (8001704 <HAL_RCC_OscConfig+0x764>)
 80014d8:	f043 0301 	orr.w	r3, r3, #1
 80014dc:	6713      	str	r3, [r2, #112]	; 0x70
 80014de:	e028      	b.n	8001532 <HAL_RCC_OscConfig+0x592>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	2b85      	cmp	r3, #133	; 0x85
 80014e6:	d112      	bne.n	800150e <HAL_RCC_OscConfig+0x56e>
 80014e8:	4b86      	ldr	r3, [pc, #536]	; (8001704 <HAL_RCC_OscConfig+0x764>)
 80014ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ec:	4a85      	ldr	r2, [pc, #532]	; (8001704 <HAL_RCC_OscConfig+0x764>)
 80014ee:	f043 0304 	orr.w	r3, r3, #4
 80014f2:	6713      	str	r3, [r2, #112]	; 0x70
 80014f4:	4b83      	ldr	r3, [pc, #524]	; (8001704 <HAL_RCC_OscConfig+0x764>)
 80014f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014f8:	4a82      	ldr	r2, [pc, #520]	; (8001704 <HAL_RCC_OscConfig+0x764>)
 80014fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014fe:	6713      	str	r3, [r2, #112]	; 0x70
 8001500:	4b80      	ldr	r3, [pc, #512]	; (8001704 <HAL_RCC_OscConfig+0x764>)
 8001502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001504:	4a7f      	ldr	r2, [pc, #508]	; (8001704 <HAL_RCC_OscConfig+0x764>)
 8001506:	f043 0301 	orr.w	r3, r3, #1
 800150a:	6713      	str	r3, [r2, #112]	; 0x70
 800150c:	e011      	b.n	8001532 <HAL_RCC_OscConfig+0x592>
 800150e:	4b7d      	ldr	r3, [pc, #500]	; (8001704 <HAL_RCC_OscConfig+0x764>)
 8001510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001512:	4a7c      	ldr	r2, [pc, #496]	; (8001704 <HAL_RCC_OscConfig+0x764>)
 8001514:	f023 0301 	bic.w	r3, r3, #1
 8001518:	6713      	str	r3, [r2, #112]	; 0x70
 800151a:	4b7a      	ldr	r3, [pc, #488]	; (8001704 <HAL_RCC_OscConfig+0x764>)
 800151c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800151e:	4a79      	ldr	r2, [pc, #484]	; (8001704 <HAL_RCC_OscConfig+0x764>)
 8001520:	f023 0304 	bic.w	r3, r3, #4
 8001524:	6713      	str	r3, [r2, #112]	; 0x70
 8001526:	4b77      	ldr	r3, [pc, #476]	; (8001704 <HAL_RCC_OscConfig+0x764>)
 8001528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800152a:	4a76      	ldr	r2, [pc, #472]	; (8001704 <HAL_RCC_OscConfig+0x764>)
 800152c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001530:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d015      	beq.n	8001566 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800153a:	f7ff f9bb 	bl	80008b4 <HAL_GetTick>
 800153e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001540:	e00a      	b.n	8001558 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001542:	f7ff f9b7 	bl	80008b4 <HAL_GetTick>
 8001546:	4602      	mov	r2, r0
 8001548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001550:	4293      	cmp	r3, r2
 8001552:	d901      	bls.n	8001558 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8001554:	2303      	movs	r3, #3
 8001556:	e14c      	b.n	80017f2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001558:	4b6a      	ldr	r3, [pc, #424]	; (8001704 <HAL_RCC_OscConfig+0x764>)
 800155a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800155c:	f003 0302 	and.w	r3, r3, #2
 8001560:	2b00      	cmp	r3, #0
 8001562:	d0ee      	beq.n	8001542 <HAL_RCC_OscConfig+0x5a2>
 8001564:	e014      	b.n	8001590 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001566:	f7ff f9a5 	bl	80008b4 <HAL_GetTick>
 800156a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800156c:	e00a      	b.n	8001584 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800156e:	f7ff f9a1 	bl	80008b4 <HAL_GetTick>
 8001572:	4602      	mov	r2, r0
 8001574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	f241 3288 	movw	r2, #5000	; 0x1388
 800157c:	4293      	cmp	r3, r2
 800157e:	d901      	bls.n	8001584 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8001580:	2303      	movs	r3, #3
 8001582:	e136      	b.n	80017f2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001584:	4b5f      	ldr	r3, [pc, #380]	; (8001704 <HAL_RCC_OscConfig+0x764>)
 8001586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001588:	f003 0302 	and.w	r3, r3, #2
 800158c:	2b00      	cmp	r3, #0
 800158e:	d1ee      	bne.n	800156e <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001594:	2b00      	cmp	r3, #0
 8001596:	f000 812b 	beq.w	80017f0 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800159a:	4b5a      	ldr	r3, [pc, #360]	; (8001704 <HAL_RCC_OscConfig+0x764>)
 800159c:	691b      	ldr	r3, [r3, #16]
 800159e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80015a2:	2b18      	cmp	r3, #24
 80015a4:	f000 80bb 	beq.w	800171e <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	f040 8095 	bne.w	80016dc <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015b2:	4b54      	ldr	r3, [pc, #336]	; (8001704 <HAL_RCC_OscConfig+0x764>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a53      	ldr	r2, [pc, #332]	; (8001704 <HAL_RCC_OscConfig+0x764>)
 80015b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015be:	f7ff f979 	bl	80008b4 <HAL_GetTick>
 80015c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80015c4:	e008      	b.n	80015d8 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015c6:	f7ff f975 	bl	80008b4 <HAL_GetTick>
 80015ca:	4602      	mov	r2, r0
 80015cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d901      	bls.n	80015d8 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e10c      	b.n	80017f2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80015d8:	4b4a      	ldr	r3, [pc, #296]	; (8001704 <HAL_RCC_OscConfig+0x764>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d1f0      	bne.n	80015c6 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015e4:	4b47      	ldr	r3, [pc, #284]	; (8001704 <HAL_RCC_OscConfig+0x764>)
 80015e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015e8:	4b47      	ldr	r3, [pc, #284]	; (8001708 <HAL_RCC_OscConfig+0x768>)
 80015ea:	4013      	ands	r3, r2
 80015ec:	687a      	ldr	r2, [r7, #4]
 80015ee:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80015f4:	0112      	lsls	r2, r2, #4
 80015f6:	430a      	orrs	r2, r1
 80015f8:	4942      	ldr	r1, [pc, #264]	; (8001704 <HAL_RCC_OscConfig+0x764>)
 80015fa:	4313      	orrs	r3, r2
 80015fc:	628b      	str	r3, [r1, #40]	; 0x28
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	3b01      	subs	r3, #1
 8001604:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800160c:	3b01      	subs	r3, #1
 800160e:	025b      	lsls	r3, r3, #9
 8001610:	b29b      	uxth	r3, r3
 8001612:	431a      	orrs	r2, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001618:	3b01      	subs	r3, #1
 800161a:	041b      	lsls	r3, r3, #16
 800161c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001620:	431a      	orrs	r2, r3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001626:	3b01      	subs	r3, #1
 8001628:	061b      	lsls	r3, r3, #24
 800162a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800162e:	4935      	ldr	r1, [pc, #212]	; (8001704 <HAL_RCC_OscConfig+0x764>)
 8001630:	4313      	orrs	r3, r2
 8001632:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001634:	4b33      	ldr	r3, [pc, #204]	; (8001704 <HAL_RCC_OscConfig+0x764>)
 8001636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001638:	4a32      	ldr	r2, [pc, #200]	; (8001704 <HAL_RCC_OscConfig+0x764>)
 800163a:	f023 0301 	bic.w	r3, r3, #1
 800163e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001640:	4b30      	ldr	r3, [pc, #192]	; (8001704 <HAL_RCC_OscConfig+0x764>)
 8001642:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001644:	4b31      	ldr	r3, [pc, #196]	; (800170c <HAL_RCC_OscConfig+0x76c>)
 8001646:	4013      	ands	r3, r2
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800164c:	00d2      	lsls	r2, r2, #3
 800164e:	492d      	ldr	r1, [pc, #180]	; (8001704 <HAL_RCC_OscConfig+0x764>)
 8001650:	4313      	orrs	r3, r2
 8001652:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001654:	4b2b      	ldr	r3, [pc, #172]	; (8001704 <HAL_RCC_OscConfig+0x764>)
 8001656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001658:	f023 020c 	bic.w	r2, r3, #12
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001660:	4928      	ldr	r1, [pc, #160]	; (8001704 <HAL_RCC_OscConfig+0x764>)
 8001662:	4313      	orrs	r3, r2
 8001664:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001666:	4b27      	ldr	r3, [pc, #156]	; (8001704 <HAL_RCC_OscConfig+0x764>)
 8001668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800166a:	f023 0202 	bic.w	r2, r3, #2
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001672:	4924      	ldr	r1, [pc, #144]	; (8001704 <HAL_RCC_OscConfig+0x764>)
 8001674:	4313      	orrs	r3, r2
 8001676:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001678:	4b22      	ldr	r3, [pc, #136]	; (8001704 <HAL_RCC_OscConfig+0x764>)
 800167a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800167c:	4a21      	ldr	r2, [pc, #132]	; (8001704 <HAL_RCC_OscConfig+0x764>)
 800167e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001682:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001684:	4b1f      	ldr	r3, [pc, #124]	; (8001704 <HAL_RCC_OscConfig+0x764>)
 8001686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001688:	4a1e      	ldr	r2, [pc, #120]	; (8001704 <HAL_RCC_OscConfig+0x764>)
 800168a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800168e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001690:	4b1c      	ldr	r3, [pc, #112]	; (8001704 <HAL_RCC_OscConfig+0x764>)
 8001692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001694:	4a1b      	ldr	r2, [pc, #108]	; (8001704 <HAL_RCC_OscConfig+0x764>)
 8001696:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800169a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800169c:	4b19      	ldr	r3, [pc, #100]	; (8001704 <HAL_RCC_OscConfig+0x764>)
 800169e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a0:	4a18      	ldr	r2, [pc, #96]	; (8001704 <HAL_RCC_OscConfig+0x764>)
 80016a2:	f043 0301 	orr.w	r3, r3, #1
 80016a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016a8:	4b16      	ldr	r3, [pc, #88]	; (8001704 <HAL_RCC_OscConfig+0x764>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a15      	ldr	r2, [pc, #84]	; (8001704 <HAL_RCC_OscConfig+0x764>)
 80016ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b4:	f7ff f8fe 	bl	80008b4 <HAL_GetTick>
 80016b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80016ba:	e008      	b.n	80016ce <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016bc:	f7ff f8fa 	bl	80008b4 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e091      	b.n	80017f2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80016ce:	4b0d      	ldr	r3, [pc, #52]	; (8001704 <HAL_RCC_OscConfig+0x764>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d0f0      	beq.n	80016bc <HAL_RCC_OscConfig+0x71c>
 80016da:	e089      	b.n	80017f0 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016dc:	4b09      	ldr	r3, [pc, #36]	; (8001704 <HAL_RCC_OscConfig+0x764>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a08      	ldr	r2, [pc, #32]	; (8001704 <HAL_RCC_OscConfig+0x764>)
 80016e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e8:	f7ff f8e4 	bl	80008b4 <HAL_GetTick>
 80016ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80016ee:	e00f      	b.n	8001710 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016f0:	f7ff f8e0 	bl	80008b4 <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d908      	bls.n	8001710 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e077      	b.n	80017f2 <HAL_RCC_OscConfig+0x852>
 8001702:	bf00      	nop
 8001704:	58024400 	.word	0x58024400
 8001708:	fffffc0c 	.word	0xfffffc0c
 800170c:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001710:	4b3a      	ldr	r3, [pc, #232]	; (80017fc <HAL_RCC_OscConfig+0x85c>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d1e9      	bne.n	80016f0 <HAL_RCC_OscConfig+0x750>
 800171c:	e068      	b.n	80017f0 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800171e:	4b37      	ldr	r3, [pc, #220]	; (80017fc <HAL_RCC_OscConfig+0x85c>)
 8001720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001722:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001724:	4b35      	ldr	r3, [pc, #212]	; (80017fc <HAL_RCC_OscConfig+0x85c>)
 8001726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001728:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172e:	2b01      	cmp	r3, #1
 8001730:	d031      	beq.n	8001796 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	f003 0203 	and.w	r2, r3, #3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800173c:	429a      	cmp	r2, r3
 800173e:	d12a      	bne.n	8001796 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	091b      	lsrs	r3, r3, #4
 8001744:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800174c:	429a      	cmp	r2, r3
 800174e:	d122      	bne.n	8001796 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800175c:	429a      	cmp	r2, r3
 800175e:	d11a      	bne.n	8001796 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	0a5b      	lsrs	r3, r3, #9
 8001764:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800176c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800176e:	429a      	cmp	r2, r3
 8001770:	d111      	bne.n	8001796 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	0c1b      	lsrs	r3, r3, #16
 8001776:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800177e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001780:	429a      	cmp	r2, r3
 8001782:	d108      	bne.n	8001796 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	0e1b      	lsrs	r3, r3, #24
 8001788:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001790:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001792:	429a      	cmp	r2, r3
 8001794:	d001      	beq.n	800179a <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e02b      	b.n	80017f2 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800179a:	4b18      	ldr	r3, [pc, #96]	; (80017fc <HAL_RCC_OscConfig+0x85c>)
 800179c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800179e:	08db      	lsrs	r3, r3, #3
 80017a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80017a4:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d01f      	beq.n	80017f0 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80017b0:	4b12      	ldr	r3, [pc, #72]	; (80017fc <HAL_RCC_OscConfig+0x85c>)
 80017b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b4:	4a11      	ldr	r2, [pc, #68]	; (80017fc <HAL_RCC_OscConfig+0x85c>)
 80017b6:	f023 0301 	bic.w	r3, r3, #1
 80017ba:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80017bc:	f7ff f87a 	bl	80008b4 <HAL_GetTick>
 80017c0:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80017c2:	bf00      	nop
 80017c4:	f7ff f876 	bl	80008b4 <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d0f9      	beq.n	80017c4 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80017d0:	4b0a      	ldr	r3, [pc, #40]	; (80017fc <HAL_RCC_OscConfig+0x85c>)
 80017d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017d4:	4b0a      	ldr	r3, [pc, #40]	; (8001800 <HAL_RCC_OscConfig+0x860>)
 80017d6:	4013      	ands	r3, r2
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80017dc:	00d2      	lsls	r2, r2, #3
 80017de:	4907      	ldr	r1, [pc, #28]	; (80017fc <HAL_RCC_OscConfig+0x85c>)
 80017e0:	4313      	orrs	r3, r2
 80017e2:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80017e4:	4b05      	ldr	r3, [pc, #20]	; (80017fc <HAL_RCC_OscConfig+0x85c>)
 80017e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e8:	4a04      	ldr	r2, [pc, #16]	; (80017fc <HAL_RCC_OscConfig+0x85c>)
 80017ea:	f043 0301 	orr.w	r3, r3, #1
 80017ee:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80017f0:	2300      	movs	r3, #0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3730      	adds	r7, #48	; 0x30
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	58024400 	.word	0x58024400
 8001800:	ffff0007 	.word	0xffff0007

08001804 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d101      	bne.n	8001818 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e19c      	b.n	8001b52 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001818:	4b8a      	ldr	r3, [pc, #552]	; (8001a44 <HAL_RCC_ClockConfig+0x240>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 030f 	and.w	r3, r3, #15
 8001820:	683a      	ldr	r2, [r7, #0]
 8001822:	429a      	cmp	r2, r3
 8001824:	d910      	bls.n	8001848 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001826:	4b87      	ldr	r3, [pc, #540]	; (8001a44 <HAL_RCC_ClockConfig+0x240>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f023 020f 	bic.w	r2, r3, #15
 800182e:	4985      	ldr	r1, [pc, #532]	; (8001a44 <HAL_RCC_ClockConfig+0x240>)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	4313      	orrs	r3, r2
 8001834:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001836:	4b83      	ldr	r3, [pc, #524]	; (8001a44 <HAL_RCC_ClockConfig+0x240>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 030f 	and.w	r3, r3, #15
 800183e:	683a      	ldr	r2, [r7, #0]
 8001840:	429a      	cmp	r2, r3
 8001842:	d001      	beq.n	8001848 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e184      	b.n	8001b52 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0304 	and.w	r3, r3, #4
 8001850:	2b00      	cmp	r3, #0
 8001852:	d010      	beq.n	8001876 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	691a      	ldr	r2, [r3, #16]
 8001858:	4b7b      	ldr	r3, [pc, #492]	; (8001a48 <HAL_RCC_ClockConfig+0x244>)
 800185a:	699b      	ldr	r3, [r3, #24]
 800185c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001860:	429a      	cmp	r2, r3
 8001862:	d908      	bls.n	8001876 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001864:	4b78      	ldr	r3, [pc, #480]	; (8001a48 <HAL_RCC_ClockConfig+0x244>)
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	691b      	ldr	r3, [r3, #16]
 8001870:	4975      	ldr	r1, [pc, #468]	; (8001a48 <HAL_RCC_ClockConfig+0x244>)
 8001872:	4313      	orrs	r3, r2
 8001874:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0308 	and.w	r3, r3, #8
 800187e:	2b00      	cmp	r3, #0
 8001880:	d010      	beq.n	80018a4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	695a      	ldr	r2, [r3, #20]
 8001886:	4b70      	ldr	r3, [pc, #448]	; (8001a48 <HAL_RCC_ClockConfig+0x244>)
 8001888:	69db      	ldr	r3, [r3, #28]
 800188a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800188e:	429a      	cmp	r2, r3
 8001890:	d908      	bls.n	80018a4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001892:	4b6d      	ldr	r3, [pc, #436]	; (8001a48 <HAL_RCC_ClockConfig+0x244>)
 8001894:	69db      	ldr	r3, [r3, #28]
 8001896:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	695b      	ldr	r3, [r3, #20]
 800189e:	496a      	ldr	r1, [pc, #424]	; (8001a48 <HAL_RCC_ClockConfig+0x244>)
 80018a0:	4313      	orrs	r3, r2
 80018a2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0310 	and.w	r3, r3, #16
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d010      	beq.n	80018d2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	699a      	ldr	r2, [r3, #24]
 80018b4:	4b64      	ldr	r3, [pc, #400]	; (8001a48 <HAL_RCC_ClockConfig+0x244>)
 80018b6:	69db      	ldr	r3, [r3, #28]
 80018b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80018bc:	429a      	cmp	r2, r3
 80018be:	d908      	bls.n	80018d2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80018c0:	4b61      	ldr	r3, [pc, #388]	; (8001a48 <HAL_RCC_ClockConfig+0x244>)
 80018c2:	69db      	ldr	r3, [r3, #28]
 80018c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	495e      	ldr	r1, [pc, #376]	; (8001a48 <HAL_RCC_ClockConfig+0x244>)
 80018ce:	4313      	orrs	r3, r2
 80018d0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0320 	and.w	r3, r3, #32
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d010      	beq.n	8001900 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	69da      	ldr	r2, [r3, #28]
 80018e2:	4b59      	ldr	r3, [pc, #356]	; (8001a48 <HAL_RCC_ClockConfig+0x244>)
 80018e4:	6a1b      	ldr	r3, [r3, #32]
 80018e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d908      	bls.n	8001900 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80018ee:	4b56      	ldr	r3, [pc, #344]	; (8001a48 <HAL_RCC_ClockConfig+0x244>)
 80018f0:	6a1b      	ldr	r3, [r3, #32]
 80018f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	69db      	ldr	r3, [r3, #28]
 80018fa:	4953      	ldr	r1, [pc, #332]	; (8001a48 <HAL_RCC_ClockConfig+0x244>)
 80018fc:	4313      	orrs	r3, r2
 80018fe:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0302 	and.w	r3, r3, #2
 8001908:	2b00      	cmp	r3, #0
 800190a:	d010      	beq.n	800192e <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	68da      	ldr	r2, [r3, #12]
 8001910:	4b4d      	ldr	r3, [pc, #308]	; (8001a48 <HAL_RCC_ClockConfig+0x244>)
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	f003 030f 	and.w	r3, r3, #15
 8001918:	429a      	cmp	r2, r3
 800191a:	d908      	bls.n	800192e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800191c:	4b4a      	ldr	r3, [pc, #296]	; (8001a48 <HAL_RCC_ClockConfig+0x244>)
 800191e:	699b      	ldr	r3, [r3, #24]
 8001920:	f023 020f 	bic.w	r2, r3, #15
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	4947      	ldr	r1, [pc, #284]	; (8001a48 <HAL_RCC_ClockConfig+0x244>)
 800192a:	4313      	orrs	r3, r2
 800192c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	2b00      	cmp	r3, #0
 8001938:	d055      	beq.n	80019e6 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800193a:	4b43      	ldr	r3, [pc, #268]	; (8001a48 <HAL_RCC_ClockConfig+0x244>)
 800193c:	699b      	ldr	r3, [r3, #24]
 800193e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	4940      	ldr	r1, [pc, #256]	; (8001a48 <HAL_RCC_ClockConfig+0x244>)
 8001948:	4313      	orrs	r3, r2
 800194a:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	2b02      	cmp	r3, #2
 8001952:	d107      	bne.n	8001964 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001954:	4b3c      	ldr	r3, [pc, #240]	; (8001a48 <HAL_RCC_ClockConfig+0x244>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800195c:	2b00      	cmp	r3, #0
 800195e:	d121      	bne.n	80019a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e0f6      	b.n	8001b52 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	2b03      	cmp	r3, #3
 800196a:	d107      	bne.n	800197c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800196c:	4b36      	ldr	r3, [pc, #216]	; (8001a48 <HAL_RCC_ClockConfig+0x244>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001974:	2b00      	cmp	r3, #0
 8001976:	d115      	bne.n	80019a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e0ea      	b.n	8001b52 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d107      	bne.n	8001994 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001984:	4b30      	ldr	r3, [pc, #192]	; (8001a48 <HAL_RCC_ClockConfig+0x244>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800198c:	2b00      	cmp	r3, #0
 800198e:	d109      	bne.n	80019a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e0de      	b.n	8001b52 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001994:	4b2c      	ldr	r3, [pc, #176]	; (8001a48 <HAL_RCC_ClockConfig+0x244>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0304 	and.w	r3, r3, #4
 800199c:	2b00      	cmp	r3, #0
 800199e:	d101      	bne.n	80019a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e0d6      	b.n	8001b52 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80019a4:	4b28      	ldr	r3, [pc, #160]	; (8001a48 <HAL_RCC_ClockConfig+0x244>)
 80019a6:	691b      	ldr	r3, [r3, #16]
 80019a8:	f023 0207 	bic.w	r2, r3, #7
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	4925      	ldr	r1, [pc, #148]	; (8001a48 <HAL_RCC_ClockConfig+0x244>)
 80019b2:	4313      	orrs	r3, r2
 80019b4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019b6:	f7fe ff7d 	bl	80008b4 <HAL_GetTick>
 80019ba:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019bc:	e00a      	b.n	80019d4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019be:	f7fe ff79 	bl	80008b4 <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d901      	bls.n	80019d4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e0be      	b.n	8001b52 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019d4:	4b1c      	ldr	r3, [pc, #112]	; (8001a48 <HAL_RCC_ClockConfig+0x244>)
 80019d6:	691b      	ldr	r3, [r3, #16]
 80019d8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	00db      	lsls	r3, r3, #3
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d1eb      	bne.n	80019be <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d010      	beq.n	8001a14 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	68da      	ldr	r2, [r3, #12]
 80019f6:	4b14      	ldr	r3, [pc, #80]	; (8001a48 <HAL_RCC_ClockConfig+0x244>)
 80019f8:	699b      	ldr	r3, [r3, #24]
 80019fa:	f003 030f 	and.w	r3, r3, #15
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d208      	bcs.n	8001a14 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a02:	4b11      	ldr	r3, [pc, #68]	; (8001a48 <HAL_RCC_ClockConfig+0x244>)
 8001a04:	699b      	ldr	r3, [r3, #24]
 8001a06:	f023 020f 	bic.w	r2, r3, #15
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	490e      	ldr	r1, [pc, #56]	; (8001a48 <HAL_RCC_ClockConfig+0x244>)
 8001a10:	4313      	orrs	r3, r2
 8001a12:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a14:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <HAL_RCC_ClockConfig+0x240>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 030f 	and.w	r3, r3, #15
 8001a1c:	683a      	ldr	r2, [r7, #0]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d214      	bcs.n	8001a4c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a22:	4b08      	ldr	r3, [pc, #32]	; (8001a44 <HAL_RCC_ClockConfig+0x240>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f023 020f 	bic.w	r2, r3, #15
 8001a2a:	4906      	ldr	r1, [pc, #24]	; (8001a44 <HAL_RCC_ClockConfig+0x240>)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a32:	4b04      	ldr	r3, [pc, #16]	; (8001a44 <HAL_RCC_ClockConfig+0x240>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 030f 	and.w	r3, r3, #15
 8001a3a:	683a      	ldr	r2, [r7, #0]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d005      	beq.n	8001a4c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e086      	b.n	8001b52 <HAL_RCC_ClockConfig+0x34e>
 8001a44:	52002000 	.word	0x52002000
 8001a48:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0304 	and.w	r3, r3, #4
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d010      	beq.n	8001a7a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	691a      	ldr	r2, [r3, #16]
 8001a5c:	4b3f      	ldr	r3, [pc, #252]	; (8001b5c <HAL_RCC_ClockConfig+0x358>)
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d208      	bcs.n	8001a7a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001a68:	4b3c      	ldr	r3, [pc, #240]	; (8001b5c <HAL_RCC_ClockConfig+0x358>)
 8001a6a:	699b      	ldr	r3, [r3, #24]
 8001a6c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	691b      	ldr	r3, [r3, #16]
 8001a74:	4939      	ldr	r1, [pc, #228]	; (8001b5c <HAL_RCC_ClockConfig+0x358>)
 8001a76:	4313      	orrs	r3, r2
 8001a78:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0308 	and.w	r3, r3, #8
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d010      	beq.n	8001aa8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	695a      	ldr	r2, [r3, #20]
 8001a8a:	4b34      	ldr	r3, [pc, #208]	; (8001b5c <HAL_RCC_ClockConfig+0x358>)
 8001a8c:	69db      	ldr	r3, [r3, #28]
 8001a8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d208      	bcs.n	8001aa8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001a96:	4b31      	ldr	r3, [pc, #196]	; (8001b5c <HAL_RCC_ClockConfig+0x358>)
 8001a98:	69db      	ldr	r3, [r3, #28]
 8001a9a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	695b      	ldr	r3, [r3, #20]
 8001aa2:	492e      	ldr	r1, [pc, #184]	; (8001b5c <HAL_RCC_ClockConfig+0x358>)
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0310 	and.w	r3, r3, #16
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d010      	beq.n	8001ad6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	699a      	ldr	r2, [r3, #24]
 8001ab8:	4b28      	ldr	r3, [pc, #160]	; (8001b5c <HAL_RCC_ClockConfig+0x358>)
 8001aba:	69db      	ldr	r3, [r3, #28]
 8001abc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d208      	bcs.n	8001ad6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001ac4:	4b25      	ldr	r3, [pc, #148]	; (8001b5c <HAL_RCC_ClockConfig+0x358>)
 8001ac6:	69db      	ldr	r3, [r3, #28]
 8001ac8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	4922      	ldr	r1, [pc, #136]	; (8001b5c <HAL_RCC_ClockConfig+0x358>)
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0320 	and.w	r3, r3, #32
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d010      	beq.n	8001b04 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	69da      	ldr	r2, [r3, #28]
 8001ae6:	4b1d      	ldr	r3, [pc, #116]	; (8001b5c <HAL_RCC_ClockConfig+0x358>)
 8001ae8:	6a1b      	ldr	r3, [r3, #32]
 8001aea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d208      	bcs.n	8001b04 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001af2:	4b1a      	ldr	r3, [pc, #104]	; (8001b5c <HAL_RCC_ClockConfig+0x358>)
 8001af4:	6a1b      	ldr	r3, [r3, #32]
 8001af6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	69db      	ldr	r3, [r3, #28]
 8001afe:	4917      	ldr	r1, [pc, #92]	; (8001b5c <HAL_RCC_ClockConfig+0x358>)
 8001b00:	4313      	orrs	r3, r2
 8001b02:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001b04:	f000 f834 	bl	8001b70 <HAL_RCC_GetSysClockFreq>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	4b14      	ldr	r3, [pc, #80]	; (8001b5c <HAL_RCC_ClockConfig+0x358>)
 8001b0c:	699b      	ldr	r3, [r3, #24]
 8001b0e:	0a1b      	lsrs	r3, r3, #8
 8001b10:	f003 030f 	and.w	r3, r3, #15
 8001b14:	4912      	ldr	r1, [pc, #72]	; (8001b60 <HAL_RCC_ClockConfig+0x35c>)
 8001b16:	5ccb      	ldrb	r3, [r1, r3]
 8001b18:	f003 031f 	and.w	r3, r3, #31
 8001b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b20:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001b22:	4b0e      	ldr	r3, [pc, #56]	; (8001b5c <HAL_RCC_ClockConfig+0x358>)
 8001b24:	699b      	ldr	r3, [r3, #24]
 8001b26:	f003 030f 	and.w	r3, r3, #15
 8001b2a:	4a0d      	ldr	r2, [pc, #52]	; (8001b60 <HAL_RCC_ClockConfig+0x35c>)
 8001b2c:	5cd3      	ldrb	r3, [r2, r3]
 8001b2e:	f003 031f 	and.w	r3, r3, #31
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	fa22 f303 	lsr.w	r3, r2, r3
 8001b38:	4a0a      	ldr	r2, [pc, #40]	; (8001b64 <HAL_RCC_ClockConfig+0x360>)
 8001b3a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001b3c:	4a0a      	ldr	r2, [pc, #40]	; (8001b68 <HAL_RCC_ClockConfig+0x364>)
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001b42:	4b0a      	ldr	r3, [pc, #40]	; (8001b6c <HAL_RCC_ClockConfig+0x368>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7fe fe6a 	bl	8000820 <HAL_InitTick>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3718      	adds	r7, #24
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	58024400 	.word	0x58024400
 8001b60:	08002418 	.word	0x08002418
 8001b64:	24000004 	.word	0x24000004
 8001b68:	24000000 	.word	0x24000000
 8001b6c:	24000008 	.word	0x24000008

08001b70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b089      	sub	sp, #36	; 0x24
 8001b74:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b76:	4bb3      	ldr	r3, [pc, #716]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b7e:	2b18      	cmp	r3, #24
 8001b80:	f200 8155 	bhi.w	8001e2e <HAL_RCC_GetSysClockFreq+0x2be>
 8001b84:	a201      	add	r2, pc, #4	; (adr r2, 8001b8c <HAL_RCC_GetSysClockFreq+0x1c>)
 8001b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b8a:	bf00      	nop
 8001b8c:	08001bf1 	.word	0x08001bf1
 8001b90:	08001e2f 	.word	0x08001e2f
 8001b94:	08001e2f 	.word	0x08001e2f
 8001b98:	08001e2f 	.word	0x08001e2f
 8001b9c:	08001e2f 	.word	0x08001e2f
 8001ba0:	08001e2f 	.word	0x08001e2f
 8001ba4:	08001e2f 	.word	0x08001e2f
 8001ba8:	08001e2f 	.word	0x08001e2f
 8001bac:	08001c17 	.word	0x08001c17
 8001bb0:	08001e2f 	.word	0x08001e2f
 8001bb4:	08001e2f 	.word	0x08001e2f
 8001bb8:	08001e2f 	.word	0x08001e2f
 8001bbc:	08001e2f 	.word	0x08001e2f
 8001bc0:	08001e2f 	.word	0x08001e2f
 8001bc4:	08001e2f 	.word	0x08001e2f
 8001bc8:	08001e2f 	.word	0x08001e2f
 8001bcc:	08001c1d 	.word	0x08001c1d
 8001bd0:	08001e2f 	.word	0x08001e2f
 8001bd4:	08001e2f 	.word	0x08001e2f
 8001bd8:	08001e2f 	.word	0x08001e2f
 8001bdc:	08001e2f 	.word	0x08001e2f
 8001be0:	08001e2f 	.word	0x08001e2f
 8001be4:	08001e2f 	.word	0x08001e2f
 8001be8:	08001e2f 	.word	0x08001e2f
 8001bec:	08001c23 	.word	0x08001c23
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001bf0:	4b94      	ldr	r3, [pc, #592]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0320 	and.w	r3, r3, #32
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d009      	beq.n	8001c10 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001bfc:	4b91      	ldr	r3, [pc, #580]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	08db      	lsrs	r3, r3, #3
 8001c02:	f003 0303 	and.w	r3, r3, #3
 8001c06:	4a90      	ldr	r2, [pc, #576]	; (8001e48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001c08:	fa22 f303 	lsr.w	r3, r2, r3
 8001c0c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8001c0e:	e111      	b.n	8001e34 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001c10:	4b8d      	ldr	r3, [pc, #564]	; (8001e48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001c12:	61bb      	str	r3, [r7, #24]
      break;
 8001c14:	e10e      	b.n	8001e34 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8001c16:	4b8d      	ldr	r3, [pc, #564]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001c18:	61bb      	str	r3, [r7, #24]
      break;
 8001c1a:	e10b      	b.n	8001e34 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8001c1c:	4b8c      	ldr	r3, [pc, #560]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001c1e:	61bb      	str	r3, [r7, #24]
      break;
 8001c20:	e108      	b.n	8001e34 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001c22:	4b88      	ldr	r3, [pc, #544]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c26:	f003 0303 	and.w	r3, r3, #3
 8001c2a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8001c2c:	4b85      	ldr	r3, [pc, #532]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c30:	091b      	lsrs	r3, r3, #4
 8001c32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c36:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001c38:	4b82      	ldr	r3, [pc, #520]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c3c:	f003 0301 	and.w	r3, r3, #1
 8001c40:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8001c42:	4b80      	ldr	r3, [pc, #512]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c46:	08db      	lsrs	r3, r3, #3
 8001c48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001c4c:	68fa      	ldr	r2, [r7, #12]
 8001c4e:	fb02 f303 	mul.w	r3, r2, r3
 8001c52:	ee07 3a90 	vmov	s15, r3
 8001c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c5a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	f000 80e1 	beq.w	8001e28 <HAL_RCC_GetSysClockFreq+0x2b8>
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	f000 8083 	beq.w	8001d74 <HAL_RCC_GetSysClockFreq+0x204>
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	f200 80a1 	bhi.w	8001db8 <HAL_RCC_GetSysClockFreq+0x248>
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d003      	beq.n	8001c84 <HAL_RCC_GetSysClockFreq+0x114>
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d056      	beq.n	8001d30 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001c82:	e099      	b.n	8001db8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001c84:	4b6f      	ldr	r3, [pc, #444]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0320 	and.w	r3, r3, #32
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d02d      	beq.n	8001cec <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001c90:	4b6c      	ldr	r3, [pc, #432]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	08db      	lsrs	r3, r3, #3
 8001c96:	f003 0303 	and.w	r3, r3, #3
 8001c9a:	4a6b      	ldr	r2, [pc, #428]	; (8001e48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001c9c:	fa22 f303 	lsr.w	r3, r2, r3
 8001ca0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	ee07 3a90 	vmov	s15, r3
 8001ca8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	ee07 3a90 	vmov	s15, r3
 8001cb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001cba:	4b62      	ldr	r3, [pc, #392]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cc2:	ee07 3a90 	vmov	s15, r3
 8001cc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001cca:	ed97 6a02 	vldr	s12, [r7, #8]
 8001cce:	eddf 5a61 	vldr	s11, [pc, #388]	; 8001e54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001cd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001cd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001cda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001cde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001ce2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ce6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8001cea:	e087      	b.n	8001dfc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	ee07 3a90 	vmov	s15, r3
 8001cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cf6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8001e58 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001cfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001cfe:	4b51      	ldr	r3, [pc, #324]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d06:	ee07 3a90 	vmov	s15, r3
 8001d0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001d0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8001d12:	eddf 5a50 	vldr	s11, [pc, #320]	; 8001e54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001d16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001d1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001d1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001d22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d2a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001d2e:	e065      	b.n	8001dfc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	ee07 3a90 	vmov	s15, r3
 8001d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d3a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8001e5c <HAL_RCC_GetSysClockFreq+0x2ec>
 8001d3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d42:	4b40      	ldr	r3, [pc, #256]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d4a:	ee07 3a90 	vmov	s15, r3
 8001d4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001d52:	ed97 6a02 	vldr	s12, [r7, #8]
 8001d56:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8001e54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001d5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001d5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001d62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001d66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d6e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001d72:	e043      	b.n	8001dfc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	ee07 3a90 	vmov	s15, r3
 8001d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d7e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8001e60 <HAL_RCC_GetSysClockFreq+0x2f0>
 8001d82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d86:	4b2f      	ldr	r3, [pc, #188]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d8e:	ee07 3a90 	vmov	s15, r3
 8001d92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001d96:	ed97 6a02 	vldr	s12, [r7, #8]
 8001d9a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8001e54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001d9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001da2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001da6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001daa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001db2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001db6:	e021      	b.n	8001dfc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	ee07 3a90 	vmov	s15, r3
 8001dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dc2:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001e5c <HAL_RCC_GetSysClockFreq+0x2ec>
 8001dc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001dca:	4b1e      	ldr	r3, [pc, #120]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001dd2:	ee07 3a90 	vmov	s15, r3
 8001dd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001dda:	ed97 6a02 	vldr	s12, [r7, #8]
 8001dde:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8001e54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001de2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001de6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001dea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001dee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001df6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001dfa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8001dfc:	4b11      	ldr	r3, [pc, #68]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e00:	0a5b      	lsrs	r3, r3, #9
 8001e02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e06:	3301      	adds	r3, #1
 8001e08:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	ee07 3a90 	vmov	s15, r3
 8001e10:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e14:	edd7 6a07 	vldr	s13, [r7, #28]
 8001e18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e20:	ee17 3a90 	vmov	r3, s15
 8001e24:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8001e26:	e005      	b.n	8001e34 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	61bb      	str	r3, [r7, #24]
      break;
 8001e2c:	e002      	b.n	8001e34 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8001e2e:	4b07      	ldr	r3, [pc, #28]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001e30:	61bb      	str	r3, [r7, #24]
      break;
 8001e32:	bf00      	nop
  }

  return sysclockfreq;
 8001e34:	69bb      	ldr	r3, [r7, #24]
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3724      	adds	r7, #36	; 0x24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	58024400 	.word	0x58024400
 8001e48:	03d09000 	.word	0x03d09000
 8001e4c:	003d0900 	.word	0x003d0900
 8001e50:	016e3600 	.word	0x016e3600
 8001e54:	46000000 	.word	0x46000000
 8001e58:	4c742400 	.word	0x4c742400
 8001e5c:	4a742400 	.word	0x4a742400
 8001e60:	4bb71b00 	.word	0x4bb71b00

08001e64 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b086      	sub	sp, #24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d101      	bne.n	8001e78 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e08f      	b.n	8001f98 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d106      	bne.n	8001e92 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f7fe fb75 	bl	800057c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2202      	movs	r2, #2
 8001e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	6899      	ldr	r1, [r3, #8]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	4b3e      	ldr	r3, [pc, #248]	; (8001fa0 <HAL_TIM_Encoder_Init+0x13c>)
 8001ea6:	400b      	ands	r3, r1
 8001ea8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	3304      	adds	r3, #4
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4610      	mov	r0, r2
 8001eb6:	f000 f929 	bl	800210c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	6a1b      	ldr	r3, [r3, #32]
 8001ed0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	697a      	ldr	r2, [r7, #20]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001edc:	693a      	ldr	r2, [r7, #16]
 8001ede:	4b31      	ldr	r3, [pc, #196]	; (8001fa4 <HAL_TIM_Encoder_Init+0x140>)
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	689a      	ldr	r2, [r3, #8]
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	021b      	lsls	r3, r3, #8
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	693a      	ldr	r2, [r7, #16]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8001ef6:	693a      	ldr	r2, [r7, #16]
 8001ef8:	4b2b      	ldr	r3, [pc, #172]	; (8001fa8 <HAL_TIM_Encoder_Init+0x144>)
 8001efa:	4013      	ands	r3, r2
 8001efc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	4b2a      	ldr	r3, [pc, #168]	; (8001fac <HAL_TIM_Encoder_Init+0x148>)
 8001f02:	4013      	ands	r3, r2
 8001f04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	68da      	ldr	r2, [r3, #12]
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	69db      	ldr	r3, [r3, #28]
 8001f0e:	021b      	lsls	r3, r3, #8
 8001f10:	4313      	orrs	r3, r2
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	691b      	ldr	r3, [r3, #16]
 8001f1c:	011a      	lsls	r2, r3, #4
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	6a1b      	ldr	r3, [r3, #32]
 8001f22:	031b      	lsls	r3, r3, #12
 8001f24:	4313      	orrs	r3, r2
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001f32:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8001f3a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685a      	ldr	r2, [r3, #4]
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	695b      	ldr	r3, [r3, #20]
 8001f44:	011b      	lsls	r3, r3, #4
 8001f46:	4313      	orrs	r3, r2
 8001f48:	68fa      	ldr	r2, [r7, #12]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	697a      	ldr	r2, [r7, #20]
 8001f54:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	68fa      	ldr	r2, [r7, #12]
 8001f64:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2201      	movs	r2, #1
 8001f72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2201      	movs	r2, #1
 8001f82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2201      	movs	r2, #1
 8001f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f96:	2300      	movs	r3, #0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3718      	adds	r7, #24
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	fffebff8 	.word	0xfffebff8
 8001fa4:	fffffcfc 	.word	0xfffffcfc
 8001fa8:	fffff3f3 	.word	0xfffff3f3
 8001fac:	ffff0f0f 	.word	0xffff0f0f

08001fb0 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001fc0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001fc8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001fd0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001fd8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d110      	bne.n	8002002 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001fe0:	7bfb      	ldrb	r3, [r7, #15]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d102      	bne.n	8001fec <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8001fe6:	7b7b      	ldrb	r3, [r7, #13]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d001      	beq.n	8001ff0 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e089      	b.n	8002104 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2202      	movs	r2, #2
 8001ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2202      	movs	r2, #2
 8001ffc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002000:	e031      	b.n	8002066 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	2b04      	cmp	r3, #4
 8002006:	d110      	bne.n	800202a <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002008:	7bbb      	ldrb	r3, [r7, #14]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d102      	bne.n	8002014 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800200e:	7b3b      	ldrb	r3, [r7, #12]
 8002010:	2b01      	cmp	r3, #1
 8002012:	d001      	beq.n	8002018 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e075      	b.n	8002104 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2202      	movs	r2, #2
 800201c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2202      	movs	r2, #2
 8002024:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002028:	e01d      	b.n	8002066 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800202a:	7bfb      	ldrb	r3, [r7, #15]
 800202c:	2b01      	cmp	r3, #1
 800202e:	d108      	bne.n	8002042 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002030:	7bbb      	ldrb	r3, [r7, #14]
 8002032:	2b01      	cmp	r3, #1
 8002034:	d105      	bne.n	8002042 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002036:	7b7b      	ldrb	r3, [r7, #13]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d102      	bne.n	8002042 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800203c:	7b3b      	ldrb	r3, [r7, #12]
 800203e:	2b01      	cmp	r3, #1
 8002040:	d001      	beq.n	8002046 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e05e      	b.n	8002104 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2202      	movs	r2, #2
 800204a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2202      	movs	r2, #2
 8002052:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2202      	movs	r2, #2
 800205a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2202      	movs	r2, #2
 8002062:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d003      	beq.n	8002074 <HAL_TIM_Encoder_Start_IT+0xc4>
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	2b04      	cmp	r3, #4
 8002070:	d010      	beq.n	8002094 <HAL_TIM_Encoder_Start_IT+0xe4>
 8002072:	e01f      	b.n	80020b4 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2201      	movs	r2, #1
 800207a:	2100      	movs	r1, #0
 800207c:	4618      	mov	r0, r3
 800207e:	f000 f8df 	bl	8002240 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	68da      	ldr	r2, [r3, #12]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f042 0202 	orr.w	r2, r2, #2
 8002090:	60da      	str	r2, [r3, #12]
      break;
 8002092:	e02e      	b.n	80020f2 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2201      	movs	r2, #1
 800209a:	2104      	movs	r1, #4
 800209c:	4618      	mov	r0, r3
 800209e:	f000 f8cf 	bl	8002240 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	68da      	ldr	r2, [r3, #12]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f042 0204 	orr.w	r2, r2, #4
 80020b0:	60da      	str	r2, [r3, #12]
      break;
 80020b2:	e01e      	b.n	80020f2 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2201      	movs	r2, #1
 80020ba:	2100      	movs	r1, #0
 80020bc:	4618      	mov	r0, r3
 80020be:	f000 f8bf 	bl	8002240 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2201      	movs	r2, #1
 80020c8:	2104      	movs	r1, #4
 80020ca:	4618      	mov	r0, r3
 80020cc:	f000 f8b8 	bl	8002240 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	68da      	ldr	r2, [r3, #12]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f042 0202 	orr.w	r2, r2, #2
 80020de:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	68da      	ldr	r2, [r3, #12]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f042 0204 	orr.w	r2, r2, #4
 80020ee:	60da      	str	r2, [r3, #12]
      break;
 80020f0:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f042 0201 	orr.w	r2, r2, #1
 8002100:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002102:	2300      	movs	r3, #0
}
 8002104:	4618      	mov	r0, r3
 8002106:	3710      	adds	r7, #16
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4a40      	ldr	r2, [pc, #256]	; (8002220 <TIM_Base_SetConfig+0x114>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d013      	beq.n	800214c <TIM_Base_SetConfig+0x40>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800212a:	d00f      	beq.n	800214c <TIM_Base_SetConfig+0x40>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4a3d      	ldr	r2, [pc, #244]	; (8002224 <TIM_Base_SetConfig+0x118>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d00b      	beq.n	800214c <TIM_Base_SetConfig+0x40>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4a3c      	ldr	r2, [pc, #240]	; (8002228 <TIM_Base_SetConfig+0x11c>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d007      	beq.n	800214c <TIM_Base_SetConfig+0x40>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4a3b      	ldr	r2, [pc, #236]	; (800222c <TIM_Base_SetConfig+0x120>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d003      	beq.n	800214c <TIM_Base_SetConfig+0x40>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a3a      	ldr	r2, [pc, #232]	; (8002230 <TIM_Base_SetConfig+0x124>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d108      	bne.n	800215e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002152:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	68fa      	ldr	r2, [r7, #12]
 800215a:	4313      	orrs	r3, r2
 800215c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a2f      	ldr	r2, [pc, #188]	; (8002220 <TIM_Base_SetConfig+0x114>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d01f      	beq.n	80021a6 <TIM_Base_SetConfig+0x9a>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800216c:	d01b      	beq.n	80021a6 <TIM_Base_SetConfig+0x9a>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a2c      	ldr	r2, [pc, #176]	; (8002224 <TIM_Base_SetConfig+0x118>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d017      	beq.n	80021a6 <TIM_Base_SetConfig+0x9a>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a2b      	ldr	r2, [pc, #172]	; (8002228 <TIM_Base_SetConfig+0x11c>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d013      	beq.n	80021a6 <TIM_Base_SetConfig+0x9a>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a2a      	ldr	r2, [pc, #168]	; (800222c <TIM_Base_SetConfig+0x120>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d00f      	beq.n	80021a6 <TIM_Base_SetConfig+0x9a>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a29      	ldr	r2, [pc, #164]	; (8002230 <TIM_Base_SetConfig+0x124>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d00b      	beq.n	80021a6 <TIM_Base_SetConfig+0x9a>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a28      	ldr	r2, [pc, #160]	; (8002234 <TIM_Base_SetConfig+0x128>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d007      	beq.n	80021a6 <TIM_Base_SetConfig+0x9a>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a27      	ldr	r2, [pc, #156]	; (8002238 <TIM_Base_SetConfig+0x12c>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d003      	beq.n	80021a6 <TIM_Base_SetConfig+0x9a>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a26      	ldr	r2, [pc, #152]	; (800223c <TIM_Base_SetConfig+0x130>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d108      	bne.n	80021b8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	695b      	ldr	r3, [r3, #20]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	68fa      	ldr	r2, [r7, #12]
 80021ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	689a      	ldr	r2, [r3, #8]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4a10      	ldr	r2, [pc, #64]	; (8002220 <TIM_Base_SetConfig+0x114>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d00f      	beq.n	8002204 <TIM_Base_SetConfig+0xf8>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4a12      	ldr	r2, [pc, #72]	; (8002230 <TIM_Base_SetConfig+0x124>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d00b      	beq.n	8002204 <TIM_Base_SetConfig+0xf8>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4a11      	ldr	r2, [pc, #68]	; (8002234 <TIM_Base_SetConfig+0x128>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d007      	beq.n	8002204 <TIM_Base_SetConfig+0xf8>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	4a10      	ldr	r2, [pc, #64]	; (8002238 <TIM_Base_SetConfig+0x12c>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d003      	beq.n	8002204 <TIM_Base_SetConfig+0xf8>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4a0f      	ldr	r2, [pc, #60]	; (800223c <TIM_Base_SetConfig+0x130>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d103      	bne.n	800220c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	691a      	ldr	r2, [r3, #16]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	615a      	str	r2, [r3, #20]
}
 8002212:	bf00      	nop
 8002214:	3714      	adds	r7, #20
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	40010000 	.word	0x40010000
 8002224:	40000400 	.word	0x40000400
 8002228:	40000800 	.word	0x40000800
 800222c:	40000c00 	.word	0x40000c00
 8002230:	40010400 	.word	0x40010400
 8002234:	40014000 	.word	0x40014000
 8002238:	40014400 	.word	0x40014400
 800223c:	40014800 	.word	0x40014800

08002240 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002240:	b480      	push	{r7}
 8002242:	b087      	sub	sp, #28
 8002244:	af00      	add	r7, sp, #0
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	f003 031f 	and.w	r3, r3, #31
 8002252:	2201      	movs	r2, #1
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	6a1a      	ldr	r2, [r3, #32]
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	43db      	mvns	r3, r3
 8002262:	401a      	ands	r2, r3
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	6a1a      	ldr	r2, [r3, #32]
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	f003 031f 	and.w	r3, r3, #31
 8002272:	6879      	ldr	r1, [r7, #4]
 8002274:	fa01 f303 	lsl.w	r3, r1, r3
 8002278:	431a      	orrs	r2, r3
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	621a      	str	r2, [r3, #32]
}
 800227e:	bf00      	nop
 8002280:	371c      	adds	r7, #28
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
	...

0800228c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800228c:	b480      	push	{r7}
 800228e:	b085      	sub	sp, #20
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800229c:	2b01      	cmp	r3, #1
 800229e:	d101      	bne.n	80022a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80022a0:	2302      	movs	r3, #2
 80022a2:	e06d      	b.n	8002380 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2202      	movs	r2, #2
 80022b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a30      	ldr	r2, [pc, #192]	; (800238c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d004      	beq.n	80022d8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a2f      	ldr	r2, [pc, #188]	; (8002390 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d108      	bne.n	80022ea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80022de:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	68fa      	ldr	r2, [r7, #12]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022f0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	68fa      	ldr	r2, [r7, #12]
 8002302:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a20      	ldr	r2, [pc, #128]	; (800238c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d022      	beq.n	8002354 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002316:	d01d      	beq.n	8002354 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a1d      	ldr	r2, [pc, #116]	; (8002394 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d018      	beq.n	8002354 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a1c      	ldr	r2, [pc, #112]	; (8002398 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d013      	beq.n	8002354 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a1a      	ldr	r2, [pc, #104]	; (800239c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d00e      	beq.n	8002354 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a15      	ldr	r2, [pc, #84]	; (8002390 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d009      	beq.n	8002354 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a16      	ldr	r2, [pc, #88]	; (80023a0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d004      	beq.n	8002354 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a15      	ldr	r2, [pc, #84]	; (80023a4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d10c      	bne.n	800236e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800235a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	68ba      	ldr	r2, [r7, #8]
 8002362:	4313      	orrs	r3, r2
 8002364:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	68ba      	ldr	r2, [r7, #8]
 800236c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2201      	movs	r2, #1
 8002372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800237e:	2300      	movs	r3, #0
}
 8002380:	4618      	mov	r0, r3
 8002382:	3714      	adds	r7, #20
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr
 800238c:	40010000 	.word	0x40010000
 8002390:	40010400 	.word	0x40010400
 8002394:	40000400 	.word	0x40000400
 8002398:	40000800 	.word	0x40000800
 800239c:	40000c00 	.word	0x40000c00
 80023a0:	40001800 	.word	0x40001800
 80023a4:	40014000 	.word	0x40014000

080023a8 <__libc_init_array>:
 80023a8:	b570      	push	{r4, r5, r6, lr}
 80023aa:	4d0d      	ldr	r5, [pc, #52]	; (80023e0 <__libc_init_array+0x38>)
 80023ac:	4c0d      	ldr	r4, [pc, #52]	; (80023e4 <__libc_init_array+0x3c>)
 80023ae:	1b64      	subs	r4, r4, r5
 80023b0:	10a4      	asrs	r4, r4, #2
 80023b2:	2600      	movs	r6, #0
 80023b4:	42a6      	cmp	r6, r4
 80023b6:	d109      	bne.n	80023cc <__libc_init_array+0x24>
 80023b8:	4d0b      	ldr	r5, [pc, #44]	; (80023e8 <__libc_init_array+0x40>)
 80023ba:	4c0c      	ldr	r4, [pc, #48]	; (80023ec <__libc_init_array+0x44>)
 80023bc:	f000 f820 	bl	8002400 <_init>
 80023c0:	1b64      	subs	r4, r4, r5
 80023c2:	10a4      	asrs	r4, r4, #2
 80023c4:	2600      	movs	r6, #0
 80023c6:	42a6      	cmp	r6, r4
 80023c8:	d105      	bne.n	80023d6 <__libc_init_array+0x2e>
 80023ca:	bd70      	pop	{r4, r5, r6, pc}
 80023cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80023d0:	4798      	blx	r3
 80023d2:	3601      	adds	r6, #1
 80023d4:	e7ee      	b.n	80023b4 <__libc_init_array+0xc>
 80023d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80023da:	4798      	blx	r3
 80023dc:	3601      	adds	r6, #1
 80023de:	e7f2      	b.n	80023c6 <__libc_init_array+0x1e>
 80023e0:	08002428 	.word	0x08002428
 80023e4:	08002428 	.word	0x08002428
 80023e8:	08002428 	.word	0x08002428
 80023ec:	0800242c 	.word	0x0800242c

080023f0 <memset>:
 80023f0:	4402      	add	r2, r0
 80023f2:	4603      	mov	r3, r0
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d100      	bne.n	80023fa <memset+0xa>
 80023f8:	4770      	bx	lr
 80023fa:	f803 1b01 	strb.w	r1, [r3], #1
 80023fe:	e7f9      	b.n	80023f4 <memset+0x4>

08002400 <_init>:
 8002400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002402:	bf00      	nop
 8002404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002406:	bc08      	pop	{r3}
 8002408:	469e      	mov	lr, r3
 800240a:	4770      	bx	lr

0800240c <_fini>:
 800240c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800240e:	bf00      	nop
 8002410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002412:	bc08      	pop	{r3}
 8002414:	469e      	mov	lr, r3
 8002416:	4770      	bx	lr
