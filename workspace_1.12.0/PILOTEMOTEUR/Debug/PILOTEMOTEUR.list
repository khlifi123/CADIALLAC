
PILOTEMOTEUR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ba0  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08002d68  08002d68  00012d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002df0  08002df0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002df0  08002df0  00012df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002df8  08002df8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002df8  08002df8  00012df8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002dfc  08002dfc  00012dfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002e00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  2000000c  08002e0c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  08002e0c  000200c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a555  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019cc  00000000  00000000  0002a591  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a78  00000000  00000000  0002bf60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000978  00000000  00000000  0002c9d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024e90  00000000  00000000  0002d350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cb22  00000000  00000000  000521e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e6b1d  00000000  00000000  0005ed02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014581f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a28  00000000  00000000  00145870  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08002d50 	.word	0x08002d50

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08002d50 	.word	0x08002d50

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b974 	b.w	8000508 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468e      	mov	lr, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14d      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000246:	428a      	cmp	r2, r1
 8000248:	4694      	mov	ip, r2
 800024a:	d969      	bls.n	8000320 <__udivmoddi4+0xe8>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b152      	cbz	r2, 8000268 <__udivmoddi4+0x30>
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	f1c2 0120 	rsb	r1, r2, #32
 800025a:	fa20 f101 	lsr.w	r1, r0, r1
 800025e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000262:	ea41 0e03 	orr.w	lr, r1, r3
 8000266:	4094      	lsls	r4, r2
 8000268:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800026c:	0c21      	lsrs	r1, r4, #16
 800026e:	fbbe f6f8 	udiv	r6, lr, r8
 8000272:	fa1f f78c 	uxth.w	r7, ip
 8000276:	fb08 e316 	mls	r3, r8, r6, lr
 800027a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027e:	fb06 f107 	mul.w	r1, r6, r7
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f106 30ff 	add.w	r0, r6, #4294967295
 800028e:	f080 811f 	bcs.w	80004d0 <__udivmoddi4+0x298>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 811c 	bls.w	80004d0 <__udivmoddi4+0x298>
 8000298:	3e02      	subs	r6, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a5b      	subs	r3, r3, r1
 800029e:	b2a4      	uxth	r4, r4
 80002a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a4:	fb08 3310 	mls	r3, r8, r0, r3
 80002a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ac:	fb00 f707 	mul.w	r7, r0, r7
 80002b0:	42a7      	cmp	r7, r4
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x92>
 80002b4:	eb1c 0404 	adds.w	r4, ip, r4
 80002b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002bc:	f080 810a 	bcs.w	80004d4 <__udivmoddi4+0x29c>
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	f240 8107 	bls.w	80004d4 <__udivmoddi4+0x29c>
 80002c6:	4464      	add	r4, ip
 80002c8:	3802      	subs	r0, #2
 80002ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ce:	1be4      	subs	r4, r4, r7
 80002d0:	2600      	movs	r6, #0
 80002d2:	b11d      	cbz	r5, 80002dc <__udivmoddi4+0xa4>
 80002d4:	40d4      	lsrs	r4, r2
 80002d6:	2300      	movs	r3, #0
 80002d8:	e9c5 4300 	strd	r4, r3, [r5]
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d909      	bls.n	80002fa <__udivmoddi4+0xc2>
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	f000 80ef 	beq.w	80004ca <__udivmoddi4+0x292>
 80002ec:	2600      	movs	r6, #0
 80002ee:	e9c5 0100 	strd	r0, r1, [r5]
 80002f2:	4630      	mov	r0, r6
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	fab3 f683 	clz	r6, r3
 80002fe:	2e00      	cmp	r6, #0
 8000300:	d14a      	bne.n	8000398 <__udivmoddi4+0x160>
 8000302:	428b      	cmp	r3, r1
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xd4>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 80f9 	bhi.w	80004fe <__udivmoddi4+0x2c6>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb61 0303 	sbc.w	r3, r1, r3
 8000312:	2001      	movs	r0, #1
 8000314:	469e      	mov	lr, r3
 8000316:	2d00      	cmp	r5, #0
 8000318:	d0e0      	beq.n	80002dc <__udivmoddi4+0xa4>
 800031a:	e9c5 4e00 	strd	r4, lr, [r5]
 800031e:	e7dd      	b.n	80002dc <__udivmoddi4+0xa4>
 8000320:	b902      	cbnz	r2, 8000324 <__udivmoddi4+0xec>
 8000322:	deff      	udf	#255	; 0xff
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	2a00      	cmp	r2, #0
 800032a:	f040 8092 	bne.w	8000452 <__udivmoddi4+0x21a>
 800032e:	eba1 010c 	sub.w	r1, r1, ip
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2601      	movs	r6, #1
 800033c:	0c20      	lsrs	r0, r4, #16
 800033e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000342:	fb07 1113 	mls	r1, r7, r3, r1
 8000346:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800034a:	fb0e f003 	mul.w	r0, lr, r3
 800034e:	4288      	cmp	r0, r1
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x12c>
 8000352:	eb1c 0101 	adds.w	r1, ip, r1
 8000356:	f103 38ff 	add.w	r8, r3, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x12a>
 800035c:	4288      	cmp	r0, r1
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2c0>
 8000362:	4643      	mov	r3, r8
 8000364:	1a09      	subs	r1, r1, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb1 f0f7 	udiv	r0, r1, r7
 800036c:	fb07 1110 	mls	r1, r7, r0, r1
 8000370:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x156>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 31ff 	add.w	r1, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x154>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2ca>
 800038c:	4608      	mov	r0, r1
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000396:	e79c      	b.n	80002d2 <__udivmoddi4+0x9a>
 8000398:	f1c6 0720 	rsb	r7, r6, #32
 800039c:	40b3      	lsls	r3, r6
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa20 f407 	lsr.w	r4, r0, r7
 80003aa:	fa01 f306 	lsl.w	r3, r1, r6
 80003ae:	431c      	orrs	r4, r3
 80003b0:	40f9      	lsrs	r1, r7
 80003b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ba:	fbb1 f8f9 	udiv	r8, r1, r9
 80003be:	0c20      	lsrs	r0, r4, #16
 80003c0:	fa1f fe8c 	uxth.w	lr, ip
 80003c4:	fb09 1118 	mls	r1, r9, r8, r1
 80003c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003cc:	fb08 f00e 	mul.w	r0, r8, lr
 80003d0:	4288      	cmp	r0, r1
 80003d2:	fa02 f206 	lsl.w	r2, r2, r6
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b8>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2bc>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2bc>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4461      	add	r1, ip
 80003f0:	1a09      	subs	r1, r1, r0
 80003f2:	b2a4      	uxth	r4, r4
 80003f4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f8:	fb09 1110 	mls	r1, r9, r0, r1
 80003fc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000400:	fb00 fe0e 	mul.w	lr, r0, lr
 8000404:	458e      	cmp	lr, r1
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1e2>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2b4>
 8000412:	458e      	cmp	lr, r1
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2b4>
 8000416:	3802      	subs	r0, #2
 8000418:	4461      	add	r1, ip
 800041a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041e:	fba0 9402 	umull	r9, r4, r0, r2
 8000422:	eba1 010e 	sub.w	r1, r1, lr
 8000426:	42a1      	cmp	r1, r4
 8000428:	46c8      	mov	r8, r9
 800042a:	46a6      	mov	lr, r4
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x2a4>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x2a0>
 8000430:	b15d      	cbz	r5, 800044a <__udivmoddi4+0x212>
 8000432:	ebb3 0208 	subs.w	r2, r3, r8
 8000436:	eb61 010e 	sbc.w	r1, r1, lr
 800043a:	fa01 f707 	lsl.w	r7, r1, r7
 800043e:	fa22 f306 	lsr.w	r3, r2, r6
 8000442:	40f1      	lsrs	r1, r6
 8000444:	431f      	orrs	r7, r3
 8000446:	e9c5 7100 	strd	r7, r1, [r5]
 800044a:	2600      	movs	r6, #0
 800044c:	4631      	mov	r1, r6
 800044e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000452:	f1c2 0320 	rsb	r3, r2, #32
 8000456:	40d8      	lsrs	r0, r3
 8000458:	fa0c fc02 	lsl.w	ip, ip, r2
 800045c:	fa21 f303 	lsr.w	r3, r1, r3
 8000460:	4091      	lsls	r1, r2
 8000462:	4301      	orrs	r1, r0
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000470:	fb07 3610 	mls	r6, r7, r0, r3
 8000474:	0c0b      	lsrs	r3, r1, #16
 8000476:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800047a:	fb00 f60e 	mul.w	r6, r0, lr
 800047e:	429e      	cmp	r6, r3
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x260>
 8000486:	eb1c 0303 	adds.w	r3, ip, r3
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b8>
 8000490:	429e      	cmp	r6, r3
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b8>
 8000494:	3802      	subs	r0, #2
 8000496:	4463      	add	r3, ip
 8000498:	1b9b      	subs	r3, r3, r6
 800049a:	b289      	uxth	r1, r1
 800049c:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a0:	fb07 3316 	mls	r3, r7, r6, r3
 80004a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x28a>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 80004be:	3e02      	subs	r6, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	1ac9      	subs	r1, r1, r3
 80004c4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0x104>
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e705      	b.n	80002dc <__udivmoddi4+0xa4>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e3      	b.n	800029c <__udivmoddi4+0x64>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6f8      	b.n	80002ca <__udivmoddi4+0x92>
 80004d8:	454b      	cmp	r3, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f8>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f8>
 80004e8:	4646      	mov	r6, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x28a>
 80004ec:	4620      	mov	r0, r4
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1e2>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x260>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b8>
 80004f8:	3b02      	subs	r3, #2
 80004fa:	4461      	add	r1, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x12c>
 80004fe:	4630      	mov	r0, r6
 8000500:	e709      	b.n	8000316 <__udivmoddi4+0xde>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x156>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800050c:	b480      	push	{r7}
 800050e:	b087      	sub	sp, #28
 8000510:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000512:	4b27      	ldr	r3, [pc, #156]	; (80005b0 <MX_GPIO_Init+0xa4>)
 8000514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000516:	4a26      	ldr	r2, [pc, #152]	; (80005b0 <MX_GPIO_Init+0xa4>)
 8000518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800051c:	6313      	str	r3, [r2, #48]	; 0x30
 800051e:	4b24      	ldr	r3, [pc, #144]	; (80005b0 <MX_GPIO_Init+0xa4>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000526:	617b      	str	r3, [r7, #20]
 8000528:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800052a:	4b21      	ldr	r3, [pc, #132]	; (80005b0 <MX_GPIO_Init+0xa4>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052e:	4a20      	ldr	r2, [pc, #128]	; (80005b0 <MX_GPIO_Init+0xa4>)
 8000530:	f043 0301 	orr.w	r3, r3, #1
 8000534:	6313      	str	r3, [r2, #48]	; 0x30
 8000536:	4b1e      	ldr	r3, [pc, #120]	; (80005b0 <MX_GPIO_Init+0xa4>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	f003 0301 	and.w	r3, r3, #1
 800053e:	613b      	str	r3, [r7, #16]
 8000540:	693b      	ldr	r3, [r7, #16]
   __HAL_RCC_GPIOB_CLK_ENABLE();
 8000542:	4b1b      	ldr	r3, [pc, #108]	; (80005b0 <MX_GPIO_Init+0xa4>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	4a1a      	ldr	r2, [pc, #104]	; (80005b0 <MX_GPIO_Init+0xa4>)
 8000548:	f043 0302 	orr.w	r3, r3, #2
 800054c:	6313      	str	r3, [r2, #48]	; 0x30
 800054e:	4b18      	ldr	r3, [pc, #96]	; (80005b0 <MX_GPIO_Init+0xa4>)
 8000550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000552:	f003 0302 	and.w	r3, r3, #2
 8000556:	60fb      	str	r3, [r7, #12]
 8000558:	68fb      	ldr	r3, [r7, #12]
   __HAL_RCC_GPIOD_CLK_ENABLE();
 800055a:	4b15      	ldr	r3, [pc, #84]	; (80005b0 <MX_GPIO_Init+0xa4>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055e:	4a14      	ldr	r2, [pc, #80]	; (80005b0 <MX_GPIO_Init+0xa4>)
 8000560:	f043 0308 	orr.w	r3, r3, #8
 8000564:	6313      	str	r3, [r2, #48]	; 0x30
 8000566:	4b12      	ldr	r3, [pc, #72]	; (80005b0 <MX_GPIO_Init+0xa4>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056a:	f003 0308 	and.w	r3, r3, #8
 800056e:	60bb      	str	r3, [r7, #8]
 8000570:	68bb      	ldr	r3, [r7, #8]
   __HAL_RCC_GPIOE_CLK_ENABLE();
 8000572:	4b0f      	ldr	r3, [pc, #60]	; (80005b0 <MX_GPIO_Init+0xa4>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000576:	4a0e      	ldr	r2, [pc, #56]	; (80005b0 <MX_GPIO_Init+0xa4>)
 8000578:	f043 0310 	orr.w	r3, r3, #16
 800057c:	6313      	str	r3, [r2, #48]	; 0x30
 800057e:	4b0c      	ldr	r3, [pc, #48]	; (80005b0 <MX_GPIO_Init+0xa4>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000582:	f003 0310 	and.w	r3, r3, #16
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	687b      	ldr	r3, [r7, #4]
   __HAL_RCC_GPIOC_CLK_ENABLE();
 800058a:	4b09      	ldr	r3, [pc, #36]	; (80005b0 <MX_GPIO_Init+0xa4>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058e:	4a08      	ldr	r2, [pc, #32]	; (80005b0 <MX_GPIO_Init+0xa4>)
 8000590:	f043 0304 	orr.w	r3, r3, #4
 8000594:	6313      	str	r3, [r2, #48]	; 0x30
 8000596:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <MX_GPIO_Init+0xa4>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059a:	f003 0304 	and.w	r3, r3, #4
 800059e:	603b      	str	r3, [r7, #0]
 80005a0:	683b      	ldr	r3, [r7, #0]


}
 80005a2:	bf00      	nop
 80005a4:	371c      	adds	r7, #28
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	40023800 	.word	0x40023800

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b8:	f000 fafb 	bl	8000bb2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005bc:	f000 f81a 	bl	80005f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c0:	f7ff ffa4 	bl	800050c <MX_GPIO_Init>
  //HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);

//DC_MOTOR_Init(DC_MOTOR6);
//  DC_MOTOR_Init(DC_MOTOR1);
//  DC_MOTOR_Init(DC_MOTOR5);
  DC_MOTOR_Init(0);
 80005c4:	2000      	movs	r0, #0
 80005c6:	f002 f99f 	bl	8002908 <DC_MOTOR_Init>
  DC_MOTOR_Init(1);
 80005ca:	2001      	movs	r0, #1
 80005cc:	f002 f99c 	bl	8002908 <DC_MOTOR_Init>

  DC_MOTOR_Init(2);
 80005d0:	2002      	movs	r0, #2
 80005d2:	f002 f999 	bl	8002908 <DC_MOTOR_Init>
  DC_MOTOR_Init(3);
 80005d6:	2003      	movs	r0, #3
 80005d8:	f002 f996 	bl	8002908 <DC_MOTOR_Init>
  DC_MOTOR_Init(4);
 80005dc:	2004      	movs	r0, #4
 80005de:	f002 f993 	bl	8002908 <DC_MOTOR_Init>
  DC_MOTOR_Init(5);
 80005e2:	2005      	movs	r0, #5
 80005e4:	f002 f990 	bl	8002908 <DC_MOTOR_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	DC_MOTOR_Start(0, 0, 40);
 80005e8:	2228      	movs	r2, #40	; 0x28
 80005ea:	2100      	movs	r1, #0
 80005ec:	2000      	movs	r0, #0
 80005ee:	f002 fac7 	bl	8002b80 <DC_MOTOR_Start>
 80005f2:	e7f9      	b.n	80005e8 <main+0x34>

080005f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b094      	sub	sp, #80	; 0x50
 80005f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fa:	f107 0320 	add.w	r3, r7, #32
 80005fe:	2230      	movs	r2, #48	; 0x30
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f002 fb9c 	bl	8002d40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000608:	f107 030c 	add.w	r3, r7, #12
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]
 8000616:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000618:	4b2a      	ldr	r3, [pc, #168]	; (80006c4 <SystemClock_Config+0xd0>)
 800061a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061c:	4a29      	ldr	r2, [pc, #164]	; (80006c4 <SystemClock_Config+0xd0>)
 800061e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000622:	6413      	str	r3, [r2, #64]	; 0x40
 8000624:	4b27      	ldr	r3, [pc, #156]	; (80006c4 <SystemClock_Config+0xd0>)
 8000626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800062c:	60bb      	str	r3, [r7, #8]
 800062e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000630:	4b25      	ldr	r3, [pc, #148]	; (80006c8 <SystemClock_Config+0xd4>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a24      	ldr	r2, [pc, #144]	; (80006c8 <SystemClock_Config+0xd4>)
 8000636:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800063a:	6013      	str	r3, [r2, #0]
 800063c:	4b22      	ldr	r3, [pc, #136]	; (80006c8 <SystemClock_Config+0xd4>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000648:	2301      	movs	r3, #1
 800064a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800064c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000650:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000652:	2302      	movs	r3, #2
 8000654:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000656:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800065a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800065c:	2304      	movs	r3, #4
 800065e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000660:	23d8      	movs	r3, #216	; 0xd8
 8000662:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000664:	2302      	movs	r3, #2
 8000666:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000668:	2303      	movs	r3, #3
 800066a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066c:	f107 0320 	add.w	r3, r7, #32
 8000670:	4618      	mov	r0, r3
 8000672:	f000 fdf7 	bl	8001264 <HAL_RCC_OscConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800067c:	f000 f826 	bl	80006cc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000680:	f000 fda0 	bl	80011c4 <HAL_PWREx_EnableOverDrive>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800068a:	f000 f81f 	bl	80006cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068e:	230f      	movs	r3, #15
 8000690:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000692:	2302      	movs	r3, #2
 8000694:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000696:	2300      	movs	r3, #0
 8000698:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800069a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800069e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80006a6:	f107 030c 	add.w	r3, r7, #12
 80006aa:	2107      	movs	r1, #7
 80006ac:	4618      	mov	r0, r3
 80006ae:	f001 f87d 	bl	80017ac <HAL_RCC_ClockConfig>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80006b8:	f000 f808 	bl	80006cc <Error_Handler>
  }
}
 80006bc:	bf00      	nop
 80006be:	3750      	adds	r7, #80	; 0x50
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	40023800 	.word	0x40023800
 80006c8:	40007000 	.word	0x40007000

080006cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006d0:	b672      	cpsid	i
}
 80006d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006d4:	e7fe      	b.n	80006d4 <Error_Handler+0x8>
	...

080006d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80006de:	4b0f      	ldr	r3, [pc, #60]	; (800071c <HAL_MspInit+0x44>)
 80006e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e2:	4a0e      	ldr	r2, [pc, #56]	; (800071c <HAL_MspInit+0x44>)
 80006e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e8:	6413      	str	r3, [r2, #64]	; 0x40
 80006ea:	4b0c      	ldr	r3, [pc, #48]	; (800071c <HAL_MspInit+0x44>)
 80006ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006f6:	4b09      	ldr	r3, [pc, #36]	; (800071c <HAL_MspInit+0x44>)
 80006f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006fa:	4a08      	ldr	r2, [pc, #32]	; (800071c <HAL_MspInit+0x44>)
 80006fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000700:	6453      	str	r3, [r2, #68]	; 0x44
 8000702:	4b06      	ldr	r3, [pc, #24]	; (800071c <HAL_MspInit+0x44>)
 8000704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000706:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800070a:	603b      	str	r3, [r7, #0]
 800070c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800070e:	bf00      	nop
 8000710:	370c      	adds	r7, #12
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	40023800 	.word	0x40023800

08000720 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000724:	e7fe      	b.n	8000724 <NMI_Handler+0x4>

08000726 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000726:	b480      	push	{r7}
 8000728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800072a:	e7fe      	b.n	800072a <HardFault_Handler+0x4>

0800072c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000730:	e7fe      	b.n	8000730 <MemManage_Handler+0x4>

08000732 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000732:	b480      	push	{r7}
 8000734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000736:	e7fe      	b.n	8000736 <BusFault_Handler+0x4>

08000738 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800073c:	e7fe      	b.n	800073c <UsageFault_Handler+0x4>

0800073e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800073e:	b480      	push	{r7}
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000742:	bf00      	nop
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr

0800074c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000750:	bf00      	nop
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr

0800075a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800075a:	b480      	push	{r7}
 800075c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800075e:	bf00      	nop
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr

08000768 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800076c:	f000 fa5e 	bl	8000c2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}

08000774 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000778:	4b06      	ldr	r3, [pc, #24]	; (8000794 <SystemInit+0x20>)
 800077a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800077e:	4a05      	ldr	r2, [pc, #20]	; (8000794 <SystemInit+0x20>)
 8000780:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000784:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000788:	bf00      	nop
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	e000ed00 	.word	0xe000ed00

08000798 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b08e      	sub	sp, #56	; 0x38
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800079e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
 80007aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ac:	f107 031c 	add.w	r3, r7, #28
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007b8:	463b      	mov	r3, r7
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]
 80007c4:	611a      	str	r2, [r3, #16]
 80007c6:	615a      	str	r2, [r3, #20]
 80007c8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007ca:	4b3d      	ldr	r3, [pc, #244]	; (80008c0 <MX_TIM2_Init+0x128>)
 80007cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007d0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 54;
 80007d2:	4b3b      	ldr	r3, [pc, #236]	; (80008c0 <MX_TIM2_Init+0x128>)
 80007d4:	2236      	movs	r2, #54	; 0x36
 80007d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d8:	4b39      	ldr	r3, [pc, #228]	; (80008c0 <MX_TIM2_Init+0x128>)
 80007da:	2200      	movs	r2, #0
 80007dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 80007de:	4b38      	ldr	r3, [pc, #224]	; (80008c0 <MX_TIM2_Init+0x128>)
 80007e0:	2264      	movs	r2, #100	; 0x64
 80007e2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007e4:	4b36      	ldr	r3, [pc, #216]	; (80008c0 <MX_TIM2_Init+0x128>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ea:	4b35      	ldr	r3, [pc, #212]	; (80008c0 <MX_TIM2_Init+0x128>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007f0:	4833      	ldr	r0, [pc, #204]	; (80008c0 <MX_TIM2_Init+0x128>)
 80007f2:	f001 f9cd 	bl	8001b90 <HAL_TIM_Base_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80007fc:	f7ff ff66 	bl	80006cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000800:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000804:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000806:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800080a:	4619      	mov	r1, r3
 800080c:	482c      	ldr	r0, [pc, #176]	; (80008c0 <MX_TIM2_Init+0x128>)
 800080e:	f001 fb8b 	bl	8001f28 <HAL_TIM_ConfigClockSource>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000818:	f7ff ff58 	bl	80006cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800081c:	4828      	ldr	r0, [pc, #160]	; (80008c0 <MX_TIM2_Init+0x128>)
 800081e:	f001 fa0e 	bl	8001c3e <HAL_TIM_PWM_Init>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000828:	f7ff ff50 	bl	80006cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800082c:	2300      	movs	r3, #0
 800082e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000830:	2300      	movs	r3, #0
 8000832:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000834:	f107 031c 	add.w	r3, r7, #28
 8000838:	4619      	mov	r1, r3
 800083a:	4821      	ldr	r0, [pc, #132]	; (80008c0 <MX_TIM2_Init+0x128>)
 800083c:	f001 ffd6 	bl	80027ec <HAL_TIMEx_MasterConfigSynchronization>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000846:	f7ff ff41 	bl	80006cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800084a:	2360      	movs	r3, #96	; 0x60
 800084c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800084e:	2300      	movs	r3, #0
 8000850:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000852:	2300      	movs	r3, #0
 8000854:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000856:	2300      	movs	r3, #0
 8000858:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800085a:	463b      	mov	r3, r7
 800085c:	2200      	movs	r2, #0
 800085e:	4619      	mov	r1, r3
 8000860:	4817      	ldr	r0, [pc, #92]	; (80008c0 <MX_TIM2_Init+0x128>)
 8000862:	f001 fa4d 	bl	8001d00 <HAL_TIM_PWM_ConfigChannel>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800086c:	f7ff ff2e 	bl	80006cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000870:	463b      	mov	r3, r7
 8000872:	2204      	movs	r2, #4
 8000874:	4619      	mov	r1, r3
 8000876:	4812      	ldr	r0, [pc, #72]	; (80008c0 <MX_TIM2_Init+0x128>)
 8000878:	f001 fa42 	bl	8001d00 <HAL_TIM_PWM_ConfigChannel>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000882:	f7ff ff23 	bl	80006cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000886:	463b      	mov	r3, r7
 8000888:	2208      	movs	r2, #8
 800088a:	4619      	mov	r1, r3
 800088c:	480c      	ldr	r0, [pc, #48]	; (80008c0 <MX_TIM2_Init+0x128>)
 800088e:	f001 fa37 	bl	8001d00 <HAL_TIM_PWM_ConfigChannel>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8000898:	f7ff ff18 	bl	80006cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800089c:	463b      	mov	r3, r7
 800089e:	220c      	movs	r2, #12
 80008a0:	4619      	mov	r1, r3
 80008a2:	4807      	ldr	r0, [pc, #28]	; (80008c0 <MX_TIM2_Init+0x128>)
 80008a4:	f001 fa2c 	bl	8001d00 <HAL_TIM_PWM_ConfigChannel>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 80008ae:	f7ff ff0d 	bl	80006cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80008b2:	4803      	ldr	r0, [pc, #12]	; (80008c0 <MX_TIM2_Init+0x128>)
 80008b4:	f000 f8d0 	bl	8000a58 <HAL_TIM_MspPostInit>

}
 80008b8:	bf00      	nop
 80008ba:	3738      	adds	r7, #56	; 0x38
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	20000028 	.word	0x20000028

080008c4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b08e      	sub	sp, #56	; 0x38
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]
 80008d4:	609a      	str	r2, [r3, #8]
 80008d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008d8:	f107 031c 	add.w	r3, r7, #28
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
 80008e2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008e4:	463b      	mov	r3, r7
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]
 80008ec:	609a      	str	r2, [r3, #8]
 80008ee:	60da      	str	r2, [r3, #12]
 80008f0:	611a      	str	r2, [r3, #16]
 80008f2:	615a      	str	r2, [r3, #20]
 80008f4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008f6:	4b3d      	ldr	r3, [pc, #244]	; (80009ec <MX_TIM3_Init+0x128>)
 80008f8:	4a3d      	ldr	r2, [pc, #244]	; (80009f0 <MX_TIM3_Init+0x12c>)
 80008fa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 53;
 80008fc:	4b3b      	ldr	r3, [pc, #236]	; (80009ec <MX_TIM3_Init+0x128>)
 80008fe:	2235      	movs	r2, #53	; 0x35
 8000900:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000902:	4b3a      	ldr	r3, [pc, #232]	; (80009ec <MX_TIM3_Init+0x128>)
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8000908:	4b38      	ldr	r3, [pc, #224]	; (80009ec <MX_TIM3_Init+0x128>)
 800090a:	2264      	movs	r2, #100	; 0x64
 800090c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800090e:	4b37      	ldr	r3, [pc, #220]	; (80009ec <MX_TIM3_Init+0x128>)
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000914:	4b35      	ldr	r3, [pc, #212]	; (80009ec <MX_TIM3_Init+0x128>)
 8000916:	2200      	movs	r2, #0
 8000918:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800091a:	4834      	ldr	r0, [pc, #208]	; (80009ec <MX_TIM3_Init+0x128>)
 800091c:	f001 f938 	bl	8001b90 <HAL_TIM_Base_Init>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000926:	f7ff fed1 	bl	80006cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800092a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800092e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000930:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000934:	4619      	mov	r1, r3
 8000936:	482d      	ldr	r0, [pc, #180]	; (80009ec <MX_TIM3_Init+0x128>)
 8000938:	f001 faf6 	bl	8001f28 <HAL_TIM_ConfigClockSource>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000942:	f7ff fec3 	bl	80006cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000946:	4829      	ldr	r0, [pc, #164]	; (80009ec <MX_TIM3_Init+0x128>)
 8000948:	f001 f979 	bl	8001c3e <HAL_TIM_PWM_Init>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000952:	f7ff febb 	bl	80006cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000956:	2300      	movs	r3, #0
 8000958:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800095a:	2300      	movs	r3, #0
 800095c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800095e:	f107 031c 	add.w	r3, r7, #28
 8000962:	4619      	mov	r1, r3
 8000964:	4821      	ldr	r0, [pc, #132]	; (80009ec <MX_TIM3_Init+0x128>)
 8000966:	f001 ff41 	bl	80027ec <HAL_TIMEx_MasterConfigSynchronization>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000970:	f7ff feac 	bl	80006cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000974:	2360      	movs	r3, #96	; 0x60
 8000976:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000978:	2300      	movs	r3, #0
 800097a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800097c:	2300      	movs	r3, #0
 800097e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000980:	2300      	movs	r3, #0
 8000982:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000984:	463b      	mov	r3, r7
 8000986:	2200      	movs	r2, #0
 8000988:	4619      	mov	r1, r3
 800098a:	4818      	ldr	r0, [pc, #96]	; (80009ec <MX_TIM3_Init+0x128>)
 800098c:	f001 f9b8 	bl	8001d00 <HAL_TIM_PWM_ConfigChannel>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000996:	f7ff fe99 	bl	80006cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800099a:	463b      	mov	r3, r7
 800099c:	2204      	movs	r2, #4
 800099e:	4619      	mov	r1, r3
 80009a0:	4812      	ldr	r0, [pc, #72]	; (80009ec <MX_TIM3_Init+0x128>)
 80009a2:	f001 f9ad 	bl	8001d00 <HAL_TIM_PWM_ConfigChannel>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80009ac:	f7ff fe8e 	bl	80006cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80009b0:	463b      	mov	r3, r7
 80009b2:	2208      	movs	r2, #8
 80009b4:	4619      	mov	r1, r3
 80009b6:	480d      	ldr	r0, [pc, #52]	; (80009ec <MX_TIM3_Init+0x128>)
 80009b8:	f001 f9a2 	bl	8001d00 <HAL_TIM_PWM_ConfigChannel>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 80009c2:	f7ff fe83 	bl	80006cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80009c6:	463b      	mov	r3, r7
 80009c8:	220c      	movs	r2, #12
 80009ca:	4619      	mov	r1, r3
 80009cc:	4807      	ldr	r0, [pc, #28]	; (80009ec <MX_TIM3_Init+0x128>)
 80009ce:	f001 f997 	bl	8001d00 <HAL_TIM_PWM_ConfigChannel>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 80009d8:	f7ff fe78 	bl	80006cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80009dc:	4803      	ldr	r0, [pc, #12]	; (80009ec <MX_TIM3_Init+0x128>)
 80009de:	f000 f83b 	bl	8000a58 <HAL_TIM_MspPostInit>

}
 80009e2:	bf00      	nop
 80009e4:	3738      	adds	r7, #56	; 0x38
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	20000074 	.word	0x20000074
 80009f0:	40000400 	.word	0x40000400

080009f4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b085      	sub	sp, #20
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a04:	d10c      	bne.n	8000a20 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a06:	4b12      	ldr	r3, [pc, #72]	; (8000a50 <HAL_TIM_Base_MspInit+0x5c>)
 8000a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0a:	4a11      	ldr	r2, [pc, #68]	; (8000a50 <HAL_TIM_Base_MspInit+0x5c>)
 8000a0c:	f043 0301 	orr.w	r3, r3, #1
 8000a10:	6413      	str	r3, [r2, #64]	; 0x40
 8000a12:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <HAL_TIM_Base_MspInit+0x5c>)
 8000a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a16:	f003 0301 	and.w	r3, r3, #1
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000a1e:	e010      	b.n	8000a42 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM3)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a0b      	ldr	r2, [pc, #44]	; (8000a54 <HAL_TIM_Base_MspInit+0x60>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d10b      	bne.n	8000a42 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a2a:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <HAL_TIM_Base_MspInit+0x5c>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2e:	4a08      	ldr	r2, [pc, #32]	; (8000a50 <HAL_TIM_Base_MspInit+0x5c>)
 8000a30:	f043 0302 	orr.w	r3, r3, #2
 8000a34:	6413      	str	r3, [r2, #64]	; 0x40
 8000a36:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <HAL_TIM_Base_MspInit+0x5c>)
 8000a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3a:	f003 0302 	and.w	r3, r3, #2
 8000a3e:	60bb      	str	r3, [r7, #8]
 8000a40:	68bb      	ldr	r3, [r7, #8]
}
 8000a42:	bf00      	nop
 8000a44:	3714      	adds	r7, #20
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	40023800 	.word	0x40023800
 8000a54:	40000400 	.word	0x40000400

08000a58 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b08c      	sub	sp, #48	; 0x30
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a60:	f107 031c 	add.w	r3, r7, #28
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a78:	d139      	bne.n	8000aee <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7a:	4b35      	ldr	r3, [pc, #212]	; (8000b50 <HAL_TIM_MspPostInit+0xf8>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a34      	ldr	r2, [pc, #208]	; (8000b50 <HAL_TIM_MspPostInit+0xf8>)
 8000a80:	f043 0301 	orr.w	r3, r3, #1
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b32      	ldr	r3, [pc, #200]	; (8000b50 <HAL_TIM_MspPostInit+0xf8>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	61bb      	str	r3, [r7, #24]
 8000a90:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a92:	4b2f      	ldr	r3, [pc, #188]	; (8000b50 <HAL_TIM_MspPostInit+0xf8>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	4a2e      	ldr	r2, [pc, #184]	; (8000b50 <HAL_TIM_MspPostInit+0xf8>)
 8000a98:	f043 0302 	orr.w	r3, r3, #2
 8000a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9e:	4b2c      	ldr	r3, [pc, #176]	; (8000b50 <HAL_TIM_MspPostInit+0xf8>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	f003 0302 	and.w	r3, r3, #2
 8000aa6:	617b      	str	r3, [r7, #20]
 8000aa8:	697b      	ldr	r3, [r7, #20]
    PA0/WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000aba:	2301      	movs	r3, #1
 8000abc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000abe:	f107 031c 	add.w	r3, r7, #28
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4823      	ldr	r0, [pc, #140]	; (8000b54 <HAL_TIM_MspPostInit+0xfc>)
 8000ac6:	f000 f9b7 	bl	8000e38 <HAL_GPIO_Init>

        GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_10|GPIO_PIN_11;
 8000aca:	f640 4308 	movw	r3, #3080	; 0xc08
 8000ace:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	627b      	str	r3, [r7, #36]	; 0x24
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	62bb      	str	r3, [r7, #40]	; 0x28
        GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000adc:	2301      	movs	r3, #1
 8000ade:	62fb      	str	r3, [r7, #44]	; 0x2c
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae0:	f107 031c 	add.w	r3, r7, #28
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	481c      	ldr	r0, [pc, #112]	; (8000b58 <HAL_TIM_MspPostInit+0x100>)
 8000ae8:	f000 f9a6 	bl	8000e38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000aec:	e02c      	b.n	8000b48 <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM3)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4a1a      	ldr	r2, [pc, #104]	; (8000b5c <HAL_TIM_MspPostInit+0x104>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d127      	bne.n	8000b48 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af8:	4b15      	ldr	r3, [pc, #84]	; (8000b50 <HAL_TIM_MspPostInit+0xf8>)
 8000afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afc:	4a14      	ldr	r2, [pc, #80]	; (8000b50 <HAL_TIM_MspPostInit+0xf8>)
 8000afe:	f043 0301 	orr.w	r3, r3, #1
 8000b02:	6313      	str	r3, [r2, #48]	; 0x30
 8000b04:	4b12      	ldr	r3, [pc, #72]	; (8000b50 <HAL_TIM_MspPostInit+0xf8>)
 8000b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b08:	f003 0301 	and.w	r3, r3, #1
 8000b0c:	613b      	str	r3, [r7, #16]
 8000b0e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b10:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <HAL_TIM_MspPostInit+0xf8>)
 8000b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b14:	4a0e      	ldr	r2, [pc, #56]	; (8000b50 <HAL_TIM_MspPostInit+0xf8>)
 8000b16:	f043 0302 	orr.w	r3, r3, #2
 8000b1a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <HAL_TIM_MspPostInit+0xf8>)
 8000b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b20:	f003 0302 	and.w	r3, r3, #2
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b28:	23c0      	movs	r3, #192	; 0xc0
 8000b2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b34:	2300      	movs	r3, #0
 8000b36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3c:	f107 031c 	add.w	r3, r7, #28
 8000b40:	4619      	mov	r1, r3
 8000b42:	4804      	ldr	r0, [pc, #16]	; (8000b54 <HAL_TIM_MspPostInit+0xfc>)
 8000b44:	f000 f978 	bl	8000e38 <HAL_GPIO_Init>
}
 8000b48:	bf00      	nop
 8000b4a:	3730      	adds	r7, #48	; 0x30
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40023800 	.word	0x40023800
 8000b54:	40020000 	.word	0x40020000
 8000b58:	40020400 	.word	0x40020400
 8000b5c:	40000400 	.word	0x40000400

08000b60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b98 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b64:	480d      	ldr	r0, [pc, #52]	; (8000b9c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b66:	490e      	ldr	r1, [pc, #56]	; (8000ba0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b68:	4a0e      	ldr	r2, [pc, #56]	; (8000ba4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b6c:	e002      	b.n	8000b74 <LoopCopyDataInit>

08000b6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b72:	3304      	adds	r3, #4

08000b74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b78:	d3f9      	bcc.n	8000b6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b7a:	4a0b      	ldr	r2, [pc, #44]	; (8000ba8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b7c:	4c0b      	ldr	r4, [pc, #44]	; (8000bac <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b80:	e001      	b.n	8000b86 <LoopFillZerobss>

08000b82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b84:	3204      	adds	r2, #4

08000b86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b88:	d3fb      	bcc.n	8000b82 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b8a:	f7ff fdf3 	bl	8000774 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b8e:	f002 f8b3 	bl	8002cf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b92:	f7ff fd0f 	bl	80005b4 <main>
  bx  lr    
 8000b96:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b98:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000b9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ba0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ba4:	08002e00 	.word	0x08002e00
  ldr r2, =_sbss
 8000ba8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bac:	200000c4 	.word	0x200000c4

08000bb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bb0:	e7fe      	b.n	8000bb0 <ADC_IRQHandler>

08000bb2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bb6:	2003      	movs	r0, #3
 8000bb8:	f000 f90a 	bl	8000dd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	f000 f805 	bl	8000bcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bc2:	f7ff fd89 	bl	80006d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bc6:	2300      	movs	r3, #0
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bd4:	4b12      	ldr	r3, [pc, #72]	; (8000c20 <HAL_InitTick+0x54>)
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	4b12      	ldr	r3, [pc, #72]	; (8000c24 <HAL_InitTick+0x58>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	4619      	mov	r1, r3
 8000bde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000be2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bea:	4618      	mov	r0, r3
 8000bec:	f000 f917 	bl	8000e1e <HAL_SYSTICK_Config>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e00e      	b.n	8000c18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	2b0f      	cmp	r3, #15
 8000bfe:	d80a      	bhi.n	8000c16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c00:	2200      	movs	r2, #0
 8000c02:	6879      	ldr	r1, [r7, #4]
 8000c04:	f04f 30ff 	mov.w	r0, #4294967295
 8000c08:	f000 f8ed 	bl	8000de6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c0c:	4a06      	ldr	r2, [pc, #24]	; (8000c28 <HAL_InitTick+0x5c>)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c12:	2300      	movs	r3, #0
 8000c14:	e000      	b.n	8000c18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3708      	adds	r7, #8
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	20000000 	.word	0x20000000
 8000c24:	20000008 	.word	0x20000008
 8000c28:	20000004 	.word	0x20000004

08000c2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c30:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <HAL_IncTick+0x20>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	461a      	mov	r2, r3
 8000c36:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <HAL_IncTick+0x24>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	4a04      	ldr	r2, [pc, #16]	; (8000c50 <HAL_IncTick+0x24>)
 8000c3e:	6013      	str	r3, [r2, #0]
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	20000008 	.word	0x20000008
 8000c50:	200000c0 	.word	0x200000c0

08000c54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  return uwTick;
 8000c58:	4b03      	ldr	r3, [pc, #12]	; (8000c68 <HAL_GetTick+0x14>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	200000c0 	.word	0x200000c0

08000c6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	f003 0307 	and.w	r3, r3, #7
 8000c7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c7c:	4b0b      	ldr	r3, [pc, #44]	; (8000cac <__NVIC_SetPriorityGrouping+0x40>)
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c82:	68ba      	ldr	r2, [r7, #8]
 8000c84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c88:	4013      	ands	r3, r2
 8000c8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000c94:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c96:	4313      	orrs	r3, r2
 8000c98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c9a:	4a04      	ldr	r2, [pc, #16]	; (8000cac <__NVIC_SetPriorityGrouping+0x40>)
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	60d3      	str	r3, [r2, #12]
}
 8000ca0:	bf00      	nop
 8000ca2:	3714      	adds	r7, #20
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr
 8000cac:	e000ed00 	.word	0xe000ed00
 8000cb0:	05fa0000 	.word	0x05fa0000

08000cb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cb8:	4b04      	ldr	r3, [pc, #16]	; (8000ccc <__NVIC_GetPriorityGrouping+0x18>)
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	0a1b      	lsrs	r3, r3, #8
 8000cbe:	f003 0307 	and.w	r3, r3, #7
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	6039      	str	r1, [r7, #0]
 8000cda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	db0a      	blt.n	8000cfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	b2da      	uxtb	r2, r3
 8000ce8:	490c      	ldr	r1, [pc, #48]	; (8000d1c <__NVIC_SetPriority+0x4c>)
 8000cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cee:	0112      	lsls	r2, r2, #4
 8000cf0:	b2d2      	uxtb	r2, r2
 8000cf2:	440b      	add	r3, r1
 8000cf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cf8:	e00a      	b.n	8000d10 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	4908      	ldr	r1, [pc, #32]	; (8000d20 <__NVIC_SetPriority+0x50>)
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	f003 030f 	and.w	r3, r3, #15
 8000d06:	3b04      	subs	r3, #4
 8000d08:	0112      	lsls	r2, r2, #4
 8000d0a:	b2d2      	uxtb	r2, r2
 8000d0c:	440b      	add	r3, r1
 8000d0e:	761a      	strb	r2, [r3, #24]
}
 8000d10:	bf00      	nop
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	e000e100 	.word	0xe000e100
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b089      	sub	sp, #36	; 0x24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	f003 0307 	and.w	r3, r3, #7
 8000d36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	f1c3 0307 	rsb	r3, r3, #7
 8000d3e:	2b04      	cmp	r3, #4
 8000d40:	bf28      	it	cs
 8000d42:	2304      	movcs	r3, #4
 8000d44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	3304      	adds	r3, #4
 8000d4a:	2b06      	cmp	r3, #6
 8000d4c:	d902      	bls.n	8000d54 <NVIC_EncodePriority+0x30>
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	3b03      	subs	r3, #3
 8000d52:	e000      	b.n	8000d56 <NVIC_EncodePriority+0x32>
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d58:	f04f 32ff 	mov.w	r2, #4294967295
 8000d5c:	69bb      	ldr	r3, [r7, #24]
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	43da      	mvns	r2, r3
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	401a      	ands	r2, r3
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	fa01 f303 	lsl.w	r3, r1, r3
 8000d76:	43d9      	mvns	r1, r3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d7c:	4313      	orrs	r3, r2
         );
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3724      	adds	r7, #36	; 0x24
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
	...

08000d8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	3b01      	subs	r3, #1
 8000d98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d9c:	d301      	bcc.n	8000da2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e00f      	b.n	8000dc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000da2:	4a0a      	ldr	r2, [pc, #40]	; (8000dcc <SysTick_Config+0x40>)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	3b01      	subs	r3, #1
 8000da8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000daa:	210f      	movs	r1, #15
 8000dac:	f04f 30ff 	mov.w	r0, #4294967295
 8000db0:	f7ff ff8e 	bl	8000cd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000db4:	4b05      	ldr	r3, [pc, #20]	; (8000dcc <SysTick_Config+0x40>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dba:	4b04      	ldr	r3, [pc, #16]	; (8000dcc <SysTick_Config+0x40>)
 8000dbc:	2207      	movs	r2, #7
 8000dbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dc0:	2300      	movs	r3, #0
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	e000e010 	.word	0xe000e010

08000dd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dd8:	6878      	ldr	r0, [r7, #4]
 8000dda:	f7ff ff47 	bl	8000c6c <__NVIC_SetPriorityGrouping>
}
 8000dde:	bf00      	nop
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b086      	sub	sp, #24
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	4603      	mov	r3, r0
 8000dee:	60b9      	str	r1, [r7, #8]
 8000df0:	607a      	str	r2, [r7, #4]
 8000df2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000df4:	2300      	movs	r3, #0
 8000df6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000df8:	f7ff ff5c 	bl	8000cb4 <__NVIC_GetPriorityGrouping>
 8000dfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dfe:	687a      	ldr	r2, [r7, #4]
 8000e00:	68b9      	ldr	r1, [r7, #8]
 8000e02:	6978      	ldr	r0, [r7, #20]
 8000e04:	f7ff ff8e 	bl	8000d24 <NVIC_EncodePriority>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e0e:	4611      	mov	r1, r2
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff ff5d 	bl	8000cd0 <__NVIC_SetPriority>
}
 8000e16:	bf00      	nop
 8000e18:	3718      	adds	r7, #24
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	b082      	sub	sp, #8
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e26:	6878      	ldr	r0, [r7, #4]
 8000e28:	f7ff ffb0 	bl	8000d8c <SysTick_Config>
 8000e2c:	4603      	mov	r3, r0
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
	...

08000e38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b089      	sub	sp, #36	; 0x24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000e42:	2300      	movs	r3, #0
 8000e44:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000e46:	2300      	movs	r3, #0
 8000e48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000e52:	2300      	movs	r3, #0
 8000e54:	61fb      	str	r3, [r7, #28]
 8000e56:	e175      	b.n	8001144 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000e58:	2201      	movs	r2, #1
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	697a      	ldr	r2, [r7, #20]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	f040 8164 	bne.w	800113e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f003 0303 	and.w	r3, r3, #3
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d005      	beq.n	8000e8e <HAL_GPIO_Init+0x56>
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f003 0303 	and.w	r3, r3, #3
 8000e8a:	2b02      	cmp	r3, #2
 8000e8c:	d130      	bne.n	8000ef0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	689b      	ldr	r3, [r3, #8]
 8000e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	2203      	movs	r2, #3
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	43db      	mvns	r3, r3
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	68da      	ldr	r2, [r3, #12]
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	69ba      	ldr	r2, [r7, #24]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	091b      	lsrs	r3, r3, #4
 8000eda:	f003 0201 	and.w	r2, r3, #1
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f003 0303 	and.w	r3, r3, #3
 8000ef8:	2b03      	cmp	r3, #3
 8000efa:	d017      	beq.n	8000f2c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	2203      	movs	r2, #3
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	4013      	ands	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	689a      	ldr	r2, [r3, #8]
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f003 0303 	and.w	r3, r3, #3
 8000f34:	2b02      	cmp	r3, #2
 8000f36:	d123      	bne.n	8000f80 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	08da      	lsrs	r2, r3, #3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	3208      	adds	r2, #8
 8000f40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	f003 0307 	and.w	r3, r3, #7
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	220f      	movs	r2, #15
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	43db      	mvns	r3, r3
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	691a      	ldr	r2, [r3, #16]
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	f003 0307 	and.w	r3, r3, #7
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	08da      	lsrs	r2, r3, #3
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	3208      	adds	r2, #8
 8000f7a:	69b9      	ldr	r1, [r7, #24]
 8000f7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	2203      	movs	r2, #3
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	43db      	mvns	r3, r3
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	4013      	ands	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f003 0203 	and.w	r2, r3, #3
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	f000 80be 	beq.w	800113e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fc2:	4b66      	ldr	r3, [pc, #408]	; (800115c <HAL_GPIO_Init+0x324>)
 8000fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc6:	4a65      	ldr	r2, [pc, #404]	; (800115c <HAL_GPIO_Init+0x324>)
 8000fc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fcc:	6453      	str	r3, [r2, #68]	; 0x44
 8000fce:	4b63      	ldr	r3, [pc, #396]	; (800115c <HAL_GPIO_Init+0x324>)
 8000fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000fda:	4a61      	ldr	r2, [pc, #388]	; (8001160 <HAL_GPIO_Init+0x328>)
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	089b      	lsrs	r3, r3, #2
 8000fe0:	3302      	adds	r3, #2
 8000fe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	f003 0303 	and.w	r3, r3, #3
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	220f      	movs	r2, #15
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	43db      	mvns	r3, r3
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a58      	ldr	r2, [pc, #352]	; (8001164 <HAL_GPIO_Init+0x32c>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d037      	beq.n	8001076 <HAL_GPIO_Init+0x23e>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a57      	ldr	r2, [pc, #348]	; (8001168 <HAL_GPIO_Init+0x330>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d031      	beq.n	8001072 <HAL_GPIO_Init+0x23a>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a56      	ldr	r2, [pc, #344]	; (800116c <HAL_GPIO_Init+0x334>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d02b      	beq.n	800106e <HAL_GPIO_Init+0x236>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a55      	ldr	r2, [pc, #340]	; (8001170 <HAL_GPIO_Init+0x338>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d025      	beq.n	800106a <HAL_GPIO_Init+0x232>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a54      	ldr	r2, [pc, #336]	; (8001174 <HAL_GPIO_Init+0x33c>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d01f      	beq.n	8001066 <HAL_GPIO_Init+0x22e>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a53      	ldr	r2, [pc, #332]	; (8001178 <HAL_GPIO_Init+0x340>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d019      	beq.n	8001062 <HAL_GPIO_Init+0x22a>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a52      	ldr	r2, [pc, #328]	; (800117c <HAL_GPIO_Init+0x344>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d013      	beq.n	800105e <HAL_GPIO_Init+0x226>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a51      	ldr	r2, [pc, #324]	; (8001180 <HAL_GPIO_Init+0x348>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d00d      	beq.n	800105a <HAL_GPIO_Init+0x222>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a50      	ldr	r2, [pc, #320]	; (8001184 <HAL_GPIO_Init+0x34c>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d007      	beq.n	8001056 <HAL_GPIO_Init+0x21e>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a4f      	ldr	r2, [pc, #316]	; (8001188 <HAL_GPIO_Init+0x350>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d101      	bne.n	8001052 <HAL_GPIO_Init+0x21a>
 800104e:	2309      	movs	r3, #9
 8001050:	e012      	b.n	8001078 <HAL_GPIO_Init+0x240>
 8001052:	230a      	movs	r3, #10
 8001054:	e010      	b.n	8001078 <HAL_GPIO_Init+0x240>
 8001056:	2308      	movs	r3, #8
 8001058:	e00e      	b.n	8001078 <HAL_GPIO_Init+0x240>
 800105a:	2307      	movs	r3, #7
 800105c:	e00c      	b.n	8001078 <HAL_GPIO_Init+0x240>
 800105e:	2306      	movs	r3, #6
 8001060:	e00a      	b.n	8001078 <HAL_GPIO_Init+0x240>
 8001062:	2305      	movs	r3, #5
 8001064:	e008      	b.n	8001078 <HAL_GPIO_Init+0x240>
 8001066:	2304      	movs	r3, #4
 8001068:	e006      	b.n	8001078 <HAL_GPIO_Init+0x240>
 800106a:	2303      	movs	r3, #3
 800106c:	e004      	b.n	8001078 <HAL_GPIO_Init+0x240>
 800106e:	2302      	movs	r3, #2
 8001070:	e002      	b.n	8001078 <HAL_GPIO_Init+0x240>
 8001072:	2301      	movs	r3, #1
 8001074:	e000      	b.n	8001078 <HAL_GPIO_Init+0x240>
 8001076:	2300      	movs	r3, #0
 8001078:	69fa      	ldr	r2, [r7, #28]
 800107a:	f002 0203 	and.w	r2, r2, #3
 800107e:	0092      	lsls	r2, r2, #2
 8001080:	4093      	lsls	r3, r2
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	4313      	orrs	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001088:	4935      	ldr	r1, [pc, #212]	; (8001160 <HAL_GPIO_Init+0x328>)
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	089b      	lsrs	r3, r3, #2
 800108e:	3302      	adds	r3, #2
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001096:	4b3d      	ldr	r3, [pc, #244]	; (800118c <HAL_GPIO_Init+0x354>)
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	43db      	mvns	r3, r3
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4013      	ands	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d003      	beq.n	80010ba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010ba:	4a34      	ldr	r2, [pc, #208]	; (800118c <HAL_GPIO_Init+0x354>)
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010c0:	4b32      	ldr	r3, [pc, #200]	; (800118c <HAL_GPIO_Init+0x354>)
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	43db      	mvns	r3, r3
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	4013      	ands	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d003      	beq.n	80010e4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010e4:	4a29      	ldr	r2, [pc, #164]	; (800118c <HAL_GPIO_Init+0x354>)
 80010e6:	69bb      	ldr	r3, [r7, #24]
 80010e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010ea:	4b28      	ldr	r3, [pc, #160]	; (800118c <HAL_GPIO_Init+0x354>)
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	43db      	mvns	r3, r3
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	4013      	ands	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001102:	2b00      	cmp	r3, #0
 8001104:	d003      	beq.n	800110e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	4313      	orrs	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800110e:	4a1f      	ldr	r2, [pc, #124]	; (800118c <HAL_GPIO_Init+0x354>)
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001114:	4b1d      	ldr	r3, [pc, #116]	; (800118c <HAL_GPIO_Init+0x354>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	43db      	mvns	r3, r3
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	4013      	ands	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800112c:	2b00      	cmp	r3, #0
 800112e:	d003      	beq.n	8001138 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	4313      	orrs	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001138:	4a14      	ldr	r2, [pc, #80]	; (800118c <HAL_GPIO_Init+0x354>)
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	3301      	adds	r3, #1
 8001142:	61fb      	str	r3, [r7, #28]
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	2b0f      	cmp	r3, #15
 8001148:	f67f ae86 	bls.w	8000e58 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800114c:	bf00      	nop
 800114e:	bf00      	nop
 8001150:	3724      	adds	r7, #36	; 0x24
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	40023800 	.word	0x40023800
 8001160:	40013800 	.word	0x40013800
 8001164:	40020000 	.word	0x40020000
 8001168:	40020400 	.word	0x40020400
 800116c:	40020800 	.word	0x40020800
 8001170:	40020c00 	.word	0x40020c00
 8001174:	40021000 	.word	0x40021000
 8001178:	40021400 	.word	0x40021400
 800117c:	40021800 	.word	0x40021800
 8001180:	40021c00 	.word	0x40021c00
 8001184:	40022000 	.word	0x40022000
 8001188:	40022400 	.word	0x40022400
 800118c:	40013c00 	.word	0x40013c00

08001190 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	460b      	mov	r3, r1
 800119a:	807b      	strh	r3, [r7, #2]
 800119c:	4613      	mov	r3, r2
 800119e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011a0:	787b      	ldrb	r3, [r7, #1]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d003      	beq.n	80011ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011a6:	887a      	ldrh	r2, [r7, #2]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80011ac:	e003      	b.n	80011b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80011ae:	887b      	ldrh	r3, [r7, #2]
 80011b0:	041a      	lsls	r2, r3, #16
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	619a      	str	r2, [r3, #24]
}
 80011b6:	bf00      	nop
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
	...

080011c4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80011ca:	2300      	movs	r3, #0
 80011cc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80011ce:	4b23      	ldr	r3, [pc, #140]	; (800125c <HAL_PWREx_EnableOverDrive+0x98>)
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	4a22      	ldr	r2, [pc, #136]	; (800125c <HAL_PWREx_EnableOverDrive+0x98>)
 80011d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011d8:	6413      	str	r3, [r2, #64]	; 0x40
 80011da:	4b20      	ldr	r3, [pc, #128]	; (800125c <HAL_PWREx_EnableOverDrive+0x98>)
 80011dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e2:	603b      	str	r3, [r7, #0]
 80011e4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80011e6:	4b1e      	ldr	r3, [pc, #120]	; (8001260 <HAL_PWREx_EnableOverDrive+0x9c>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a1d      	ldr	r2, [pc, #116]	; (8001260 <HAL_PWREx_EnableOverDrive+0x9c>)
 80011ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011f0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011f2:	f7ff fd2f 	bl	8000c54 <HAL_GetTick>
 80011f6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80011f8:	e009      	b.n	800120e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80011fa:	f7ff fd2b 	bl	8000c54 <HAL_GetTick>
 80011fe:	4602      	mov	r2, r0
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001208:	d901      	bls.n	800120e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800120a:	2303      	movs	r3, #3
 800120c:	e022      	b.n	8001254 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800120e:	4b14      	ldr	r3, [pc, #80]	; (8001260 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001216:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800121a:	d1ee      	bne.n	80011fa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800121c:	4b10      	ldr	r3, [pc, #64]	; (8001260 <HAL_PWREx_EnableOverDrive+0x9c>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a0f      	ldr	r2, [pc, #60]	; (8001260 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001222:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001226:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001228:	f7ff fd14 	bl	8000c54 <HAL_GetTick>
 800122c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800122e:	e009      	b.n	8001244 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001230:	f7ff fd10 	bl	8000c54 <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800123e:	d901      	bls.n	8001244 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001240:	2303      	movs	r3, #3
 8001242:	e007      	b.n	8001254 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001244:	4b06      	ldr	r3, [pc, #24]	; (8001260 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001250:	d1ee      	bne.n	8001230 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001252:	2300      	movs	r3, #0
}
 8001254:	4618      	mov	r0, r3
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40023800 	.word	0x40023800
 8001260:	40007000 	.word	0x40007000

08001264 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b086      	sub	sp, #24
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800126c:	2300      	movs	r3, #0
 800126e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d101      	bne.n	800127a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e291      	b.n	800179e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	2b00      	cmp	r3, #0
 8001284:	f000 8087 	beq.w	8001396 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001288:	4b96      	ldr	r3, [pc, #600]	; (80014e4 <HAL_RCC_OscConfig+0x280>)
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	f003 030c 	and.w	r3, r3, #12
 8001290:	2b04      	cmp	r3, #4
 8001292:	d00c      	beq.n	80012ae <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001294:	4b93      	ldr	r3, [pc, #588]	; (80014e4 <HAL_RCC_OscConfig+0x280>)
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	f003 030c 	and.w	r3, r3, #12
 800129c:	2b08      	cmp	r3, #8
 800129e:	d112      	bne.n	80012c6 <HAL_RCC_OscConfig+0x62>
 80012a0:	4b90      	ldr	r3, [pc, #576]	; (80014e4 <HAL_RCC_OscConfig+0x280>)
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012ac:	d10b      	bne.n	80012c6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012ae:	4b8d      	ldr	r3, [pc, #564]	; (80014e4 <HAL_RCC_OscConfig+0x280>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d06c      	beq.n	8001394 <HAL_RCC_OscConfig+0x130>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d168      	bne.n	8001394 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e26b      	b.n	800179e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012ce:	d106      	bne.n	80012de <HAL_RCC_OscConfig+0x7a>
 80012d0:	4b84      	ldr	r3, [pc, #528]	; (80014e4 <HAL_RCC_OscConfig+0x280>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a83      	ldr	r2, [pc, #524]	; (80014e4 <HAL_RCC_OscConfig+0x280>)
 80012d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012da:	6013      	str	r3, [r2, #0]
 80012dc:	e02e      	b.n	800133c <HAL_RCC_OscConfig+0xd8>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d10c      	bne.n	8001300 <HAL_RCC_OscConfig+0x9c>
 80012e6:	4b7f      	ldr	r3, [pc, #508]	; (80014e4 <HAL_RCC_OscConfig+0x280>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a7e      	ldr	r2, [pc, #504]	; (80014e4 <HAL_RCC_OscConfig+0x280>)
 80012ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012f0:	6013      	str	r3, [r2, #0]
 80012f2:	4b7c      	ldr	r3, [pc, #496]	; (80014e4 <HAL_RCC_OscConfig+0x280>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a7b      	ldr	r2, [pc, #492]	; (80014e4 <HAL_RCC_OscConfig+0x280>)
 80012f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012fc:	6013      	str	r3, [r2, #0]
 80012fe:	e01d      	b.n	800133c <HAL_RCC_OscConfig+0xd8>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001308:	d10c      	bne.n	8001324 <HAL_RCC_OscConfig+0xc0>
 800130a:	4b76      	ldr	r3, [pc, #472]	; (80014e4 <HAL_RCC_OscConfig+0x280>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a75      	ldr	r2, [pc, #468]	; (80014e4 <HAL_RCC_OscConfig+0x280>)
 8001310:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001314:	6013      	str	r3, [r2, #0]
 8001316:	4b73      	ldr	r3, [pc, #460]	; (80014e4 <HAL_RCC_OscConfig+0x280>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a72      	ldr	r2, [pc, #456]	; (80014e4 <HAL_RCC_OscConfig+0x280>)
 800131c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001320:	6013      	str	r3, [r2, #0]
 8001322:	e00b      	b.n	800133c <HAL_RCC_OscConfig+0xd8>
 8001324:	4b6f      	ldr	r3, [pc, #444]	; (80014e4 <HAL_RCC_OscConfig+0x280>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a6e      	ldr	r2, [pc, #440]	; (80014e4 <HAL_RCC_OscConfig+0x280>)
 800132a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800132e:	6013      	str	r3, [r2, #0]
 8001330:	4b6c      	ldr	r3, [pc, #432]	; (80014e4 <HAL_RCC_OscConfig+0x280>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a6b      	ldr	r2, [pc, #428]	; (80014e4 <HAL_RCC_OscConfig+0x280>)
 8001336:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800133a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d013      	beq.n	800136c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001344:	f7ff fc86 	bl	8000c54 <HAL_GetTick>
 8001348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800134a:	e008      	b.n	800135e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800134c:	f7ff fc82 	bl	8000c54 <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	2b64      	cmp	r3, #100	; 0x64
 8001358:	d901      	bls.n	800135e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	e21f      	b.n	800179e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800135e:	4b61      	ldr	r3, [pc, #388]	; (80014e4 <HAL_RCC_OscConfig+0x280>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d0f0      	beq.n	800134c <HAL_RCC_OscConfig+0xe8>
 800136a:	e014      	b.n	8001396 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800136c:	f7ff fc72 	bl	8000c54 <HAL_GetTick>
 8001370:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001372:	e008      	b.n	8001386 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001374:	f7ff fc6e 	bl	8000c54 <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	2b64      	cmp	r3, #100	; 0x64
 8001380:	d901      	bls.n	8001386 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001382:	2303      	movs	r3, #3
 8001384:	e20b      	b.n	800179e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001386:	4b57      	ldr	r3, [pc, #348]	; (80014e4 <HAL_RCC_OscConfig+0x280>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d1f0      	bne.n	8001374 <HAL_RCC_OscConfig+0x110>
 8001392:	e000      	b.n	8001396 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001394:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 0302 	and.w	r3, r3, #2
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d069      	beq.n	8001476 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013a2:	4b50      	ldr	r3, [pc, #320]	; (80014e4 <HAL_RCC_OscConfig+0x280>)
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	f003 030c 	and.w	r3, r3, #12
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d00b      	beq.n	80013c6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013ae:	4b4d      	ldr	r3, [pc, #308]	; (80014e4 <HAL_RCC_OscConfig+0x280>)
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	f003 030c 	and.w	r3, r3, #12
 80013b6:	2b08      	cmp	r3, #8
 80013b8:	d11c      	bne.n	80013f4 <HAL_RCC_OscConfig+0x190>
 80013ba:	4b4a      	ldr	r3, [pc, #296]	; (80014e4 <HAL_RCC_OscConfig+0x280>)
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d116      	bne.n	80013f4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013c6:	4b47      	ldr	r3, [pc, #284]	; (80014e4 <HAL_RCC_OscConfig+0x280>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d005      	beq.n	80013de <HAL_RCC_OscConfig+0x17a>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	68db      	ldr	r3, [r3, #12]
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d001      	beq.n	80013de <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e1df      	b.n	800179e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013de:	4b41      	ldr	r3, [pc, #260]	; (80014e4 <HAL_RCC_OscConfig+0x280>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	691b      	ldr	r3, [r3, #16]
 80013ea:	00db      	lsls	r3, r3, #3
 80013ec:	493d      	ldr	r1, [pc, #244]	; (80014e4 <HAL_RCC_OscConfig+0x280>)
 80013ee:	4313      	orrs	r3, r2
 80013f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013f2:	e040      	b.n	8001476 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d023      	beq.n	8001444 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013fc:	4b39      	ldr	r3, [pc, #228]	; (80014e4 <HAL_RCC_OscConfig+0x280>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a38      	ldr	r2, [pc, #224]	; (80014e4 <HAL_RCC_OscConfig+0x280>)
 8001402:	f043 0301 	orr.w	r3, r3, #1
 8001406:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001408:	f7ff fc24 	bl	8000c54 <HAL_GetTick>
 800140c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800140e:	e008      	b.n	8001422 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001410:	f7ff fc20 	bl	8000c54 <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	2b02      	cmp	r3, #2
 800141c:	d901      	bls.n	8001422 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e1bd      	b.n	800179e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001422:	4b30      	ldr	r3, [pc, #192]	; (80014e4 <HAL_RCC_OscConfig+0x280>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	2b00      	cmp	r3, #0
 800142c:	d0f0      	beq.n	8001410 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800142e:	4b2d      	ldr	r3, [pc, #180]	; (80014e4 <HAL_RCC_OscConfig+0x280>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	691b      	ldr	r3, [r3, #16]
 800143a:	00db      	lsls	r3, r3, #3
 800143c:	4929      	ldr	r1, [pc, #164]	; (80014e4 <HAL_RCC_OscConfig+0x280>)
 800143e:	4313      	orrs	r3, r2
 8001440:	600b      	str	r3, [r1, #0]
 8001442:	e018      	b.n	8001476 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001444:	4b27      	ldr	r3, [pc, #156]	; (80014e4 <HAL_RCC_OscConfig+0x280>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a26      	ldr	r2, [pc, #152]	; (80014e4 <HAL_RCC_OscConfig+0x280>)
 800144a:	f023 0301 	bic.w	r3, r3, #1
 800144e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001450:	f7ff fc00 	bl	8000c54 <HAL_GetTick>
 8001454:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001456:	e008      	b.n	800146a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001458:	f7ff fbfc 	bl	8000c54 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b02      	cmp	r3, #2
 8001464:	d901      	bls.n	800146a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e199      	b.n	800179e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800146a:	4b1e      	ldr	r3, [pc, #120]	; (80014e4 <HAL_RCC_OscConfig+0x280>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	2b00      	cmp	r3, #0
 8001474:	d1f0      	bne.n	8001458 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0308 	and.w	r3, r3, #8
 800147e:	2b00      	cmp	r3, #0
 8001480:	d038      	beq.n	80014f4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	695b      	ldr	r3, [r3, #20]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d019      	beq.n	80014be <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800148a:	4b16      	ldr	r3, [pc, #88]	; (80014e4 <HAL_RCC_OscConfig+0x280>)
 800148c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800148e:	4a15      	ldr	r2, [pc, #84]	; (80014e4 <HAL_RCC_OscConfig+0x280>)
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001496:	f7ff fbdd 	bl	8000c54 <HAL_GetTick>
 800149a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800149c:	e008      	b.n	80014b0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800149e:	f7ff fbd9 	bl	8000c54 <HAL_GetTick>
 80014a2:	4602      	mov	r2, r0
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	1ad3      	subs	r3, r2, r3
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d901      	bls.n	80014b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014ac:	2303      	movs	r3, #3
 80014ae:	e176      	b.n	800179e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014b0:	4b0c      	ldr	r3, [pc, #48]	; (80014e4 <HAL_RCC_OscConfig+0x280>)
 80014b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014b4:	f003 0302 	and.w	r3, r3, #2
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d0f0      	beq.n	800149e <HAL_RCC_OscConfig+0x23a>
 80014bc:	e01a      	b.n	80014f4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014be:	4b09      	ldr	r3, [pc, #36]	; (80014e4 <HAL_RCC_OscConfig+0x280>)
 80014c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014c2:	4a08      	ldr	r2, [pc, #32]	; (80014e4 <HAL_RCC_OscConfig+0x280>)
 80014c4:	f023 0301 	bic.w	r3, r3, #1
 80014c8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014ca:	f7ff fbc3 	bl	8000c54 <HAL_GetTick>
 80014ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014d0:	e00a      	b.n	80014e8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014d2:	f7ff fbbf 	bl	8000c54 <HAL_GetTick>
 80014d6:	4602      	mov	r2, r0
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d903      	bls.n	80014e8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80014e0:	2303      	movs	r3, #3
 80014e2:	e15c      	b.n	800179e <HAL_RCC_OscConfig+0x53a>
 80014e4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014e8:	4b91      	ldr	r3, [pc, #580]	; (8001730 <HAL_RCC_OscConfig+0x4cc>)
 80014ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014ec:	f003 0302 	and.w	r3, r3, #2
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d1ee      	bne.n	80014d2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0304 	and.w	r3, r3, #4
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	f000 80a4 	beq.w	800164a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001502:	4b8b      	ldr	r3, [pc, #556]	; (8001730 <HAL_RCC_OscConfig+0x4cc>)
 8001504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d10d      	bne.n	800152a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800150e:	4b88      	ldr	r3, [pc, #544]	; (8001730 <HAL_RCC_OscConfig+0x4cc>)
 8001510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001512:	4a87      	ldr	r2, [pc, #540]	; (8001730 <HAL_RCC_OscConfig+0x4cc>)
 8001514:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001518:	6413      	str	r3, [r2, #64]	; 0x40
 800151a:	4b85      	ldr	r3, [pc, #532]	; (8001730 <HAL_RCC_OscConfig+0x4cc>)
 800151c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001522:	60bb      	str	r3, [r7, #8]
 8001524:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001526:	2301      	movs	r3, #1
 8001528:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800152a:	4b82      	ldr	r3, [pc, #520]	; (8001734 <HAL_RCC_OscConfig+0x4d0>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001532:	2b00      	cmp	r3, #0
 8001534:	d118      	bne.n	8001568 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001536:	4b7f      	ldr	r3, [pc, #508]	; (8001734 <HAL_RCC_OscConfig+0x4d0>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a7e      	ldr	r2, [pc, #504]	; (8001734 <HAL_RCC_OscConfig+0x4d0>)
 800153c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001540:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001542:	f7ff fb87 	bl	8000c54 <HAL_GetTick>
 8001546:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001548:	e008      	b.n	800155c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800154a:	f7ff fb83 	bl	8000c54 <HAL_GetTick>
 800154e:	4602      	mov	r2, r0
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	2b64      	cmp	r3, #100	; 0x64
 8001556:	d901      	bls.n	800155c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001558:	2303      	movs	r3, #3
 800155a:	e120      	b.n	800179e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800155c:	4b75      	ldr	r3, [pc, #468]	; (8001734 <HAL_RCC_OscConfig+0x4d0>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001564:	2b00      	cmp	r3, #0
 8001566:	d0f0      	beq.n	800154a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	2b01      	cmp	r3, #1
 800156e:	d106      	bne.n	800157e <HAL_RCC_OscConfig+0x31a>
 8001570:	4b6f      	ldr	r3, [pc, #444]	; (8001730 <HAL_RCC_OscConfig+0x4cc>)
 8001572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001574:	4a6e      	ldr	r2, [pc, #440]	; (8001730 <HAL_RCC_OscConfig+0x4cc>)
 8001576:	f043 0301 	orr.w	r3, r3, #1
 800157a:	6713      	str	r3, [r2, #112]	; 0x70
 800157c:	e02d      	b.n	80015da <HAL_RCC_OscConfig+0x376>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d10c      	bne.n	80015a0 <HAL_RCC_OscConfig+0x33c>
 8001586:	4b6a      	ldr	r3, [pc, #424]	; (8001730 <HAL_RCC_OscConfig+0x4cc>)
 8001588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800158a:	4a69      	ldr	r2, [pc, #420]	; (8001730 <HAL_RCC_OscConfig+0x4cc>)
 800158c:	f023 0301 	bic.w	r3, r3, #1
 8001590:	6713      	str	r3, [r2, #112]	; 0x70
 8001592:	4b67      	ldr	r3, [pc, #412]	; (8001730 <HAL_RCC_OscConfig+0x4cc>)
 8001594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001596:	4a66      	ldr	r2, [pc, #408]	; (8001730 <HAL_RCC_OscConfig+0x4cc>)
 8001598:	f023 0304 	bic.w	r3, r3, #4
 800159c:	6713      	str	r3, [r2, #112]	; 0x70
 800159e:	e01c      	b.n	80015da <HAL_RCC_OscConfig+0x376>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	2b05      	cmp	r3, #5
 80015a6:	d10c      	bne.n	80015c2 <HAL_RCC_OscConfig+0x35e>
 80015a8:	4b61      	ldr	r3, [pc, #388]	; (8001730 <HAL_RCC_OscConfig+0x4cc>)
 80015aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ac:	4a60      	ldr	r2, [pc, #384]	; (8001730 <HAL_RCC_OscConfig+0x4cc>)
 80015ae:	f043 0304 	orr.w	r3, r3, #4
 80015b2:	6713      	str	r3, [r2, #112]	; 0x70
 80015b4:	4b5e      	ldr	r3, [pc, #376]	; (8001730 <HAL_RCC_OscConfig+0x4cc>)
 80015b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b8:	4a5d      	ldr	r2, [pc, #372]	; (8001730 <HAL_RCC_OscConfig+0x4cc>)
 80015ba:	f043 0301 	orr.w	r3, r3, #1
 80015be:	6713      	str	r3, [r2, #112]	; 0x70
 80015c0:	e00b      	b.n	80015da <HAL_RCC_OscConfig+0x376>
 80015c2:	4b5b      	ldr	r3, [pc, #364]	; (8001730 <HAL_RCC_OscConfig+0x4cc>)
 80015c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c6:	4a5a      	ldr	r2, [pc, #360]	; (8001730 <HAL_RCC_OscConfig+0x4cc>)
 80015c8:	f023 0301 	bic.w	r3, r3, #1
 80015cc:	6713      	str	r3, [r2, #112]	; 0x70
 80015ce:	4b58      	ldr	r3, [pc, #352]	; (8001730 <HAL_RCC_OscConfig+0x4cc>)
 80015d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d2:	4a57      	ldr	r2, [pc, #348]	; (8001730 <HAL_RCC_OscConfig+0x4cc>)
 80015d4:	f023 0304 	bic.w	r3, r3, #4
 80015d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d015      	beq.n	800160e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015e2:	f7ff fb37 	bl	8000c54 <HAL_GetTick>
 80015e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015e8:	e00a      	b.n	8001600 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015ea:	f7ff fb33 	bl	8000c54 <HAL_GetTick>
 80015ee:	4602      	mov	r2, r0
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d901      	bls.n	8001600 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e0ce      	b.n	800179e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001600:	4b4b      	ldr	r3, [pc, #300]	; (8001730 <HAL_RCC_OscConfig+0x4cc>)
 8001602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001604:	f003 0302 	and.w	r3, r3, #2
 8001608:	2b00      	cmp	r3, #0
 800160a:	d0ee      	beq.n	80015ea <HAL_RCC_OscConfig+0x386>
 800160c:	e014      	b.n	8001638 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800160e:	f7ff fb21 	bl	8000c54 <HAL_GetTick>
 8001612:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001614:	e00a      	b.n	800162c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001616:	f7ff fb1d 	bl	8000c54 <HAL_GetTick>
 800161a:	4602      	mov	r2, r0
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	f241 3288 	movw	r2, #5000	; 0x1388
 8001624:	4293      	cmp	r3, r2
 8001626:	d901      	bls.n	800162c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e0b8      	b.n	800179e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800162c:	4b40      	ldr	r3, [pc, #256]	; (8001730 <HAL_RCC_OscConfig+0x4cc>)
 800162e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001630:	f003 0302 	and.w	r3, r3, #2
 8001634:	2b00      	cmp	r3, #0
 8001636:	d1ee      	bne.n	8001616 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001638:	7dfb      	ldrb	r3, [r7, #23]
 800163a:	2b01      	cmp	r3, #1
 800163c:	d105      	bne.n	800164a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800163e:	4b3c      	ldr	r3, [pc, #240]	; (8001730 <HAL_RCC_OscConfig+0x4cc>)
 8001640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001642:	4a3b      	ldr	r2, [pc, #236]	; (8001730 <HAL_RCC_OscConfig+0x4cc>)
 8001644:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001648:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	699b      	ldr	r3, [r3, #24]
 800164e:	2b00      	cmp	r3, #0
 8001650:	f000 80a4 	beq.w	800179c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001654:	4b36      	ldr	r3, [pc, #216]	; (8001730 <HAL_RCC_OscConfig+0x4cc>)
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	f003 030c 	and.w	r3, r3, #12
 800165c:	2b08      	cmp	r3, #8
 800165e:	d06b      	beq.n	8001738 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	2b02      	cmp	r3, #2
 8001666:	d149      	bne.n	80016fc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001668:	4b31      	ldr	r3, [pc, #196]	; (8001730 <HAL_RCC_OscConfig+0x4cc>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a30      	ldr	r2, [pc, #192]	; (8001730 <HAL_RCC_OscConfig+0x4cc>)
 800166e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001672:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001674:	f7ff faee 	bl	8000c54 <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800167c:	f7ff faea 	bl	8000c54 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e087      	b.n	800179e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800168e:	4b28      	ldr	r3, [pc, #160]	; (8001730 <HAL_RCC_OscConfig+0x4cc>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1f0      	bne.n	800167c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	69da      	ldr	r2, [r3, #28]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6a1b      	ldr	r3, [r3, #32]
 80016a2:	431a      	orrs	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a8:	019b      	lsls	r3, r3, #6
 80016aa:	431a      	orrs	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b0:	085b      	lsrs	r3, r3, #1
 80016b2:	3b01      	subs	r3, #1
 80016b4:	041b      	lsls	r3, r3, #16
 80016b6:	431a      	orrs	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016bc:	061b      	lsls	r3, r3, #24
 80016be:	4313      	orrs	r3, r2
 80016c0:	4a1b      	ldr	r2, [pc, #108]	; (8001730 <HAL_RCC_OscConfig+0x4cc>)
 80016c2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80016c6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016c8:	4b19      	ldr	r3, [pc, #100]	; (8001730 <HAL_RCC_OscConfig+0x4cc>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a18      	ldr	r2, [pc, #96]	; (8001730 <HAL_RCC_OscConfig+0x4cc>)
 80016ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d4:	f7ff fabe 	bl	8000c54 <HAL_GetTick>
 80016d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016da:	e008      	b.n	80016ee <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016dc:	f7ff faba 	bl	8000c54 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e057      	b.n	800179e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ee:	4b10      	ldr	r3, [pc, #64]	; (8001730 <HAL_RCC_OscConfig+0x4cc>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d0f0      	beq.n	80016dc <HAL_RCC_OscConfig+0x478>
 80016fa:	e04f      	b.n	800179c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016fc:	4b0c      	ldr	r3, [pc, #48]	; (8001730 <HAL_RCC_OscConfig+0x4cc>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a0b      	ldr	r2, [pc, #44]	; (8001730 <HAL_RCC_OscConfig+0x4cc>)
 8001702:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001706:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001708:	f7ff faa4 	bl	8000c54 <HAL_GetTick>
 800170c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800170e:	e008      	b.n	8001722 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001710:	f7ff faa0 	bl	8000c54 <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	2b02      	cmp	r3, #2
 800171c:	d901      	bls.n	8001722 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e03d      	b.n	800179e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001722:	4b03      	ldr	r3, [pc, #12]	; (8001730 <HAL_RCC_OscConfig+0x4cc>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d1f0      	bne.n	8001710 <HAL_RCC_OscConfig+0x4ac>
 800172e:	e035      	b.n	800179c <HAL_RCC_OscConfig+0x538>
 8001730:	40023800 	.word	0x40023800
 8001734:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001738:	4b1b      	ldr	r3, [pc, #108]	; (80017a8 <HAL_RCC_OscConfig+0x544>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	699b      	ldr	r3, [r3, #24]
 8001742:	2b01      	cmp	r3, #1
 8001744:	d028      	beq.n	8001798 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001750:	429a      	cmp	r2, r3
 8001752:	d121      	bne.n	8001798 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800175e:	429a      	cmp	r2, r3
 8001760:	d11a      	bne.n	8001798 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001762:	68fa      	ldr	r2, [r7, #12]
 8001764:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001768:	4013      	ands	r3, r2
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800176e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001770:	4293      	cmp	r3, r2
 8001772:	d111      	bne.n	8001798 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800177e:	085b      	lsrs	r3, r3, #1
 8001780:	3b01      	subs	r3, #1
 8001782:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001784:	429a      	cmp	r2, r3
 8001786:	d107      	bne.n	8001798 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001792:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001794:	429a      	cmp	r2, r3
 8001796:	d001      	beq.n	800179c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e000      	b.n	800179e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800179c:	2300      	movs	r3, #0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3718      	adds	r7, #24
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40023800 	.word	0x40023800

080017ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80017b6:	2300      	movs	r3, #0
 80017b8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d101      	bne.n	80017c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e0d0      	b.n	8001966 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017c4:	4b6a      	ldr	r3, [pc, #424]	; (8001970 <HAL_RCC_ClockConfig+0x1c4>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 030f 	and.w	r3, r3, #15
 80017cc:	683a      	ldr	r2, [r7, #0]
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d910      	bls.n	80017f4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017d2:	4b67      	ldr	r3, [pc, #412]	; (8001970 <HAL_RCC_ClockConfig+0x1c4>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f023 020f 	bic.w	r2, r3, #15
 80017da:	4965      	ldr	r1, [pc, #404]	; (8001970 <HAL_RCC_ClockConfig+0x1c4>)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	4313      	orrs	r3, r2
 80017e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017e2:	4b63      	ldr	r3, [pc, #396]	; (8001970 <HAL_RCC_ClockConfig+0x1c4>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 030f 	and.w	r3, r3, #15
 80017ea:	683a      	ldr	r2, [r7, #0]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d001      	beq.n	80017f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e0b8      	b.n	8001966 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0302 	and.w	r3, r3, #2
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d020      	beq.n	8001842 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0304 	and.w	r3, r3, #4
 8001808:	2b00      	cmp	r3, #0
 800180a:	d005      	beq.n	8001818 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800180c:	4b59      	ldr	r3, [pc, #356]	; (8001974 <HAL_RCC_ClockConfig+0x1c8>)
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	4a58      	ldr	r2, [pc, #352]	; (8001974 <HAL_RCC_ClockConfig+0x1c8>)
 8001812:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001816:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0308 	and.w	r3, r3, #8
 8001820:	2b00      	cmp	r3, #0
 8001822:	d005      	beq.n	8001830 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001824:	4b53      	ldr	r3, [pc, #332]	; (8001974 <HAL_RCC_ClockConfig+0x1c8>)
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	4a52      	ldr	r2, [pc, #328]	; (8001974 <HAL_RCC_ClockConfig+0x1c8>)
 800182a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800182e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001830:	4b50      	ldr	r3, [pc, #320]	; (8001974 <HAL_RCC_ClockConfig+0x1c8>)
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	494d      	ldr	r1, [pc, #308]	; (8001974 <HAL_RCC_ClockConfig+0x1c8>)
 800183e:	4313      	orrs	r3, r2
 8001840:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	2b00      	cmp	r3, #0
 800184c:	d040      	beq.n	80018d0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	2b01      	cmp	r3, #1
 8001854:	d107      	bne.n	8001866 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001856:	4b47      	ldr	r3, [pc, #284]	; (8001974 <HAL_RCC_ClockConfig+0x1c8>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d115      	bne.n	800188e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e07f      	b.n	8001966 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	2b02      	cmp	r3, #2
 800186c:	d107      	bne.n	800187e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800186e:	4b41      	ldr	r3, [pc, #260]	; (8001974 <HAL_RCC_ClockConfig+0x1c8>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d109      	bne.n	800188e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e073      	b.n	8001966 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800187e:	4b3d      	ldr	r3, [pc, #244]	; (8001974 <HAL_RCC_ClockConfig+0x1c8>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	2b00      	cmp	r3, #0
 8001888:	d101      	bne.n	800188e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e06b      	b.n	8001966 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800188e:	4b39      	ldr	r3, [pc, #228]	; (8001974 <HAL_RCC_ClockConfig+0x1c8>)
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	f023 0203 	bic.w	r2, r3, #3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	4936      	ldr	r1, [pc, #216]	; (8001974 <HAL_RCC_ClockConfig+0x1c8>)
 800189c:	4313      	orrs	r3, r2
 800189e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018a0:	f7ff f9d8 	bl	8000c54 <HAL_GetTick>
 80018a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018a6:	e00a      	b.n	80018be <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018a8:	f7ff f9d4 	bl	8000c54 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d901      	bls.n	80018be <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e053      	b.n	8001966 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018be:	4b2d      	ldr	r3, [pc, #180]	; (8001974 <HAL_RCC_ClockConfig+0x1c8>)
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	f003 020c 	and.w	r2, r3, #12
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d1eb      	bne.n	80018a8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018d0:	4b27      	ldr	r3, [pc, #156]	; (8001970 <HAL_RCC_ClockConfig+0x1c4>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 030f 	and.w	r3, r3, #15
 80018d8:	683a      	ldr	r2, [r7, #0]
 80018da:	429a      	cmp	r2, r3
 80018dc:	d210      	bcs.n	8001900 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018de:	4b24      	ldr	r3, [pc, #144]	; (8001970 <HAL_RCC_ClockConfig+0x1c4>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f023 020f 	bic.w	r2, r3, #15
 80018e6:	4922      	ldr	r1, [pc, #136]	; (8001970 <HAL_RCC_ClockConfig+0x1c4>)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ee:	4b20      	ldr	r3, [pc, #128]	; (8001970 <HAL_RCC_ClockConfig+0x1c4>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 030f 	and.w	r3, r3, #15
 80018f6:	683a      	ldr	r2, [r7, #0]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d001      	beq.n	8001900 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e032      	b.n	8001966 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0304 	and.w	r3, r3, #4
 8001908:	2b00      	cmp	r3, #0
 800190a:	d008      	beq.n	800191e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800190c:	4b19      	ldr	r3, [pc, #100]	; (8001974 <HAL_RCC_ClockConfig+0x1c8>)
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	4916      	ldr	r1, [pc, #88]	; (8001974 <HAL_RCC_ClockConfig+0x1c8>)
 800191a:	4313      	orrs	r3, r2
 800191c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0308 	and.w	r3, r3, #8
 8001926:	2b00      	cmp	r3, #0
 8001928:	d009      	beq.n	800193e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800192a:	4b12      	ldr	r3, [pc, #72]	; (8001974 <HAL_RCC_ClockConfig+0x1c8>)
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	691b      	ldr	r3, [r3, #16]
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	490e      	ldr	r1, [pc, #56]	; (8001974 <HAL_RCC_ClockConfig+0x1c8>)
 800193a:	4313      	orrs	r3, r2
 800193c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800193e:	f000 f821 	bl	8001984 <HAL_RCC_GetSysClockFreq>
 8001942:	4602      	mov	r2, r0
 8001944:	4b0b      	ldr	r3, [pc, #44]	; (8001974 <HAL_RCC_ClockConfig+0x1c8>)
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	091b      	lsrs	r3, r3, #4
 800194a:	f003 030f 	and.w	r3, r3, #15
 800194e:	490a      	ldr	r1, [pc, #40]	; (8001978 <HAL_RCC_ClockConfig+0x1cc>)
 8001950:	5ccb      	ldrb	r3, [r1, r3]
 8001952:	fa22 f303 	lsr.w	r3, r2, r3
 8001956:	4a09      	ldr	r2, [pc, #36]	; (800197c <HAL_RCC_ClockConfig+0x1d0>)
 8001958:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800195a:	4b09      	ldr	r3, [pc, #36]	; (8001980 <HAL_RCC_ClockConfig+0x1d4>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff f934 	bl	8000bcc <HAL_InitTick>

  return HAL_OK;
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3710      	adds	r7, #16
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	40023c00 	.word	0x40023c00
 8001974:	40023800 	.word	0x40023800
 8001978:	08002d68 	.word	0x08002d68
 800197c:	20000000 	.word	0x20000000
 8001980:	20000004 	.word	0x20000004

08001984 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001984:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001988:	b094      	sub	sp, #80	; 0x50
 800198a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800198c:	2300      	movs	r3, #0
 800198e:	647b      	str	r3, [r7, #68]	; 0x44
 8001990:	2300      	movs	r3, #0
 8001992:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001994:	2300      	movs	r3, #0
 8001996:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8001998:	2300      	movs	r3, #0
 800199a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800199c:	4b79      	ldr	r3, [pc, #484]	; (8001b84 <HAL_RCC_GetSysClockFreq+0x200>)
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f003 030c 	and.w	r3, r3, #12
 80019a4:	2b08      	cmp	r3, #8
 80019a6:	d00d      	beq.n	80019c4 <HAL_RCC_GetSysClockFreq+0x40>
 80019a8:	2b08      	cmp	r3, #8
 80019aa:	f200 80e1 	bhi.w	8001b70 <HAL_RCC_GetSysClockFreq+0x1ec>
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d002      	beq.n	80019b8 <HAL_RCC_GetSysClockFreq+0x34>
 80019b2:	2b04      	cmp	r3, #4
 80019b4:	d003      	beq.n	80019be <HAL_RCC_GetSysClockFreq+0x3a>
 80019b6:	e0db      	b.n	8001b70 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019b8:	4b73      	ldr	r3, [pc, #460]	; (8001b88 <HAL_RCC_GetSysClockFreq+0x204>)
 80019ba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80019bc:	e0db      	b.n	8001b76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019be:	4b73      	ldr	r3, [pc, #460]	; (8001b8c <HAL_RCC_GetSysClockFreq+0x208>)
 80019c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80019c2:	e0d8      	b.n	8001b76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019c4:	4b6f      	ldr	r3, [pc, #444]	; (8001b84 <HAL_RCC_GetSysClockFreq+0x200>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019cc:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80019ce:	4b6d      	ldr	r3, [pc, #436]	; (8001b84 <HAL_RCC_GetSysClockFreq+0x200>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d063      	beq.n	8001aa2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019da:	4b6a      	ldr	r3, [pc, #424]	; (8001b84 <HAL_RCC_GetSysClockFreq+0x200>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	099b      	lsrs	r3, r3, #6
 80019e0:	2200      	movs	r2, #0
 80019e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80019e4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80019e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019ec:	633b      	str	r3, [r7, #48]	; 0x30
 80019ee:	2300      	movs	r3, #0
 80019f0:	637b      	str	r3, [r7, #52]	; 0x34
 80019f2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80019f6:	4622      	mov	r2, r4
 80019f8:	462b      	mov	r3, r5
 80019fa:	f04f 0000 	mov.w	r0, #0
 80019fe:	f04f 0100 	mov.w	r1, #0
 8001a02:	0159      	lsls	r1, r3, #5
 8001a04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a08:	0150      	lsls	r0, r2, #5
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	4621      	mov	r1, r4
 8001a10:	1a51      	subs	r1, r2, r1
 8001a12:	6139      	str	r1, [r7, #16]
 8001a14:	4629      	mov	r1, r5
 8001a16:	eb63 0301 	sbc.w	r3, r3, r1
 8001a1a:	617b      	str	r3, [r7, #20]
 8001a1c:	f04f 0200 	mov.w	r2, #0
 8001a20:	f04f 0300 	mov.w	r3, #0
 8001a24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a28:	4659      	mov	r1, fp
 8001a2a:	018b      	lsls	r3, r1, #6
 8001a2c:	4651      	mov	r1, sl
 8001a2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a32:	4651      	mov	r1, sl
 8001a34:	018a      	lsls	r2, r1, #6
 8001a36:	4651      	mov	r1, sl
 8001a38:	ebb2 0801 	subs.w	r8, r2, r1
 8001a3c:	4659      	mov	r1, fp
 8001a3e:	eb63 0901 	sbc.w	r9, r3, r1
 8001a42:	f04f 0200 	mov.w	r2, #0
 8001a46:	f04f 0300 	mov.w	r3, #0
 8001a4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a56:	4690      	mov	r8, r2
 8001a58:	4699      	mov	r9, r3
 8001a5a:	4623      	mov	r3, r4
 8001a5c:	eb18 0303 	adds.w	r3, r8, r3
 8001a60:	60bb      	str	r3, [r7, #8]
 8001a62:	462b      	mov	r3, r5
 8001a64:	eb49 0303 	adc.w	r3, r9, r3
 8001a68:	60fb      	str	r3, [r7, #12]
 8001a6a:	f04f 0200 	mov.w	r2, #0
 8001a6e:	f04f 0300 	mov.w	r3, #0
 8001a72:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a76:	4629      	mov	r1, r5
 8001a78:	024b      	lsls	r3, r1, #9
 8001a7a:	4621      	mov	r1, r4
 8001a7c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a80:	4621      	mov	r1, r4
 8001a82:	024a      	lsls	r2, r1, #9
 8001a84:	4610      	mov	r0, r2
 8001a86:	4619      	mov	r1, r3
 8001a88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a90:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a94:	f7fe fbb8 	bl	8000208 <__aeabi_uldivmod>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001aa0:	e058      	b.n	8001b54 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001aa2:	4b38      	ldr	r3, [pc, #224]	; (8001b84 <HAL_RCC_GetSysClockFreq+0x200>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	099b      	lsrs	r3, r3, #6
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	4618      	mov	r0, r3
 8001aac:	4611      	mov	r1, r2
 8001aae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ab2:	623b      	str	r3, [r7, #32]
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ab8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001abc:	4642      	mov	r2, r8
 8001abe:	464b      	mov	r3, r9
 8001ac0:	f04f 0000 	mov.w	r0, #0
 8001ac4:	f04f 0100 	mov.w	r1, #0
 8001ac8:	0159      	lsls	r1, r3, #5
 8001aca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ace:	0150      	lsls	r0, r2, #5
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	4641      	mov	r1, r8
 8001ad6:	ebb2 0a01 	subs.w	sl, r2, r1
 8001ada:	4649      	mov	r1, r9
 8001adc:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ae0:	f04f 0200 	mov.w	r2, #0
 8001ae4:	f04f 0300 	mov.w	r3, #0
 8001ae8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001aec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001af0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001af4:	ebb2 040a 	subs.w	r4, r2, sl
 8001af8:	eb63 050b 	sbc.w	r5, r3, fp
 8001afc:	f04f 0200 	mov.w	r2, #0
 8001b00:	f04f 0300 	mov.w	r3, #0
 8001b04:	00eb      	lsls	r3, r5, #3
 8001b06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b0a:	00e2      	lsls	r2, r4, #3
 8001b0c:	4614      	mov	r4, r2
 8001b0e:	461d      	mov	r5, r3
 8001b10:	4643      	mov	r3, r8
 8001b12:	18e3      	adds	r3, r4, r3
 8001b14:	603b      	str	r3, [r7, #0]
 8001b16:	464b      	mov	r3, r9
 8001b18:	eb45 0303 	adc.w	r3, r5, r3
 8001b1c:	607b      	str	r3, [r7, #4]
 8001b1e:	f04f 0200 	mov.w	r2, #0
 8001b22:	f04f 0300 	mov.w	r3, #0
 8001b26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b2a:	4629      	mov	r1, r5
 8001b2c:	028b      	lsls	r3, r1, #10
 8001b2e:	4621      	mov	r1, r4
 8001b30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b34:	4621      	mov	r1, r4
 8001b36:	028a      	lsls	r2, r1, #10
 8001b38:	4610      	mov	r0, r2
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b3e:	2200      	movs	r2, #0
 8001b40:	61bb      	str	r3, [r7, #24]
 8001b42:	61fa      	str	r2, [r7, #28]
 8001b44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b48:	f7fe fb5e 	bl	8000208 <__aeabi_uldivmod>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	460b      	mov	r3, r1
 8001b50:	4613      	mov	r3, r2
 8001b52:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001b54:	4b0b      	ldr	r3, [pc, #44]	; (8001b84 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	0c1b      	lsrs	r3, r3, #16
 8001b5a:	f003 0303 	and.w	r3, r3, #3
 8001b5e:	3301      	adds	r3, #1
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8001b64:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001b66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b6e:	e002      	b.n	8001b76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b70:	4b05      	ldr	r3, [pc, #20]	; (8001b88 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b72:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3750      	adds	r7, #80	; 0x50
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b82:	bf00      	nop
 8001b84:	40023800 	.word	0x40023800
 8001b88:	00f42400 	.word	0x00f42400
 8001b8c:	007a1200 	.word	0x007a1200

08001b90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d101      	bne.n	8001ba2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e049      	b.n	8001c36 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d106      	bne.n	8001bbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f7fe ff1c 	bl	80009f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2202      	movs	r2, #2
 8001bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	3304      	adds	r3, #4
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4610      	mov	r0, r2
 8001bd0:	f000 fa74 	bl	80020bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b082      	sub	sp, #8
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d101      	bne.n	8001c50 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e049      	b.n	8001ce4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d106      	bne.n	8001c6a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f000 f841 	bl	8001cec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2202      	movs	r2, #2
 8001c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	3304      	adds	r3, #4
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4610      	mov	r0, r2
 8001c7e:	f000 fa1d 	bl	80020bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2201      	movs	r2, #1
 8001c86:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2201      	movs	r2, #1
 8001c96:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2201      	movs	r2, #1
 8001cae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2201      	movs	r2, #1
 8001cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ce2:	2300      	movs	r3, #0
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3708      	adds	r7, #8
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001cf4:	bf00      	nop
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b086      	sub	sp, #24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	60b9      	str	r1, [r7, #8]
 8001d0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d101      	bne.n	8001d1e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	e0ff      	b.n	8001f1e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2201      	movs	r2, #1
 8001d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2b14      	cmp	r3, #20
 8001d2a:	f200 80f0 	bhi.w	8001f0e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8001d2e:	a201      	add	r2, pc, #4	; (adr r2, 8001d34 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d34:	08001d89 	.word	0x08001d89
 8001d38:	08001f0f 	.word	0x08001f0f
 8001d3c:	08001f0f 	.word	0x08001f0f
 8001d40:	08001f0f 	.word	0x08001f0f
 8001d44:	08001dc9 	.word	0x08001dc9
 8001d48:	08001f0f 	.word	0x08001f0f
 8001d4c:	08001f0f 	.word	0x08001f0f
 8001d50:	08001f0f 	.word	0x08001f0f
 8001d54:	08001e0b 	.word	0x08001e0b
 8001d58:	08001f0f 	.word	0x08001f0f
 8001d5c:	08001f0f 	.word	0x08001f0f
 8001d60:	08001f0f 	.word	0x08001f0f
 8001d64:	08001e4b 	.word	0x08001e4b
 8001d68:	08001f0f 	.word	0x08001f0f
 8001d6c:	08001f0f 	.word	0x08001f0f
 8001d70:	08001f0f 	.word	0x08001f0f
 8001d74:	08001e8d 	.word	0x08001e8d
 8001d78:	08001f0f 	.word	0x08001f0f
 8001d7c:	08001f0f 	.word	0x08001f0f
 8001d80:	08001f0f 	.word	0x08001f0f
 8001d84:	08001ecd 	.word	0x08001ecd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	68b9      	ldr	r1, [r7, #8]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f000 fa34 	bl	80021fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	699a      	ldr	r2, [r3, #24]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f042 0208 	orr.w	r2, r2, #8
 8001da2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	699a      	ldr	r2, [r3, #24]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f022 0204 	bic.w	r2, r2, #4
 8001db2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	6999      	ldr	r1, [r3, #24]
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	691a      	ldr	r2, [r3, #16]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	619a      	str	r2, [r3, #24]
      break;
 8001dc6:	e0a5      	b.n	8001f14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	68b9      	ldr	r1, [r7, #8]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f000 fa86 	bl	80022e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	699a      	ldr	r2, [r3, #24]
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001de2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	699a      	ldr	r2, [r3, #24]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001df2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	6999      	ldr	r1, [r3, #24]
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	021a      	lsls	r2, r3, #8
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	430a      	orrs	r2, r1
 8001e06:	619a      	str	r2, [r3, #24]
      break;
 8001e08:	e084      	b.n	8001f14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	68b9      	ldr	r1, [r7, #8]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f000 fadd 	bl	80023d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	69da      	ldr	r2, [r3, #28]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f042 0208 	orr.w	r2, r2, #8
 8001e24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	69da      	ldr	r2, [r3, #28]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f022 0204 	bic.w	r2, r2, #4
 8001e34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	69d9      	ldr	r1, [r3, #28]
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	691a      	ldr	r2, [r3, #16]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	430a      	orrs	r2, r1
 8001e46:	61da      	str	r2, [r3, #28]
      break;
 8001e48:	e064      	b.n	8001f14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	68b9      	ldr	r1, [r7, #8]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f000 fb33 	bl	80024bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	69da      	ldr	r2, [r3, #28]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	69da      	ldr	r2, [r3, #28]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	69d9      	ldr	r1, [r3, #28]
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	691b      	ldr	r3, [r3, #16]
 8001e80:	021a      	lsls	r2, r3, #8
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	430a      	orrs	r2, r1
 8001e88:	61da      	str	r2, [r3, #28]
      break;
 8001e8a:	e043      	b.n	8001f14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	68b9      	ldr	r1, [r7, #8]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f000 fb6a 	bl	800256c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f042 0208 	orr.w	r2, r2, #8
 8001ea6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f022 0204 	bic.w	r2, r2, #4
 8001eb6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	691a      	ldr	r2, [r3, #16]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8001eca:	e023      	b.n	8001f14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	68b9      	ldr	r1, [r7, #8]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f000 fb9c 	bl	8002610 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ee6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ef6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	021a      	lsls	r2, r3, #8
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8001f0c:	e002      	b.n	8001f14 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	75fb      	strb	r3, [r7, #23]
      break;
 8001f12:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2200      	movs	r2, #0
 8001f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001f1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3718      	adds	r7, #24
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop

08001f28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f32:	2300      	movs	r3, #0
 8001f34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d101      	bne.n	8001f44 <HAL_TIM_ConfigClockSource+0x1c>
 8001f40:	2302      	movs	r3, #2
 8001f42:	e0b4      	b.n	80020ae <HAL_TIM_ConfigClockSource+0x186>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2201      	movs	r2, #1
 8001f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2202      	movs	r2, #2
 8001f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001f5c:	68ba      	ldr	r2, [r7, #8]
 8001f5e:	4b56      	ldr	r3, [pc, #344]	; (80020b8 <HAL_TIM_ConfigClockSource+0x190>)
 8001f60:	4013      	ands	r3, r2
 8001f62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001f6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	68ba      	ldr	r2, [r7, #8]
 8001f72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f7c:	d03e      	beq.n	8001ffc <HAL_TIM_ConfigClockSource+0xd4>
 8001f7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f82:	f200 8087 	bhi.w	8002094 <HAL_TIM_ConfigClockSource+0x16c>
 8001f86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f8a:	f000 8086 	beq.w	800209a <HAL_TIM_ConfigClockSource+0x172>
 8001f8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f92:	d87f      	bhi.n	8002094 <HAL_TIM_ConfigClockSource+0x16c>
 8001f94:	2b70      	cmp	r3, #112	; 0x70
 8001f96:	d01a      	beq.n	8001fce <HAL_TIM_ConfigClockSource+0xa6>
 8001f98:	2b70      	cmp	r3, #112	; 0x70
 8001f9a:	d87b      	bhi.n	8002094 <HAL_TIM_ConfigClockSource+0x16c>
 8001f9c:	2b60      	cmp	r3, #96	; 0x60
 8001f9e:	d050      	beq.n	8002042 <HAL_TIM_ConfigClockSource+0x11a>
 8001fa0:	2b60      	cmp	r3, #96	; 0x60
 8001fa2:	d877      	bhi.n	8002094 <HAL_TIM_ConfigClockSource+0x16c>
 8001fa4:	2b50      	cmp	r3, #80	; 0x50
 8001fa6:	d03c      	beq.n	8002022 <HAL_TIM_ConfigClockSource+0xfa>
 8001fa8:	2b50      	cmp	r3, #80	; 0x50
 8001faa:	d873      	bhi.n	8002094 <HAL_TIM_ConfigClockSource+0x16c>
 8001fac:	2b40      	cmp	r3, #64	; 0x40
 8001fae:	d058      	beq.n	8002062 <HAL_TIM_ConfigClockSource+0x13a>
 8001fb0:	2b40      	cmp	r3, #64	; 0x40
 8001fb2:	d86f      	bhi.n	8002094 <HAL_TIM_ConfigClockSource+0x16c>
 8001fb4:	2b30      	cmp	r3, #48	; 0x30
 8001fb6:	d064      	beq.n	8002082 <HAL_TIM_ConfigClockSource+0x15a>
 8001fb8:	2b30      	cmp	r3, #48	; 0x30
 8001fba:	d86b      	bhi.n	8002094 <HAL_TIM_ConfigClockSource+0x16c>
 8001fbc:	2b20      	cmp	r3, #32
 8001fbe:	d060      	beq.n	8002082 <HAL_TIM_ConfigClockSource+0x15a>
 8001fc0:	2b20      	cmp	r3, #32
 8001fc2:	d867      	bhi.n	8002094 <HAL_TIM_ConfigClockSource+0x16c>
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d05c      	beq.n	8002082 <HAL_TIM_ConfigClockSource+0x15a>
 8001fc8:	2b10      	cmp	r3, #16
 8001fca:	d05a      	beq.n	8002082 <HAL_TIM_ConfigClockSource+0x15a>
 8001fcc:	e062      	b.n	8002094 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6818      	ldr	r0, [r3, #0]
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	6899      	ldr	r1, [r3, #8]
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685a      	ldr	r2, [r3, #4]
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	f000 fbe5 	bl	80027ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001ff0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	68ba      	ldr	r2, [r7, #8]
 8001ff8:	609a      	str	r2, [r3, #8]
      break;
 8001ffa:	e04f      	b.n	800209c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6818      	ldr	r0, [r3, #0]
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	6899      	ldr	r1, [r3, #8]
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685a      	ldr	r2, [r3, #4]
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	f000 fbce 	bl	80027ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	689a      	ldr	r2, [r3, #8]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800201e:	609a      	str	r2, [r3, #8]
      break;
 8002020:	e03c      	b.n	800209c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6818      	ldr	r0, [r3, #0]
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	6859      	ldr	r1, [r3, #4]
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	461a      	mov	r2, r3
 8002030:	f000 fb42 	bl	80026b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2150      	movs	r1, #80	; 0x50
 800203a:	4618      	mov	r0, r3
 800203c:	f000 fb9b 	bl	8002776 <TIM_ITRx_SetConfig>
      break;
 8002040:	e02c      	b.n	800209c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6818      	ldr	r0, [r3, #0]
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	6859      	ldr	r1, [r3, #4]
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	461a      	mov	r2, r3
 8002050:	f000 fb61 	bl	8002716 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2160      	movs	r1, #96	; 0x60
 800205a:	4618      	mov	r0, r3
 800205c:	f000 fb8b 	bl	8002776 <TIM_ITRx_SetConfig>
      break;
 8002060:	e01c      	b.n	800209c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6818      	ldr	r0, [r3, #0]
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	6859      	ldr	r1, [r3, #4]
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	461a      	mov	r2, r3
 8002070:	f000 fb22 	bl	80026b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2140      	movs	r1, #64	; 0x40
 800207a:	4618      	mov	r0, r3
 800207c:	f000 fb7b 	bl	8002776 <TIM_ITRx_SetConfig>
      break;
 8002080:	e00c      	b.n	800209c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4619      	mov	r1, r3
 800208c:	4610      	mov	r0, r2
 800208e:	f000 fb72 	bl	8002776 <TIM_ITRx_SetConfig>
      break;
 8002092:	e003      	b.n	800209c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	73fb      	strb	r3, [r7, #15]
      break;
 8002098:	e000      	b.n	800209c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800209a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80020ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	fffeff88 	.word	0xfffeff88

080020bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4a40      	ldr	r2, [pc, #256]	; (80021d0 <TIM_Base_SetConfig+0x114>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d013      	beq.n	80020fc <TIM_Base_SetConfig+0x40>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020da:	d00f      	beq.n	80020fc <TIM_Base_SetConfig+0x40>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4a3d      	ldr	r2, [pc, #244]	; (80021d4 <TIM_Base_SetConfig+0x118>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d00b      	beq.n	80020fc <TIM_Base_SetConfig+0x40>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	4a3c      	ldr	r2, [pc, #240]	; (80021d8 <TIM_Base_SetConfig+0x11c>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d007      	beq.n	80020fc <TIM_Base_SetConfig+0x40>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4a3b      	ldr	r2, [pc, #236]	; (80021dc <TIM_Base_SetConfig+0x120>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d003      	beq.n	80020fc <TIM_Base_SetConfig+0x40>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	4a3a      	ldr	r2, [pc, #232]	; (80021e0 <TIM_Base_SetConfig+0x124>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d108      	bne.n	800210e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002102:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	68fa      	ldr	r2, [r7, #12]
 800210a:	4313      	orrs	r3, r2
 800210c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a2f      	ldr	r2, [pc, #188]	; (80021d0 <TIM_Base_SetConfig+0x114>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d02b      	beq.n	800216e <TIM_Base_SetConfig+0xb2>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800211c:	d027      	beq.n	800216e <TIM_Base_SetConfig+0xb2>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a2c      	ldr	r2, [pc, #176]	; (80021d4 <TIM_Base_SetConfig+0x118>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d023      	beq.n	800216e <TIM_Base_SetConfig+0xb2>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a2b      	ldr	r2, [pc, #172]	; (80021d8 <TIM_Base_SetConfig+0x11c>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d01f      	beq.n	800216e <TIM_Base_SetConfig+0xb2>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a2a      	ldr	r2, [pc, #168]	; (80021dc <TIM_Base_SetConfig+0x120>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d01b      	beq.n	800216e <TIM_Base_SetConfig+0xb2>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a29      	ldr	r2, [pc, #164]	; (80021e0 <TIM_Base_SetConfig+0x124>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d017      	beq.n	800216e <TIM_Base_SetConfig+0xb2>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a28      	ldr	r2, [pc, #160]	; (80021e4 <TIM_Base_SetConfig+0x128>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d013      	beq.n	800216e <TIM_Base_SetConfig+0xb2>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a27      	ldr	r2, [pc, #156]	; (80021e8 <TIM_Base_SetConfig+0x12c>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d00f      	beq.n	800216e <TIM_Base_SetConfig+0xb2>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a26      	ldr	r2, [pc, #152]	; (80021ec <TIM_Base_SetConfig+0x130>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d00b      	beq.n	800216e <TIM_Base_SetConfig+0xb2>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a25      	ldr	r2, [pc, #148]	; (80021f0 <TIM_Base_SetConfig+0x134>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d007      	beq.n	800216e <TIM_Base_SetConfig+0xb2>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a24      	ldr	r2, [pc, #144]	; (80021f4 <TIM_Base_SetConfig+0x138>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d003      	beq.n	800216e <TIM_Base_SetConfig+0xb2>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a23      	ldr	r2, [pc, #140]	; (80021f8 <TIM_Base_SetConfig+0x13c>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d108      	bne.n	8002180 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002174:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	4313      	orrs	r3, r2
 800217e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	695b      	ldr	r3, [r3, #20]
 800218a:	4313      	orrs	r3, r2
 800218c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	68fa      	ldr	r2, [r7, #12]
 8002192:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	689a      	ldr	r2, [r3, #8]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	4a0a      	ldr	r2, [pc, #40]	; (80021d0 <TIM_Base_SetConfig+0x114>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d003      	beq.n	80021b4 <TIM_Base_SetConfig+0xf8>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4a0c      	ldr	r2, [pc, #48]	; (80021e0 <TIM_Base_SetConfig+0x124>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d103      	bne.n	80021bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	691a      	ldr	r2, [r3, #16]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	615a      	str	r2, [r3, #20]
}
 80021c2:	bf00      	nop
 80021c4:	3714      	adds	r7, #20
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	40010000 	.word	0x40010000
 80021d4:	40000400 	.word	0x40000400
 80021d8:	40000800 	.word	0x40000800
 80021dc:	40000c00 	.word	0x40000c00
 80021e0:	40010400 	.word	0x40010400
 80021e4:	40014000 	.word	0x40014000
 80021e8:	40014400 	.word	0x40014400
 80021ec:	40014800 	.word	0x40014800
 80021f0:	40001800 	.word	0x40001800
 80021f4:	40001c00 	.word	0x40001c00
 80021f8:	40002000 	.word	0x40002000

080021fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b087      	sub	sp, #28
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a1b      	ldr	r3, [r3, #32]
 800220a:	f023 0201 	bic.w	r2, r3, #1
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6a1b      	ldr	r3, [r3, #32]
 8002216:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002224:	68fa      	ldr	r2, [r7, #12]
 8002226:	4b2b      	ldr	r3, [pc, #172]	; (80022d4 <TIM_OC1_SetConfig+0xd8>)
 8002228:	4013      	ands	r3, r2
 800222a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f023 0303 	bic.w	r3, r3, #3
 8002232:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	68fa      	ldr	r2, [r7, #12]
 800223a:	4313      	orrs	r3, r2
 800223c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	f023 0302 	bic.w	r3, r3, #2
 8002244:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	697a      	ldr	r2, [r7, #20]
 800224c:	4313      	orrs	r3, r2
 800224e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	4a21      	ldr	r2, [pc, #132]	; (80022d8 <TIM_OC1_SetConfig+0xdc>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d003      	beq.n	8002260 <TIM_OC1_SetConfig+0x64>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4a20      	ldr	r2, [pc, #128]	; (80022dc <TIM_OC1_SetConfig+0xe0>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d10c      	bne.n	800227a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	f023 0308 	bic.w	r3, r3, #8
 8002266:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	697a      	ldr	r2, [r7, #20]
 800226e:	4313      	orrs	r3, r2
 8002270:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	f023 0304 	bic.w	r3, r3, #4
 8002278:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a16      	ldr	r2, [pc, #88]	; (80022d8 <TIM_OC1_SetConfig+0xdc>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d003      	beq.n	800228a <TIM_OC1_SetConfig+0x8e>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a15      	ldr	r2, [pc, #84]	; (80022dc <TIM_OC1_SetConfig+0xe0>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d111      	bne.n	80022ae <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002290:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002298:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	695b      	ldr	r3, [r3, #20]
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	693a      	ldr	r2, [r7, #16]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	693a      	ldr	r2, [r7, #16]
 80022b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	68fa      	ldr	r2, [r7, #12]
 80022b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685a      	ldr	r2, [r3, #4]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	697a      	ldr	r2, [r7, #20]
 80022c6:	621a      	str	r2, [r3, #32]
}
 80022c8:	bf00      	nop
 80022ca:	371c      	adds	r7, #28
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr
 80022d4:	fffeff8f 	.word	0xfffeff8f
 80022d8:	40010000 	.word	0x40010000
 80022dc:	40010400 	.word	0x40010400

080022e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b087      	sub	sp, #28
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6a1b      	ldr	r3, [r3, #32]
 80022ee:	f023 0210 	bic.w	r2, r3, #16
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a1b      	ldr	r3, [r3, #32]
 80022fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	699b      	ldr	r3, [r3, #24]
 8002306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002308:	68fa      	ldr	r2, [r7, #12]
 800230a:	4b2e      	ldr	r3, [pc, #184]	; (80023c4 <TIM_OC2_SetConfig+0xe4>)
 800230c:	4013      	ands	r3, r2
 800230e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002316:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	021b      	lsls	r3, r3, #8
 800231e:	68fa      	ldr	r2, [r7, #12]
 8002320:	4313      	orrs	r3, r2
 8002322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	f023 0320 	bic.w	r3, r3, #32
 800232a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	011b      	lsls	r3, r3, #4
 8002332:	697a      	ldr	r2, [r7, #20]
 8002334:	4313      	orrs	r3, r2
 8002336:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4a23      	ldr	r2, [pc, #140]	; (80023c8 <TIM_OC2_SetConfig+0xe8>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d003      	beq.n	8002348 <TIM_OC2_SetConfig+0x68>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4a22      	ldr	r2, [pc, #136]	; (80023cc <TIM_OC2_SetConfig+0xec>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d10d      	bne.n	8002364 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800234e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	011b      	lsls	r3, r3, #4
 8002356:	697a      	ldr	r2, [r7, #20]
 8002358:	4313      	orrs	r3, r2
 800235a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002362:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	4a18      	ldr	r2, [pc, #96]	; (80023c8 <TIM_OC2_SetConfig+0xe8>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d003      	beq.n	8002374 <TIM_OC2_SetConfig+0x94>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4a17      	ldr	r2, [pc, #92]	; (80023cc <TIM_OC2_SetConfig+0xec>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d113      	bne.n	800239c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800237a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002382:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	695b      	ldr	r3, [r3, #20]
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	4313      	orrs	r3, r2
 800238e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	4313      	orrs	r3, r2
 800239a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	693a      	ldr	r2, [r7, #16]
 80023a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	68fa      	ldr	r2, [r7, #12]
 80023a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685a      	ldr	r2, [r3, #4]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	697a      	ldr	r2, [r7, #20]
 80023b4:	621a      	str	r2, [r3, #32]
}
 80023b6:	bf00      	nop
 80023b8:	371c      	adds	r7, #28
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	feff8fff 	.word	0xfeff8fff
 80023c8:	40010000 	.word	0x40010000
 80023cc:	40010400 	.word	0x40010400

080023d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b087      	sub	sp, #28
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6a1b      	ldr	r3, [r3, #32]
 80023de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a1b      	ldr	r3, [r3, #32]
 80023ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	69db      	ldr	r3, [r3, #28]
 80023f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80023f8:	68fa      	ldr	r2, [r7, #12]
 80023fa:	4b2d      	ldr	r3, [pc, #180]	; (80024b0 <TIM_OC3_SetConfig+0xe0>)
 80023fc:	4013      	ands	r3, r2
 80023fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f023 0303 	bic.w	r3, r3, #3
 8002406:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	68fa      	ldr	r2, [r7, #12]
 800240e:	4313      	orrs	r3, r2
 8002410:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002418:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	021b      	lsls	r3, r3, #8
 8002420:	697a      	ldr	r2, [r7, #20]
 8002422:	4313      	orrs	r3, r2
 8002424:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a22      	ldr	r2, [pc, #136]	; (80024b4 <TIM_OC3_SetConfig+0xe4>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d003      	beq.n	8002436 <TIM_OC3_SetConfig+0x66>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a21      	ldr	r2, [pc, #132]	; (80024b8 <TIM_OC3_SetConfig+0xe8>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d10d      	bne.n	8002452 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800243c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	021b      	lsls	r3, r3, #8
 8002444:	697a      	ldr	r2, [r7, #20]
 8002446:	4313      	orrs	r3, r2
 8002448:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002450:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a17      	ldr	r2, [pc, #92]	; (80024b4 <TIM_OC3_SetConfig+0xe4>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d003      	beq.n	8002462 <TIM_OC3_SetConfig+0x92>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a16      	ldr	r2, [pc, #88]	; (80024b8 <TIM_OC3_SetConfig+0xe8>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d113      	bne.n	800248a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002468:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002470:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	695b      	ldr	r3, [r3, #20]
 8002476:	011b      	lsls	r3, r3, #4
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	4313      	orrs	r3, r2
 800247c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	699b      	ldr	r3, [r3, #24]
 8002482:	011b      	lsls	r3, r3, #4
 8002484:	693a      	ldr	r2, [r7, #16]
 8002486:	4313      	orrs	r3, r2
 8002488:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	68fa      	ldr	r2, [r7, #12]
 8002494:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685a      	ldr	r2, [r3, #4]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	697a      	ldr	r2, [r7, #20]
 80024a2:	621a      	str	r2, [r3, #32]
}
 80024a4:	bf00      	nop
 80024a6:	371c      	adds	r7, #28
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr
 80024b0:	fffeff8f 	.word	0xfffeff8f
 80024b4:	40010000 	.word	0x40010000
 80024b8:	40010400 	.word	0x40010400

080024bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80024bc:	b480      	push	{r7}
 80024be:	b087      	sub	sp, #28
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a1b      	ldr	r3, [r3, #32]
 80024ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a1b      	ldr	r3, [r3, #32]
 80024d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	69db      	ldr	r3, [r3, #28]
 80024e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80024e4:	68fa      	ldr	r2, [r7, #12]
 80024e6:	4b1e      	ldr	r3, [pc, #120]	; (8002560 <TIM_OC4_SetConfig+0xa4>)
 80024e8:	4013      	ands	r3, r2
 80024ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	021b      	lsls	r3, r3, #8
 80024fa:	68fa      	ldr	r2, [r7, #12]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002506:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	031b      	lsls	r3, r3, #12
 800250e:	693a      	ldr	r2, [r7, #16]
 8002510:	4313      	orrs	r3, r2
 8002512:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	4a13      	ldr	r2, [pc, #76]	; (8002564 <TIM_OC4_SetConfig+0xa8>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d003      	beq.n	8002524 <TIM_OC4_SetConfig+0x68>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	4a12      	ldr	r2, [pc, #72]	; (8002568 <TIM_OC4_SetConfig+0xac>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d109      	bne.n	8002538 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800252a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	695b      	ldr	r3, [r3, #20]
 8002530:	019b      	lsls	r3, r3, #6
 8002532:	697a      	ldr	r2, [r7, #20]
 8002534:	4313      	orrs	r3, r2
 8002536:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	697a      	ldr	r2, [r7, #20]
 800253c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	68fa      	ldr	r2, [r7, #12]
 8002542:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685a      	ldr	r2, [r3, #4]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	693a      	ldr	r2, [r7, #16]
 8002550:	621a      	str	r2, [r3, #32]
}
 8002552:	bf00      	nop
 8002554:	371c      	adds	r7, #28
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	feff8fff 	.word	0xfeff8fff
 8002564:	40010000 	.word	0x40010000
 8002568:	40010400 	.word	0x40010400

0800256c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800256c:	b480      	push	{r7}
 800256e:	b087      	sub	sp, #28
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a1b      	ldr	r3, [r3, #32]
 800257a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a1b      	ldr	r3, [r3, #32]
 8002586:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002594:	68fa      	ldr	r2, [r7, #12]
 8002596:	4b1b      	ldr	r3, [pc, #108]	; (8002604 <TIM_OC5_SetConfig+0x98>)
 8002598:	4013      	ands	r3, r2
 800259a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	68fa      	ldr	r2, [r7, #12]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80025ac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	041b      	lsls	r3, r3, #16
 80025b4:	693a      	ldr	r2, [r7, #16]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a12      	ldr	r2, [pc, #72]	; (8002608 <TIM_OC5_SetConfig+0x9c>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d003      	beq.n	80025ca <TIM_OC5_SetConfig+0x5e>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a11      	ldr	r2, [pc, #68]	; (800260c <TIM_OC5_SetConfig+0xa0>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d109      	bne.n	80025de <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025d0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	695b      	ldr	r3, [r3, #20]
 80025d6:	021b      	lsls	r3, r3, #8
 80025d8:	697a      	ldr	r2, [r7, #20]
 80025da:	4313      	orrs	r3, r2
 80025dc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	697a      	ldr	r2, [r7, #20]
 80025e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	68fa      	ldr	r2, [r7, #12]
 80025e8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685a      	ldr	r2, [r3, #4]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	693a      	ldr	r2, [r7, #16]
 80025f6:	621a      	str	r2, [r3, #32]
}
 80025f8:	bf00      	nop
 80025fa:	371c      	adds	r7, #28
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr
 8002604:	fffeff8f 	.word	0xfffeff8f
 8002608:	40010000 	.word	0x40010000
 800260c:	40010400 	.word	0x40010400

08002610 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002610:	b480      	push	{r7}
 8002612:	b087      	sub	sp, #28
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a1b      	ldr	r3, [r3, #32]
 800261e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a1b      	ldr	r3, [r3, #32]
 800262a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002638:	68fa      	ldr	r2, [r7, #12]
 800263a:	4b1c      	ldr	r3, [pc, #112]	; (80026ac <TIM_OC6_SetConfig+0x9c>)
 800263c:	4013      	ands	r3, r2
 800263e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	021b      	lsls	r3, r3, #8
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	4313      	orrs	r3, r2
 800264a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002652:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	051b      	lsls	r3, r3, #20
 800265a:	693a      	ldr	r2, [r7, #16]
 800265c:	4313      	orrs	r3, r2
 800265e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	4a13      	ldr	r2, [pc, #76]	; (80026b0 <TIM_OC6_SetConfig+0xa0>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d003      	beq.n	8002670 <TIM_OC6_SetConfig+0x60>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4a12      	ldr	r2, [pc, #72]	; (80026b4 <TIM_OC6_SetConfig+0xa4>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d109      	bne.n	8002684 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002676:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	695b      	ldr	r3, [r3, #20]
 800267c:	029b      	lsls	r3, r3, #10
 800267e:	697a      	ldr	r2, [r7, #20]
 8002680:	4313      	orrs	r3, r2
 8002682:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	697a      	ldr	r2, [r7, #20]
 8002688:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	68fa      	ldr	r2, [r7, #12]
 800268e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685a      	ldr	r2, [r3, #4]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	621a      	str	r2, [r3, #32]
}
 800269e:	bf00      	nop
 80026a0:	371c      	adds	r7, #28
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	feff8fff 	.word	0xfeff8fff
 80026b0:	40010000 	.word	0x40010000
 80026b4:	40010400 	.word	0x40010400

080026b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b087      	sub	sp, #28
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6a1b      	ldr	r3, [r3, #32]
 80026c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6a1b      	ldr	r3, [r3, #32]
 80026ce:	f023 0201 	bic.w	r2, r3, #1
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	699b      	ldr	r3, [r3, #24]
 80026da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	011b      	lsls	r3, r3, #4
 80026e8:	693a      	ldr	r2, [r7, #16]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	f023 030a 	bic.w	r3, r3, #10
 80026f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80026f6:	697a      	ldr	r2, [r7, #20]
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	693a      	ldr	r2, [r7, #16]
 8002702:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	697a      	ldr	r2, [r7, #20]
 8002708:	621a      	str	r2, [r3, #32]
}
 800270a:	bf00      	nop
 800270c:	371c      	adds	r7, #28
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr

08002716 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002716:	b480      	push	{r7}
 8002718:	b087      	sub	sp, #28
 800271a:	af00      	add	r7, sp, #0
 800271c:	60f8      	str	r0, [r7, #12]
 800271e:	60b9      	str	r1, [r7, #8]
 8002720:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6a1b      	ldr	r3, [r3, #32]
 8002726:	f023 0210 	bic.w	r2, r3, #16
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	699b      	ldr	r3, [r3, #24]
 8002732:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6a1b      	ldr	r3, [r3, #32]
 8002738:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002740:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	031b      	lsls	r3, r3, #12
 8002746:	697a      	ldr	r2, [r7, #20]
 8002748:	4313      	orrs	r3, r2
 800274a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002752:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	011b      	lsls	r3, r3, #4
 8002758:	693a      	ldr	r2, [r7, #16]
 800275a:	4313      	orrs	r3, r2
 800275c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	697a      	ldr	r2, [r7, #20]
 8002762:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	621a      	str	r2, [r3, #32]
}
 800276a:	bf00      	nop
 800276c:	371c      	adds	r7, #28
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr

08002776 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002776:	b480      	push	{r7}
 8002778:	b085      	sub	sp, #20
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
 800277e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800278c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800278e:	683a      	ldr	r2, [r7, #0]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	4313      	orrs	r3, r2
 8002794:	f043 0307 	orr.w	r3, r3, #7
 8002798:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	68fa      	ldr	r2, [r7, #12]
 800279e:	609a      	str	r2, [r3, #8]
}
 80027a0:	bf00      	nop
 80027a2:	3714      	adds	r7, #20
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b087      	sub	sp, #28
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	607a      	str	r2, [r7, #4]
 80027b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	021a      	lsls	r2, r3, #8
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	431a      	orrs	r2, r3
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	697a      	ldr	r2, [r7, #20]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	697a      	ldr	r2, [r7, #20]
 80027de:	609a      	str	r2, [r3, #8]
}
 80027e0:	bf00      	nop
 80027e2:	371c      	adds	r7, #28
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b085      	sub	sp, #20
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d101      	bne.n	8002804 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002800:	2302      	movs	r3, #2
 8002802:	e06d      	b.n	80028e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2202      	movs	r2, #2
 8002810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a30      	ldr	r2, [pc, #192]	; (80028ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d004      	beq.n	8002838 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a2f      	ldr	r2, [pc, #188]	; (80028f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d108      	bne.n	800284a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800283e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	68fa      	ldr	r2, [r7, #12]
 8002846:	4313      	orrs	r3, r2
 8002848:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002850:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68fa      	ldr	r2, [r7, #12]
 8002858:	4313      	orrs	r3, r2
 800285a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	68fa      	ldr	r2, [r7, #12]
 8002862:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a20      	ldr	r2, [pc, #128]	; (80028ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d022      	beq.n	80028b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002876:	d01d      	beq.n	80028b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a1d      	ldr	r2, [pc, #116]	; (80028f4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d018      	beq.n	80028b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a1c      	ldr	r2, [pc, #112]	; (80028f8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d013      	beq.n	80028b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a1a      	ldr	r2, [pc, #104]	; (80028fc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d00e      	beq.n	80028b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a15      	ldr	r2, [pc, #84]	; (80028f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d009      	beq.n	80028b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a16      	ldr	r2, [pc, #88]	; (8002900 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d004      	beq.n	80028b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a15      	ldr	r2, [pc, #84]	; (8002904 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d10c      	bne.n	80028ce <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	68ba      	ldr	r2, [r7, #8]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	68ba      	ldr	r2, [r7, #8]
 80028cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2201      	movs	r2, #1
 80028d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028de:	2300      	movs	r3, #0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3714      	adds	r7, #20
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr
 80028ec:	40010000 	.word	0x40010000
 80028f0:	40010400 	.word	0x40010400
 80028f4:	40000400 	.word	0x40000400
 80028f8:	40000800 	.word	0x40000800
 80028fc:	40000c00 	.word	0x40000c00
 8002900:	40014000 	.word	0x40014000
 8002904:	40001800 	.word	0x40001800

08002908 <DC_MOTOR_Init>:
#include "DC_MOTOR.h"
#include "DC_MOTOR_cfg.h"
#include "main.h"
#include "tim.h"
void DC_MOTOR_Init(uint8_t au8_MOTOR_Instance)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b08c      	sub	sp, #48	; 0x30
 800290c:	af00      	add	r7, sp, #0
 800290e:	4603      	mov	r3, r0
 8002910:	71fb      	strb	r3, [r7, #7]
	  MX_TIM2_Init();
 8002912:	f7fd ff41 	bl	8000798 <MX_TIM2_Init>
	  MX_TIM3_Init();
 8002916:	f7fd ffd5 	bl	80008c4 <MX_TIM3_Init>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800291a:	f107 031c 	add.w	r3, r7, #28
 800291e:	2200      	movs	r2, #0
 8002920:	601a      	str	r2, [r3, #0]
 8002922:	605a      	str	r2, [r3, #4]
 8002924:	609a      	str	r2, [r3, #8]
 8002926:	60da      	str	r2, [r3, #12]
 8002928:	611a      	str	r2, [r3, #16]
  //  TIM_OC_InitTypeDef sConfigOC = {0};
    //TIM_HandleTypeDef htim;

	/*--------[ Configure The 2 Direction Control GPIO Pins ]-------*/

    if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO == GPIOA || DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO == GPIOA)
 800292a:	79fa      	ldrb	r2, [r7, #7]
 800292c:	498d      	ldr	r1, [pc, #564]	; (8002b64 <DC_MOTOR_Init+0x25c>)
 800292e:	4613      	mov	r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	4413      	add	r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	440b      	add	r3, r1
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a8b      	ldr	r2, [pc, #556]	; (8002b68 <DC_MOTOR_Init+0x260>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d00b      	beq.n	8002958 <DC_MOTOR_Init+0x50>
 8002940:	79fa      	ldrb	r2, [r7, #7]
 8002942:	4988      	ldr	r1, [pc, #544]	; (8002b64 <DC_MOTOR_Init+0x25c>)
 8002944:	4613      	mov	r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	4413      	add	r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	440b      	add	r3, r1
 800294e:	3304      	adds	r3, #4
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a85      	ldr	r2, [pc, #532]	; (8002b68 <DC_MOTOR_Init+0x260>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d10c      	bne.n	8002972 <DC_MOTOR_Init+0x6a>
    {
    	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002958:	4b84      	ldr	r3, [pc, #528]	; (8002b6c <DC_MOTOR_Init+0x264>)
 800295a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295c:	4a83      	ldr	r2, [pc, #524]	; (8002b6c <DC_MOTOR_Init+0x264>)
 800295e:	f043 0301 	orr.w	r3, r3, #1
 8002962:	6313      	str	r3, [r2, #48]	; 0x30
 8002964:	4b81      	ldr	r3, [pc, #516]	; (8002b6c <DC_MOTOR_Init+0x264>)
 8002966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002968:	f003 0301 	and.w	r3, r3, #1
 800296c:	61bb      	str	r3, [r7, #24]
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	e08e      	b.n	8002a90 <DC_MOTOR_Init+0x188>
    }
    else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO == GPIOB || DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO == GPIOB)
 8002972:	79fa      	ldrb	r2, [r7, #7]
 8002974:	497b      	ldr	r1, [pc, #492]	; (8002b64 <DC_MOTOR_Init+0x25c>)
 8002976:	4613      	mov	r3, r2
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	4413      	add	r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	440b      	add	r3, r1
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a7b      	ldr	r2, [pc, #492]	; (8002b70 <DC_MOTOR_Init+0x268>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d00b      	beq.n	80029a0 <DC_MOTOR_Init+0x98>
 8002988:	79fa      	ldrb	r2, [r7, #7]
 800298a:	4976      	ldr	r1, [pc, #472]	; (8002b64 <DC_MOTOR_Init+0x25c>)
 800298c:	4613      	mov	r3, r2
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	4413      	add	r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	440b      	add	r3, r1
 8002996:	3304      	adds	r3, #4
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a75      	ldr	r2, [pc, #468]	; (8002b70 <DC_MOTOR_Init+0x268>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d10c      	bne.n	80029ba <DC_MOTOR_Init+0xb2>
    {
    	__HAL_RCC_GPIOB_CLK_ENABLE();
 80029a0:	4b72      	ldr	r3, [pc, #456]	; (8002b6c <DC_MOTOR_Init+0x264>)
 80029a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a4:	4a71      	ldr	r2, [pc, #452]	; (8002b6c <DC_MOTOR_Init+0x264>)
 80029a6:	f043 0302 	orr.w	r3, r3, #2
 80029aa:	6313      	str	r3, [r2, #48]	; 0x30
 80029ac:	4b6f      	ldr	r3, [pc, #444]	; (8002b6c <DC_MOTOR_Init+0x264>)
 80029ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b0:	f003 0302 	and.w	r3, r3, #2
 80029b4:	617b      	str	r3, [r7, #20]
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	e06a      	b.n	8002a90 <DC_MOTOR_Init+0x188>
    }
    else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO == GPIOC || DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO == GPIOC)
 80029ba:	79fa      	ldrb	r2, [r7, #7]
 80029bc:	4969      	ldr	r1, [pc, #420]	; (8002b64 <DC_MOTOR_Init+0x25c>)
 80029be:	4613      	mov	r3, r2
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	4413      	add	r3, r2
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	440b      	add	r3, r1
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a6a      	ldr	r2, [pc, #424]	; (8002b74 <DC_MOTOR_Init+0x26c>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d00b      	beq.n	80029e8 <DC_MOTOR_Init+0xe0>
 80029d0:	79fa      	ldrb	r2, [r7, #7]
 80029d2:	4964      	ldr	r1, [pc, #400]	; (8002b64 <DC_MOTOR_Init+0x25c>)
 80029d4:	4613      	mov	r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	4413      	add	r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	440b      	add	r3, r1
 80029de:	3304      	adds	r3, #4
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a64      	ldr	r2, [pc, #400]	; (8002b74 <DC_MOTOR_Init+0x26c>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d10c      	bne.n	8002a02 <DC_MOTOR_Init+0xfa>
    {
        __HAL_RCC_GPIOC_CLK_ENABLE();
 80029e8:	4b60      	ldr	r3, [pc, #384]	; (8002b6c <DC_MOTOR_Init+0x264>)
 80029ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ec:	4a5f      	ldr	r2, [pc, #380]	; (8002b6c <DC_MOTOR_Init+0x264>)
 80029ee:	f043 0304 	orr.w	r3, r3, #4
 80029f2:	6313      	str	r3, [r2, #48]	; 0x30
 80029f4:	4b5d      	ldr	r3, [pc, #372]	; (8002b6c <DC_MOTOR_Init+0x264>)
 80029f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f8:	f003 0304 	and.w	r3, r3, #4
 80029fc:	613b      	str	r3, [r7, #16]
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	e046      	b.n	8002a90 <DC_MOTOR_Init+0x188>
    }
    else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO == GPIOD || DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO == GPIOD)
 8002a02:	79fa      	ldrb	r2, [r7, #7]
 8002a04:	4957      	ldr	r1, [pc, #348]	; (8002b64 <DC_MOTOR_Init+0x25c>)
 8002a06:	4613      	mov	r3, r2
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	4413      	add	r3, r2
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	440b      	add	r3, r1
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a59      	ldr	r2, [pc, #356]	; (8002b78 <DC_MOTOR_Init+0x270>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d00b      	beq.n	8002a30 <DC_MOTOR_Init+0x128>
 8002a18:	79fa      	ldrb	r2, [r7, #7]
 8002a1a:	4952      	ldr	r1, [pc, #328]	; (8002b64 <DC_MOTOR_Init+0x25c>)
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	4413      	add	r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	440b      	add	r3, r1
 8002a26:	3304      	adds	r3, #4
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a53      	ldr	r2, [pc, #332]	; (8002b78 <DC_MOTOR_Init+0x270>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d10c      	bne.n	8002a4a <DC_MOTOR_Init+0x142>
    {
        __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a30:	4b4e      	ldr	r3, [pc, #312]	; (8002b6c <DC_MOTOR_Init+0x264>)
 8002a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a34:	4a4d      	ldr	r2, [pc, #308]	; (8002b6c <DC_MOTOR_Init+0x264>)
 8002a36:	f043 0308 	orr.w	r3, r3, #8
 8002a3a:	6313      	str	r3, [r2, #48]	; 0x30
 8002a3c:	4b4b      	ldr	r3, [pc, #300]	; (8002b6c <DC_MOTOR_Init+0x264>)
 8002a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a40:	f003 0308 	and.w	r3, r3, #8
 8002a44:	60fb      	str	r3, [r7, #12]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	e022      	b.n	8002a90 <DC_MOTOR_Init+0x188>
    }
    else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO == GPIOE || DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO == GPIOE)
 8002a4a:	79fa      	ldrb	r2, [r7, #7]
 8002a4c:	4945      	ldr	r1, [pc, #276]	; (8002b64 <DC_MOTOR_Init+0x25c>)
 8002a4e:	4613      	mov	r3, r2
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	4413      	add	r3, r2
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	440b      	add	r3, r1
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a48      	ldr	r2, [pc, #288]	; (8002b7c <DC_MOTOR_Init+0x274>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d00b      	beq.n	8002a78 <DC_MOTOR_Init+0x170>
 8002a60:	79fa      	ldrb	r2, [r7, #7]
 8002a62:	4940      	ldr	r1, [pc, #256]	; (8002b64 <DC_MOTOR_Init+0x25c>)
 8002a64:	4613      	mov	r3, r2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	4413      	add	r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	440b      	add	r3, r1
 8002a6e:	3304      	adds	r3, #4
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a42      	ldr	r2, [pc, #264]	; (8002b7c <DC_MOTOR_Init+0x274>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d10b      	bne.n	8002a90 <DC_MOTOR_Init+0x188>
    {
        __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a78:	4b3c      	ldr	r3, [pc, #240]	; (8002b6c <DC_MOTOR_Init+0x264>)
 8002a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7c:	4a3b      	ldr	r2, [pc, #236]	; (8002b6c <DC_MOTOR_Init+0x264>)
 8002a7e:	f043 0310 	orr.w	r3, r3, #16
 8002a82:	6313      	str	r3, [r2, #48]	; 0x30
 8002a84:	4b39      	ldr	r3, [pc, #228]	; (8002b6c <DC_MOTOR_Init+0x264>)
 8002a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a88:	f003 0310 	and.w	r3, r3, #16
 8002a8c:	60bb      	str	r3, [r7, #8]
 8002a8e:	68bb      	ldr	r3, [r7, #8]
    }
	GPIO_InitStruct.Pin = DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_PIN;
 8002a90:	79fa      	ldrb	r2, [r7, #7]
 8002a92:	4934      	ldr	r1, [pc, #208]	; (8002b64 <DC_MOTOR_Init+0x25c>)
 8002a94:	4613      	mov	r3, r2
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	4413      	add	r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	440b      	add	r3, r1
 8002a9e:	3308      	adds	r3, #8
 8002aa0:	881b      	ldrh	r3, [r3, #0]
 8002aa2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO, &GPIO_InitStruct);
 8002aac:	79fa      	ldrb	r2, [r7, #7]
 8002aae:	492d      	ldr	r1, [pc, #180]	; (8002b64 <DC_MOTOR_Init+0x25c>)
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	4413      	add	r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	440b      	add	r3, r1
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f107 021c 	add.w	r2, r7, #28
 8002ac0:	4611      	mov	r1, r2
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7fe f9b8 	bl	8000e38 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_PIN;
 8002ac8:	79fa      	ldrb	r2, [r7, #7]
 8002aca:	4926      	ldr	r1, [pc, #152]	; (8002b64 <DC_MOTOR_Init+0x25c>)
 8002acc:	4613      	mov	r3, r2
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	4413      	add	r3, r2
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	440b      	add	r3, r1
 8002ad6:	330a      	adds	r3, #10
 8002ad8:	881b      	ldrh	r3, [r3, #0]
 8002ada:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002adc:	2301      	movs	r3, #1
 8002ade:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull =GPIO_PULLDOWN ;
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	627b      	str	r3, [r7, #36]	; 0x24

	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO, &GPIO_InitStruct);
 8002ae8:	79fa      	ldrb	r2, [r7, #7]
 8002aea:	491e      	ldr	r1, [pc, #120]	; (8002b64 <DC_MOTOR_Init+0x25c>)
 8002aec:	4613      	mov	r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	4413      	add	r3, r2
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	440b      	add	r3, r1
 8002af6:	3304      	adds	r3, #4
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f107 021c 	add.w	r2, r7, #28
 8002afe:	4611      	mov	r1, r2
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7fe f999 	bl	8000e38 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_PIN, 0);
 8002b06:	79fa      	ldrb	r2, [r7, #7]
 8002b08:	4916      	ldr	r1, [pc, #88]	; (8002b64 <DC_MOTOR_Init+0x25c>)
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	4413      	add	r3, r2
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	440b      	add	r3, r1
 8002b14:	6818      	ldr	r0, [r3, #0]
 8002b16:	79fa      	ldrb	r2, [r7, #7]
 8002b18:	4912      	ldr	r1, [pc, #72]	; (8002b64 <DC_MOTOR_Init+0x25c>)
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	4413      	add	r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	440b      	add	r3, r1
 8002b24:	3308      	adds	r3, #8
 8002b26:	881b      	ldrh	r3, [r3, #0]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	f7fe fb30 	bl	8001190 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_PIN, 0);
 8002b30:	79fa      	ldrb	r2, [r7, #7]
 8002b32:	490c      	ldr	r1, [pc, #48]	; (8002b64 <DC_MOTOR_Init+0x25c>)
 8002b34:	4613      	mov	r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	4413      	add	r3, r2
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	440b      	add	r3, r1
 8002b3e:	3304      	adds	r3, #4
 8002b40:	6818      	ldr	r0, [r3, #0]
 8002b42:	79fa      	ldrb	r2, [r7, #7]
 8002b44:	4907      	ldr	r1, [pc, #28]	; (8002b64 <DC_MOTOR_Init+0x25c>)
 8002b46:	4613      	mov	r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	4413      	add	r3, r2
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	440b      	add	r3, r1
 8002b50:	330a      	adds	r3, #10
 8002b52:	881b      	ldrh	r3, [r3, #0]
 8002b54:	2200      	movs	r2, #0
 8002b56:	4619      	mov	r1, r3
 8002b58:	f7fe fb1a 	bl	8001190 <HAL_GPIO_WritePin>


	  /* USER CODE BEGIN TIM3_Init 1 */


}
 8002b5c:	bf00      	nop
 8002b5e:	3730      	adds	r7, #48	; 0x30
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	08002d78 	.word	0x08002d78
 8002b68:	40020000 	.word	0x40020000
 8002b6c:	40023800 	.word	0x40023800
 8002b70:	40020400 	.word	0x40020400
 8002b74:	40020800 	.word	0x40020800
 8002b78:	40020c00 	.word	0x40020c00
 8002b7c:	40021000 	.word	0x40021000

08002b80 <DC_MOTOR_Start>:


void DC_MOTOR_Start(uint8_t au8_MOTOR_Instance, uint8_t au8_DIR, uint16_t au16_SPEED)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	4603      	mov	r3, r0
 8002b88:	71fb      	strb	r3, [r7, #7]
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	71bb      	strb	r3, [r7, #6]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	80bb      	strh	r3, [r7, #4]
	/* Write To The 2 Direction Control Pins */
	if(au8_DIR == DIR_CW)
 8002b92:	79bb      	ldrb	r3, [r7, #6]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d12b      	bne.n	8002bf0 <DC_MOTOR_Start+0x70>
	{
		HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_PIN, 1);
 8002b98:	79fa      	ldrb	r2, [r7, #7]
 8002b9a:	4956      	ldr	r1, [pc, #344]	; (8002cf4 <DC_MOTOR_Start+0x174>)
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	4413      	add	r3, r2
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	440b      	add	r3, r1
 8002ba6:	6818      	ldr	r0, [r3, #0]
 8002ba8:	79fa      	ldrb	r2, [r7, #7]
 8002baa:	4952      	ldr	r1, [pc, #328]	; (8002cf4 <DC_MOTOR_Start+0x174>)
 8002bac:	4613      	mov	r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	4413      	add	r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	440b      	add	r3, r1
 8002bb6:	3308      	adds	r3, #8
 8002bb8:	881b      	ldrh	r3, [r3, #0]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	f7fe fae7 	bl	8001190 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_PIN, 0);
 8002bc2:	79fa      	ldrb	r2, [r7, #7]
 8002bc4:	494b      	ldr	r1, [pc, #300]	; (8002cf4 <DC_MOTOR_Start+0x174>)
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	4413      	add	r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	440b      	add	r3, r1
 8002bd0:	3304      	adds	r3, #4
 8002bd2:	6818      	ldr	r0, [r3, #0]
 8002bd4:	79fa      	ldrb	r2, [r7, #7]
 8002bd6:	4947      	ldr	r1, [pc, #284]	; (8002cf4 <DC_MOTOR_Start+0x174>)
 8002bd8:	4613      	mov	r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	4413      	add	r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	440b      	add	r3, r1
 8002be2:	330a      	adds	r3, #10
 8002be4:	881b      	ldrh	r3, [r3, #0]
 8002be6:	2200      	movs	r2, #0
 8002be8:	4619      	mov	r1, r3
 8002bea:	f7fe fad1 	bl	8001190 <HAL_GPIO_WritePin>
 8002bee:	e02d      	b.n	8002c4c <DC_MOTOR_Start+0xcc>
	}
	else if(au8_DIR == DIR_CCW)
 8002bf0:	79bb      	ldrb	r3, [r7, #6]
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d12a      	bne.n	8002c4c <DC_MOTOR_Start+0xcc>
	{
		HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_PIN, 0);
 8002bf6:	79fa      	ldrb	r2, [r7, #7]
 8002bf8:	493e      	ldr	r1, [pc, #248]	; (8002cf4 <DC_MOTOR_Start+0x174>)
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	4413      	add	r3, r2
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	440b      	add	r3, r1
 8002c04:	6818      	ldr	r0, [r3, #0]
 8002c06:	79fa      	ldrb	r2, [r7, #7]
 8002c08:	493a      	ldr	r1, [pc, #232]	; (8002cf4 <DC_MOTOR_Start+0x174>)
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	4413      	add	r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	440b      	add	r3, r1
 8002c14:	3308      	adds	r3, #8
 8002c16:	881b      	ldrh	r3, [r3, #0]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	f7fe fab8 	bl	8001190 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_PIN, 1);
 8002c20:	79fa      	ldrb	r2, [r7, #7]
 8002c22:	4934      	ldr	r1, [pc, #208]	; (8002cf4 <DC_MOTOR_Start+0x174>)
 8002c24:	4613      	mov	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	4413      	add	r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	440b      	add	r3, r1
 8002c2e:	3304      	adds	r3, #4
 8002c30:	6818      	ldr	r0, [r3, #0]
 8002c32:	79fa      	ldrb	r2, [r7, #7]
 8002c34:	492f      	ldr	r1, [pc, #188]	; (8002cf4 <DC_MOTOR_Start+0x174>)
 8002c36:	4613      	mov	r3, r2
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	4413      	add	r3, r2
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	440b      	add	r3, r1
 8002c40:	330a      	adds	r3, #10
 8002c42:	881b      	ldrh	r3, [r3, #0]
 8002c44:	2201      	movs	r2, #1
 8002c46:	4619      	mov	r1, r3
 8002c48:	f7fe faa2 	bl	8001190 <HAL_GPIO_WritePin>
	}

	/* Write The Speed Value To The PWM CH DutyCycle Register */
	if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_1)
 8002c4c:	79fa      	ldrb	r2, [r7, #7]
 8002c4e:	4929      	ldr	r1, [pc, #164]	; (8002cf4 <DC_MOTOR_Start+0x174>)
 8002c50:	4613      	mov	r3, r2
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	4413      	add	r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	440b      	add	r3, r1
 8002c5a:	3310      	adds	r3, #16
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d10b      	bne.n	8002c7a <DC_MOTOR_Start+0xfa>
	{

		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR1 = au16_SPEED;
 8002c62:	79fa      	ldrb	r2, [r7, #7]
 8002c64:	4923      	ldr	r1, [pc, #140]	; (8002cf4 <DC_MOTOR_Start+0x174>)
 8002c66:	4613      	mov	r3, r2
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	4413      	add	r3, r2
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	440b      	add	r3, r1
 8002c70:	330c      	adds	r3, #12
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	88ba      	ldrh	r2, [r7, #4]
 8002c76:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = au16_SPEED;
	}
}
 8002c78:	e038      	b.n	8002cec <DC_MOTOR_Start+0x16c>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_2)
 8002c7a:	79fa      	ldrb	r2, [r7, #7]
 8002c7c:	491d      	ldr	r1, [pc, #116]	; (8002cf4 <DC_MOTOR_Start+0x174>)
 8002c7e:	4613      	mov	r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	4413      	add	r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	440b      	add	r3, r1
 8002c88:	3310      	adds	r3, #16
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2b04      	cmp	r3, #4
 8002c8e:	d10b      	bne.n	8002ca8 <DC_MOTOR_Start+0x128>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR2 = au16_SPEED;
 8002c90:	79fa      	ldrb	r2, [r7, #7]
 8002c92:	4918      	ldr	r1, [pc, #96]	; (8002cf4 <DC_MOTOR_Start+0x174>)
 8002c94:	4613      	mov	r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	4413      	add	r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	440b      	add	r3, r1
 8002c9e:	330c      	adds	r3, #12
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	88ba      	ldrh	r2, [r7, #4]
 8002ca4:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002ca6:	e021      	b.n	8002cec <DC_MOTOR_Start+0x16c>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_3)
 8002ca8:	79fa      	ldrb	r2, [r7, #7]
 8002caa:	4912      	ldr	r1, [pc, #72]	; (8002cf4 <DC_MOTOR_Start+0x174>)
 8002cac:	4613      	mov	r3, r2
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	4413      	add	r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	440b      	add	r3, r1
 8002cb6:	3310      	adds	r3, #16
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2b08      	cmp	r3, #8
 8002cbc:	d10b      	bne.n	8002cd6 <DC_MOTOR_Start+0x156>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR3 = au16_SPEED;
 8002cbe:	79fa      	ldrb	r2, [r7, #7]
 8002cc0:	490c      	ldr	r1, [pc, #48]	; (8002cf4 <DC_MOTOR_Start+0x174>)
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	4413      	add	r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	440b      	add	r3, r1
 8002ccc:	330c      	adds	r3, #12
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	88ba      	ldrh	r2, [r7, #4]
 8002cd2:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002cd4:	e00a      	b.n	8002cec <DC_MOTOR_Start+0x16c>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = au16_SPEED;
 8002cd6:	79fa      	ldrb	r2, [r7, #7]
 8002cd8:	4906      	ldr	r1, [pc, #24]	; (8002cf4 <DC_MOTOR_Start+0x174>)
 8002cda:	4613      	mov	r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	4413      	add	r3, r2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	440b      	add	r3, r1
 8002ce4:	330c      	adds	r3, #12
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	88ba      	ldrh	r2, [r7, #4]
 8002cea:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002cec:	bf00      	nop
 8002cee:	3708      	adds	r7, #8
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	08002d78 	.word	0x08002d78

08002cf8 <__libc_init_array>:
 8002cf8:	b570      	push	{r4, r5, r6, lr}
 8002cfa:	4d0d      	ldr	r5, [pc, #52]	; (8002d30 <__libc_init_array+0x38>)
 8002cfc:	4c0d      	ldr	r4, [pc, #52]	; (8002d34 <__libc_init_array+0x3c>)
 8002cfe:	1b64      	subs	r4, r4, r5
 8002d00:	10a4      	asrs	r4, r4, #2
 8002d02:	2600      	movs	r6, #0
 8002d04:	42a6      	cmp	r6, r4
 8002d06:	d109      	bne.n	8002d1c <__libc_init_array+0x24>
 8002d08:	4d0b      	ldr	r5, [pc, #44]	; (8002d38 <__libc_init_array+0x40>)
 8002d0a:	4c0c      	ldr	r4, [pc, #48]	; (8002d3c <__libc_init_array+0x44>)
 8002d0c:	f000 f820 	bl	8002d50 <_init>
 8002d10:	1b64      	subs	r4, r4, r5
 8002d12:	10a4      	asrs	r4, r4, #2
 8002d14:	2600      	movs	r6, #0
 8002d16:	42a6      	cmp	r6, r4
 8002d18:	d105      	bne.n	8002d26 <__libc_init_array+0x2e>
 8002d1a:	bd70      	pop	{r4, r5, r6, pc}
 8002d1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d20:	4798      	blx	r3
 8002d22:	3601      	adds	r6, #1
 8002d24:	e7ee      	b.n	8002d04 <__libc_init_array+0xc>
 8002d26:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d2a:	4798      	blx	r3
 8002d2c:	3601      	adds	r6, #1
 8002d2e:	e7f2      	b.n	8002d16 <__libc_init_array+0x1e>
 8002d30:	08002df8 	.word	0x08002df8
 8002d34:	08002df8 	.word	0x08002df8
 8002d38:	08002df8 	.word	0x08002df8
 8002d3c:	08002dfc 	.word	0x08002dfc

08002d40 <memset>:
 8002d40:	4402      	add	r2, r0
 8002d42:	4603      	mov	r3, r0
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d100      	bne.n	8002d4a <memset+0xa>
 8002d48:	4770      	bx	lr
 8002d4a:	f803 1b01 	strb.w	r1, [r3], #1
 8002d4e:	e7f9      	b.n	8002d44 <memset+0x4>

08002d50 <_init>:
 8002d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d52:	bf00      	nop
 8002d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d56:	bc08      	pop	{r3}
 8002d58:	469e      	mov	lr, r3
 8002d5a:	4770      	bx	lr

08002d5c <_fini>:
 8002d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d5e:	bf00      	nop
 8002d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d62:	bc08      	pop	{r3}
 8002d64:	469e      	mov	lr, r3
 8002d66:	4770      	bx	lr
