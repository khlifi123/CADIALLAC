
IMAD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004860  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08004a30  08004a30  00014a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b1c  08004b1c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004b1c  08004b1c  00014b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b24  08004b24  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b24  08004b24  00014b24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b28  08004b28  00014b28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004b2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  20000070  08004b9c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  08004b9c  00020100  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bfbb  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e70  00000000  00000000  0002c05b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b70  00000000  00000000  0002ded0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a60  00000000  00000000  0002ea40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022921  00000000  00000000  0002f4a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d88b  00000000  00000000  00051dc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cfabc  00000000  00000000  0005f64c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012f108  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003634  00000000  00000000  0012f158  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004a18 	.word	0x08004a18

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08004a18 	.word	0x08004a18

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <HAL_TIM_IC_CaptureCallback>:
    }
	//Course_Verin1=CountM1/9.50;//floor(CountM1*IMPULSION_TO_COURSE);
	return CountM1;
}
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
	  if(htim->Instance==TIM2)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80005c4:	d14c      	bne.n	8000660 <HAL_TIM_IC_CaptureCallback+0xac>
	  {
		  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)// MOTEUR 1
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	7f1b      	ldrb	r3, [r3, #28]
 80005ca:	2b01      	cmp	r3, #1
 80005cc:	d148      	bne.n	8000660 <HAL_TIM_IC_CaptureCallback+0xac>

		  	{
			   // Interruption_1();
                CountM1++;
 80005ce:	4b26      	ldr	r3, [pc, #152]	; (8000668 <HAL_TIM_IC_CaptureCallback+0xb4>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	3301      	adds	r3, #1
 80005d4:	4a24      	ldr	r2, [pc, #144]	; (8000668 <HAL_TIM_IC_CaptureCallback+0xb4>)
 80005d6:	6013      	str	r3, [r2, #0]


				if (Is_First_Captured1 == 0)
 80005d8:	4b24      	ldr	r3, [pc, #144]	; (800066c <HAL_TIM_IC_CaptureCallback+0xb8>)
 80005da:	edd3 7a00 	vldr	s15, [r3]
 80005de:	eef5 7a40 	vcmp.f32	s15, #0.0
 80005e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005e6:	d110      	bne.n	800060a <HAL_TIM_IC_CaptureCallback+0x56>
					{

					  IC1_Val1=HAL_GetTick();
 80005e8:	f000 fbd6 	bl	8000d98 <HAL_GetTick>
 80005ec:	4603      	mov	r3, r0
 80005ee:	461a      	mov	r2, r3
 80005f0:	4b1f      	ldr	r3, [pc, #124]	; (8000670 <HAL_TIM_IC_CaptureCallback+0xbc>)
 80005f2:	601a      	str	r2, [r3, #0]
					  Is_First_Captured1++;
 80005f4:	4b1d      	ldr	r3, [pc, #116]	; (800066c <HAL_TIM_IC_CaptureCallback+0xb8>)
 80005f6:	edd3 7a00 	vldr	s15, [r3]
 80005fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80005fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000602:	4b1a      	ldr	r3, [pc, #104]	; (800066c <HAL_TIM_IC_CaptureCallback+0xb8>)
 8000604:	edc3 7a00 	vstr	s15, [r3]
					  Is_First_Captured1 = 0;

					}

		  	}
	  }}
 8000608:	e02a      	b.n	8000660 <HAL_TIM_IC_CaptureCallback+0xac>
		  		else if (Is_First_Captured1 == 1)
 800060a:	4b18      	ldr	r3, [pc, #96]	; (800066c <HAL_TIM_IC_CaptureCallback+0xb8>)
 800060c:	edd3 7a00 	vldr	s15, [r3]
 8000610:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000614:	eef4 7a47 	vcmp.f32	s15, s14
 8000618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800061c:	d120      	bne.n	8000660 <HAL_TIM_IC_CaptureCallback+0xac>
					  periodMotor1 = HAL_GetTick()-IC1_Val1;//periode1
 800061e:	f000 fbbb 	bl	8000d98 <HAL_GetTick>
 8000622:	4603      	mov	r3, r0
 8000624:	b29a      	uxth	r2, r3
 8000626:	4b12      	ldr	r3, [pc, #72]	; (8000670 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	b29b      	uxth	r3, r3
 800062c:	1ad3      	subs	r3, r2, r3
 800062e:	b29a      	uxth	r2, r3
 8000630:	4b10      	ldr	r3, [pc, #64]	; (8000674 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8000632:	801a      	strh	r2, [r3, #0]
					  if(periodMotor1!=0)
 8000634:	4b0f      	ldr	r3, [pc, #60]	; (8000674 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8000636:	881b      	ldrh	r3, [r3, #0]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d00d      	beq.n	8000658 <HAL_TIM_IC_CaptureCallback+0xa4>
					    speedMotor1 = frequencyM1;
 800063c:	4b0d      	ldr	r3, [pc, #52]	; (8000674 <HAL_TIM_IC_CaptureCallback+0xc0>)
 800063e:	881b      	ldrh	r3, [r3, #0]
 8000640:	461a      	mov	r2, r3
 8000642:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000646:	fb93 f3f2 	sdiv	r3, r3, r2
 800064a:	ee07 3a90 	vmov	s15, r3
 800064e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000652:	4b09      	ldr	r3, [pc, #36]	; (8000678 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8000654:	edc3 7a00 	vstr	s15, [r3]
					  Is_First_Captured1 = 0;
 8000658:	4b04      	ldr	r3, [pc, #16]	; (800066c <HAL_TIM_IC_CaptureCallback+0xb8>)
 800065a:	f04f 0200 	mov.w	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
	  }}
 8000660:	bf00      	nop
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	200000e0 	.word	0x200000e0
 800066c:	200000d8 	.word	0x200000d8
 8000670:	200000dc 	.word	0x200000dc
 8000674:	200000d4 	.word	0x200000d4
 8000678:	200000e4 	.word	0x200000e4

0800067c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000682:	f000 fb23 	bl	8000ccc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000686:	f000 f825 	bl	80006d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800068a:	f000 f8e9 	bl	8000860 <MX_GPIO_Init>
  MX_TIM2_Init();
 800068e:	f000 f893 	bl	80007b8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  DC_MOTOR_Init(DC_MOTOR1);
 8000692:	2000      	movs	r0, #0
 8000694:	f002 ff7c 	bl	8003590 <DC_MOTOR_Init>
  //HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
  //HAL_Delay(10);
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);//PA0 START INTERRUPTION
 8000698:	2100      	movs	r1, #0
 800069a:	480b      	ldr	r0, [pc, #44]	; (80006c8 <main+0x4c>)
 800069c:	f001 fe30 	bl	8002300 <HAL_TIM_IC_Start_IT>

  /* USER CODE END 2 */
  int c=3;
 80006a0:	2303      	movs	r3, #3
 80006a2:	607b      	str	r3, [r7, #4]
printf("the value of  c is %d ok",c);
 80006a4:	6879      	ldr	r1, [r7, #4]
 80006a6:	4809      	ldr	r0, [pc, #36]	; (80006cc <main+0x50>)
 80006a8:	f003 fa28 	bl	8003afc <iprintf>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(CountM1<180){
 80006ac:	4b08      	ldr	r3, [pc, #32]	; (80006d0 <main+0x54>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	2bb3      	cmp	r3, #179	; 0xb3
 80006b2:	dc05      	bgt.n	80006c0 <main+0x44>
	  DC_MOTOR_Start(DC_MOTOR1, 1, 50);}
 80006b4:	2232      	movs	r2, #50	; 0x32
 80006b6:	2101      	movs	r1, #1
 80006b8:	2000      	movs	r0, #0
 80006ba:	f003 f8a3 	bl	8003804 <DC_MOTOR_Start>
 80006be:	e7f5      	b.n	80006ac <main+0x30>
	  else
		  Frein(DC_MOTOR1);
 80006c0:	2000      	movs	r0, #0
 80006c2:	f003 f95f 	bl	8003984 <Frein>
	  if(CountM1<180){
 80006c6:	e7f1      	b.n	80006ac <main+0x30>
 80006c8:	2000008c 	.word	0x2000008c
 80006cc:	08004a30 	.word	0x08004a30
 80006d0:	200000e0 	.word	0x200000e0

080006d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b094      	sub	sp, #80	; 0x50
 80006d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006da:	f107 031c 	add.w	r3, r7, #28
 80006de:	2234      	movs	r2, #52	; 0x34
 80006e0:	2100      	movs	r1, #0
 80006e2:	4618      	mov	r0, r3
 80006e4:	f003 fa02 	bl	8003aec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e8:	f107 0308 	add.w	r3, r7, #8
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]
 80006f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f8:	2300      	movs	r3, #0
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	4b2c      	ldr	r3, [pc, #176]	; (80007b0 <SystemClock_Config+0xdc>)
 80006fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000700:	4a2b      	ldr	r2, [pc, #172]	; (80007b0 <SystemClock_Config+0xdc>)
 8000702:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000706:	6413      	str	r3, [r2, #64]	; 0x40
 8000708:	4b29      	ldr	r3, [pc, #164]	; (80007b0 <SystemClock_Config+0xdc>)
 800070a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000710:	607b      	str	r3, [r7, #4]
 8000712:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000714:	2300      	movs	r3, #0
 8000716:	603b      	str	r3, [r7, #0]
 8000718:	4b26      	ldr	r3, [pc, #152]	; (80007b4 <SystemClock_Config+0xe0>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a25      	ldr	r2, [pc, #148]	; (80007b4 <SystemClock_Config+0xe0>)
 800071e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000722:	6013      	str	r3, [r2, #0]
 8000724:	4b23      	ldr	r3, [pc, #140]	; (80007b4 <SystemClock_Config+0xe0>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800072c:	603b      	str	r3, [r7, #0]
 800072e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000730:	2301      	movs	r3, #1
 8000732:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000734:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000738:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073a:	2302      	movs	r3, #2
 800073c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800073e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000742:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000744:	2304      	movs	r3, #4
 8000746:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000748:	23b4      	movs	r3, #180	; 0xb4
 800074a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800074c:	2302      	movs	r3, #2
 800074e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000750:	2302      	movs	r3, #2
 8000752:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000754:	2302      	movs	r3, #2
 8000756:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000758:	f107 031c 	add.w	r3, r7, #28
 800075c:	4618      	mov	r0, r3
 800075e:	f001 f971 	bl	8001a44 <HAL_RCC_OscConfig>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000768:	f000 f8c4 	bl	80008f4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800076c:	f000 fe04 	bl	8001378 <HAL_PWREx_EnableOverDrive>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000776:	f000 f8bd 	bl	80008f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800077a:	230f      	movs	r3, #15
 800077c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 800077e:	2303      	movs	r3, #3
 8000780:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000782:	2300      	movs	r3, #0
 8000784:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000786:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800078a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800078c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000790:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000792:	f107 0308 	add.w	r3, r7, #8
 8000796:	2105      	movs	r1, #5
 8000798:	4618      	mov	r0, r3
 800079a:	f000 fe3d 	bl	8001418 <HAL_RCC_ClockConfig>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80007a4:	f000 f8a6 	bl	80008f4 <Error_Handler>
  }
}
 80007a8:	bf00      	nop
 80007aa:	3750      	adds	r7, #80	; 0x50
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40023800 	.word	0x40023800
 80007b4:	40007000 	.word	0x40007000

080007b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b086      	sub	sp, #24
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007be:	f107 0310 	add.w	r3, r7, #16
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80007c8:	463b      	mov	r3, r7
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	605a      	str	r2, [r3, #4]
 80007d0:	609a      	str	r2, [r3, #8]
 80007d2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007d4:	4b21      	ldr	r3, [pc, #132]	; (800085c <MX_TIM2_Init+0xa4>)
 80007d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007da:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90;
 80007dc:	4b1f      	ldr	r3, [pc, #124]	; (800085c <MX_TIM2_Init+0xa4>)
 80007de:	225a      	movs	r2, #90	; 0x5a
 80007e0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007e2:	4b1e      	ldr	r3, [pc, #120]	; (800085c <MX_TIM2_Init+0xa4>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80007e8:	4b1c      	ldr	r3, [pc, #112]	; (800085c <MX_TIM2_Init+0xa4>)
 80007ea:	f04f 32ff 	mov.w	r2, #4294967295
 80007ee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80007f0:	4b1a      	ldr	r3, [pc, #104]	; (800085c <MX_TIM2_Init+0xa4>)
 80007f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007f6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007f8:	4b18      	ldr	r3, [pc, #96]	; (800085c <MX_TIM2_Init+0xa4>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80007fe:	4817      	ldr	r0, [pc, #92]	; (800085c <MX_TIM2_Init+0xa4>)
 8000800:	f001 fd2e 	bl	8002260 <HAL_TIM_IC_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800080a:	f000 f873 	bl	80008f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800080e:	2300      	movs	r3, #0
 8000810:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000812:	2300      	movs	r3, #0
 8000814:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000816:	f107 0310 	add.w	r3, r7, #16
 800081a:	4619      	mov	r1, r3
 800081c:	480f      	ldr	r0, [pc, #60]	; (800085c <MX_TIM2_Init+0xa4>)
 800081e:	f002 fe27 	bl	8003470 <HAL_TIMEx_MasterConfigSynchronization>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000828:	f000 f864 	bl	80008f4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800082c:	2300      	movs	r3, #0
 800082e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000830:	2301      	movs	r3, #1
 8000832:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000834:	2300      	movs	r3, #0
 8000836:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 8000838:	230f      	movs	r3, #15
 800083a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800083c:	463b      	mov	r3, r7
 800083e:	2200      	movs	r2, #0
 8000840:	4619      	mov	r1, r3
 8000842:	4806      	ldr	r0, [pc, #24]	; (800085c <MX_TIM2_Init+0xa4>)
 8000844:	f001 ff8c 	bl	8002760 <HAL_TIM_IC_ConfigChannel>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800084e:	f000 f851 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000852:	bf00      	nop
 8000854:	3718      	adds	r7, #24
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	2000008c 	.word	0x2000008c

08000860 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b088      	sub	sp, #32
 8000864:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000866:	f107 030c 	add.w	r3, r7, #12
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	60da      	str	r2, [r3, #12]
 8000874:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	60bb      	str	r3, [r7, #8]
 800087a:	4b1c      	ldr	r3, [pc, #112]	; (80008ec <MX_GPIO_Init+0x8c>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a1b      	ldr	r2, [pc, #108]	; (80008ec <MX_GPIO_Init+0x8c>)
 8000880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b19      	ldr	r3, [pc, #100]	; (80008ec <MX_GPIO_Init+0x8c>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	4b15      	ldr	r3, [pc, #84]	; (80008ec <MX_GPIO_Init+0x8c>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a14      	ldr	r2, [pc, #80]	; (80008ec <MX_GPIO_Init+0x8c>)
 800089c:	f043 0301 	orr.w	r3, r3, #1
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b12      	ldr	r3, [pc, #72]	; (80008ec <MX_GPIO_Init+0x8c>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0301 	and.w	r3, r3, #1
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	603b      	str	r3, [r7, #0]
 80008b2:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <MX_GPIO_Init+0x8c>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a0d      	ldr	r2, [pc, #52]	; (80008ec <MX_GPIO_Init+0x8c>)
 80008b8:	f043 0304 	orr.w	r3, r3, #4
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b0b      	ldr	r3, [pc, #44]	; (80008ec <MX_GPIO_Init+0x8c>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f003 0304 	and.w	r3, r3, #4
 80008c6:	603b      	str	r3, [r7, #0]
 80008c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d0:	2300      	movs	r3, #0
 80008d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008d8:	f107 030c 	add.w	r3, r7, #12
 80008dc:	4619      	mov	r1, r3
 80008de:	4804      	ldr	r0, [pc, #16]	; (80008f0 <MX_GPIO_Init+0x90>)
 80008e0:	f000 fb9c 	bl	800101c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008e4:	bf00      	nop
 80008e6:	3720      	adds	r7, #32
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40023800 	.word	0x40023800
 80008f0:	40020800 	.word	0x40020800

080008f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f8:	b672      	cpsid	i
}
 80008fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008fc:	e7fe      	b.n	80008fc <Error_Handler+0x8>
	...

08000900 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	607b      	str	r3, [r7, #4]
 800090a:	4b10      	ldr	r3, [pc, #64]	; (800094c <HAL_MspInit+0x4c>)
 800090c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800090e:	4a0f      	ldr	r2, [pc, #60]	; (800094c <HAL_MspInit+0x4c>)
 8000910:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000914:	6453      	str	r3, [r2, #68]	; 0x44
 8000916:	4b0d      	ldr	r3, [pc, #52]	; (800094c <HAL_MspInit+0x4c>)
 8000918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800091a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	603b      	str	r3, [r7, #0]
 8000926:	4b09      	ldr	r3, [pc, #36]	; (800094c <HAL_MspInit+0x4c>)
 8000928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092a:	4a08      	ldr	r2, [pc, #32]	; (800094c <HAL_MspInit+0x4c>)
 800092c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000930:	6413      	str	r3, [r2, #64]	; 0x40
 8000932:	4b06      	ldr	r3, [pc, #24]	; (800094c <HAL_MspInit+0x4c>)
 8000934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800093a:	603b      	str	r3, [r7, #0]
 800093c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800093e:	bf00      	nop
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	40023800 	.word	0x40023800

08000950 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000950:	b480      	push	{r7}
 8000952:	b085      	sub	sp, #20
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a0b      	ldr	r2, [pc, #44]	; (800098c <HAL_TIM_Base_MspInit+0x3c>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d10d      	bne.n	800097e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	60fb      	str	r3, [r7, #12]
 8000966:	4b0a      	ldr	r3, [pc, #40]	; (8000990 <HAL_TIM_Base_MspInit+0x40>)
 8000968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096a:	4a09      	ldr	r2, [pc, #36]	; (8000990 <HAL_TIM_Base_MspInit+0x40>)
 800096c:	f043 0301 	orr.w	r3, r3, #1
 8000970:	6453      	str	r3, [r2, #68]	; 0x44
 8000972:	4b07      	ldr	r3, [pc, #28]	; (8000990 <HAL_TIM_Base_MspInit+0x40>)
 8000974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800097e:	bf00      	nop
 8000980:	3714      	adds	r7, #20
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	40010000 	.word	0x40010000
 8000990:	40023800 	.word	0x40023800

08000994 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b08a      	sub	sp, #40	; 0x28
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099c:	f107 0314 	add.w	r3, r7, #20
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
 80009aa:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009b4:	d133      	bne.n	8000a1e <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	613b      	str	r3, [r7, #16]
 80009ba:	4b1b      	ldr	r3, [pc, #108]	; (8000a28 <HAL_TIM_IC_MspInit+0x94>)
 80009bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009be:	4a1a      	ldr	r2, [pc, #104]	; (8000a28 <HAL_TIM_IC_MspInit+0x94>)
 80009c0:	f043 0301 	orr.w	r3, r3, #1
 80009c4:	6413      	str	r3, [r2, #64]	; 0x40
 80009c6:	4b18      	ldr	r3, [pc, #96]	; (8000a28 <HAL_TIM_IC_MspInit+0x94>)
 80009c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ca:	f003 0301 	and.w	r3, r3, #1
 80009ce:	613b      	str	r3, [r7, #16]
 80009d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	60fb      	str	r3, [r7, #12]
 80009d6:	4b14      	ldr	r3, [pc, #80]	; (8000a28 <HAL_TIM_IC_MspInit+0x94>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a13      	ldr	r2, [pc, #76]	; (8000a28 <HAL_TIM_IC_MspInit+0x94>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <HAL_TIM_IC_MspInit+0x94>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009ee:	2301      	movs	r3, #1
 80009f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f2:	2302      	movs	r3, #2
 80009f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fa:	2300      	movs	r3, #0
 80009fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80009fe:	2301      	movs	r3, #1
 8000a00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a02:	f107 0314 	add.w	r3, r7, #20
 8000a06:	4619      	mov	r1, r3
 8000a08:	4808      	ldr	r0, [pc, #32]	; (8000a2c <HAL_TIM_IC_MspInit+0x98>)
 8000a0a:	f000 fb07 	bl	800101c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2100      	movs	r1, #0
 8000a12:	201c      	movs	r0, #28
 8000a14:	f000 facb 	bl	8000fae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a18:	201c      	movs	r0, #28
 8000a1a:	f000 fae4 	bl	8000fe6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a1e:	bf00      	nop
 8000a20:	3728      	adds	r7, #40	; 0x28
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40023800 	.word	0x40023800
 8000a2c:	40020000 	.word	0x40020000

08000a30 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b088      	sub	sp, #32
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a38:	f107 030c 	add.w	r3, r7, #12
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	60da      	str	r2, [r3, #12]
 8000a46:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a12      	ldr	r2, [pc, #72]	; (8000a98 <HAL_TIM_MspPostInit+0x68>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d11e      	bne.n	8000a90 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	60bb      	str	r3, [r7, #8]
 8000a56:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <HAL_TIM_MspPostInit+0x6c>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	4a10      	ldr	r2, [pc, #64]	; (8000a9c <HAL_TIM_MspPostInit+0x6c>)
 8000a5c:	f043 0301 	orr.w	r3, r3, #1
 8000a60:	6313      	str	r3, [r2, #48]	; 0x30
 8000a62:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <HAL_TIM_MspPostInit+0x6c>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	60bb      	str	r3, [r7, #8]
 8000a6c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a6e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a72:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a74:	2302      	movs	r3, #2
 8000a76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000a80:	2301      	movs	r3, #1
 8000a82:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a84:	f107 030c 	add.w	r3, r7, #12
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4805      	ldr	r0, [pc, #20]	; (8000aa0 <HAL_TIM_MspPostInit+0x70>)
 8000a8c:	f000 fac6 	bl	800101c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000a90:	bf00      	nop
 8000a92:	3720      	adds	r7, #32
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	40010000 	.word	0x40010000
 8000a9c:	40023800 	.word	0x40023800
 8000aa0:	40020000 	.word	0x40020000

08000aa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <NMI_Handler+0x4>

08000aaa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aae:	e7fe      	b.n	8000aae <HardFault_Handler+0x4>

08000ab0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab4:	e7fe      	b.n	8000ab4 <MemManage_Handler+0x4>

08000ab6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aba:	e7fe      	b.n	8000aba <BusFault_Handler+0x4>

08000abc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac0:	e7fe      	b.n	8000ac0 <UsageFault_Handler+0x4>

08000ac2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr

08000ad0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr

08000ade <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000af0:	f000 f93e 	bl	8000d70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000afc:	4802      	ldr	r0, [pc, #8]	; (8000b08 <TIM2_IRQHandler+0x10>)
 8000afe:	f001 fd27 	bl	8002550 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	2000008c 	.word	0x2000008c

08000b0c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b086      	sub	sp, #24
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	60f8      	str	r0, [r7, #12]
 8000b14:	60b9      	str	r1, [r7, #8]
 8000b16:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b18:	2300      	movs	r3, #0
 8000b1a:	617b      	str	r3, [r7, #20]
 8000b1c:	e00a      	b.n	8000b34 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b1e:	f3af 8000 	nop.w
 8000b22:	4601      	mov	r1, r0
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	1c5a      	adds	r2, r3, #1
 8000b28:	60ba      	str	r2, [r7, #8]
 8000b2a:	b2ca      	uxtb	r2, r1
 8000b2c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	3301      	adds	r3, #1
 8000b32:	617b      	str	r3, [r7, #20]
 8000b34:	697a      	ldr	r2, [r7, #20]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	dbf0      	blt.n	8000b1e <_read+0x12>
  }

  return len;
 8000b3c:	687b      	ldr	r3, [r7, #4]
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3718      	adds	r7, #24
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b086      	sub	sp, #24
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	60f8      	str	r0, [r7, #12]
 8000b4e:	60b9      	str	r1, [r7, #8]
 8000b50:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b52:	2300      	movs	r3, #0
 8000b54:	617b      	str	r3, [r7, #20]
 8000b56:	e009      	b.n	8000b6c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	1c5a      	adds	r2, r3, #1
 8000b5c:	60ba      	str	r2, [r7, #8]
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	4618      	mov	r0, r3
 8000b62:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	3301      	adds	r3, #1
 8000b6a:	617b      	str	r3, [r7, #20]
 8000b6c:	697a      	ldr	r2, [r7, #20]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	429a      	cmp	r2, r3
 8000b72:	dbf1      	blt.n	8000b58 <_write+0x12>
  }
  return len;
 8000b74:	687b      	ldr	r3, [r7, #4]
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	3718      	adds	r7, #24
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <_close>:

int _close(int file)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	b083      	sub	sp, #12
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b86:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr

08000b96 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b96:	b480      	push	{r7}
 8000b98:	b083      	sub	sp, #12
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	6078      	str	r0, [r7, #4]
 8000b9e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ba6:	605a      	str	r2, [r3, #4]
  return 0;
 8000ba8:	2300      	movs	r3, #0
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	370c      	adds	r7, #12
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr

08000bb6 <_isatty>:

int _isatty(int file)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	b083      	sub	sp, #12
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bbe:	2301      	movs	r3, #1
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr

08000bcc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b085      	sub	sp, #20
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	60f8      	str	r0, [r7, #12]
 8000bd4:	60b9      	str	r1, [r7, #8]
 8000bd6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bd8:	2300      	movs	r3, #0
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3714      	adds	r7, #20
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
	...

08000be8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bf0:	4a14      	ldr	r2, [pc, #80]	; (8000c44 <_sbrk+0x5c>)
 8000bf2:	4b15      	ldr	r3, [pc, #84]	; (8000c48 <_sbrk+0x60>)
 8000bf4:	1ad3      	subs	r3, r2, r3
 8000bf6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bfc:	4b13      	ldr	r3, [pc, #76]	; (8000c4c <_sbrk+0x64>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d102      	bne.n	8000c0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c04:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <_sbrk+0x64>)
 8000c06:	4a12      	ldr	r2, [pc, #72]	; (8000c50 <_sbrk+0x68>)
 8000c08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c0a:	4b10      	ldr	r3, [pc, #64]	; (8000c4c <_sbrk+0x64>)
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4413      	add	r3, r2
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	d207      	bcs.n	8000c28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c18:	f002 ff3e 	bl	8003a98 <__errno>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	220c      	movs	r2, #12
 8000c20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c22:	f04f 33ff 	mov.w	r3, #4294967295
 8000c26:	e009      	b.n	8000c3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c28:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <_sbrk+0x64>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c2e:	4b07      	ldr	r3, [pc, #28]	; (8000c4c <_sbrk+0x64>)
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4413      	add	r3, r2
 8000c36:	4a05      	ldr	r2, [pc, #20]	; (8000c4c <_sbrk+0x64>)
 8000c38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c3a:	68fb      	ldr	r3, [r7, #12]
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3718      	adds	r7, #24
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	20020000 	.word	0x20020000
 8000c48:	00000400 	.word	0x00000400
 8000c4c:	200000e8 	.word	0x200000e8
 8000c50:	20000100 	.word	0x20000100

08000c54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c58:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <SystemInit+0x20>)
 8000c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c5e:	4a05      	ldr	r2, [pc, #20]	; (8000c74 <SystemInit+0x20>)
 8000c60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cb0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c7c:	480d      	ldr	r0, [pc, #52]	; (8000cb4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c7e:	490e      	ldr	r1, [pc, #56]	; (8000cb8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c80:	4a0e      	ldr	r2, [pc, #56]	; (8000cbc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c84:	e002      	b.n	8000c8c <LoopCopyDataInit>

08000c86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c8a:	3304      	adds	r3, #4

08000c8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c90:	d3f9      	bcc.n	8000c86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c92:	4a0b      	ldr	r2, [pc, #44]	; (8000cc0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c94:	4c0b      	ldr	r4, [pc, #44]	; (8000cc4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c98:	e001      	b.n	8000c9e <LoopFillZerobss>

08000c9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c9c:	3204      	adds	r2, #4

08000c9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ca0:	d3fb      	bcc.n	8000c9a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ca2:	f7ff ffd7 	bl	8000c54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ca6:	f002 fefd 	bl	8003aa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000caa:	f7ff fce7 	bl	800067c <main>
  bx  lr    
 8000cae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cb0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cb8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000cbc:	08004b2c 	.word	0x08004b2c
  ldr r2, =_sbss
 8000cc0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000cc4:	20000100 	.word	0x20000100

08000cc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cc8:	e7fe      	b.n	8000cc8 <ADC_IRQHandler>
	...

08000ccc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cd0:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <HAL_Init+0x40>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a0d      	ldr	r2, [pc, #52]	; (8000d0c <HAL_Init+0x40>)
 8000cd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cdc:	4b0b      	ldr	r3, [pc, #44]	; (8000d0c <HAL_Init+0x40>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a0a      	ldr	r2, [pc, #40]	; (8000d0c <HAL_Init+0x40>)
 8000ce2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ce6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ce8:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <HAL_Init+0x40>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a07      	ldr	r2, [pc, #28]	; (8000d0c <HAL_Init+0x40>)
 8000cee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cf2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cf4:	2003      	movs	r0, #3
 8000cf6:	f000 f94f 	bl	8000f98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cfa:	200f      	movs	r0, #15
 8000cfc:	f000 f808 	bl	8000d10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d00:	f7ff fdfe 	bl	8000900 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d04:	2300      	movs	r3, #0
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40023c00 	.word	0x40023c00

08000d10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d18:	4b12      	ldr	r3, [pc, #72]	; (8000d64 <HAL_InitTick+0x54>)
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	4b12      	ldr	r3, [pc, #72]	; (8000d68 <HAL_InitTick+0x58>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	4619      	mov	r1, r3
 8000d22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f000 f967 	bl	8001002 <HAL_SYSTICK_Config>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e00e      	b.n	8000d5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2b0f      	cmp	r3, #15
 8000d42:	d80a      	bhi.n	8000d5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d44:	2200      	movs	r2, #0
 8000d46:	6879      	ldr	r1, [r7, #4]
 8000d48:	f04f 30ff 	mov.w	r0, #4294967295
 8000d4c:	f000 f92f 	bl	8000fae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d50:	4a06      	ldr	r2, [pc, #24]	; (8000d6c <HAL_InitTick+0x5c>)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d56:	2300      	movs	r3, #0
 8000d58:	e000      	b.n	8000d5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	20000000 	.word	0x20000000
 8000d68:	20000008 	.word	0x20000008
 8000d6c:	20000004 	.word	0x20000004

08000d70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d74:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <HAL_IncTick+0x20>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	461a      	mov	r2, r3
 8000d7a:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <HAL_IncTick+0x24>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4413      	add	r3, r2
 8000d80:	4a04      	ldr	r2, [pc, #16]	; (8000d94 <HAL_IncTick+0x24>)
 8000d82:	6013      	str	r3, [r2, #0]
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	20000008 	.word	0x20000008
 8000d94:	200000ec 	.word	0x200000ec

08000d98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d9c:	4b03      	ldr	r3, [pc, #12]	; (8000dac <HAL_GetTick+0x14>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	200000ec 	.word	0x200000ec

08000db0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000db8:	f7ff ffee 	bl	8000d98 <HAL_GetTick>
 8000dbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dc8:	d005      	beq.n	8000dd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dca:	4b0a      	ldr	r3, [pc, #40]	; (8000df4 <HAL_Delay+0x44>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	461a      	mov	r2, r3
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	4413      	add	r3, r2
 8000dd4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dd6:	bf00      	nop
 8000dd8:	f7ff ffde 	bl	8000d98 <HAL_GetTick>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	68bb      	ldr	r3, [r7, #8]
 8000de0:	1ad3      	subs	r3, r2, r3
 8000de2:	68fa      	ldr	r2, [r7, #12]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d8f7      	bhi.n	8000dd8 <HAL_Delay+0x28>
  {
  }
}
 8000de8:	bf00      	nop
 8000dea:	bf00      	nop
 8000dec:	3710      	adds	r7, #16
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	20000008 	.word	0x20000008

08000df8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	f003 0307 	and.w	r3, r3, #7
 8000e06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e08:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <__NVIC_SetPriorityGrouping+0x44>)
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e0e:	68ba      	ldr	r2, [r7, #8]
 8000e10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e14:	4013      	ands	r3, r2
 8000e16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e2a:	4a04      	ldr	r2, [pc, #16]	; (8000e3c <__NVIC_SetPriorityGrouping+0x44>)
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	60d3      	str	r3, [r2, #12]
}
 8000e30:	bf00      	nop
 8000e32:	3714      	adds	r7, #20
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e44:	4b04      	ldr	r3, [pc, #16]	; (8000e58 <__NVIC_GetPriorityGrouping+0x18>)
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	0a1b      	lsrs	r3, r3, #8
 8000e4a:	f003 0307 	and.w	r3, r3, #7
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	db0b      	blt.n	8000e86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	f003 021f 	and.w	r2, r3, #31
 8000e74:	4907      	ldr	r1, [pc, #28]	; (8000e94 <__NVIC_EnableIRQ+0x38>)
 8000e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7a:	095b      	lsrs	r3, r3, #5
 8000e7c:	2001      	movs	r0, #1
 8000e7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e86:	bf00      	nop
 8000e88:	370c      	adds	r7, #12
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	e000e100 	.word	0xe000e100

08000e98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	6039      	str	r1, [r7, #0]
 8000ea2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	db0a      	blt.n	8000ec2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	b2da      	uxtb	r2, r3
 8000eb0:	490c      	ldr	r1, [pc, #48]	; (8000ee4 <__NVIC_SetPriority+0x4c>)
 8000eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb6:	0112      	lsls	r2, r2, #4
 8000eb8:	b2d2      	uxtb	r2, r2
 8000eba:	440b      	add	r3, r1
 8000ebc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ec0:	e00a      	b.n	8000ed8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	b2da      	uxtb	r2, r3
 8000ec6:	4908      	ldr	r1, [pc, #32]	; (8000ee8 <__NVIC_SetPriority+0x50>)
 8000ec8:	79fb      	ldrb	r3, [r7, #7]
 8000eca:	f003 030f 	and.w	r3, r3, #15
 8000ece:	3b04      	subs	r3, #4
 8000ed0:	0112      	lsls	r2, r2, #4
 8000ed2:	b2d2      	uxtb	r2, r2
 8000ed4:	440b      	add	r3, r1
 8000ed6:	761a      	strb	r2, [r3, #24]
}
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	e000e100 	.word	0xe000e100
 8000ee8:	e000ed00 	.word	0xe000ed00

08000eec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b089      	sub	sp, #36	; 0x24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	f003 0307 	and.w	r3, r3, #7
 8000efe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	f1c3 0307 	rsb	r3, r3, #7
 8000f06:	2b04      	cmp	r3, #4
 8000f08:	bf28      	it	cs
 8000f0a:	2304      	movcs	r3, #4
 8000f0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	3304      	adds	r3, #4
 8000f12:	2b06      	cmp	r3, #6
 8000f14:	d902      	bls.n	8000f1c <NVIC_EncodePriority+0x30>
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	3b03      	subs	r3, #3
 8000f1a:	e000      	b.n	8000f1e <NVIC_EncodePriority+0x32>
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f20:	f04f 32ff 	mov.w	r2, #4294967295
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	43da      	mvns	r2, r3
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	401a      	ands	r2, r3
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f34:	f04f 31ff 	mov.w	r1, #4294967295
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3e:	43d9      	mvns	r1, r3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f44:	4313      	orrs	r3, r2
         );
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3724      	adds	r7, #36	; 0x24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
	...

08000f54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	3b01      	subs	r3, #1
 8000f60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f64:	d301      	bcc.n	8000f6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f66:	2301      	movs	r3, #1
 8000f68:	e00f      	b.n	8000f8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f6a:	4a0a      	ldr	r2, [pc, #40]	; (8000f94 <SysTick_Config+0x40>)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	3b01      	subs	r3, #1
 8000f70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f72:	210f      	movs	r1, #15
 8000f74:	f04f 30ff 	mov.w	r0, #4294967295
 8000f78:	f7ff ff8e 	bl	8000e98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f7c:	4b05      	ldr	r3, [pc, #20]	; (8000f94 <SysTick_Config+0x40>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f82:	4b04      	ldr	r3, [pc, #16]	; (8000f94 <SysTick_Config+0x40>)
 8000f84:	2207      	movs	r2, #7
 8000f86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f88:	2300      	movs	r3, #0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	e000e010 	.word	0xe000e010

08000f98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f7ff ff29 	bl	8000df8 <__NVIC_SetPriorityGrouping>
}
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b086      	sub	sp, #24
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	60b9      	str	r1, [r7, #8]
 8000fb8:	607a      	str	r2, [r7, #4]
 8000fba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fc0:	f7ff ff3e 	bl	8000e40 <__NVIC_GetPriorityGrouping>
 8000fc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	68b9      	ldr	r1, [r7, #8]
 8000fca:	6978      	ldr	r0, [r7, #20]
 8000fcc:	f7ff ff8e 	bl	8000eec <NVIC_EncodePriority>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fd6:	4611      	mov	r1, r2
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff ff5d 	bl	8000e98 <__NVIC_SetPriority>
}
 8000fde:	bf00      	nop
 8000fe0:	3718      	adds	r7, #24
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b082      	sub	sp, #8
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	4603      	mov	r3, r0
 8000fee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff ff31 	bl	8000e5c <__NVIC_EnableIRQ>
}
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	b082      	sub	sp, #8
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f7ff ffa2 	bl	8000f54 <SysTick_Config>
 8001010:	4603      	mov	r3, r0
}
 8001012:	4618      	mov	r0, r3
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
	...

0800101c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800101c:	b480      	push	{r7}
 800101e:	b089      	sub	sp, #36	; 0x24
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001026:	2300      	movs	r3, #0
 8001028:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800102a:	2300      	movs	r3, #0
 800102c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800102e:	2300      	movs	r3, #0
 8001030:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001032:	2300      	movs	r3, #0
 8001034:	61fb      	str	r3, [r7, #28]
 8001036:	e165      	b.n	8001304 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001038:	2201      	movs	r2, #1
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	697a      	ldr	r2, [r7, #20]
 8001048:	4013      	ands	r3, r2
 800104a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	429a      	cmp	r2, r3
 8001052:	f040 8154 	bne.w	80012fe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f003 0303 	and.w	r3, r3, #3
 800105e:	2b01      	cmp	r3, #1
 8001060:	d005      	beq.n	800106e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800106a:	2b02      	cmp	r3, #2
 800106c:	d130      	bne.n	80010d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	2203      	movs	r2, #3
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	43db      	mvns	r3, r3
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4013      	ands	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	68da      	ldr	r2, [r3, #12]
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	4313      	orrs	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010a4:	2201      	movs	r2, #1
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	43db      	mvns	r3, r3
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	4013      	ands	r3, r2
 80010b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	091b      	lsrs	r3, r3, #4
 80010ba:	f003 0201 	and.w	r2, r3, #1
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f003 0303 	and.w	r3, r3, #3
 80010d8:	2b03      	cmp	r3, #3
 80010da:	d017      	beq.n	800110c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	2203      	movs	r2, #3
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	43db      	mvns	r3, r3
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	4013      	ands	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	689a      	ldr	r2, [r3, #8]
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	4313      	orrs	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f003 0303 	and.w	r3, r3, #3
 8001114:	2b02      	cmp	r3, #2
 8001116:	d123      	bne.n	8001160 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	08da      	lsrs	r2, r3, #3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	3208      	adds	r2, #8
 8001120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001124:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	f003 0307 	and.w	r3, r3, #7
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	220f      	movs	r2, #15
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	43db      	mvns	r3, r3
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	4013      	ands	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	691a      	ldr	r2, [r3, #16]
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	f003 0307 	and.w	r3, r3, #7
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	4313      	orrs	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	08da      	lsrs	r2, r3, #3
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	3208      	adds	r2, #8
 800115a:	69b9      	ldr	r1, [r7, #24]
 800115c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	2203      	movs	r2, #3
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	43db      	mvns	r3, r3
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	4013      	ands	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f003 0203 	and.w	r2, r3, #3
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	4313      	orrs	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800119c:	2b00      	cmp	r3, #0
 800119e:	f000 80ae 	beq.w	80012fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	60fb      	str	r3, [r7, #12]
 80011a6:	4b5d      	ldr	r3, [pc, #372]	; (800131c <HAL_GPIO_Init+0x300>)
 80011a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011aa:	4a5c      	ldr	r2, [pc, #368]	; (800131c <HAL_GPIO_Init+0x300>)
 80011ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011b0:	6453      	str	r3, [r2, #68]	; 0x44
 80011b2:	4b5a      	ldr	r3, [pc, #360]	; (800131c <HAL_GPIO_Init+0x300>)
 80011b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011be:	4a58      	ldr	r2, [pc, #352]	; (8001320 <HAL_GPIO_Init+0x304>)
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	089b      	lsrs	r3, r3, #2
 80011c4:	3302      	adds	r3, #2
 80011c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	f003 0303 	and.w	r3, r3, #3
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	220f      	movs	r2, #15
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	43db      	mvns	r3, r3
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	4013      	ands	r3, r2
 80011e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a4f      	ldr	r2, [pc, #316]	; (8001324 <HAL_GPIO_Init+0x308>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d025      	beq.n	8001236 <HAL_GPIO_Init+0x21a>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a4e      	ldr	r2, [pc, #312]	; (8001328 <HAL_GPIO_Init+0x30c>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d01f      	beq.n	8001232 <HAL_GPIO_Init+0x216>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a4d      	ldr	r2, [pc, #308]	; (800132c <HAL_GPIO_Init+0x310>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d019      	beq.n	800122e <HAL_GPIO_Init+0x212>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a4c      	ldr	r2, [pc, #304]	; (8001330 <HAL_GPIO_Init+0x314>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d013      	beq.n	800122a <HAL_GPIO_Init+0x20e>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a4b      	ldr	r2, [pc, #300]	; (8001334 <HAL_GPIO_Init+0x318>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d00d      	beq.n	8001226 <HAL_GPIO_Init+0x20a>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a4a      	ldr	r2, [pc, #296]	; (8001338 <HAL_GPIO_Init+0x31c>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d007      	beq.n	8001222 <HAL_GPIO_Init+0x206>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a49      	ldr	r2, [pc, #292]	; (800133c <HAL_GPIO_Init+0x320>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d101      	bne.n	800121e <HAL_GPIO_Init+0x202>
 800121a:	2306      	movs	r3, #6
 800121c:	e00c      	b.n	8001238 <HAL_GPIO_Init+0x21c>
 800121e:	2307      	movs	r3, #7
 8001220:	e00a      	b.n	8001238 <HAL_GPIO_Init+0x21c>
 8001222:	2305      	movs	r3, #5
 8001224:	e008      	b.n	8001238 <HAL_GPIO_Init+0x21c>
 8001226:	2304      	movs	r3, #4
 8001228:	e006      	b.n	8001238 <HAL_GPIO_Init+0x21c>
 800122a:	2303      	movs	r3, #3
 800122c:	e004      	b.n	8001238 <HAL_GPIO_Init+0x21c>
 800122e:	2302      	movs	r3, #2
 8001230:	e002      	b.n	8001238 <HAL_GPIO_Init+0x21c>
 8001232:	2301      	movs	r3, #1
 8001234:	e000      	b.n	8001238 <HAL_GPIO_Init+0x21c>
 8001236:	2300      	movs	r3, #0
 8001238:	69fa      	ldr	r2, [r7, #28]
 800123a:	f002 0203 	and.w	r2, r2, #3
 800123e:	0092      	lsls	r2, r2, #2
 8001240:	4093      	lsls	r3, r2
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	4313      	orrs	r3, r2
 8001246:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001248:	4935      	ldr	r1, [pc, #212]	; (8001320 <HAL_GPIO_Init+0x304>)
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	089b      	lsrs	r3, r3, #2
 800124e:	3302      	adds	r3, #2
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001256:	4b3a      	ldr	r3, [pc, #232]	; (8001340 <HAL_GPIO_Init+0x324>)
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	43db      	mvns	r3, r3
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	4013      	ands	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d003      	beq.n	800127a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	4313      	orrs	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800127a:	4a31      	ldr	r2, [pc, #196]	; (8001340 <HAL_GPIO_Init+0x324>)
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001280:	4b2f      	ldr	r3, [pc, #188]	; (8001340 <HAL_GPIO_Init+0x324>)
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	43db      	mvns	r3, r3
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	4013      	ands	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d003      	beq.n	80012a4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012a4:	4a26      	ldr	r2, [pc, #152]	; (8001340 <HAL_GPIO_Init+0x324>)
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012aa:	4b25      	ldr	r3, [pc, #148]	; (8001340 <HAL_GPIO_Init+0x324>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	43db      	mvns	r3, r3
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	4013      	ands	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d003      	beq.n	80012ce <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012ce:	4a1c      	ldr	r2, [pc, #112]	; (8001340 <HAL_GPIO_Init+0x324>)
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012d4:	4b1a      	ldr	r3, [pc, #104]	; (8001340 <HAL_GPIO_Init+0x324>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	43db      	mvns	r3, r3
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	4013      	ands	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d003      	beq.n	80012f8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012f8:	4a11      	ldr	r2, [pc, #68]	; (8001340 <HAL_GPIO_Init+0x324>)
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	3301      	adds	r3, #1
 8001302:	61fb      	str	r3, [r7, #28]
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	2b0f      	cmp	r3, #15
 8001308:	f67f ae96 	bls.w	8001038 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800130c:	bf00      	nop
 800130e:	bf00      	nop
 8001310:	3724      	adds	r7, #36	; 0x24
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	40023800 	.word	0x40023800
 8001320:	40013800 	.word	0x40013800
 8001324:	40020000 	.word	0x40020000
 8001328:	40020400 	.word	0x40020400
 800132c:	40020800 	.word	0x40020800
 8001330:	40020c00 	.word	0x40020c00
 8001334:	40021000 	.word	0x40021000
 8001338:	40021400 	.word	0x40021400
 800133c:	40021800 	.word	0x40021800
 8001340:	40013c00 	.word	0x40013c00

08001344 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	460b      	mov	r3, r1
 800134e:	807b      	strh	r3, [r7, #2]
 8001350:	4613      	mov	r3, r2
 8001352:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001354:	787b      	ldrb	r3, [r7, #1]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d003      	beq.n	8001362 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800135a:	887a      	ldrh	r2, [r7, #2]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001360:	e003      	b.n	800136a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001362:	887b      	ldrh	r3, [r7, #2]
 8001364:	041a      	lsls	r2, r3, #16
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	619a      	str	r2, [r3, #24]
}
 800136a:	bf00      	nop
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
	...

08001378 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800137e:	2300      	movs	r3, #0
 8001380:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	603b      	str	r3, [r7, #0]
 8001386:	4b20      	ldr	r3, [pc, #128]	; (8001408 <HAL_PWREx_EnableOverDrive+0x90>)
 8001388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138a:	4a1f      	ldr	r2, [pc, #124]	; (8001408 <HAL_PWREx_EnableOverDrive+0x90>)
 800138c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001390:	6413      	str	r3, [r2, #64]	; 0x40
 8001392:	4b1d      	ldr	r3, [pc, #116]	; (8001408 <HAL_PWREx_EnableOverDrive+0x90>)
 8001394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800139a:	603b      	str	r3, [r7, #0]
 800139c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800139e:	4b1b      	ldr	r3, [pc, #108]	; (800140c <HAL_PWREx_EnableOverDrive+0x94>)
 80013a0:	2201      	movs	r2, #1
 80013a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013a4:	f7ff fcf8 	bl	8000d98 <HAL_GetTick>
 80013a8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80013aa:	e009      	b.n	80013c0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80013ac:	f7ff fcf4 	bl	8000d98 <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013ba:	d901      	bls.n	80013c0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80013bc:	2303      	movs	r3, #3
 80013be:	e01f      	b.n	8001400 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80013c0:	4b13      	ldr	r3, [pc, #76]	; (8001410 <HAL_PWREx_EnableOverDrive+0x98>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013cc:	d1ee      	bne.n	80013ac <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80013ce:	4b11      	ldr	r3, [pc, #68]	; (8001414 <HAL_PWREx_EnableOverDrive+0x9c>)
 80013d0:	2201      	movs	r2, #1
 80013d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013d4:	f7ff fce0 	bl	8000d98 <HAL_GetTick>
 80013d8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80013da:	e009      	b.n	80013f0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80013dc:	f7ff fcdc 	bl	8000d98 <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013ea:	d901      	bls.n	80013f0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80013ec:	2303      	movs	r3, #3
 80013ee:	e007      	b.n	8001400 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80013f0:	4b07      	ldr	r3, [pc, #28]	; (8001410 <HAL_PWREx_EnableOverDrive+0x98>)
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80013fc:	d1ee      	bne.n	80013dc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80013fe:	2300      	movs	r3, #0
}
 8001400:	4618      	mov	r0, r3
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	40023800 	.word	0x40023800
 800140c:	420e0040 	.word	0x420e0040
 8001410:	40007000 	.word	0x40007000
 8001414:	420e0044 	.word	0x420e0044

08001418 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d101      	bne.n	800142c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	e0cc      	b.n	80015c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800142c:	4b68      	ldr	r3, [pc, #416]	; (80015d0 <HAL_RCC_ClockConfig+0x1b8>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 030f 	and.w	r3, r3, #15
 8001434:	683a      	ldr	r2, [r7, #0]
 8001436:	429a      	cmp	r2, r3
 8001438:	d90c      	bls.n	8001454 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800143a:	4b65      	ldr	r3, [pc, #404]	; (80015d0 <HAL_RCC_ClockConfig+0x1b8>)
 800143c:	683a      	ldr	r2, [r7, #0]
 800143e:	b2d2      	uxtb	r2, r2
 8001440:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001442:	4b63      	ldr	r3, [pc, #396]	; (80015d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 030f 	and.w	r3, r3, #15
 800144a:	683a      	ldr	r2, [r7, #0]
 800144c:	429a      	cmp	r2, r3
 800144e:	d001      	beq.n	8001454 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	e0b8      	b.n	80015c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 0302 	and.w	r3, r3, #2
 800145c:	2b00      	cmp	r3, #0
 800145e:	d020      	beq.n	80014a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0304 	and.w	r3, r3, #4
 8001468:	2b00      	cmp	r3, #0
 800146a:	d005      	beq.n	8001478 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800146c:	4b59      	ldr	r3, [pc, #356]	; (80015d4 <HAL_RCC_ClockConfig+0x1bc>)
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	4a58      	ldr	r2, [pc, #352]	; (80015d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001472:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001476:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 0308 	and.w	r3, r3, #8
 8001480:	2b00      	cmp	r3, #0
 8001482:	d005      	beq.n	8001490 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001484:	4b53      	ldr	r3, [pc, #332]	; (80015d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	4a52      	ldr	r2, [pc, #328]	; (80015d4 <HAL_RCC_ClockConfig+0x1bc>)
 800148a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800148e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001490:	4b50      	ldr	r3, [pc, #320]	; (80015d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	494d      	ldr	r1, [pc, #308]	; (80015d4 <HAL_RCC_ClockConfig+0x1bc>)
 800149e:	4313      	orrs	r3, r2
 80014a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0301 	and.w	r3, r3, #1
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d044      	beq.n	8001538 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d107      	bne.n	80014c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014b6:	4b47      	ldr	r3, [pc, #284]	; (80015d4 <HAL_RCC_ClockConfig+0x1bc>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d119      	bne.n	80014f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e07f      	b.n	80015c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d003      	beq.n	80014d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014d2:	2b03      	cmp	r3, #3
 80014d4:	d107      	bne.n	80014e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014d6:	4b3f      	ldr	r3, [pc, #252]	; (80015d4 <HAL_RCC_ClockConfig+0x1bc>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d109      	bne.n	80014f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e06f      	b.n	80015c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014e6:	4b3b      	ldr	r3, [pc, #236]	; (80015d4 <HAL_RCC_ClockConfig+0x1bc>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d101      	bne.n	80014f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e067      	b.n	80015c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014f6:	4b37      	ldr	r3, [pc, #220]	; (80015d4 <HAL_RCC_ClockConfig+0x1bc>)
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	f023 0203 	bic.w	r2, r3, #3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	4934      	ldr	r1, [pc, #208]	; (80015d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001504:	4313      	orrs	r3, r2
 8001506:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001508:	f7ff fc46 	bl	8000d98 <HAL_GetTick>
 800150c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800150e:	e00a      	b.n	8001526 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001510:	f7ff fc42 	bl	8000d98 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	f241 3288 	movw	r2, #5000	; 0x1388
 800151e:	4293      	cmp	r3, r2
 8001520:	d901      	bls.n	8001526 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	e04f      	b.n	80015c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001526:	4b2b      	ldr	r3, [pc, #172]	; (80015d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	f003 020c 	and.w	r2, r3, #12
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	429a      	cmp	r2, r3
 8001536:	d1eb      	bne.n	8001510 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001538:	4b25      	ldr	r3, [pc, #148]	; (80015d0 <HAL_RCC_ClockConfig+0x1b8>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 030f 	and.w	r3, r3, #15
 8001540:	683a      	ldr	r2, [r7, #0]
 8001542:	429a      	cmp	r2, r3
 8001544:	d20c      	bcs.n	8001560 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001546:	4b22      	ldr	r3, [pc, #136]	; (80015d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001548:	683a      	ldr	r2, [r7, #0]
 800154a:	b2d2      	uxtb	r2, r2
 800154c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800154e:	4b20      	ldr	r3, [pc, #128]	; (80015d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 030f 	and.w	r3, r3, #15
 8001556:	683a      	ldr	r2, [r7, #0]
 8001558:	429a      	cmp	r2, r3
 800155a:	d001      	beq.n	8001560 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e032      	b.n	80015c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 0304 	and.w	r3, r3, #4
 8001568:	2b00      	cmp	r3, #0
 800156a:	d008      	beq.n	800157e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800156c:	4b19      	ldr	r3, [pc, #100]	; (80015d4 <HAL_RCC_ClockConfig+0x1bc>)
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	4916      	ldr	r1, [pc, #88]	; (80015d4 <HAL_RCC_ClockConfig+0x1bc>)
 800157a:	4313      	orrs	r3, r2
 800157c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0308 	and.w	r3, r3, #8
 8001586:	2b00      	cmp	r3, #0
 8001588:	d009      	beq.n	800159e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800158a:	4b12      	ldr	r3, [pc, #72]	; (80015d4 <HAL_RCC_ClockConfig+0x1bc>)
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	691b      	ldr	r3, [r3, #16]
 8001596:	00db      	lsls	r3, r3, #3
 8001598:	490e      	ldr	r1, [pc, #56]	; (80015d4 <HAL_RCC_ClockConfig+0x1bc>)
 800159a:	4313      	orrs	r3, r2
 800159c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800159e:	f000 f821 	bl	80015e4 <HAL_RCC_GetSysClockFreq>
 80015a2:	4602      	mov	r2, r0
 80015a4:	4b0b      	ldr	r3, [pc, #44]	; (80015d4 <HAL_RCC_ClockConfig+0x1bc>)
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	091b      	lsrs	r3, r3, #4
 80015aa:	f003 030f 	and.w	r3, r3, #15
 80015ae:	490a      	ldr	r1, [pc, #40]	; (80015d8 <HAL_RCC_ClockConfig+0x1c0>)
 80015b0:	5ccb      	ldrb	r3, [r1, r3]
 80015b2:	fa22 f303 	lsr.w	r3, r2, r3
 80015b6:	4a09      	ldr	r2, [pc, #36]	; (80015dc <HAL_RCC_ClockConfig+0x1c4>)
 80015b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80015ba:	4b09      	ldr	r3, [pc, #36]	; (80015e0 <HAL_RCC_ClockConfig+0x1c8>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4618      	mov	r0, r3
 80015c0:	f7ff fba6 	bl	8000d10 <HAL_InitTick>

  return HAL_OK;
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40023c00 	.word	0x40023c00
 80015d4:	40023800 	.word	0x40023800
 80015d8:	08004a4c 	.word	0x08004a4c
 80015dc:	20000000 	.word	0x20000000
 80015e0:	20000004 	.word	0x20000004

080015e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015e8:	b0ae      	sub	sp, #184	; 0xb8
 80015ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80015ec:	2300      	movs	r3, #0
 80015ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80015f2:	2300      	movs	r3, #0
 80015f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80015f8:	2300      	movs	r3, #0
 80015fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80015fe:	2300      	movs	r3, #0
 8001600:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001604:	2300      	movs	r3, #0
 8001606:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800160a:	4bcb      	ldr	r3, [pc, #812]	; (8001938 <HAL_RCC_GetSysClockFreq+0x354>)
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	f003 030c 	and.w	r3, r3, #12
 8001612:	2b0c      	cmp	r3, #12
 8001614:	f200 8206 	bhi.w	8001a24 <HAL_RCC_GetSysClockFreq+0x440>
 8001618:	a201      	add	r2, pc, #4	; (adr r2, 8001620 <HAL_RCC_GetSysClockFreq+0x3c>)
 800161a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800161e:	bf00      	nop
 8001620:	08001655 	.word	0x08001655
 8001624:	08001a25 	.word	0x08001a25
 8001628:	08001a25 	.word	0x08001a25
 800162c:	08001a25 	.word	0x08001a25
 8001630:	0800165d 	.word	0x0800165d
 8001634:	08001a25 	.word	0x08001a25
 8001638:	08001a25 	.word	0x08001a25
 800163c:	08001a25 	.word	0x08001a25
 8001640:	08001665 	.word	0x08001665
 8001644:	08001a25 	.word	0x08001a25
 8001648:	08001a25 	.word	0x08001a25
 800164c:	08001a25 	.word	0x08001a25
 8001650:	08001855 	.word	0x08001855
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001654:	4bb9      	ldr	r3, [pc, #740]	; (800193c <HAL_RCC_GetSysClockFreq+0x358>)
 8001656:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800165a:	e1e7      	b.n	8001a2c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800165c:	4bb8      	ldr	r3, [pc, #736]	; (8001940 <HAL_RCC_GetSysClockFreq+0x35c>)
 800165e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001662:	e1e3      	b.n	8001a2c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001664:	4bb4      	ldr	r3, [pc, #720]	; (8001938 <HAL_RCC_GetSysClockFreq+0x354>)
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800166c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001670:	4bb1      	ldr	r3, [pc, #708]	; (8001938 <HAL_RCC_GetSysClockFreq+0x354>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001678:	2b00      	cmp	r3, #0
 800167a:	d071      	beq.n	8001760 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800167c:	4bae      	ldr	r3, [pc, #696]	; (8001938 <HAL_RCC_GetSysClockFreq+0x354>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	099b      	lsrs	r3, r3, #6
 8001682:	2200      	movs	r2, #0
 8001684:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001688:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800168c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001690:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001694:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001698:	2300      	movs	r3, #0
 800169a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800169e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80016a2:	4622      	mov	r2, r4
 80016a4:	462b      	mov	r3, r5
 80016a6:	f04f 0000 	mov.w	r0, #0
 80016aa:	f04f 0100 	mov.w	r1, #0
 80016ae:	0159      	lsls	r1, r3, #5
 80016b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016b4:	0150      	lsls	r0, r2, #5
 80016b6:	4602      	mov	r2, r0
 80016b8:	460b      	mov	r3, r1
 80016ba:	4621      	mov	r1, r4
 80016bc:	1a51      	subs	r1, r2, r1
 80016be:	6439      	str	r1, [r7, #64]	; 0x40
 80016c0:	4629      	mov	r1, r5
 80016c2:	eb63 0301 	sbc.w	r3, r3, r1
 80016c6:	647b      	str	r3, [r7, #68]	; 0x44
 80016c8:	f04f 0200 	mov.w	r2, #0
 80016cc:	f04f 0300 	mov.w	r3, #0
 80016d0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80016d4:	4649      	mov	r1, r9
 80016d6:	018b      	lsls	r3, r1, #6
 80016d8:	4641      	mov	r1, r8
 80016da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016de:	4641      	mov	r1, r8
 80016e0:	018a      	lsls	r2, r1, #6
 80016e2:	4641      	mov	r1, r8
 80016e4:	1a51      	subs	r1, r2, r1
 80016e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80016e8:	4649      	mov	r1, r9
 80016ea:	eb63 0301 	sbc.w	r3, r3, r1
 80016ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016f0:	f04f 0200 	mov.w	r2, #0
 80016f4:	f04f 0300 	mov.w	r3, #0
 80016f8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80016fc:	4649      	mov	r1, r9
 80016fe:	00cb      	lsls	r3, r1, #3
 8001700:	4641      	mov	r1, r8
 8001702:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001706:	4641      	mov	r1, r8
 8001708:	00ca      	lsls	r2, r1, #3
 800170a:	4610      	mov	r0, r2
 800170c:	4619      	mov	r1, r3
 800170e:	4603      	mov	r3, r0
 8001710:	4622      	mov	r2, r4
 8001712:	189b      	adds	r3, r3, r2
 8001714:	633b      	str	r3, [r7, #48]	; 0x30
 8001716:	462b      	mov	r3, r5
 8001718:	460a      	mov	r2, r1
 800171a:	eb42 0303 	adc.w	r3, r2, r3
 800171e:	637b      	str	r3, [r7, #52]	; 0x34
 8001720:	f04f 0200 	mov.w	r2, #0
 8001724:	f04f 0300 	mov.w	r3, #0
 8001728:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800172c:	4629      	mov	r1, r5
 800172e:	024b      	lsls	r3, r1, #9
 8001730:	4621      	mov	r1, r4
 8001732:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001736:	4621      	mov	r1, r4
 8001738:	024a      	lsls	r2, r1, #9
 800173a:	4610      	mov	r0, r2
 800173c:	4619      	mov	r1, r3
 800173e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001742:	2200      	movs	r2, #0
 8001744:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001748:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800174c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001750:	f7fe fdae 	bl	80002b0 <__aeabi_uldivmod>
 8001754:	4602      	mov	r2, r0
 8001756:	460b      	mov	r3, r1
 8001758:	4613      	mov	r3, r2
 800175a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800175e:	e067      	b.n	8001830 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001760:	4b75      	ldr	r3, [pc, #468]	; (8001938 <HAL_RCC_GetSysClockFreq+0x354>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	099b      	lsrs	r3, r3, #6
 8001766:	2200      	movs	r2, #0
 8001768:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800176c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001770:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001774:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001778:	67bb      	str	r3, [r7, #120]	; 0x78
 800177a:	2300      	movs	r3, #0
 800177c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800177e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001782:	4622      	mov	r2, r4
 8001784:	462b      	mov	r3, r5
 8001786:	f04f 0000 	mov.w	r0, #0
 800178a:	f04f 0100 	mov.w	r1, #0
 800178e:	0159      	lsls	r1, r3, #5
 8001790:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001794:	0150      	lsls	r0, r2, #5
 8001796:	4602      	mov	r2, r0
 8001798:	460b      	mov	r3, r1
 800179a:	4621      	mov	r1, r4
 800179c:	1a51      	subs	r1, r2, r1
 800179e:	62b9      	str	r1, [r7, #40]	; 0x28
 80017a0:	4629      	mov	r1, r5
 80017a2:	eb63 0301 	sbc.w	r3, r3, r1
 80017a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017a8:	f04f 0200 	mov.w	r2, #0
 80017ac:	f04f 0300 	mov.w	r3, #0
 80017b0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80017b4:	4649      	mov	r1, r9
 80017b6:	018b      	lsls	r3, r1, #6
 80017b8:	4641      	mov	r1, r8
 80017ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017be:	4641      	mov	r1, r8
 80017c0:	018a      	lsls	r2, r1, #6
 80017c2:	4641      	mov	r1, r8
 80017c4:	ebb2 0a01 	subs.w	sl, r2, r1
 80017c8:	4649      	mov	r1, r9
 80017ca:	eb63 0b01 	sbc.w	fp, r3, r1
 80017ce:	f04f 0200 	mov.w	r2, #0
 80017d2:	f04f 0300 	mov.w	r3, #0
 80017d6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80017da:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80017de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80017e2:	4692      	mov	sl, r2
 80017e4:	469b      	mov	fp, r3
 80017e6:	4623      	mov	r3, r4
 80017e8:	eb1a 0303 	adds.w	r3, sl, r3
 80017ec:	623b      	str	r3, [r7, #32]
 80017ee:	462b      	mov	r3, r5
 80017f0:	eb4b 0303 	adc.w	r3, fp, r3
 80017f4:	627b      	str	r3, [r7, #36]	; 0x24
 80017f6:	f04f 0200 	mov.w	r2, #0
 80017fa:	f04f 0300 	mov.w	r3, #0
 80017fe:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001802:	4629      	mov	r1, r5
 8001804:	028b      	lsls	r3, r1, #10
 8001806:	4621      	mov	r1, r4
 8001808:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800180c:	4621      	mov	r1, r4
 800180e:	028a      	lsls	r2, r1, #10
 8001810:	4610      	mov	r0, r2
 8001812:	4619      	mov	r1, r3
 8001814:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001818:	2200      	movs	r2, #0
 800181a:	673b      	str	r3, [r7, #112]	; 0x70
 800181c:	677a      	str	r2, [r7, #116]	; 0x74
 800181e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001822:	f7fe fd45 	bl	80002b0 <__aeabi_uldivmod>
 8001826:	4602      	mov	r2, r0
 8001828:	460b      	mov	r3, r1
 800182a:	4613      	mov	r3, r2
 800182c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001830:	4b41      	ldr	r3, [pc, #260]	; (8001938 <HAL_RCC_GetSysClockFreq+0x354>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	0c1b      	lsrs	r3, r3, #16
 8001836:	f003 0303 	and.w	r3, r3, #3
 800183a:	3301      	adds	r3, #1
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001842:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001846:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800184a:	fbb2 f3f3 	udiv	r3, r2, r3
 800184e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001852:	e0eb      	b.n	8001a2c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001854:	4b38      	ldr	r3, [pc, #224]	; (8001938 <HAL_RCC_GetSysClockFreq+0x354>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800185c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001860:	4b35      	ldr	r3, [pc, #212]	; (8001938 <HAL_RCC_GetSysClockFreq+0x354>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d06b      	beq.n	8001944 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800186c:	4b32      	ldr	r3, [pc, #200]	; (8001938 <HAL_RCC_GetSysClockFreq+0x354>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	099b      	lsrs	r3, r3, #6
 8001872:	2200      	movs	r2, #0
 8001874:	66bb      	str	r3, [r7, #104]	; 0x68
 8001876:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001878:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800187a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800187e:	663b      	str	r3, [r7, #96]	; 0x60
 8001880:	2300      	movs	r3, #0
 8001882:	667b      	str	r3, [r7, #100]	; 0x64
 8001884:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001888:	4622      	mov	r2, r4
 800188a:	462b      	mov	r3, r5
 800188c:	f04f 0000 	mov.w	r0, #0
 8001890:	f04f 0100 	mov.w	r1, #0
 8001894:	0159      	lsls	r1, r3, #5
 8001896:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800189a:	0150      	lsls	r0, r2, #5
 800189c:	4602      	mov	r2, r0
 800189e:	460b      	mov	r3, r1
 80018a0:	4621      	mov	r1, r4
 80018a2:	1a51      	subs	r1, r2, r1
 80018a4:	61b9      	str	r1, [r7, #24]
 80018a6:	4629      	mov	r1, r5
 80018a8:	eb63 0301 	sbc.w	r3, r3, r1
 80018ac:	61fb      	str	r3, [r7, #28]
 80018ae:	f04f 0200 	mov.w	r2, #0
 80018b2:	f04f 0300 	mov.w	r3, #0
 80018b6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80018ba:	4659      	mov	r1, fp
 80018bc:	018b      	lsls	r3, r1, #6
 80018be:	4651      	mov	r1, sl
 80018c0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018c4:	4651      	mov	r1, sl
 80018c6:	018a      	lsls	r2, r1, #6
 80018c8:	4651      	mov	r1, sl
 80018ca:	ebb2 0801 	subs.w	r8, r2, r1
 80018ce:	4659      	mov	r1, fp
 80018d0:	eb63 0901 	sbc.w	r9, r3, r1
 80018d4:	f04f 0200 	mov.w	r2, #0
 80018d8:	f04f 0300 	mov.w	r3, #0
 80018dc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80018e0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80018e4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018e8:	4690      	mov	r8, r2
 80018ea:	4699      	mov	r9, r3
 80018ec:	4623      	mov	r3, r4
 80018ee:	eb18 0303 	adds.w	r3, r8, r3
 80018f2:	613b      	str	r3, [r7, #16]
 80018f4:	462b      	mov	r3, r5
 80018f6:	eb49 0303 	adc.w	r3, r9, r3
 80018fa:	617b      	str	r3, [r7, #20]
 80018fc:	f04f 0200 	mov.w	r2, #0
 8001900:	f04f 0300 	mov.w	r3, #0
 8001904:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001908:	4629      	mov	r1, r5
 800190a:	024b      	lsls	r3, r1, #9
 800190c:	4621      	mov	r1, r4
 800190e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001912:	4621      	mov	r1, r4
 8001914:	024a      	lsls	r2, r1, #9
 8001916:	4610      	mov	r0, r2
 8001918:	4619      	mov	r1, r3
 800191a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800191e:	2200      	movs	r2, #0
 8001920:	65bb      	str	r3, [r7, #88]	; 0x58
 8001922:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001924:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001928:	f7fe fcc2 	bl	80002b0 <__aeabi_uldivmod>
 800192c:	4602      	mov	r2, r0
 800192e:	460b      	mov	r3, r1
 8001930:	4613      	mov	r3, r2
 8001932:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001936:	e065      	b.n	8001a04 <HAL_RCC_GetSysClockFreq+0x420>
 8001938:	40023800 	.word	0x40023800
 800193c:	00f42400 	.word	0x00f42400
 8001940:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001944:	4b3d      	ldr	r3, [pc, #244]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x458>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	099b      	lsrs	r3, r3, #6
 800194a:	2200      	movs	r2, #0
 800194c:	4618      	mov	r0, r3
 800194e:	4611      	mov	r1, r2
 8001950:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001954:	653b      	str	r3, [r7, #80]	; 0x50
 8001956:	2300      	movs	r3, #0
 8001958:	657b      	str	r3, [r7, #84]	; 0x54
 800195a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800195e:	4642      	mov	r2, r8
 8001960:	464b      	mov	r3, r9
 8001962:	f04f 0000 	mov.w	r0, #0
 8001966:	f04f 0100 	mov.w	r1, #0
 800196a:	0159      	lsls	r1, r3, #5
 800196c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001970:	0150      	lsls	r0, r2, #5
 8001972:	4602      	mov	r2, r0
 8001974:	460b      	mov	r3, r1
 8001976:	4641      	mov	r1, r8
 8001978:	1a51      	subs	r1, r2, r1
 800197a:	60b9      	str	r1, [r7, #8]
 800197c:	4649      	mov	r1, r9
 800197e:	eb63 0301 	sbc.w	r3, r3, r1
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	f04f 0200 	mov.w	r2, #0
 8001988:	f04f 0300 	mov.w	r3, #0
 800198c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001990:	4659      	mov	r1, fp
 8001992:	018b      	lsls	r3, r1, #6
 8001994:	4651      	mov	r1, sl
 8001996:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800199a:	4651      	mov	r1, sl
 800199c:	018a      	lsls	r2, r1, #6
 800199e:	4651      	mov	r1, sl
 80019a0:	1a54      	subs	r4, r2, r1
 80019a2:	4659      	mov	r1, fp
 80019a4:	eb63 0501 	sbc.w	r5, r3, r1
 80019a8:	f04f 0200 	mov.w	r2, #0
 80019ac:	f04f 0300 	mov.w	r3, #0
 80019b0:	00eb      	lsls	r3, r5, #3
 80019b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019b6:	00e2      	lsls	r2, r4, #3
 80019b8:	4614      	mov	r4, r2
 80019ba:	461d      	mov	r5, r3
 80019bc:	4643      	mov	r3, r8
 80019be:	18e3      	adds	r3, r4, r3
 80019c0:	603b      	str	r3, [r7, #0]
 80019c2:	464b      	mov	r3, r9
 80019c4:	eb45 0303 	adc.w	r3, r5, r3
 80019c8:	607b      	str	r3, [r7, #4]
 80019ca:	f04f 0200 	mov.w	r2, #0
 80019ce:	f04f 0300 	mov.w	r3, #0
 80019d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80019d6:	4629      	mov	r1, r5
 80019d8:	028b      	lsls	r3, r1, #10
 80019da:	4621      	mov	r1, r4
 80019dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019e0:	4621      	mov	r1, r4
 80019e2:	028a      	lsls	r2, r1, #10
 80019e4:	4610      	mov	r0, r2
 80019e6:	4619      	mov	r1, r3
 80019e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80019ec:	2200      	movs	r2, #0
 80019ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80019f0:	64fa      	str	r2, [r7, #76]	; 0x4c
 80019f2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80019f6:	f7fe fc5b 	bl	80002b0 <__aeabi_uldivmod>
 80019fa:	4602      	mov	r2, r0
 80019fc:	460b      	mov	r3, r1
 80019fe:	4613      	mov	r3, r2
 8001a00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001a04:	4b0d      	ldr	r3, [pc, #52]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x458>)
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	0f1b      	lsrs	r3, r3, #28
 8001a0a:	f003 0307 	and.w	r3, r3, #7
 8001a0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001a12:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001a16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001a22:	e003      	b.n	8001a2c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a24:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001a26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001a2a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a2c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	37b8      	adds	r7, #184	; 0xb8
 8001a34:	46bd      	mov	sp, r7
 8001a36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40023800 	.word	0x40023800
 8001a40:	00f42400 	.word	0x00f42400

08001a44 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d101      	bne.n	8001a56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e28d      	b.n	8001f72 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	f000 8083 	beq.w	8001b6a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001a64:	4b94      	ldr	r3, [pc, #592]	; (8001cb8 <HAL_RCC_OscConfig+0x274>)
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f003 030c 	and.w	r3, r3, #12
 8001a6c:	2b04      	cmp	r3, #4
 8001a6e:	d019      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a70:	4b91      	ldr	r3, [pc, #580]	; (8001cb8 <HAL_RCC_OscConfig+0x274>)
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001a78:	2b08      	cmp	r3, #8
 8001a7a:	d106      	bne.n	8001a8a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a7c:	4b8e      	ldr	r3, [pc, #568]	; (8001cb8 <HAL_RCC_OscConfig+0x274>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a88:	d00c      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a8a:	4b8b      	ldr	r3, [pc, #556]	; (8001cb8 <HAL_RCC_OscConfig+0x274>)
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a92:	2b0c      	cmp	r3, #12
 8001a94:	d112      	bne.n	8001abc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a96:	4b88      	ldr	r3, [pc, #544]	; (8001cb8 <HAL_RCC_OscConfig+0x274>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001aa2:	d10b      	bne.n	8001abc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aa4:	4b84      	ldr	r3, [pc, #528]	; (8001cb8 <HAL_RCC_OscConfig+0x274>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d05b      	beq.n	8001b68 <HAL_RCC_OscConfig+0x124>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d157      	bne.n	8001b68 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e25a      	b.n	8001f72 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ac4:	d106      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x90>
 8001ac6:	4b7c      	ldr	r3, [pc, #496]	; (8001cb8 <HAL_RCC_OscConfig+0x274>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a7b      	ldr	r2, [pc, #492]	; (8001cb8 <HAL_RCC_OscConfig+0x274>)
 8001acc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ad0:	6013      	str	r3, [r2, #0]
 8001ad2:	e01d      	b.n	8001b10 <HAL_RCC_OscConfig+0xcc>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001adc:	d10c      	bne.n	8001af8 <HAL_RCC_OscConfig+0xb4>
 8001ade:	4b76      	ldr	r3, [pc, #472]	; (8001cb8 <HAL_RCC_OscConfig+0x274>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a75      	ldr	r2, [pc, #468]	; (8001cb8 <HAL_RCC_OscConfig+0x274>)
 8001ae4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ae8:	6013      	str	r3, [r2, #0]
 8001aea:	4b73      	ldr	r3, [pc, #460]	; (8001cb8 <HAL_RCC_OscConfig+0x274>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a72      	ldr	r2, [pc, #456]	; (8001cb8 <HAL_RCC_OscConfig+0x274>)
 8001af0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001af4:	6013      	str	r3, [r2, #0]
 8001af6:	e00b      	b.n	8001b10 <HAL_RCC_OscConfig+0xcc>
 8001af8:	4b6f      	ldr	r3, [pc, #444]	; (8001cb8 <HAL_RCC_OscConfig+0x274>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a6e      	ldr	r2, [pc, #440]	; (8001cb8 <HAL_RCC_OscConfig+0x274>)
 8001afe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b02:	6013      	str	r3, [r2, #0]
 8001b04:	4b6c      	ldr	r3, [pc, #432]	; (8001cb8 <HAL_RCC_OscConfig+0x274>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a6b      	ldr	r2, [pc, #428]	; (8001cb8 <HAL_RCC_OscConfig+0x274>)
 8001b0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d013      	beq.n	8001b40 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b18:	f7ff f93e 	bl	8000d98 <HAL_GetTick>
 8001b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b1e:	e008      	b.n	8001b32 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b20:	f7ff f93a 	bl	8000d98 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b64      	cmp	r3, #100	; 0x64
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e21f      	b.n	8001f72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b32:	4b61      	ldr	r3, [pc, #388]	; (8001cb8 <HAL_RCC_OscConfig+0x274>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d0f0      	beq.n	8001b20 <HAL_RCC_OscConfig+0xdc>
 8001b3e:	e014      	b.n	8001b6a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b40:	f7ff f92a 	bl	8000d98 <HAL_GetTick>
 8001b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b46:	e008      	b.n	8001b5a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b48:	f7ff f926 	bl	8000d98 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b64      	cmp	r3, #100	; 0x64
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e20b      	b.n	8001f72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b5a:	4b57      	ldr	r3, [pc, #348]	; (8001cb8 <HAL_RCC_OscConfig+0x274>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d1f0      	bne.n	8001b48 <HAL_RCC_OscConfig+0x104>
 8001b66:	e000      	b.n	8001b6a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d06f      	beq.n	8001c56 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001b76:	4b50      	ldr	r3, [pc, #320]	; (8001cb8 <HAL_RCC_OscConfig+0x274>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f003 030c 	and.w	r3, r3, #12
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d017      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b82:	4b4d      	ldr	r3, [pc, #308]	; (8001cb8 <HAL_RCC_OscConfig+0x274>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001b8a:	2b08      	cmp	r3, #8
 8001b8c:	d105      	bne.n	8001b9a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b8e:	4b4a      	ldr	r3, [pc, #296]	; (8001cb8 <HAL_RCC_OscConfig+0x274>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d00b      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b9a:	4b47      	ldr	r3, [pc, #284]	; (8001cb8 <HAL_RCC_OscConfig+0x274>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ba2:	2b0c      	cmp	r3, #12
 8001ba4:	d11c      	bne.n	8001be0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ba6:	4b44      	ldr	r3, [pc, #272]	; (8001cb8 <HAL_RCC_OscConfig+0x274>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d116      	bne.n	8001be0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bb2:	4b41      	ldr	r3, [pc, #260]	; (8001cb8 <HAL_RCC_OscConfig+0x274>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d005      	beq.n	8001bca <HAL_RCC_OscConfig+0x186>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d001      	beq.n	8001bca <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e1d3      	b.n	8001f72 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bca:	4b3b      	ldr	r3, [pc, #236]	; (8001cb8 <HAL_RCC_OscConfig+0x274>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	691b      	ldr	r3, [r3, #16]
 8001bd6:	00db      	lsls	r3, r3, #3
 8001bd8:	4937      	ldr	r1, [pc, #220]	; (8001cb8 <HAL_RCC_OscConfig+0x274>)
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bde:	e03a      	b.n	8001c56 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d020      	beq.n	8001c2a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001be8:	4b34      	ldr	r3, [pc, #208]	; (8001cbc <HAL_RCC_OscConfig+0x278>)
 8001bea:	2201      	movs	r2, #1
 8001bec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bee:	f7ff f8d3 	bl	8000d98 <HAL_GetTick>
 8001bf2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bf4:	e008      	b.n	8001c08 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bf6:	f7ff f8cf 	bl	8000d98 <HAL_GetTick>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d901      	bls.n	8001c08 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	e1b4      	b.n	8001f72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c08:	4b2b      	ldr	r3, [pc, #172]	; (8001cb8 <HAL_RCC_OscConfig+0x274>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0302 	and.w	r3, r3, #2
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d0f0      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c14:	4b28      	ldr	r3, [pc, #160]	; (8001cb8 <HAL_RCC_OscConfig+0x274>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	691b      	ldr	r3, [r3, #16]
 8001c20:	00db      	lsls	r3, r3, #3
 8001c22:	4925      	ldr	r1, [pc, #148]	; (8001cb8 <HAL_RCC_OscConfig+0x274>)
 8001c24:	4313      	orrs	r3, r2
 8001c26:	600b      	str	r3, [r1, #0]
 8001c28:	e015      	b.n	8001c56 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c2a:	4b24      	ldr	r3, [pc, #144]	; (8001cbc <HAL_RCC_OscConfig+0x278>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c30:	f7ff f8b2 	bl	8000d98 <HAL_GetTick>
 8001c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c36:	e008      	b.n	8001c4a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c38:	f7ff f8ae 	bl	8000d98 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e193      	b.n	8001f72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c4a:	4b1b      	ldr	r3, [pc, #108]	; (8001cb8 <HAL_RCC_OscConfig+0x274>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d1f0      	bne.n	8001c38 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0308 	and.w	r3, r3, #8
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d036      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	695b      	ldr	r3, [r3, #20]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d016      	beq.n	8001c98 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c6a:	4b15      	ldr	r3, [pc, #84]	; (8001cc0 <HAL_RCC_OscConfig+0x27c>)
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c70:	f7ff f892 	bl	8000d98 <HAL_GetTick>
 8001c74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c76:	e008      	b.n	8001c8a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c78:	f7ff f88e 	bl	8000d98 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e173      	b.n	8001f72 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c8a:	4b0b      	ldr	r3, [pc, #44]	; (8001cb8 <HAL_RCC_OscConfig+0x274>)
 8001c8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d0f0      	beq.n	8001c78 <HAL_RCC_OscConfig+0x234>
 8001c96:	e01b      	b.n	8001cd0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c98:	4b09      	ldr	r3, [pc, #36]	; (8001cc0 <HAL_RCC_OscConfig+0x27c>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c9e:	f7ff f87b 	bl	8000d98 <HAL_GetTick>
 8001ca2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ca4:	e00e      	b.n	8001cc4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ca6:	f7ff f877 	bl	8000d98 <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d907      	bls.n	8001cc4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e15c      	b.n	8001f72 <HAL_RCC_OscConfig+0x52e>
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	42470000 	.word	0x42470000
 8001cc0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cc4:	4b8a      	ldr	r3, [pc, #552]	; (8001ef0 <HAL_RCC_OscConfig+0x4ac>)
 8001cc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cc8:	f003 0302 	and.w	r3, r3, #2
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d1ea      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0304 	and.w	r3, r3, #4
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	f000 8097 	beq.w	8001e0c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ce2:	4b83      	ldr	r3, [pc, #524]	; (8001ef0 <HAL_RCC_OscConfig+0x4ac>)
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d10f      	bne.n	8001d0e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cee:	2300      	movs	r3, #0
 8001cf0:	60bb      	str	r3, [r7, #8]
 8001cf2:	4b7f      	ldr	r3, [pc, #508]	; (8001ef0 <HAL_RCC_OscConfig+0x4ac>)
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf6:	4a7e      	ldr	r2, [pc, #504]	; (8001ef0 <HAL_RCC_OscConfig+0x4ac>)
 8001cf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8001cfe:	4b7c      	ldr	r3, [pc, #496]	; (8001ef0 <HAL_RCC_OscConfig+0x4ac>)
 8001d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d06:	60bb      	str	r3, [r7, #8]
 8001d08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d0e:	4b79      	ldr	r3, [pc, #484]	; (8001ef4 <HAL_RCC_OscConfig+0x4b0>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d118      	bne.n	8001d4c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d1a:	4b76      	ldr	r3, [pc, #472]	; (8001ef4 <HAL_RCC_OscConfig+0x4b0>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a75      	ldr	r2, [pc, #468]	; (8001ef4 <HAL_RCC_OscConfig+0x4b0>)
 8001d20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d26:	f7ff f837 	bl	8000d98 <HAL_GetTick>
 8001d2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d2c:	e008      	b.n	8001d40 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d2e:	f7ff f833 	bl	8000d98 <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d901      	bls.n	8001d40 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e118      	b.n	8001f72 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d40:	4b6c      	ldr	r3, [pc, #432]	; (8001ef4 <HAL_RCC_OscConfig+0x4b0>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d0f0      	beq.n	8001d2e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d106      	bne.n	8001d62 <HAL_RCC_OscConfig+0x31e>
 8001d54:	4b66      	ldr	r3, [pc, #408]	; (8001ef0 <HAL_RCC_OscConfig+0x4ac>)
 8001d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d58:	4a65      	ldr	r2, [pc, #404]	; (8001ef0 <HAL_RCC_OscConfig+0x4ac>)
 8001d5a:	f043 0301 	orr.w	r3, r3, #1
 8001d5e:	6713      	str	r3, [r2, #112]	; 0x70
 8001d60:	e01c      	b.n	8001d9c <HAL_RCC_OscConfig+0x358>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	2b05      	cmp	r3, #5
 8001d68:	d10c      	bne.n	8001d84 <HAL_RCC_OscConfig+0x340>
 8001d6a:	4b61      	ldr	r3, [pc, #388]	; (8001ef0 <HAL_RCC_OscConfig+0x4ac>)
 8001d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d6e:	4a60      	ldr	r2, [pc, #384]	; (8001ef0 <HAL_RCC_OscConfig+0x4ac>)
 8001d70:	f043 0304 	orr.w	r3, r3, #4
 8001d74:	6713      	str	r3, [r2, #112]	; 0x70
 8001d76:	4b5e      	ldr	r3, [pc, #376]	; (8001ef0 <HAL_RCC_OscConfig+0x4ac>)
 8001d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d7a:	4a5d      	ldr	r2, [pc, #372]	; (8001ef0 <HAL_RCC_OscConfig+0x4ac>)
 8001d7c:	f043 0301 	orr.w	r3, r3, #1
 8001d80:	6713      	str	r3, [r2, #112]	; 0x70
 8001d82:	e00b      	b.n	8001d9c <HAL_RCC_OscConfig+0x358>
 8001d84:	4b5a      	ldr	r3, [pc, #360]	; (8001ef0 <HAL_RCC_OscConfig+0x4ac>)
 8001d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d88:	4a59      	ldr	r2, [pc, #356]	; (8001ef0 <HAL_RCC_OscConfig+0x4ac>)
 8001d8a:	f023 0301 	bic.w	r3, r3, #1
 8001d8e:	6713      	str	r3, [r2, #112]	; 0x70
 8001d90:	4b57      	ldr	r3, [pc, #348]	; (8001ef0 <HAL_RCC_OscConfig+0x4ac>)
 8001d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d94:	4a56      	ldr	r2, [pc, #344]	; (8001ef0 <HAL_RCC_OscConfig+0x4ac>)
 8001d96:	f023 0304 	bic.w	r3, r3, #4
 8001d9a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d015      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001da4:	f7fe fff8 	bl	8000d98 <HAL_GetTick>
 8001da8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001daa:	e00a      	b.n	8001dc2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dac:	f7fe fff4 	bl	8000d98 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e0d7      	b.n	8001f72 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dc2:	4b4b      	ldr	r3, [pc, #300]	; (8001ef0 <HAL_RCC_OscConfig+0x4ac>)
 8001dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d0ee      	beq.n	8001dac <HAL_RCC_OscConfig+0x368>
 8001dce:	e014      	b.n	8001dfa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dd0:	f7fe ffe2 	bl	8000d98 <HAL_GetTick>
 8001dd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dd6:	e00a      	b.n	8001dee <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dd8:	f7fe ffde 	bl	8000d98 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e0c1      	b.n	8001f72 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dee:	4b40      	ldr	r3, [pc, #256]	; (8001ef0 <HAL_RCC_OscConfig+0x4ac>)
 8001df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d1ee      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001dfa:	7dfb      	ldrb	r3, [r7, #23]
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d105      	bne.n	8001e0c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e00:	4b3b      	ldr	r3, [pc, #236]	; (8001ef0 <HAL_RCC_OscConfig+0x4ac>)
 8001e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e04:	4a3a      	ldr	r2, [pc, #232]	; (8001ef0 <HAL_RCC_OscConfig+0x4ac>)
 8001e06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e0a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	f000 80ad 	beq.w	8001f70 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e16:	4b36      	ldr	r3, [pc, #216]	; (8001ef0 <HAL_RCC_OscConfig+0x4ac>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	f003 030c 	and.w	r3, r3, #12
 8001e1e:	2b08      	cmp	r3, #8
 8001e20:	d060      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	699b      	ldr	r3, [r3, #24]
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d145      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e2a:	4b33      	ldr	r3, [pc, #204]	; (8001ef8 <HAL_RCC_OscConfig+0x4b4>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e30:	f7fe ffb2 	bl	8000d98 <HAL_GetTick>
 8001e34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e36:	e008      	b.n	8001e4a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e38:	f7fe ffae 	bl	8000d98 <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e093      	b.n	8001f72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e4a:	4b29      	ldr	r3, [pc, #164]	; (8001ef0 <HAL_RCC_OscConfig+0x4ac>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d1f0      	bne.n	8001e38 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	69da      	ldr	r2, [r3, #28]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6a1b      	ldr	r3, [r3, #32]
 8001e5e:	431a      	orrs	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e64:	019b      	lsls	r3, r3, #6
 8001e66:	431a      	orrs	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e6c:	085b      	lsrs	r3, r3, #1
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	041b      	lsls	r3, r3, #16
 8001e72:	431a      	orrs	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e78:	061b      	lsls	r3, r3, #24
 8001e7a:	431a      	orrs	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e80:	071b      	lsls	r3, r3, #28
 8001e82:	491b      	ldr	r1, [pc, #108]	; (8001ef0 <HAL_RCC_OscConfig+0x4ac>)
 8001e84:	4313      	orrs	r3, r2
 8001e86:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e88:	4b1b      	ldr	r3, [pc, #108]	; (8001ef8 <HAL_RCC_OscConfig+0x4b4>)
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e8e:	f7fe ff83 	bl	8000d98 <HAL_GetTick>
 8001e92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e94:	e008      	b.n	8001ea8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e96:	f7fe ff7f 	bl	8000d98 <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d901      	bls.n	8001ea8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e064      	b.n	8001f72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ea8:	4b11      	ldr	r3, [pc, #68]	; (8001ef0 <HAL_RCC_OscConfig+0x4ac>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d0f0      	beq.n	8001e96 <HAL_RCC_OscConfig+0x452>
 8001eb4:	e05c      	b.n	8001f70 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eb6:	4b10      	ldr	r3, [pc, #64]	; (8001ef8 <HAL_RCC_OscConfig+0x4b4>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ebc:	f7fe ff6c 	bl	8000d98 <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ec2:	e008      	b.n	8001ed6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ec4:	f7fe ff68 	bl	8000d98 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e04d      	b.n	8001f72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ed6:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <HAL_RCC_OscConfig+0x4ac>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d1f0      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x480>
 8001ee2:	e045      	b.n	8001f70 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d107      	bne.n	8001efc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e040      	b.n	8001f72 <HAL_RCC_OscConfig+0x52e>
 8001ef0:	40023800 	.word	0x40023800
 8001ef4:	40007000 	.word	0x40007000
 8001ef8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001efc:	4b1f      	ldr	r3, [pc, #124]	; (8001f7c <HAL_RCC_OscConfig+0x538>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	699b      	ldr	r3, [r3, #24]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d030      	beq.n	8001f6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d129      	bne.n	8001f6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d122      	bne.n	8001f6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f26:	68fa      	ldr	r2, [r7, #12]
 8001f28:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f32:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d119      	bne.n	8001f6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f42:	085b      	lsrs	r3, r3, #1
 8001f44:	3b01      	subs	r3, #1
 8001f46:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d10f      	bne.n	8001f6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f56:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d107      	bne.n	8001f6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f66:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d001      	beq.n	8001f70 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e000      	b.n	8001f72 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3718      	adds	r7, #24
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	40023800 	.word	0x40023800

08001f80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d101      	bne.n	8001f92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e041      	b.n	8002016 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d106      	bne.n	8001fac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f7fe fcd2 	bl	8000950 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2202      	movs	r2, #2
 8001fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	3304      	adds	r3, #4
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	4610      	mov	r0, r2
 8001fc0:	f000 fe1c 	bl	8002bfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}

0800201e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	b082      	sub	sp, #8
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d101      	bne.n	8002030 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e041      	b.n	80020b4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002036:	b2db      	uxtb	r3, r3
 8002038:	2b00      	cmp	r3, #0
 800203a:	d106      	bne.n	800204a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f000 f839 	bl	80020bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2202      	movs	r2, #2
 800204e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	3304      	adds	r3, #4
 800205a:	4619      	mov	r1, r3
 800205c:	4610      	mov	r0, r2
 800205e:	f000 fdcd 	bl	8002bfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2201      	movs	r2, #1
 8002066:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2201      	movs	r2, #1
 800206e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2201      	movs	r2, #1
 8002076:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2201      	movs	r2, #1
 800207e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2201      	movs	r2, #1
 8002086:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2201      	movs	r2, #1
 800208e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2201      	movs	r2, #1
 8002096:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2201      	movs	r2, #1
 800209e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2201      	movs	r2, #1
 80020a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2201      	movs	r2, #1
 80020ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80020b2:	2300      	movs	r3, #0
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3708      	adds	r7, #8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d109      	bne.n	80020f4 <HAL_TIM_PWM_Start+0x24>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	bf14      	ite	ne
 80020ec:	2301      	movne	r3, #1
 80020ee:	2300      	moveq	r3, #0
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	e022      	b.n	800213a <HAL_TIM_PWM_Start+0x6a>
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	2b04      	cmp	r3, #4
 80020f8:	d109      	bne.n	800210e <HAL_TIM_PWM_Start+0x3e>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002100:	b2db      	uxtb	r3, r3
 8002102:	2b01      	cmp	r3, #1
 8002104:	bf14      	ite	ne
 8002106:	2301      	movne	r3, #1
 8002108:	2300      	moveq	r3, #0
 800210a:	b2db      	uxtb	r3, r3
 800210c:	e015      	b.n	800213a <HAL_TIM_PWM_Start+0x6a>
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	2b08      	cmp	r3, #8
 8002112:	d109      	bne.n	8002128 <HAL_TIM_PWM_Start+0x58>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800211a:	b2db      	uxtb	r3, r3
 800211c:	2b01      	cmp	r3, #1
 800211e:	bf14      	ite	ne
 8002120:	2301      	movne	r3, #1
 8002122:	2300      	moveq	r3, #0
 8002124:	b2db      	uxtb	r3, r3
 8002126:	e008      	b.n	800213a <HAL_TIM_PWM_Start+0x6a>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800212e:	b2db      	uxtb	r3, r3
 8002130:	2b01      	cmp	r3, #1
 8002132:	bf14      	ite	ne
 8002134:	2301      	movne	r3, #1
 8002136:	2300      	moveq	r3, #0
 8002138:	b2db      	uxtb	r3, r3
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e07c      	b.n	800223c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d104      	bne.n	8002152 <HAL_TIM_PWM_Start+0x82>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2202      	movs	r2, #2
 800214c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002150:	e013      	b.n	800217a <HAL_TIM_PWM_Start+0xaa>
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	2b04      	cmp	r3, #4
 8002156:	d104      	bne.n	8002162 <HAL_TIM_PWM_Start+0x92>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2202      	movs	r2, #2
 800215c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002160:	e00b      	b.n	800217a <HAL_TIM_PWM_Start+0xaa>
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	2b08      	cmp	r3, #8
 8002166:	d104      	bne.n	8002172 <HAL_TIM_PWM_Start+0xa2>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2202      	movs	r2, #2
 800216c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002170:	e003      	b.n	800217a <HAL_TIM_PWM_Start+0xaa>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2202      	movs	r2, #2
 8002176:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	2201      	movs	r2, #1
 8002180:	6839      	ldr	r1, [r7, #0]
 8002182:	4618      	mov	r0, r3
 8002184:	f001 f94e 	bl	8003424 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a2d      	ldr	r2, [pc, #180]	; (8002244 <HAL_TIM_PWM_Start+0x174>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d004      	beq.n	800219c <HAL_TIM_PWM_Start+0xcc>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a2c      	ldr	r2, [pc, #176]	; (8002248 <HAL_TIM_PWM_Start+0x178>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d101      	bne.n	80021a0 <HAL_TIM_PWM_Start+0xd0>
 800219c:	2301      	movs	r3, #1
 800219e:	e000      	b.n	80021a2 <HAL_TIM_PWM_Start+0xd2>
 80021a0:	2300      	movs	r3, #0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d007      	beq.n	80021b6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a22      	ldr	r2, [pc, #136]	; (8002244 <HAL_TIM_PWM_Start+0x174>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d022      	beq.n	8002206 <HAL_TIM_PWM_Start+0x136>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021c8:	d01d      	beq.n	8002206 <HAL_TIM_PWM_Start+0x136>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a1f      	ldr	r2, [pc, #124]	; (800224c <HAL_TIM_PWM_Start+0x17c>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d018      	beq.n	8002206 <HAL_TIM_PWM_Start+0x136>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a1d      	ldr	r2, [pc, #116]	; (8002250 <HAL_TIM_PWM_Start+0x180>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d013      	beq.n	8002206 <HAL_TIM_PWM_Start+0x136>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a1c      	ldr	r2, [pc, #112]	; (8002254 <HAL_TIM_PWM_Start+0x184>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d00e      	beq.n	8002206 <HAL_TIM_PWM_Start+0x136>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a16      	ldr	r2, [pc, #88]	; (8002248 <HAL_TIM_PWM_Start+0x178>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d009      	beq.n	8002206 <HAL_TIM_PWM_Start+0x136>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a18      	ldr	r2, [pc, #96]	; (8002258 <HAL_TIM_PWM_Start+0x188>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d004      	beq.n	8002206 <HAL_TIM_PWM_Start+0x136>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a16      	ldr	r2, [pc, #88]	; (800225c <HAL_TIM_PWM_Start+0x18c>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d111      	bne.n	800222a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	f003 0307 	and.w	r3, r3, #7
 8002210:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2b06      	cmp	r3, #6
 8002216:	d010      	beq.n	800223a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f042 0201 	orr.w	r2, r2, #1
 8002226:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002228:	e007      	b.n	800223a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f042 0201 	orr.w	r2, r2, #1
 8002238:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800223a:	2300      	movs	r3, #0
}
 800223c:	4618      	mov	r0, r3
 800223e:	3710      	adds	r7, #16
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	40010000 	.word	0x40010000
 8002248:	40010400 	.word	0x40010400
 800224c:	40000400 	.word	0x40000400
 8002250:	40000800 	.word	0x40000800
 8002254:	40000c00 	.word	0x40000c00
 8002258:	40014000 	.word	0x40014000
 800225c:	40001800 	.word	0x40001800

08002260 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d101      	bne.n	8002272 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e041      	b.n	80022f6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002278:	b2db      	uxtb	r3, r3
 800227a:	2b00      	cmp	r3, #0
 800227c:	d106      	bne.n	800228c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f7fe fb84 	bl	8000994 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2202      	movs	r2, #2
 8002290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	3304      	adds	r3, #4
 800229c:	4619      	mov	r1, r3
 800229e:	4610      	mov	r0, r2
 80022a0:	f000 fcac 	bl	8002bfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2201      	movs	r2, #1
 80022f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
	...

08002300 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800230a:	2300      	movs	r3, #0
 800230c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d104      	bne.n	800231e <HAL_TIM_IC_Start_IT+0x1e>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800231a:	b2db      	uxtb	r3, r3
 800231c:	e013      	b.n	8002346 <HAL_TIM_IC_Start_IT+0x46>
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	2b04      	cmp	r3, #4
 8002322:	d104      	bne.n	800232e <HAL_TIM_IC_Start_IT+0x2e>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800232a:	b2db      	uxtb	r3, r3
 800232c:	e00b      	b.n	8002346 <HAL_TIM_IC_Start_IT+0x46>
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	2b08      	cmp	r3, #8
 8002332:	d104      	bne.n	800233e <HAL_TIM_IC_Start_IT+0x3e>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800233a:	b2db      	uxtb	r3, r3
 800233c:	e003      	b.n	8002346 <HAL_TIM_IC_Start_IT+0x46>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002344:	b2db      	uxtb	r3, r3
 8002346:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d104      	bne.n	8002358 <HAL_TIM_IC_Start_IT+0x58>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002354:	b2db      	uxtb	r3, r3
 8002356:	e013      	b.n	8002380 <HAL_TIM_IC_Start_IT+0x80>
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	2b04      	cmp	r3, #4
 800235c:	d104      	bne.n	8002368 <HAL_TIM_IC_Start_IT+0x68>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002364:	b2db      	uxtb	r3, r3
 8002366:	e00b      	b.n	8002380 <HAL_TIM_IC_Start_IT+0x80>
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	2b08      	cmp	r3, #8
 800236c:	d104      	bne.n	8002378 <HAL_TIM_IC_Start_IT+0x78>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002374:	b2db      	uxtb	r3, r3
 8002376:	e003      	b.n	8002380 <HAL_TIM_IC_Start_IT+0x80>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800237e:	b2db      	uxtb	r3, r3
 8002380:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002382:	7bbb      	ldrb	r3, [r7, #14]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d102      	bne.n	800238e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002388:	7b7b      	ldrb	r3, [r7, #13]
 800238a:	2b01      	cmp	r3, #1
 800238c:	d001      	beq.n	8002392 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e0cc      	b.n	800252c <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d104      	bne.n	80023a2 <HAL_TIM_IC_Start_IT+0xa2>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2202      	movs	r2, #2
 800239c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023a0:	e013      	b.n	80023ca <HAL_TIM_IC_Start_IT+0xca>
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	2b04      	cmp	r3, #4
 80023a6:	d104      	bne.n	80023b2 <HAL_TIM_IC_Start_IT+0xb2>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2202      	movs	r2, #2
 80023ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023b0:	e00b      	b.n	80023ca <HAL_TIM_IC_Start_IT+0xca>
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	2b08      	cmp	r3, #8
 80023b6:	d104      	bne.n	80023c2 <HAL_TIM_IC_Start_IT+0xc2>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2202      	movs	r2, #2
 80023bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023c0:	e003      	b.n	80023ca <HAL_TIM_IC_Start_IT+0xca>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2202      	movs	r2, #2
 80023c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d104      	bne.n	80023da <HAL_TIM_IC_Start_IT+0xda>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2202      	movs	r2, #2
 80023d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023d8:	e013      	b.n	8002402 <HAL_TIM_IC_Start_IT+0x102>
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	2b04      	cmp	r3, #4
 80023de:	d104      	bne.n	80023ea <HAL_TIM_IC_Start_IT+0xea>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2202      	movs	r2, #2
 80023e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80023e8:	e00b      	b.n	8002402 <HAL_TIM_IC_Start_IT+0x102>
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	2b08      	cmp	r3, #8
 80023ee:	d104      	bne.n	80023fa <HAL_TIM_IC_Start_IT+0xfa>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2202      	movs	r2, #2
 80023f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023f8:	e003      	b.n	8002402 <HAL_TIM_IC_Start_IT+0x102>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2202      	movs	r2, #2
 80023fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	2b0c      	cmp	r3, #12
 8002406:	d841      	bhi.n	800248c <HAL_TIM_IC_Start_IT+0x18c>
 8002408:	a201      	add	r2, pc, #4	; (adr r2, 8002410 <HAL_TIM_IC_Start_IT+0x110>)
 800240a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800240e:	bf00      	nop
 8002410:	08002445 	.word	0x08002445
 8002414:	0800248d 	.word	0x0800248d
 8002418:	0800248d 	.word	0x0800248d
 800241c:	0800248d 	.word	0x0800248d
 8002420:	08002457 	.word	0x08002457
 8002424:	0800248d 	.word	0x0800248d
 8002428:	0800248d 	.word	0x0800248d
 800242c:	0800248d 	.word	0x0800248d
 8002430:	08002469 	.word	0x08002469
 8002434:	0800248d 	.word	0x0800248d
 8002438:	0800248d 	.word	0x0800248d
 800243c:	0800248d 	.word	0x0800248d
 8002440:	0800247b 	.word	0x0800247b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	68da      	ldr	r2, [r3, #12]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f042 0202 	orr.w	r2, r2, #2
 8002452:	60da      	str	r2, [r3, #12]
      break;
 8002454:	e01d      	b.n	8002492 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68da      	ldr	r2, [r3, #12]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f042 0204 	orr.w	r2, r2, #4
 8002464:	60da      	str	r2, [r3, #12]
      break;
 8002466:	e014      	b.n	8002492 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	68da      	ldr	r2, [r3, #12]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f042 0208 	orr.w	r2, r2, #8
 8002476:	60da      	str	r2, [r3, #12]
      break;
 8002478:	e00b      	b.n	8002492 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	68da      	ldr	r2, [r3, #12]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f042 0210 	orr.w	r2, r2, #16
 8002488:	60da      	str	r2, [r3, #12]
      break;
 800248a:	e002      	b.n	8002492 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	73fb      	strb	r3, [r7, #15]
      break;
 8002490:	bf00      	nop
  }

  if (status == HAL_OK)
 8002492:	7bfb      	ldrb	r3, [r7, #15]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d148      	bne.n	800252a <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2201      	movs	r2, #1
 800249e:	6839      	ldr	r1, [r7, #0]
 80024a0:	4618      	mov	r0, r3
 80024a2:	f000 ffbf 	bl	8003424 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a22      	ldr	r2, [pc, #136]	; (8002534 <HAL_TIM_IC_Start_IT+0x234>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d022      	beq.n	80024f6 <HAL_TIM_IC_Start_IT+0x1f6>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024b8:	d01d      	beq.n	80024f6 <HAL_TIM_IC_Start_IT+0x1f6>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a1e      	ldr	r2, [pc, #120]	; (8002538 <HAL_TIM_IC_Start_IT+0x238>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d018      	beq.n	80024f6 <HAL_TIM_IC_Start_IT+0x1f6>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a1c      	ldr	r2, [pc, #112]	; (800253c <HAL_TIM_IC_Start_IT+0x23c>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d013      	beq.n	80024f6 <HAL_TIM_IC_Start_IT+0x1f6>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a1b      	ldr	r2, [pc, #108]	; (8002540 <HAL_TIM_IC_Start_IT+0x240>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d00e      	beq.n	80024f6 <HAL_TIM_IC_Start_IT+0x1f6>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a19      	ldr	r2, [pc, #100]	; (8002544 <HAL_TIM_IC_Start_IT+0x244>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d009      	beq.n	80024f6 <HAL_TIM_IC_Start_IT+0x1f6>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a18      	ldr	r2, [pc, #96]	; (8002548 <HAL_TIM_IC_Start_IT+0x248>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d004      	beq.n	80024f6 <HAL_TIM_IC_Start_IT+0x1f6>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a16      	ldr	r2, [pc, #88]	; (800254c <HAL_TIM_IC_Start_IT+0x24c>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d111      	bne.n	800251a <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	f003 0307 	and.w	r3, r3, #7
 8002500:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	2b06      	cmp	r3, #6
 8002506:	d010      	beq.n	800252a <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f042 0201 	orr.w	r2, r2, #1
 8002516:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002518:	e007      	b.n	800252a <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f042 0201 	orr.w	r2, r2, #1
 8002528:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800252a:	7bfb      	ldrb	r3, [r7, #15]
}
 800252c:	4618      	mov	r0, r3
 800252e:	3710      	adds	r7, #16
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	40010000 	.word	0x40010000
 8002538:	40000400 	.word	0x40000400
 800253c:	40000800 	.word	0x40000800
 8002540:	40000c00 	.word	0x40000c00
 8002544:	40010400 	.word	0x40010400
 8002548:	40014000 	.word	0x40014000
 800254c:	40001800 	.word	0x40001800

08002550 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	2b02      	cmp	r3, #2
 8002564:	d122      	bne.n	80025ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	f003 0302 	and.w	r3, r3, #2
 8002570:	2b02      	cmp	r3, #2
 8002572:	d11b      	bne.n	80025ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f06f 0202 	mvn.w	r2, #2
 800257c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2201      	movs	r2, #1
 8002582:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	699b      	ldr	r3, [r3, #24]
 800258a:	f003 0303 	and.w	r3, r3, #3
 800258e:	2b00      	cmp	r3, #0
 8002590:	d003      	beq.n	800259a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f7fe f80e 	bl	80005b4 <HAL_TIM_IC_CaptureCallback>
 8002598:	e005      	b.n	80025a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f000 fb0f 	bl	8002bbe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f000 fb16 	bl	8002bd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	f003 0304 	and.w	r3, r3, #4
 80025b6:	2b04      	cmp	r3, #4
 80025b8:	d122      	bne.n	8002600 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	f003 0304 	and.w	r3, r3, #4
 80025c4:	2b04      	cmp	r3, #4
 80025c6:	d11b      	bne.n	8002600 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f06f 0204 	mvn.w	r2, #4
 80025d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2202      	movs	r2, #2
 80025d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	699b      	ldr	r3, [r3, #24]
 80025de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d003      	beq.n	80025ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f7fd ffe4 	bl	80005b4 <HAL_TIM_IC_CaptureCallback>
 80025ec:	e005      	b.n	80025fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f000 fae5 	bl	8002bbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f000 faec 	bl	8002bd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	f003 0308 	and.w	r3, r3, #8
 800260a:	2b08      	cmp	r3, #8
 800260c:	d122      	bne.n	8002654 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	f003 0308 	and.w	r3, r3, #8
 8002618:	2b08      	cmp	r3, #8
 800261a:	d11b      	bne.n	8002654 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f06f 0208 	mvn.w	r2, #8
 8002624:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2204      	movs	r2, #4
 800262a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	69db      	ldr	r3, [r3, #28]
 8002632:	f003 0303 	and.w	r3, r3, #3
 8002636:	2b00      	cmp	r3, #0
 8002638:	d003      	beq.n	8002642 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f7fd ffba 	bl	80005b4 <HAL_TIM_IC_CaptureCallback>
 8002640:	e005      	b.n	800264e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 fabb 	bl	8002bbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f000 fac2 	bl	8002bd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	f003 0310 	and.w	r3, r3, #16
 800265e:	2b10      	cmp	r3, #16
 8002660:	d122      	bne.n	80026a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	f003 0310 	and.w	r3, r3, #16
 800266c:	2b10      	cmp	r3, #16
 800266e:	d11b      	bne.n	80026a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f06f 0210 	mvn.w	r2, #16
 8002678:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2208      	movs	r2, #8
 800267e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	69db      	ldr	r3, [r3, #28]
 8002686:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800268a:	2b00      	cmp	r3, #0
 800268c:	d003      	beq.n	8002696 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f7fd ff90 	bl	80005b4 <HAL_TIM_IC_CaptureCallback>
 8002694:	e005      	b.n	80026a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 fa91 	bl	8002bbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f000 fa98 	bl	8002bd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d10e      	bne.n	80026d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	f003 0301 	and.w	r3, r3, #1
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d107      	bne.n	80026d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f06f 0201 	mvn.w	r2, #1
 80026cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 fa6b 	bl	8002baa <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026de:	2b80      	cmp	r3, #128	; 0x80
 80026e0:	d10e      	bne.n	8002700 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ec:	2b80      	cmp	r3, #128	; 0x80
 80026ee:	d107      	bne.n	8002700 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80026f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 ff3e 	bl	800357c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800270a:	2b40      	cmp	r3, #64	; 0x40
 800270c:	d10e      	bne.n	800272c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002718:	2b40      	cmp	r3, #64	; 0x40
 800271a:	d107      	bne.n	800272c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002724:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f000 fa5d 	bl	8002be6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	f003 0320 	and.w	r3, r3, #32
 8002736:	2b20      	cmp	r3, #32
 8002738:	d10e      	bne.n	8002758 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	f003 0320 	and.w	r3, r3, #32
 8002744:	2b20      	cmp	r3, #32
 8002746:	d107      	bne.n	8002758 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f06f 0220 	mvn.w	r2, #32
 8002750:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f000 ff08 	bl	8003568 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002758:	bf00      	nop
 800275a:	3708      	adds	r7, #8
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b086      	sub	sp, #24
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800276c:	2300      	movs	r3, #0
 800276e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002776:	2b01      	cmp	r3, #1
 8002778:	d101      	bne.n	800277e <HAL_TIM_IC_ConfigChannel+0x1e>
 800277a:	2302      	movs	r3, #2
 800277c:	e088      	b.n	8002890 <HAL_TIM_IC_ConfigChannel+0x130>
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2201      	movs	r2, #1
 8002782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d11b      	bne.n	80027c4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6818      	ldr	r0, [r3, #0]
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	6819      	ldr	r1, [r3, #0]
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	685a      	ldr	r2, [r3, #4]
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	f000 fc7e 	bl	800309c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	699a      	ldr	r2, [r3, #24]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f022 020c 	bic.w	r2, r2, #12
 80027ae:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	6999      	ldr	r1, [r3, #24]
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	689a      	ldr	r2, [r3, #8]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	430a      	orrs	r2, r1
 80027c0:	619a      	str	r2, [r3, #24]
 80027c2:	e060      	b.n	8002886 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2b04      	cmp	r3, #4
 80027c8:	d11c      	bne.n	8002804 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6818      	ldr	r0, [r3, #0]
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	6819      	ldr	r1, [r3, #0]
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	685a      	ldr	r2, [r3, #4]
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	f000 fd02 	bl	80031e2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	699a      	ldr	r2, [r3, #24]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80027ec:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	6999      	ldr	r1, [r3, #24]
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	021a      	lsls	r2, r3, #8
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	430a      	orrs	r2, r1
 8002800:	619a      	str	r2, [r3, #24]
 8002802:	e040      	b.n	8002886 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2b08      	cmp	r3, #8
 8002808:	d11b      	bne.n	8002842 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6818      	ldr	r0, [r3, #0]
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	6819      	ldr	r1, [r3, #0]
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	685a      	ldr	r2, [r3, #4]
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	f000 fd4f 	bl	80032bc <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	69da      	ldr	r2, [r3, #28]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f022 020c 	bic.w	r2, r2, #12
 800282c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	69d9      	ldr	r1, [r3, #28]
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	689a      	ldr	r2, [r3, #8]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	430a      	orrs	r2, r1
 800283e:	61da      	str	r2, [r3, #28]
 8002840:	e021      	b.n	8002886 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2b0c      	cmp	r3, #12
 8002846:	d11c      	bne.n	8002882 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6818      	ldr	r0, [r3, #0]
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	6819      	ldr	r1, [r3, #0]
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	685a      	ldr	r2, [r3, #4]
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	f000 fd6c 	bl	8003334 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	69da      	ldr	r2, [r3, #28]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800286a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	69d9      	ldr	r1, [r3, #28]
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	021a      	lsls	r2, r3, #8
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	430a      	orrs	r2, r1
 800287e:	61da      	str	r2, [r3, #28]
 8002880:	e001      	b.n	8002886 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800288e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002890:	4618      	mov	r0, r3
 8002892:	3718      	adds	r7, #24
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}

08002898 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028a4:	2300      	movs	r3, #0
 80028a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d101      	bne.n	80028b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80028b2:	2302      	movs	r3, #2
 80028b4:	e0ae      	b.n	8002a14 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2201      	movs	r2, #1
 80028ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2b0c      	cmp	r3, #12
 80028c2:	f200 809f 	bhi.w	8002a04 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80028c6:	a201      	add	r2, pc, #4	; (adr r2, 80028cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80028c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028cc:	08002901 	.word	0x08002901
 80028d0:	08002a05 	.word	0x08002a05
 80028d4:	08002a05 	.word	0x08002a05
 80028d8:	08002a05 	.word	0x08002a05
 80028dc:	08002941 	.word	0x08002941
 80028e0:	08002a05 	.word	0x08002a05
 80028e4:	08002a05 	.word	0x08002a05
 80028e8:	08002a05 	.word	0x08002a05
 80028ec:	08002983 	.word	0x08002983
 80028f0:	08002a05 	.word	0x08002a05
 80028f4:	08002a05 	.word	0x08002a05
 80028f8:	08002a05 	.word	0x08002a05
 80028fc:	080029c3 	.word	0x080029c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	68b9      	ldr	r1, [r7, #8]
 8002906:	4618      	mov	r0, r3
 8002908:	f000 fa18 	bl	8002d3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	699a      	ldr	r2, [r3, #24]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f042 0208 	orr.w	r2, r2, #8
 800291a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	699a      	ldr	r2, [r3, #24]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f022 0204 	bic.w	r2, r2, #4
 800292a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	6999      	ldr	r1, [r3, #24]
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	691a      	ldr	r2, [r3, #16]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	430a      	orrs	r2, r1
 800293c:	619a      	str	r2, [r3, #24]
      break;
 800293e:	e064      	b.n	8002a0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	68b9      	ldr	r1, [r7, #8]
 8002946:	4618      	mov	r0, r3
 8002948:	f000 fa68 	bl	8002e1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	699a      	ldr	r2, [r3, #24]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800295a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	699a      	ldr	r2, [r3, #24]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800296a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	6999      	ldr	r1, [r3, #24]
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	021a      	lsls	r2, r3, #8
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	430a      	orrs	r2, r1
 800297e:	619a      	str	r2, [r3, #24]
      break;
 8002980:	e043      	b.n	8002a0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	68b9      	ldr	r1, [r7, #8]
 8002988:	4618      	mov	r0, r3
 800298a:	f000 fabd 	bl	8002f08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	69da      	ldr	r2, [r3, #28]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f042 0208 	orr.w	r2, r2, #8
 800299c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	69da      	ldr	r2, [r3, #28]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f022 0204 	bic.w	r2, r2, #4
 80029ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	69d9      	ldr	r1, [r3, #28]
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	691a      	ldr	r2, [r3, #16]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	430a      	orrs	r2, r1
 80029be:	61da      	str	r2, [r3, #28]
      break;
 80029c0:	e023      	b.n	8002a0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	68b9      	ldr	r1, [r7, #8]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f000 fb11 	bl	8002ff0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	69da      	ldr	r2, [r3, #28]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	69da      	ldr	r2, [r3, #28]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	69d9      	ldr	r1, [r3, #28]
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	691b      	ldr	r3, [r3, #16]
 80029f8:	021a      	lsls	r2, r3, #8
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	430a      	orrs	r2, r1
 8002a00:	61da      	str	r2, [r3, #28]
      break;
 8002a02:	e002      	b.n	8002a0a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	75fb      	strb	r3, [r7, #23]
      break;
 8002a08:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002a12:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3718      	adds	r7, #24
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a26:	2300      	movs	r3, #0
 8002a28:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d101      	bne.n	8002a38 <HAL_TIM_ConfigClockSource+0x1c>
 8002a34:	2302      	movs	r3, #2
 8002a36:	e0b4      	b.n	8002ba2 <HAL_TIM_ConfigClockSource+0x186>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2202      	movs	r2, #2
 8002a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002a56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68ba      	ldr	r2, [r7, #8]
 8002a66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a70:	d03e      	beq.n	8002af0 <HAL_TIM_ConfigClockSource+0xd4>
 8002a72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a76:	f200 8087 	bhi.w	8002b88 <HAL_TIM_ConfigClockSource+0x16c>
 8002a7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a7e:	f000 8086 	beq.w	8002b8e <HAL_TIM_ConfigClockSource+0x172>
 8002a82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a86:	d87f      	bhi.n	8002b88 <HAL_TIM_ConfigClockSource+0x16c>
 8002a88:	2b70      	cmp	r3, #112	; 0x70
 8002a8a:	d01a      	beq.n	8002ac2 <HAL_TIM_ConfigClockSource+0xa6>
 8002a8c:	2b70      	cmp	r3, #112	; 0x70
 8002a8e:	d87b      	bhi.n	8002b88 <HAL_TIM_ConfigClockSource+0x16c>
 8002a90:	2b60      	cmp	r3, #96	; 0x60
 8002a92:	d050      	beq.n	8002b36 <HAL_TIM_ConfigClockSource+0x11a>
 8002a94:	2b60      	cmp	r3, #96	; 0x60
 8002a96:	d877      	bhi.n	8002b88 <HAL_TIM_ConfigClockSource+0x16c>
 8002a98:	2b50      	cmp	r3, #80	; 0x50
 8002a9a:	d03c      	beq.n	8002b16 <HAL_TIM_ConfigClockSource+0xfa>
 8002a9c:	2b50      	cmp	r3, #80	; 0x50
 8002a9e:	d873      	bhi.n	8002b88 <HAL_TIM_ConfigClockSource+0x16c>
 8002aa0:	2b40      	cmp	r3, #64	; 0x40
 8002aa2:	d058      	beq.n	8002b56 <HAL_TIM_ConfigClockSource+0x13a>
 8002aa4:	2b40      	cmp	r3, #64	; 0x40
 8002aa6:	d86f      	bhi.n	8002b88 <HAL_TIM_ConfigClockSource+0x16c>
 8002aa8:	2b30      	cmp	r3, #48	; 0x30
 8002aaa:	d064      	beq.n	8002b76 <HAL_TIM_ConfigClockSource+0x15a>
 8002aac:	2b30      	cmp	r3, #48	; 0x30
 8002aae:	d86b      	bhi.n	8002b88 <HAL_TIM_ConfigClockSource+0x16c>
 8002ab0:	2b20      	cmp	r3, #32
 8002ab2:	d060      	beq.n	8002b76 <HAL_TIM_ConfigClockSource+0x15a>
 8002ab4:	2b20      	cmp	r3, #32
 8002ab6:	d867      	bhi.n	8002b88 <HAL_TIM_ConfigClockSource+0x16c>
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d05c      	beq.n	8002b76 <HAL_TIM_ConfigClockSource+0x15a>
 8002abc:	2b10      	cmp	r3, #16
 8002abe:	d05a      	beq.n	8002b76 <HAL_TIM_ConfigClockSource+0x15a>
 8002ac0:	e062      	b.n	8002b88 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6818      	ldr	r0, [r3, #0]
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	6899      	ldr	r1, [r3, #8]
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	685a      	ldr	r2, [r3, #4]
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	f000 fc87 	bl	80033e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ae4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68ba      	ldr	r2, [r7, #8]
 8002aec:	609a      	str	r2, [r3, #8]
      break;
 8002aee:	e04f      	b.n	8002b90 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6818      	ldr	r0, [r3, #0]
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	6899      	ldr	r1, [r3, #8]
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685a      	ldr	r2, [r3, #4]
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	f000 fc70 	bl	80033e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	689a      	ldr	r2, [r3, #8]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b12:	609a      	str	r2, [r3, #8]
      break;
 8002b14:	e03c      	b.n	8002b90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6818      	ldr	r0, [r3, #0]
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	6859      	ldr	r1, [r3, #4]
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	461a      	mov	r2, r3
 8002b24:	f000 fb2e 	bl	8003184 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2150      	movs	r1, #80	; 0x50
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f000 fc3d 	bl	80033ae <TIM_ITRx_SetConfig>
      break;
 8002b34:	e02c      	b.n	8002b90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6818      	ldr	r0, [r3, #0]
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	6859      	ldr	r1, [r3, #4]
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	461a      	mov	r2, r3
 8002b44:	f000 fb8a 	bl	800325c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2160      	movs	r1, #96	; 0x60
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f000 fc2d 	bl	80033ae <TIM_ITRx_SetConfig>
      break;
 8002b54:	e01c      	b.n	8002b90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6818      	ldr	r0, [r3, #0]
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	6859      	ldr	r1, [r3, #4]
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	461a      	mov	r2, r3
 8002b64:	f000 fb0e 	bl	8003184 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2140      	movs	r1, #64	; 0x40
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f000 fc1d 	bl	80033ae <TIM_ITRx_SetConfig>
      break;
 8002b74:	e00c      	b.n	8002b90 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4619      	mov	r1, r3
 8002b80:	4610      	mov	r0, r2
 8002b82:	f000 fc14 	bl	80033ae <TIM_ITRx_SetConfig>
      break;
 8002b86:	e003      	b.n	8002b90 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b8c:	e000      	b.n	8002b90 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002b8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3710      	adds	r7, #16
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002baa:	b480      	push	{r7}
 8002bac:	b083      	sub	sp, #12
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002bb2:	bf00      	nop
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr

08002bbe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bbe:	b480      	push	{r7}
 8002bc0:	b083      	sub	sp, #12
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002bc6:	bf00      	nop
 8002bc8:	370c      	adds	r7, #12
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr

08002bd2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	b083      	sub	sp, #12
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr

08002be6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002be6:	b480      	push	{r7}
 8002be8:	b083      	sub	sp, #12
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002bee:	bf00      	nop
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
	...

08002bfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b085      	sub	sp, #20
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4a40      	ldr	r2, [pc, #256]	; (8002d10 <TIM_Base_SetConfig+0x114>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d013      	beq.n	8002c3c <TIM_Base_SetConfig+0x40>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c1a:	d00f      	beq.n	8002c3c <TIM_Base_SetConfig+0x40>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	4a3d      	ldr	r2, [pc, #244]	; (8002d14 <TIM_Base_SetConfig+0x118>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d00b      	beq.n	8002c3c <TIM_Base_SetConfig+0x40>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4a3c      	ldr	r2, [pc, #240]	; (8002d18 <TIM_Base_SetConfig+0x11c>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d007      	beq.n	8002c3c <TIM_Base_SetConfig+0x40>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4a3b      	ldr	r2, [pc, #236]	; (8002d1c <TIM_Base_SetConfig+0x120>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d003      	beq.n	8002c3c <TIM_Base_SetConfig+0x40>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4a3a      	ldr	r2, [pc, #232]	; (8002d20 <TIM_Base_SetConfig+0x124>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d108      	bne.n	8002c4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	68fa      	ldr	r2, [r7, #12]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a2f      	ldr	r2, [pc, #188]	; (8002d10 <TIM_Base_SetConfig+0x114>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d02b      	beq.n	8002cae <TIM_Base_SetConfig+0xb2>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c5c:	d027      	beq.n	8002cae <TIM_Base_SetConfig+0xb2>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a2c      	ldr	r2, [pc, #176]	; (8002d14 <TIM_Base_SetConfig+0x118>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d023      	beq.n	8002cae <TIM_Base_SetConfig+0xb2>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a2b      	ldr	r2, [pc, #172]	; (8002d18 <TIM_Base_SetConfig+0x11c>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d01f      	beq.n	8002cae <TIM_Base_SetConfig+0xb2>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a2a      	ldr	r2, [pc, #168]	; (8002d1c <TIM_Base_SetConfig+0x120>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d01b      	beq.n	8002cae <TIM_Base_SetConfig+0xb2>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a29      	ldr	r2, [pc, #164]	; (8002d20 <TIM_Base_SetConfig+0x124>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d017      	beq.n	8002cae <TIM_Base_SetConfig+0xb2>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a28      	ldr	r2, [pc, #160]	; (8002d24 <TIM_Base_SetConfig+0x128>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d013      	beq.n	8002cae <TIM_Base_SetConfig+0xb2>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a27      	ldr	r2, [pc, #156]	; (8002d28 <TIM_Base_SetConfig+0x12c>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d00f      	beq.n	8002cae <TIM_Base_SetConfig+0xb2>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a26      	ldr	r2, [pc, #152]	; (8002d2c <TIM_Base_SetConfig+0x130>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d00b      	beq.n	8002cae <TIM_Base_SetConfig+0xb2>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a25      	ldr	r2, [pc, #148]	; (8002d30 <TIM_Base_SetConfig+0x134>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d007      	beq.n	8002cae <TIM_Base_SetConfig+0xb2>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a24      	ldr	r2, [pc, #144]	; (8002d34 <TIM_Base_SetConfig+0x138>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d003      	beq.n	8002cae <TIM_Base_SetConfig+0xb2>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a23      	ldr	r2, [pc, #140]	; (8002d38 <TIM_Base_SetConfig+0x13c>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d108      	bne.n	8002cc0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	68fa      	ldr	r2, [r7, #12]
 8002cd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	689a      	ldr	r2, [r3, #8]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4a0a      	ldr	r2, [pc, #40]	; (8002d10 <TIM_Base_SetConfig+0x114>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d003      	beq.n	8002cf4 <TIM_Base_SetConfig+0xf8>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4a0c      	ldr	r2, [pc, #48]	; (8002d20 <TIM_Base_SetConfig+0x124>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d103      	bne.n	8002cfc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	691a      	ldr	r2, [r3, #16]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	615a      	str	r2, [r3, #20]
}
 8002d02:	bf00      	nop
 8002d04:	3714      	adds	r7, #20
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	40010000 	.word	0x40010000
 8002d14:	40000400 	.word	0x40000400
 8002d18:	40000800 	.word	0x40000800
 8002d1c:	40000c00 	.word	0x40000c00
 8002d20:	40010400 	.word	0x40010400
 8002d24:	40014000 	.word	0x40014000
 8002d28:	40014400 	.word	0x40014400
 8002d2c:	40014800 	.word	0x40014800
 8002d30:	40001800 	.word	0x40001800
 8002d34:	40001c00 	.word	0x40001c00
 8002d38:	40002000 	.word	0x40002000

08002d3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b087      	sub	sp, #28
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a1b      	ldr	r3, [r3, #32]
 8002d4a:	f023 0201 	bic.w	r2, r3, #1
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a1b      	ldr	r3, [r3, #32]
 8002d56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	699b      	ldr	r3, [r3, #24]
 8002d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f023 0303 	bic.w	r3, r3, #3
 8002d72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	68fa      	ldr	r2, [r7, #12]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	f023 0302 	bic.w	r3, r3, #2
 8002d84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	697a      	ldr	r2, [r7, #20]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	4a20      	ldr	r2, [pc, #128]	; (8002e14 <TIM_OC1_SetConfig+0xd8>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d003      	beq.n	8002da0 <TIM_OC1_SetConfig+0x64>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4a1f      	ldr	r2, [pc, #124]	; (8002e18 <TIM_OC1_SetConfig+0xdc>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d10c      	bne.n	8002dba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	f023 0308 	bic.w	r3, r3, #8
 8002da6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	697a      	ldr	r2, [r7, #20]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	f023 0304 	bic.w	r3, r3, #4
 8002db8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a15      	ldr	r2, [pc, #84]	; (8002e14 <TIM_OC1_SetConfig+0xd8>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d003      	beq.n	8002dca <TIM_OC1_SetConfig+0x8e>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a14      	ldr	r2, [pc, #80]	; (8002e18 <TIM_OC1_SetConfig+0xdc>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d111      	bne.n	8002dee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002dd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002dd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	695b      	ldr	r3, [r3, #20]
 8002dde:	693a      	ldr	r2, [r7, #16]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	693a      	ldr	r2, [r7, #16]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	693a      	ldr	r2, [r7, #16]
 8002df2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	68fa      	ldr	r2, [r7, #12]
 8002df8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	685a      	ldr	r2, [r3, #4]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	697a      	ldr	r2, [r7, #20]
 8002e06:	621a      	str	r2, [r3, #32]
}
 8002e08:	bf00      	nop
 8002e0a:	371c      	adds	r7, #28
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr
 8002e14:	40010000 	.word	0x40010000
 8002e18:	40010400 	.word	0x40010400

08002e1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b087      	sub	sp, #28
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a1b      	ldr	r3, [r3, #32]
 8002e2a:	f023 0210 	bic.w	r2, r3, #16
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a1b      	ldr	r3, [r3, #32]
 8002e36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	021b      	lsls	r3, r3, #8
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	f023 0320 	bic.w	r3, r3, #32
 8002e66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	011b      	lsls	r3, r3, #4
 8002e6e:	697a      	ldr	r2, [r7, #20]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	4a22      	ldr	r2, [pc, #136]	; (8002f00 <TIM_OC2_SetConfig+0xe4>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d003      	beq.n	8002e84 <TIM_OC2_SetConfig+0x68>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	4a21      	ldr	r2, [pc, #132]	; (8002f04 <TIM_OC2_SetConfig+0xe8>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d10d      	bne.n	8002ea0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	011b      	lsls	r3, r3, #4
 8002e92:	697a      	ldr	r2, [r7, #20]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e9e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	4a17      	ldr	r2, [pc, #92]	; (8002f00 <TIM_OC2_SetConfig+0xe4>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d003      	beq.n	8002eb0 <TIM_OC2_SetConfig+0x94>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	4a16      	ldr	r2, [pc, #88]	; (8002f04 <TIM_OC2_SetConfig+0xe8>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d113      	bne.n	8002ed8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002eb6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ebe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	695b      	ldr	r3, [r3, #20]
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	693a      	ldr	r2, [r7, #16]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	699b      	ldr	r3, [r3, #24]
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	693a      	ldr	r2, [r7, #16]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	693a      	ldr	r2, [r7, #16]
 8002edc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	68fa      	ldr	r2, [r7, #12]
 8002ee2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	685a      	ldr	r2, [r3, #4]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	697a      	ldr	r2, [r7, #20]
 8002ef0:	621a      	str	r2, [r3, #32]
}
 8002ef2:	bf00      	nop
 8002ef4:	371c      	adds	r7, #28
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop
 8002f00:	40010000 	.word	0x40010000
 8002f04:	40010400 	.word	0x40010400

08002f08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b087      	sub	sp, #28
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a1b      	ldr	r3, [r3, #32]
 8002f16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a1b      	ldr	r3, [r3, #32]
 8002f22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	69db      	ldr	r3, [r3, #28]
 8002f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f023 0303 	bic.w	r3, r3, #3
 8002f3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68fa      	ldr	r2, [r7, #12]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	021b      	lsls	r3, r3, #8
 8002f58:	697a      	ldr	r2, [r7, #20]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a21      	ldr	r2, [pc, #132]	; (8002fe8 <TIM_OC3_SetConfig+0xe0>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d003      	beq.n	8002f6e <TIM_OC3_SetConfig+0x66>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a20      	ldr	r2, [pc, #128]	; (8002fec <TIM_OC3_SetConfig+0xe4>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d10d      	bne.n	8002f8a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	021b      	lsls	r3, r3, #8
 8002f7c:	697a      	ldr	r2, [r7, #20]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a16      	ldr	r2, [pc, #88]	; (8002fe8 <TIM_OC3_SetConfig+0xe0>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d003      	beq.n	8002f9a <TIM_OC3_SetConfig+0x92>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a15      	ldr	r2, [pc, #84]	; (8002fec <TIM_OC3_SetConfig+0xe4>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d113      	bne.n	8002fc2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002fa0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002fa8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	695b      	ldr	r3, [r3, #20]
 8002fae:	011b      	lsls	r3, r3, #4
 8002fb0:	693a      	ldr	r2, [r7, #16]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	011b      	lsls	r3, r3, #4
 8002fbc:	693a      	ldr	r2, [r7, #16]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	693a      	ldr	r2, [r7, #16]
 8002fc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	685a      	ldr	r2, [r3, #4]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	697a      	ldr	r2, [r7, #20]
 8002fda:	621a      	str	r2, [r3, #32]
}
 8002fdc:	bf00      	nop
 8002fde:	371c      	adds	r7, #28
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr
 8002fe8:	40010000 	.word	0x40010000
 8002fec:	40010400 	.word	0x40010400

08002ff0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b087      	sub	sp, #28
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a1b      	ldr	r3, [r3, #32]
 8002ffe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	69db      	ldr	r3, [r3, #28]
 8003016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800301e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003026:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	021b      	lsls	r3, r3, #8
 800302e:	68fa      	ldr	r2, [r7, #12]
 8003030:	4313      	orrs	r3, r2
 8003032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800303a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	031b      	lsls	r3, r3, #12
 8003042:	693a      	ldr	r2, [r7, #16]
 8003044:	4313      	orrs	r3, r2
 8003046:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a12      	ldr	r2, [pc, #72]	; (8003094 <TIM_OC4_SetConfig+0xa4>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d003      	beq.n	8003058 <TIM_OC4_SetConfig+0x68>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a11      	ldr	r2, [pc, #68]	; (8003098 <TIM_OC4_SetConfig+0xa8>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d109      	bne.n	800306c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800305e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	695b      	ldr	r3, [r3, #20]
 8003064:	019b      	lsls	r3, r3, #6
 8003066:	697a      	ldr	r2, [r7, #20]
 8003068:	4313      	orrs	r3, r2
 800306a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	697a      	ldr	r2, [r7, #20]
 8003070:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	68fa      	ldr	r2, [r7, #12]
 8003076:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685a      	ldr	r2, [r3, #4]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	693a      	ldr	r2, [r7, #16]
 8003084:	621a      	str	r2, [r3, #32]
}
 8003086:	bf00      	nop
 8003088:	371c      	adds	r7, #28
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	40010000 	.word	0x40010000
 8003098:	40010400 	.word	0x40010400

0800309c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800309c:	b480      	push	{r7}
 800309e:	b087      	sub	sp, #28
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	60b9      	str	r1, [r7, #8]
 80030a6:	607a      	str	r2, [r7, #4]
 80030a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6a1b      	ldr	r3, [r3, #32]
 80030ae:	f023 0201 	bic.w	r2, r3, #1
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6a1b      	ldr	r3, [r3, #32]
 80030c0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	4a28      	ldr	r2, [pc, #160]	; (8003168 <TIM_TI1_SetConfig+0xcc>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d01b      	beq.n	8003102 <TIM_TI1_SetConfig+0x66>
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030d0:	d017      	beq.n	8003102 <TIM_TI1_SetConfig+0x66>
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	4a25      	ldr	r2, [pc, #148]	; (800316c <TIM_TI1_SetConfig+0xd0>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d013      	beq.n	8003102 <TIM_TI1_SetConfig+0x66>
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	4a24      	ldr	r2, [pc, #144]	; (8003170 <TIM_TI1_SetConfig+0xd4>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d00f      	beq.n	8003102 <TIM_TI1_SetConfig+0x66>
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	4a23      	ldr	r2, [pc, #140]	; (8003174 <TIM_TI1_SetConfig+0xd8>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d00b      	beq.n	8003102 <TIM_TI1_SetConfig+0x66>
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	4a22      	ldr	r2, [pc, #136]	; (8003178 <TIM_TI1_SetConfig+0xdc>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d007      	beq.n	8003102 <TIM_TI1_SetConfig+0x66>
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	4a21      	ldr	r2, [pc, #132]	; (800317c <TIM_TI1_SetConfig+0xe0>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d003      	beq.n	8003102 <TIM_TI1_SetConfig+0x66>
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	4a20      	ldr	r2, [pc, #128]	; (8003180 <TIM_TI1_SetConfig+0xe4>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d101      	bne.n	8003106 <TIM_TI1_SetConfig+0x6a>
 8003102:	2301      	movs	r3, #1
 8003104:	e000      	b.n	8003108 <TIM_TI1_SetConfig+0x6c>
 8003106:	2300      	movs	r3, #0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d008      	beq.n	800311e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	f023 0303 	bic.w	r3, r3, #3
 8003112:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003114:	697a      	ldr	r2, [r7, #20]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4313      	orrs	r3, r2
 800311a:	617b      	str	r3, [r7, #20]
 800311c:	e003      	b.n	8003126 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	f043 0301 	orr.w	r3, r3, #1
 8003124:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800312c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	011b      	lsls	r3, r3, #4
 8003132:	b2db      	uxtb	r3, r3
 8003134:	697a      	ldr	r2, [r7, #20]
 8003136:	4313      	orrs	r3, r2
 8003138:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	f023 030a 	bic.w	r3, r3, #10
 8003140:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	f003 030a 	and.w	r3, r3, #10
 8003148:	693a      	ldr	r2, [r7, #16]
 800314a:	4313      	orrs	r3, r2
 800314c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	697a      	ldr	r2, [r7, #20]
 8003152:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	693a      	ldr	r2, [r7, #16]
 8003158:	621a      	str	r2, [r3, #32]
}
 800315a:	bf00      	nop
 800315c:	371c      	adds	r7, #28
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	40010000 	.word	0x40010000
 800316c:	40000400 	.word	0x40000400
 8003170:	40000800 	.word	0x40000800
 8003174:	40000c00 	.word	0x40000c00
 8003178:	40010400 	.word	0x40010400
 800317c:	40014000 	.word	0x40014000
 8003180:	40001800 	.word	0x40001800

08003184 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003184:	b480      	push	{r7}
 8003186:	b087      	sub	sp, #28
 8003188:	af00      	add	r7, sp, #0
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	60b9      	str	r1, [r7, #8]
 800318e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6a1b      	ldr	r3, [r3, #32]
 8003194:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6a1b      	ldr	r3, [r3, #32]
 800319a:	f023 0201 	bic.w	r2, r3, #1
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	699b      	ldr	r3, [r3, #24]
 80031a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	011b      	lsls	r3, r3, #4
 80031b4:	693a      	ldr	r2, [r7, #16]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	f023 030a 	bic.w	r3, r3, #10
 80031c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80031c2:	697a      	ldr	r2, [r7, #20]
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	693a      	ldr	r2, [r7, #16]
 80031ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	697a      	ldr	r2, [r7, #20]
 80031d4:	621a      	str	r2, [r3, #32]
}
 80031d6:	bf00      	nop
 80031d8:	371c      	adds	r7, #28
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr

080031e2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80031e2:	b480      	push	{r7}
 80031e4:	b087      	sub	sp, #28
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	60f8      	str	r0, [r7, #12]
 80031ea:	60b9      	str	r1, [r7, #8]
 80031ec:	607a      	str	r2, [r7, #4]
 80031ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6a1b      	ldr	r3, [r3, #32]
 80031f4:	f023 0210 	bic.w	r2, r3, #16
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6a1b      	ldr	r3, [r3, #32]
 8003206:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800320e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	021b      	lsls	r3, r3, #8
 8003214:	697a      	ldr	r2, [r7, #20]
 8003216:	4313      	orrs	r3, r2
 8003218:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003220:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	031b      	lsls	r3, r3, #12
 8003226:	b29b      	uxth	r3, r3
 8003228:	697a      	ldr	r2, [r7, #20]
 800322a:	4313      	orrs	r3, r2
 800322c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003234:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	011b      	lsls	r3, r3, #4
 800323a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	4313      	orrs	r3, r2
 8003242:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	697a      	ldr	r2, [r7, #20]
 8003248:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	693a      	ldr	r2, [r7, #16]
 800324e:	621a      	str	r2, [r3, #32]
}
 8003250:	bf00      	nop
 8003252:	371c      	adds	r7, #28
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800325c:	b480      	push	{r7}
 800325e:	b087      	sub	sp, #28
 8003260:	af00      	add	r7, sp, #0
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6a1b      	ldr	r3, [r3, #32]
 800326c:	f023 0210 	bic.w	r2, r3, #16
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	699b      	ldr	r3, [r3, #24]
 8003278:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6a1b      	ldr	r3, [r3, #32]
 800327e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003286:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	031b      	lsls	r3, r3, #12
 800328c:	697a      	ldr	r2, [r7, #20]
 800328e:	4313      	orrs	r3, r2
 8003290:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003298:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	011b      	lsls	r3, r3, #4
 800329e:	693a      	ldr	r2, [r7, #16]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	697a      	ldr	r2, [r7, #20]
 80032a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	693a      	ldr	r2, [r7, #16]
 80032ae:	621a      	str	r2, [r3, #32]
}
 80032b0:	bf00      	nop
 80032b2:	371c      	adds	r7, #28
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80032bc:	b480      	push	{r7}
 80032be:	b087      	sub	sp, #28
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	60b9      	str	r1, [r7, #8]
 80032c6:	607a      	str	r2, [r7, #4]
 80032c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6a1b      	ldr	r3, [r3, #32]
 80032ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	69db      	ldr	r3, [r3, #28]
 80032da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6a1b      	ldr	r3, [r3, #32]
 80032e0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	f023 0303 	bic.w	r3, r3, #3
 80032e8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80032ea:	697a      	ldr	r2, [r7, #20]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032f8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	011b      	lsls	r3, r3, #4
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	697a      	ldr	r2, [r7, #20]
 8003302:	4313      	orrs	r3, r2
 8003304:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800330c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	021b      	lsls	r3, r3, #8
 8003312:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003316:	693a      	ldr	r2, [r7, #16]
 8003318:	4313      	orrs	r3, r2
 800331a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	697a      	ldr	r2, [r7, #20]
 8003320:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	693a      	ldr	r2, [r7, #16]
 8003326:	621a      	str	r2, [r3, #32]
}
 8003328:	bf00      	nop
 800332a:	371c      	adds	r7, #28
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003334:	b480      	push	{r7}
 8003336:	b087      	sub	sp, #28
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	607a      	str	r2, [r7, #4]
 8003340:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6a1b      	ldr	r3, [r3, #32]
 8003346:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	69db      	ldr	r3, [r3, #28]
 8003352:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6a1b      	ldr	r3, [r3, #32]
 8003358:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003360:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	021b      	lsls	r3, r3, #8
 8003366:	697a      	ldr	r2, [r7, #20]
 8003368:	4313      	orrs	r3, r2
 800336a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003372:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	031b      	lsls	r3, r3, #12
 8003378:	b29b      	uxth	r3, r3
 800337a:	697a      	ldr	r2, [r7, #20]
 800337c:	4313      	orrs	r3, r2
 800337e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003386:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	031b      	lsls	r3, r3, #12
 800338c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003390:	693a      	ldr	r2, [r7, #16]
 8003392:	4313      	orrs	r3, r2
 8003394:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	697a      	ldr	r2, [r7, #20]
 800339a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	693a      	ldr	r2, [r7, #16]
 80033a0:	621a      	str	r2, [r3, #32]
}
 80033a2:	bf00      	nop
 80033a4:	371c      	adds	r7, #28
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr

080033ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80033ae:	b480      	push	{r7}
 80033b0:	b085      	sub	sp, #20
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
 80033b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80033c6:	683a      	ldr	r2, [r7, #0]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	f043 0307 	orr.w	r3, r3, #7
 80033d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	68fa      	ldr	r2, [r7, #12]
 80033d6:	609a      	str	r2, [r3, #8]
}
 80033d8:	bf00      	nop
 80033da:	3714      	adds	r7, #20
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b087      	sub	sp, #28
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	607a      	str	r2, [r7, #4]
 80033f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	021a      	lsls	r2, r3, #8
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	431a      	orrs	r2, r3
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	4313      	orrs	r3, r2
 800340c:	697a      	ldr	r2, [r7, #20]
 800340e:	4313      	orrs	r3, r2
 8003410:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	697a      	ldr	r2, [r7, #20]
 8003416:	609a      	str	r2, [r3, #8]
}
 8003418:	bf00      	nop
 800341a:	371c      	adds	r7, #28
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr

08003424 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003424:	b480      	push	{r7}
 8003426:	b087      	sub	sp, #28
 8003428:	af00      	add	r7, sp, #0
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	f003 031f 	and.w	r3, r3, #31
 8003436:	2201      	movs	r2, #1
 8003438:	fa02 f303 	lsl.w	r3, r2, r3
 800343c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6a1a      	ldr	r2, [r3, #32]
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	43db      	mvns	r3, r3
 8003446:	401a      	ands	r2, r3
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6a1a      	ldr	r2, [r3, #32]
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	f003 031f 	and.w	r3, r3, #31
 8003456:	6879      	ldr	r1, [r7, #4]
 8003458:	fa01 f303 	lsl.w	r3, r1, r3
 800345c:	431a      	orrs	r2, r3
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	621a      	str	r2, [r3, #32]
}
 8003462:	bf00      	nop
 8003464:	371c      	adds	r7, #28
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
	...

08003470 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003470:	b480      	push	{r7}
 8003472:	b085      	sub	sp, #20
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003480:	2b01      	cmp	r3, #1
 8003482:	d101      	bne.n	8003488 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003484:	2302      	movs	r3, #2
 8003486:	e05a      	b.n	800353e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2202      	movs	r2, #2
 8003494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	68fa      	ldr	r2, [r7, #12]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a21      	ldr	r2, [pc, #132]	; (800354c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d022      	beq.n	8003512 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034d4:	d01d      	beq.n	8003512 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a1d      	ldr	r2, [pc, #116]	; (8003550 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d018      	beq.n	8003512 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a1b      	ldr	r2, [pc, #108]	; (8003554 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d013      	beq.n	8003512 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a1a      	ldr	r2, [pc, #104]	; (8003558 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d00e      	beq.n	8003512 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a18      	ldr	r2, [pc, #96]	; (800355c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d009      	beq.n	8003512 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a17      	ldr	r2, [pc, #92]	; (8003560 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d004      	beq.n	8003512 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a15      	ldr	r2, [pc, #84]	; (8003564 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d10c      	bne.n	800352c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003518:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	68ba      	ldr	r2, [r7, #8]
 8003520:	4313      	orrs	r3, r2
 8003522:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68ba      	ldr	r2, [r7, #8]
 800352a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3714      	adds	r7, #20
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	40010000 	.word	0x40010000
 8003550:	40000400 	.word	0x40000400
 8003554:	40000800 	.word	0x40000800
 8003558:	40000c00 	.word	0x40000c00
 800355c:	40010400 	.word	0x40010400
 8003560:	40014000 	.word	0x40014000
 8003564:	40001800 	.word	0x40001800

08003568 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003570:	bf00      	nop
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003584:	bf00      	nop
 8003586:	370c      	adds	r7, #12
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr

08003590 <DC_MOTOR_Init>:
#include "../DC_MOTOR/DC_MOTOR.h"
#include "../DC_MOTOR/DC_MOTOR_cfg.h"
#include "main.h"

void DC_MOTOR_Init(uint8_t au8_MOTOR_Instance)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b0a8      	sub	sp, #160	; 0xa0
 8003594:	af00      	add	r7, sp, #0
 8003596:	4603      	mov	r3, r0
 8003598:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800359a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800359e:	2200      	movs	r2, #0
 80035a0:	601a      	str	r2, [r3, #0]
 80035a2:	605a      	str	r2, [r3, #4]
 80035a4:	609a      	str	r2, [r3, #8]
 80035a6:	60da      	str	r2, [r3, #12]
 80035a8:	611a      	str	r2, [r3, #16]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80035aa:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80035ae:	2200      	movs	r2, #0
 80035b0:	601a      	str	r2, [r3, #0]
 80035b2:	605a      	str	r2, [r3, #4]
 80035b4:	609a      	str	r2, [r3, #8]
 80035b6:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035b8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80035bc:	2200      	movs	r2, #0
 80035be:	601a      	str	r2, [r3, #0]
 80035c0:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 80035c2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80035c6:	2200      	movs	r2, #0
 80035c8:	601a      	str	r2, [r3, #0]
 80035ca:	605a      	str	r2, [r3, #4]
 80035cc:	609a      	str	r2, [r3, #8]
 80035ce:	60da      	str	r2, [r3, #12]
 80035d0:	611a      	str	r2, [r3, #16]
 80035d2:	615a      	str	r2, [r3, #20]
 80035d4:	619a      	str	r2, [r3, #24]
    TIM_HandleTypeDef htim;


	/*--------[ Configure The 2 Direction Control GPIO Pins ]-------*/

    if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO == GPIOC|| DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO == GPIOC)
 80035d6:	79fa      	ldrb	r2, [r7, #7]
 80035d8:	4987      	ldr	r1, [pc, #540]	; (80037f8 <DC_MOTOR_Init+0x268>)
 80035da:	4613      	mov	r3, r2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	4413      	add	r3, r2
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	440b      	add	r3, r1
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a85      	ldr	r2, [pc, #532]	; (80037fc <DC_MOTOR_Init+0x26c>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d00b      	beq.n	8003604 <DC_MOTOR_Init+0x74>
 80035ec:	79fa      	ldrb	r2, [r7, #7]
 80035ee:	4982      	ldr	r1, [pc, #520]	; (80037f8 <DC_MOTOR_Init+0x268>)
 80035f0:	4613      	mov	r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	4413      	add	r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	440b      	add	r3, r1
 80035fa:	3304      	adds	r3, #4
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a7f      	ldr	r2, [pc, #508]	; (80037fc <DC_MOTOR_Init+0x26c>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d10d      	bne.n	8003620 <DC_MOTOR_Init+0x90>
    {
    	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003604:	2300      	movs	r3, #0
 8003606:	60fb      	str	r3, [r7, #12]
 8003608:	4b7d      	ldr	r3, [pc, #500]	; (8003800 <DC_MOTOR_Init+0x270>)
 800360a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360c:	4a7c      	ldr	r2, [pc, #496]	; (8003800 <DC_MOTOR_Init+0x270>)
 800360e:	f043 0304 	orr.w	r3, r3, #4
 8003612:	6313      	str	r3, [r2, #48]	; 0x30
 8003614:	4b7a      	ldr	r3, [pc, #488]	; (8003800 <DC_MOTOR_Init+0x270>)
 8003616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003618:	f003 0304 	and.w	r3, r3, #4
 800361c:	60fb      	str	r3, [r7, #12]
 800361e:	68fb      	ldr	r3, [r7, #12]
    }

	GPIO_InitStruct.Pin = DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_PIN;
 8003620:	79fa      	ldrb	r2, [r7, #7]
 8003622:	4975      	ldr	r1, [pc, #468]	; (80037f8 <DC_MOTOR_Init+0x268>)
 8003624:	4613      	mov	r3, r2
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	4413      	add	r3, r2
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	440b      	add	r3, r1
 800362e:	3308      	adds	r3, #8
 8003630:	881b      	ldrh	r3, [r3, #0]
 8003632:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003636:	2301      	movs	r3, #1
 8003638:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800363c:	2300      	movs	r3, #0
 800363e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	HAL_GPIO_Init(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO, &GPIO_InitStruct);
 8003642:	79fa      	ldrb	r2, [r7, #7]
 8003644:	496c      	ldr	r1, [pc, #432]	; (80037f8 <DC_MOTOR_Init+0x268>)
 8003646:	4613      	mov	r3, r2
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	4413      	add	r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	440b      	add	r3, r1
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8003656:	4611      	mov	r1, r2
 8003658:	4618      	mov	r0, r3
 800365a:	f7fd fcdf 	bl	800101c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_PIN;
 800365e:	79fa      	ldrb	r2, [r7, #7]
 8003660:	4965      	ldr	r1, [pc, #404]	; (80037f8 <DC_MOTOR_Init+0x268>)
 8003662:	4613      	mov	r3, r2
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	4413      	add	r3, r2
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	440b      	add	r3, r1
 800366c:	330a      	adds	r3, #10
 800366e:	881b      	ldrh	r3, [r3, #0]
 8003670:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003674:	2301      	movs	r3, #1
 8003676:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800367a:	2300      	movs	r3, #0
 800367c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003680:	2302      	movs	r3, #2
 8003682:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	HAL_GPIO_Init(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO, &GPIO_InitStruct);
 8003686:	79fa      	ldrb	r2, [r7, #7]
 8003688:	495b      	ldr	r1, [pc, #364]	; (80037f8 <DC_MOTOR_Init+0x268>)
 800368a:	4613      	mov	r3, r2
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	4413      	add	r3, r2
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	440b      	add	r3, r1
 8003694:	3304      	adds	r3, #4
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800369c:	4611      	mov	r1, r2
 800369e:	4618      	mov	r0, r3
 80036a0:	f7fd fcbc 	bl	800101c <HAL_GPIO_Init>
	HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_PIN, 0);
 80036a4:	79fa      	ldrb	r2, [r7, #7]
 80036a6:	4954      	ldr	r1, [pc, #336]	; (80037f8 <DC_MOTOR_Init+0x268>)
 80036a8:	4613      	mov	r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	4413      	add	r3, r2
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	440b      	add	r3, r1
 80036b2:	6818      	ldr	r0, [r3, #0]
 80036b4:	79fa      	ldrb	r2, [r7, #7]
 80036b6:	4950      	ldr	r1, [pc, #320]	; (80037f8 <DC_MOTOR_Init+0x268>)
 80036b8:	4613      	mov	r3, r2
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	4413      	add	r3, r2
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	440b      	add	r3, r1
 80036c2:	3308      	adds	r3, #8
 80036c4:	881b      	ldrh	r3, [r3, #0]
 80036c6:	2200      	movs	r2, #0
 80036c8:	4619      	mov	r1, r3
 80036ca:	f7fd fe3b 	bl	8001344 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_PIN, 0);
 80036ce:	79fa      	ldrb	r2, [r7, #7]
 80036d0:	4949      	ldr	r1, [pc, #292]	; (80037f8 <DC_MOTOR_Init+0x268>)
 80036d2:	4613      	mov	r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	4413      	add	r3, r2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	440b      	add	r3, r1
 80036dc:	3304      	adds	r3, #4
 80036de:	6818      	ldr	r0, [r3, #0]
 80036e0:	79fa      	ldrb	r2, [r7, #7]
 80036e2:	4945      	ldr	r1, [pc, #276]	; (80037f8 <DC_MOTOR_Init+0x268>)
 80036e4:	4613      	mov	r3, r2
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	4413      	add	r3, r2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	440b      	add	r3, r1
 80036ee:	330a      	adds	r3, #10
 80036f0:	881b      	ldrh	r3, [r3, #0]
 80036f2:	2200      	movs	r2, #0
 80036f4:	4619      	mov	r1, r3
 80036f6:	f7fd fe25 	bl	8001344 <HAL_GPIO_WritePin>
	/* Those Equations Sets The PWM Resolution & Approximates The F_pwm */


	/*--------[ Configure The DC Motor PWM Timer Channel ]-------*/

	htim.Instance = DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance;
 80036fa:	79fa      	ldrb	r2, [r7, #7]
 80036fc:	493e      	ldr	r1, [pc, #248]	; (80037f8 <DC_MOTOR_Init+0x268>)
 80036fe:	4613      	mov	r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	4413      	add	r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	440b      	add	r3, r1
 8003708:	330c      	adds	r3, #12
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	613b      	str	r3, [r7, #16]
	htim.Init.Prescaler = 89;
 800370e:	2359      	movs	r3, #89	; 0x59
 8003710:	617b      	str	r3, [r7, #20]
	htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003712:	2300      	movs	r3, #0
 8003714:	61bb      	str	r3, [r7, #24]
	htim.Init.Period = 100;
 8003716:	2364      	movs	r3, #100	; 0x64
 8003718:	61fb      	str	r3, [r7, #28]
	htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800371a:	2300      	movs	r3, #0
 800371c:	623b      	str	r3, [r7, #32]
	htim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800371e:	2380      	movs	r3, #128	; 0x80
 8003720:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_TIM_Base_Init(&htim);
 8003722:	f107 0310 	add.w	r3, r7, #16
 8003726:	4618      	mov	r0, r3
 8003728:	f7fe fc2a 	bl	8001f80 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800372c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003730:	67fb      	str	r3, [r7, #124]	; 0x7c
	HAL_TIM_ConfigClockSource(&htim, &sClockSourceConfig);
 8003732:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8003736:	f107 0310 	add.w	r3, r7, #16
 800373a:	4611      	mov	r1, r2
 800373c:	4618      	mov	r0, r3
 800373e:	f7ff f96d 	bl	8002a1c <HAL_TIM_ConfigClockSource>
	HAL_TIM_PWM_Init(&htim);
 8003742:	f107 0310 	add.w	r3, r7, #16
 8003746:	4618      	mov	r0, r3
 8003748:	f7fe fc69 	bl	800201e <HAL_TIM_PWM_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800374c:	2300      	movs	r3, #0
 800374e:	677b      	str	r3, [r7, #116]	; 0x74
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003750:	2300      	movs	r3, #0
 8003752:	67bb      	str	r3, [r7, #120]	; 0x78
	HAL_TIMEx_MasterConfigSynchronization(&htim, &sMasterConfig);
 8003754:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8003758:	f107 0310 	add.w	r3, r7, #16
 800375c:	4611      	mov	r1, r2
 800375e:	4618      	mov	r0, r3
 8003760:	f7ff fe86 	bl	8003470 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003764:	2360      	movs	r3, #96	; 0x60
 8003766:	65bb      	str	r3, [r7, #88]	; 0x58
	sConfigOC.Pulse = 0;
 8003768:	2300      	movs	r3, #0
 800376a:	65fb      	str	r3, [r7, #92]	; 0x5c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800376c:	2300      	movs	r3, #0
 800376e:	663b      	str	r3, [r7, #96]	; 0x60
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003770:	2300      	movs	r3, #0
 8003772:	66bb      	str	r3, [r7, #104]	; 0x68
	HAL_TIM_PWM_ConfigChannel(&htim, &sConfigOC, DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH);
 8003774:	79fa      	ldrb	r2, [r7, #7]
 8003776:	4920      	ldr	r1, [pc, #128]	; (80037f8 <DC_MOTOR_Init+0x268>)
 8003778:	4613      	mov	r3, r2
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	4413      	add	r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	440b      	add	r3, r1
 8003782:	3310      	adds	r3, #16
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800378a:	f107 0310 	add.w	r3, r7, #16
 800378e:	4618      	mov	r0, r3
 8003790:	f7ff f882 	bl	8002898 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_MspPostInit(&htim);
 8003794:	f107 0310 	add.w	r3, r7, #16
 8003798:	4618      	mov	r0, r3
 800379a:	f7fd f949 	bl	8000a30 <HAL_TIM_MspPostInit>

	/*--------[ Start The PWM Channel ]-------*/

	HAL_TIM_PWM_Start(&htim, DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH);
 800379e:	79fa      	ldrb	r2, [r7, #7]
 80037a0:	4915      	ldr	r1, [pc, #84]	; (80037f8 <DC_MOTOR_Init+0x268>)
 80037a2:	4613      	mov	r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	4413      	add	r3, r2
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	440b      	add	r3, r1
 80037ac:	3310      	adds	r3, #16
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	f107 0310 	add.w	r3, r7, #16
 80037b4:	4611      	mov	r1, r2
 80037b6:	4618      	mov	r0, r3
 80037b8:	f7fe fc8a 	bl	80020d0 <HAL_TIM_PWM_Start>
	if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_1)
 80037bc:	79fa      	ldrb	r2, [r7, #7]
 80037be:	490e      	ldr	r1, [pc, #56]	; (80037f8 <DC_MOTOR_Init+0x268>)
 80037c0:	4613      	mov	r3, r2
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	4413      	add	r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	440b      	add	r3, r1
 80037ca:	3310      	adds	r3, #16
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d10e      	bne.n	80037f0 <DC_MOTOR_Init+0x260>
		{
			DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR1 = 0;
 80037d2:	79fa      	ldrb	r2, [r7, #7]
 80037d4:	4908      	ldr	r1, [pc, #32]	; (80037f8 <DC_MOTOR_Init+0x268>)
 80037d6:	4613      	mov	r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	4413      	add	r3, r2
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	440b      	add	r3, r1
 80037e0:	330c      	adds	r3, #12
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2200      	movs	r2, #0
 80037e6:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_Delay(1000);
 80037e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80037ec:	f7fd fae0 	bl	8000db0 <HAL_Delay>

		}
}
 80037f0:	bf00      	nop
 80037f2:	37a0      	adds	r7, #160	; 0xa0
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	08004a5c 	.word	0x08004a5c
 80037fc:	40020800 	.word	0x40020800
 8003800:	40023800 	.word	0x40023800

08003804 <DC_MOTOR_Start>:
		HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_PIN, 0);
		HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_PIN, 1);
	}
}
void DC_MOTOR_Start(uint8_t au8_MOTOR_Instance, uint8_t au8_DIR, uint16_t au16_SPEED)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	4603      	mov	r3, r0
 800380c:	71fb      	strb	r3, [r7, #7]
 800380e:	460b      	mov	r3, r1
 8003810:	71bb      	strb	r3, [r7, #6]
 8003812:	4613      	mov	r3, r2
 8003814:	80bb      	strh	r3, [r7, #4]
	/* Write To The 2 Direction Control Pins */
	if(au8_DIR == DIR_CW)
 8003816:	79bb      	ldrb	r3, [r7, #6]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d12b      	bne.n	8003874 <DC_MOTOR_Start+0x70>
	{
		HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_PIN, 1);
 800381c:	79fa      	ldrb	r2, [r7, #7]
 800381e:	4958      	ldr	r1, [pc, #352]	; (8003980 <DC_MOTOR_Start+0x17c>)
 8003820:	4613      	mov	r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	4413      	add	r3, r2
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	440b      	add	r3, r1
 800382a:	6818      	ldr	r0, [r3, #0]
 800382c:	79fa      	ldrb	r2, [r7, #7]
 800382e:	4954      	ldr	r1, [pc, #336]	; (8003980 <DC_MOTOR_Start+0x17c>)
 8003830:	4613      	mov	r3, r2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	4413      	add	r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	440b      	add	r3, r1
 800383a:	3308      	adds	r3, #8
 800383c:	881b      	ldrh	r3, [r3, #0]
 800383e:	2201      	movs	r2, #1
 8003840:	4619      	mov	r1, r3
 8003842:	f7fd fd7f 	bl	8001344 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_PIN, 0);
 8003846:	79fa      	ldrb	r2, [r7, #7]
 8003848:	494d      	ldr	r1, [pc, #308]	; (8003980 <DC_MOTOR_Start+0x17c>)
 800384a:	4613      	mov	r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	4413      	add	r3, r2
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	440b      	add	r3, r1
 8003854:	3304      	adds	r3, #4
 8003856:	6818      	ldr	r0, [r3, #0]
 8003858:	79fa      	ldrb	r2, [r7, #7]
 800385a:	4949      	ldr	r1, [pc, #292]	; (8003980 <DC_MOTOR_Start+0x17c>)
 800385c:	4613      	mov	r3, r2
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	4413      	add	r3, r2
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	440b      	add	r3, r1
 8003866:	330a      	adds	r3, #10
 8003868:	881b      	ldrh	r3, [r3, #0]
 800386a:	2200      	movs	r2, #0
 800386c:	4619      	mov	r1, r3
 800386e:	f7fd fd69 	bl	8001344 <HAL_GPIO_WritePin>
 8003872:	e02d      	b.n	80038d0 <DC_MOTOR_Start+0xcc>
	}
	else if(au8_DIR == DIR_CCW)
 8003874:	79bb      	ldrb	r3, [r7, #6]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d12a      	bne.n	80038d0 <DC_MOTOR_Start+0xcc>
	{
		HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_PIN, 0);
 800387a:	79fa      	ldrb	r2, [r7, #7]
 800387c:	4940      	ldr	r1, [pc, #256]	; (8003980 <DC_MOTOR_Start+0x17c>)
 800387e:	4613      	mov	r3, r2
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	4413      	add	r3, r2
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	440b      	add	r3, r1
 8003888:	6818      	ldr	r0, [r3, #0]
 800388a:	79fa      	ldrb	r2, [r7, #7]
 800388c:	493c      	ldr	r1, [pc, #240]	; (8003980 <DC_MOTOR_Start+0x17c>)
 800388e:	4613      	mov	r3, r2
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	4413      	add	r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	440b      	add	r3, r1
 8003898:	3308      	adds	r3, #8
 800389a:	881b      	ldrh	r3, [r3, #0]
 800389c:	2200      	movs	r2, #0
 800389e:	4619      	mov	r1, r3
 80038a0:	f7fd fd50 	bl	8001344 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_PIN, 1);
 80038a4:	79fa      	ldrb	r2, [r7, #7]
 80038a6:	4936      	ldr	r1, [pc, #216]	; (8003980 <DC_MOTOR_Start+0x17c>)
 80038a8:	4613      	mov	r3, r2
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	4413      	add	r3, r2
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	440b      	add	r3, r1
 80038b2:	3304      	adds	r3, #4
 80038b4:	6818      	ldr	r0, [r3, #0]
 80038b6:	79fa      	ldrb	r2, [r7, #7]
 80038b8:	4931      	ldr	r1, [pc, #196]	; (8003980 <DC_MOTOR_Start+0x17c>)
 80038ba:	4613      	mov	r3, r2
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	4413      	add	r3, r2
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	440b      	add	r3, r1
 80038c4:	330a      	adds	r3, #10
 80038c6:	881b      	ldrh	r3, [r3, #0]
 80038c8:	2201      	movs	r2, #1
 80038ca:	4619      	mov	r1, r3
 80038cc:	f7fd fd3a 	bl	8001344 <HAL_GPIO_WritePin>
	}

	/* Write The Speed Value To The PWM CH DutyCycle Register */
	if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_1)
 80038d0:	79fa      	ldrb	r2, [r7, #7]
 80038d2:	492b      	ldr	r1, [pc, #172]	; (8003980 <DC_MOTOR_Start+0x17c>)
 80038d4:	4613      	mov	r3, r2
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	4413      	add	r3, r2
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	440b      	add	r3, r1
 80038de:	3310      	adds	r3, #16
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d10b      	bne.n	80038fe <DC_MOTOR_Start+0xfa>
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR1 = au16_SPEED;
 80038e6:	79fa      	ldrb	r2, [r7, #7]
 80038e8:	4925      	ldr	r1, [pc, #148]	; (8003980 <DC_MOTOR_Start+0x17c>)
 80038ea:	4613      	mov	r3, r2
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	4413      	add	r3, r2
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	440b      	add	r3, r1
 80038f4:	330c      	adds	r3, #12
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	88ba      	ldrh	r2, [r7, #4]
 80038fa:	635a      	str	r2, [r3, #52]	; 0x34
	else
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = au16_SPEED;
		HAL_Delay(4000);
	}
}
 80038fc:	e03c      	b.n	8003978 <DC_MOTOR_Start+0x174>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_2)
 80038fe:	79fa      	ldrb	r2, [r7, #7]
 8003900:	491f      	ldr	r1, [pc, #124]	; (8003980 <DC_MOTOR_Start+0x17c>)
 8003902:	4613      	mov	r3, r2
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	4413      	add	r3, r2
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	440b      	add	r3, r1
 800390c:	3310      	adds	r3, #16
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2b04      	cmp	r3, #4
 8003912:	d10b      	bne.n	800392c <DC_MOTOR_Start+0x128>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR2 = au16_SPEED;
 8003914:	79fa      	ldrb	r2, [r7, #7]
 8003916:	491a      	ldr	r1, [pc, #104]	; (8003980 <DC_MOTOR_Start+0x17c>)
 8003918:	4613      	mov	r3, r2
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	4413      	add	r3, r2
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	440b      	add	r3, r1
 8003922:	330c      	adds	r3, #12
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	88ba      	ldrh	r2, [r7, #4]
 8003928:	639a      	str	r2, [r3, #56]	; 0x38
}
 800392a:	e025      	b.n	8003978 <DC_MOTOR_Start+0x174>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_3)
 800392c:	79fa      	ldrb	r2, [r7, #7]
 800392e:	4914      	ldr	r1, [pc, #80]	; (8003980 <DC_MOTOR_Start+0x17c>)
 8003930:	4613      	mov	r3, r2
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	4413      	add	r3, r2
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	440b      	add	r3, r1
 800393a:	3310      	adds	r3, #16
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2b08      	cmp	r3, #8
 8003940:	d10b      	bne.n	800395a <DC_MOTOR_Start+0x156>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR3 = au16_SPEED;
 8003942:	79fa      	ldrb	r2, [r7, #7]
 8003944:	490e      	ldr	r1, [pc, #56]	; (8003980 <DC_MOTOR_Start+0x17c>)
 8003946:	4613      	mov	r3, r2
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	4413      	add	r3, r2
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	440b      	add	r3, r1
 8003950:	330c      	adds	r3, #12
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	88ba      	ldrh	r2, [r7, #4]
 8003956:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003958:	e00e      	b.n	8003978 <DC_MOTOR_Start+0x174>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = au16_SPEED;
 800395a:	79fa      	ldrb	r2, [r7, #7]
 800395c:	4908      	ldr	r1, [pc, #32]	; (8003980 <DC_MOTOR_Start+0x17c>)
 800395e:	4613      	mov	r3, r2
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	4413      	add	r3, r2
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	440b      	add	r3, r1
 8003968:	330c      	adds	r3, #12
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	88ba      	ldrh	r2, [r7, #4]
 800396e:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_Delay(4000);
 8003970:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8003974:	f7fd fa1c 	bl	8000db0 <HAL_Delay>
}
 8003978:	bf00      	nop
 800397a:	3708      	adds	r7, #8
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	08004a5c 	.word	0x08004a5c

08003984 <Frein>:
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = 0;
	}
}
void Frein(uint8_t au8_MOTOR_Instance)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
 800398a:	4603      	mov	r3, r0
 800398c:	71fb      	strb	r3, [r7, #7]
	/* Write To The 2 Direction Control Pins */
	HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_PIN, 0);
 800398e:	79fa      	ldrb	r2, [r7, #7]
 8003990:	4940      	ldr	r1, [pc, #256]	; (8003a94 <Frein+0x110>)
 8003992:	4613      	mov	r3, r2
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	4413      	add	r3, r2
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	440b      	add	r3, r1
 800399c:	6818      	ldr	r0, [r3, #0]
 800399e:	79fa      	ldrb	r2, [r7, #7]
 80039a0:	493c      	ldr	r1, [pc, #240]	; (8003a94 <Frein+0x110>)
 80039a2:	4613      	mov	r3, r2
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	4413      	add	r3, r2
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	440b      	add	r3, r1
 80039ac:	3308      	adds	r3, #8
 80039ae:	881b      	ldrh	r3, [r3, #0]
 80039b0:	2200      	movs	r2, #0
 80039b2:	4619      	mov	r1, r3
 80039b4:	f7fd fcc6 	bl	8001344 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_PIN, 0);
 80039b8:	79fa      	ldrb	r2, [r7, #7]
 80039ba:	4936      	ldr	r1, [pc, #216]	; (8003a94 <Frein+0x110>)
 80039bc:	4613      	mov	r3, r2
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	4413      	add	r3, r2
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	440b      	add	r3, r1
 80039c6:	3304      	adds	r3, #4
 80039c8:	6818      	ldr	r0, [r3, #0]
 80039ca:	79fa      	ldrb	r2, [r7, #7]
 80039cc:	4931      	ldr	r1, [pc, #196]	; (8003a94 <Frein+0x110>)
 80039ce:	4613      	mov	r3, r2
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	4413      	add	r3, r2
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	440b      	add	r3, r1
 80039d8:	330a      	adds	r3, #10
 80039da:	881b      	ldrh	r3, [r3, #0]
 80039dc:	2200      	movs	r2, #0
 80039de:	4619      	mov	r1, r3
 80039e0:	f7fd fcb0 	bl	8001344 <HAL_GPIO_WritePin>

	/* Write ZERO To The PWM Ch DutyCycle Register */
	if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_1)
 80039e4:	79fa      	ldrb	r2, [r7, #7]
 80039e6:	492b      	ldr	r1, [pc, #172]	; (8003a94 <Frein+0x110>)
 80039e8:	4613      	mov	r3, r2
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	4413      	add	r3, r2
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	440b      	add	r3, r1
 80039f2:	3310      	adds	r3, #16
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d10f      	bne.n	8003a1a <Frein+0x96>
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR1 = 100;
 80039fa:	79fa      	ldrb	r2, [r7, #7]
 80039fc:	4925      	ldr	r1, [pc, #148]	; (8003a94 <Frein+0x110>)
 80039fe:	4613      	mov	r3, r2
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	4413      	add	r3, r2
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	440b      	add	r3, r1
 8003a08:	330c      	adds	r3, #12
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2264      	movs	r2, #100	; 0x64
 8003a0e:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_Delay(2000);
 8003a10:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003a14:	f7fd f9cc 	bl	8000db0 <HAL_Delay>
	}
	else
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = 100;
	}
}
 8003a18:	e038      	b.n	8003a8c <Frein+0x108>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_2)
 8003a1a:	79fa      	ldrb	r2, [r7, #7]
 8003a1c:	491d      	ldr	r1, [pc, #116]	; (8003a94 <Frein+0x110>)
 8003a1e:	4613      	mov	r3, r2
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	4413      	add	r3, r2
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	440b      	add	r3, r1
 8003a28:	3310      	adds	r3, #16
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2b04      	cmp	r3, #4
 8003a2e:	d10b      	bne.n	8003a48 <Frein+0xc4>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR2 = 100;
 8003a30:	79fa      	ldrb	r2, [r7, #7]
 8003a32:	4918      	ldr	r1, [pc, #96]	; (8003a94 <Frein+0x110>)
 8003a34:	4613      	mov	r3, r2
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	4413      	add	r3, r2
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	440b      	add	r3, r1
 8003a3e:	330c      	adds	r3, #12
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2264      	movs	r2, #100	; 0x64
 8003a44:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003a46:	e021      	b.n	8003a8c <Frein+0x108>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_3)
 8003a48:	79fa      	ldrb	r2, [r7, #7]
 8003a4a:	4912      	ldr	r1, [pc, #72]	; (8003a94 <Frein+0x110>)
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	4413      	add	r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	440b      	add	r3, r1
 8003a56:	3310      	adds	r3, #16
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2b08      	cmp	r3, #8
 8003a5c:	d10b      	bne.n	8003a76 <Frein+0xf2>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR3 = 100;
 8003a5e:	79fa      	ldrb	r2, [r7, #7]
 8003a60:	490c      	ldr	r1, [pc, #48]	; (8003a94 <Frein+0x110>)
 8003a62:	4613      	mov	r3, r2
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	4413      	add	r3, r2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	440b      	add	r3, r1
 8003a6c:	330c      	adds	r3, #12
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2264      	movs	r2, #100	; 0x64
 8003a72:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003a74:	e00a      	b.n	8003a8c <Frein+0x108>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = 100;
 8003a76:	79fa      	ldrb	r2, [r7, #7]
 8003a78:	4906      	ldr	r1, [pc, #24]	; (8003a94 <Frein+0x110>)
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	4413      	add	r3, r2
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	440b      	add	r3, r1
 8003a84:	330c      	adds	r3, #12
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2264      	movs	r2, #100	; 0x64
 8003a8a:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003a8c:	bf00      	nop
 8003a8e:	3708      	adds	r7, #8
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	08004a5c 	.word	0x08004a5c

08003a98 <__errno>:
 8003a98:	4b01      	ldr	r3, [pc, #4]	; (8003aa0 <__errno+0x8>)
 8003a9a:	6818      	ldr	r0, [r3, #0]
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	2000000c 	.word	0x2000000c

08003aa4 <__libc_init_array>:
 8003aa4:	b570      	push	{r4, r5, r6, lr}
 8003aa6:	4d0d      	ldr	r5, [pc, #52]	; (8003adc <__libc_init_array+0x38>)
 8003aa8:	4c0d      	ldr	r4, [pc, #52]	; (8003ae0 <__libc_init_array+0x3c>)
 8003aaa:	1b64      	subs	r4, r4, r5
 8003aac:	10a4      	asrs	r4, r4, #2
 8003aae:	2600      	movs	r6, #0
 8003ab0:	42a6      	cmp	r6, r4
 8003ab2:	d109      	bne.n	8003ac8 <__libc_init_array+0x24>
 8003ab4:	4d0b      	ldr	r5, [pc, #44]	; (8003ae4 <__libc_init_array+0x40>)
 8003ab6:	4c0c      	ldr	r4, [pc, #48]	; (8003ae8 <__libc_init_array+0x44>)
 8003ab8:	f000 ffae 	bl	8004a18 <_init>
 8003abc:	1b64      	subs	r4, r4, r5
 8003abe:	10a4      	asrs	r4, r4, #2
 8003ac0:	2600      	movs	r6, #0
 8003ac2:	42a6      	cmp	r6, r4
 8003ac4:	d105      	bne.n	8003ad2 <__libc_init_array+0x2e>
 8003ac6:	bd70      	pop	{r4, r5, r6, pc}
 8003ac8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003acc:	4798      	blx	r3
 8003ace:	3601      	adds	r6, #1
 8003ad0:	e7ee      	b.n	8003ab0 <__libc_init_array+0xc>
 8003ad2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ad6:	4798      	blx	r3
 8003ad8:	3601      	adds	r6, #1
 8003ada:	e7f2      	b.n	8003ac2 <__libc_init_array+0x1e>
 8003adc:	08004b24 	.word	0x08004b24
 8003ae0:	08004b24 	.word	0x08004b24
 8003ae4:	08004b24 	.word	0x08004b24
 8003ae8:	08004b28 	.word	0x08004b28

08003aec <memset>:
 8003aec:	4402      	add	r2, r0
 8003aee:	4603      	mov	r3, r0
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d100      	bne.n	8003af6 <memset+0xa>
 8003af4:	4770      	bx	lr
 8003af6:	f803 1b01 	strb.w	r1, [r3], #1
 8003afa:	e7f9      	b.n	8003af0 <memset+0x4>

08003afc <iprintf>:
 8003afc:	b40f      	push	{r0, r1, r2, r3}
 8003afe:	4b0a      	ldr	r3, [pc, #40]	; (8003b28 <iprintf+0x2c>)
 8003b00:	b513      	push	{r0, r1, r4, lr}
 8003b02:	681c      	ldr	r4, [r3, #0]
 8003b04:	b124      	cbz	r4, 8003b10 <iprintf+0x14>
 8003b06:	69a3      	ldr	r3, [r4, #24]
 8003b08:	b913      	cbnz	r3, 8003b10 <iprintf+0x14>
 8003b0a:	4620      	mov	r0, r4
 8003b0c:	f000 f866 	bl	8003bdc <__sinit>
 8003b10:	ab05      	add	r3, sp, #20
 8003b12:	9a04      	ldr	r2, [sp, #16]
 8003b14:	68a1      	ldr	r1, [r4, #8]
 8003b16:	9301      	str	r3, [sp, #4]
 8003b18:	4620      	mov	r0, r4
 8003b1a:	f000 f9bd 	bl	8003e98 <_vfiprintf_r>
 8003b1e:	b002      	add	sp, #8
 8003b20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b24:	b004      	add	sp, #16
 8003b26:	4770      	bx	lr
 8003b28:	2000000c 	.word	0x2000000c

08003b2c <std>:
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	b510      	push	{r4, lr}
 8003b30:	4604      	mov	r4, r0
 8003b32:	e9c0 3300 	strd	r3, r3, [r0]
 8003b36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003b3a:	6083      	str	r3, [r0, #8]
 8003b3c:	8181      	strh	r1, [r0, #12]
 8003b3e:	6643      	str	r3, [r0, #100]	; 0x64
 8003b40:	81c2      	strh	r2, [r0, #14]
 8003b42:	6183      	str	r3, [r0, #24]
 8003b44:	4619      	mov	r1, r3
 8003b46:	2208      	movs	r2, #8
 8003b48:	305c      	adds	r0, #92	; 0x5c
 8003b4a:	f7ff ffcf 	bl	8003aec <memset>
 8003b4e:	4b05      	ldr	r3, [pc, #20]	; (8003b64 <std+0x38>)
 8003b50:	6263      	str	r3, [r4, #36]	; 0x24
 8003b52:	4b05      	ldr	r3, [pc, #20]	; (8003b68 <std+0x3c>)
 8003b54:	62a3      	str	r3, [r4, #40]	; 0x28
 8003b56:	4b05      	ldr	r3, [pc, #20]	; (8003b6c <std+0x40>)
 8003b58:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003b5a:	4b05      	ldr	r3, [pc, #20]	; (8003b70 <std+0x44>)
 8003b5c:	6224      	str	r4, [r4, #32]
 8003b5e:	6323      	str	r3, [r4, #48]	; 0x30
 8003b60:	bd10      	pop	{r4, pc}
 8003b62:	bf00      	nop
 8003b64:	08004441 	.word	0x08004441
 8003b68:	08004463 	.word	0x08004463
 8003b6c:	0800449b 	.word	0x0800449b
 8003b70:	080044bf 	.word	0x080044bf

08003b74 <_cleanup_r>:
 8003b74:	4901      	ldr	r1, [pc, #4]	; (8003b7c <_cleanup_r+0x8>)
 8003b76:	f000 b8af 	b.w	8003cd8 <_fwalk_reent>
 8003b7a:	bf00      	nop
 8003b7c:	08004799 	.word	0x08004799

08003b80 <__sfmoreglue>:
 8003b80:	b570      	push	{r4, r5, r6, lr}
 8003b82:	2268      	movs	r2, #104	; 0x68
 8003b84:	1e4d      	subs	r5, r1, #1
 8003b86:	4355      	muls	r5, r2
 8003b88:	460e      	mov	r6, r1
 8003b8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003b8e:	f000 f8e5 	bl	8003d5c <_malloc_r>
 8003b92:	4604      	mov	r4, r0
 8003b94:	b140      	cbz	r0, 8003ba8 <__sfmoreglue+0x28>
 8003b96:	2100      	movs	r1, #0
 8003b98:	e9c0 1600 	strd	r1, r6, [r0]
 8003b9c:	300c      	adds	r0, #12
 8003b9e:	60a0      	str	r0, [r4, #8]
 8003ba0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003ba4:	f7ff ffa2 	bl	8003aec <memset>
 8003ba8:	4620      	mov	r0, r4
 8003baa:	bd70      	pop	{r4, r5, r6, pc}

08003bac <__sfp_lock_acquire>:
 8003bac:	4801      	ldr	r0, [pc, #4]	; (8003bb4 <__sfp_lock_acquire+0x8>)
 8003bae:	f000 b8b3 	b.w	8003d18 <__retarget_lock_acquire_recursive>
 8003bb2:	bf00      	nop
 8003bb4:	200000f1 	.word	0x200000f1

08003bb8 <__sfp_lock_release>:
 8003bb8:	4801      	ldr	r0, [pc, #4]	; (8003bc0 <__sfp_lock_release+0x8>)
 8003bba:	f000 b8ae 	b.w	8003d1a <__retarget_lock_release_recursive>
 8003bbe:	bf00      	nop
 8003bc0:	200000f1 	.word	0x200000f1

08003bc4 <__sinit_lock_acquire>:
 8003bc4:	4801      	ldr	r0, [pc, #4]	; (8003bcc <__sinit_lock_acquire+0x8>)
 8003bc6:	f000 b8a7 	b.w	8003d18 <__retarget_lock_acquire_recursive>
 8003bca:	bf00      	nop
 8003bcc:	200000f2 	.word	0x200000f2

08003bd0 <__sinit_lock_release>:
 8003bd0:	4801      	ldr	r0, [pc, #4]	; (8003bd8 <__sinit_lock_release+0x8>)
 8003bd2:	f000 b8a2 	b.w	8003d1a <__retarget_lock_release_recursive>
 8003bd6:	bf00      	nop
 8003bd8:	200000f2 	.word	0x200000f2

08003bdc <__sinit>:
 8003bdc:	b510      	push	{r4, lr}
 8003bde:	4604      	mov	r4, r0
 8003be0:	f7ff fff0 	bl	8003bc4 <__sinit_lock_acquire>
 8003be4:	69a3      	ldr	r3, [r4, #24]
 8003be6:	b11b      	cbz	r3, 8003bf0 <__sinit+0x14>
 8003be8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003bec:	f7ff bff0 	b.w	8003bd0 <__sinit_lock_release>
 8003bf0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003bf4:	6523      	str	r3, [r4, #80]	; 0x50
 8003bf6:	4b13      	ldr	r3, [pc, #76]	; (8003c44 <__sinit+0x68>)
 8003bf8:	4a13      	ldr	r2, [pc, #76]	; (8003c48 <__sinit+0x6c>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	62a2      	str	r2, [r4, #40]	; 0x28
 8003bfe:	42a3      	cmp	r3, r4
 8003c00:	bf04      	itt	eq
 8003c02:	2301      	moveq	r3, #1
 8003c04:	61a3      	streq	r3, [r4, #24]
 8003c06:	4620      	mov	r0, r4
 8003c08:	f000 f820 	bl	8003c4c <__sfp>
 8003c0c:	6060      	str	r0, [r4, #4]
 8003c0e:	4620      	mov	r0, r4
 8003c10:	f000 f81c 	bl	8003c4c <__sfp>
 8003c14:	60a0      	str	r0, [r4, #8]
 8003c16:	4620      	mov	r0, r4
 8003c18:	f000 f818 	bl	8003c4c <__sfp>
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	60e0      	str	r0, [r4, #12]
 8003c20:	2104      	movs	r1, #4
 8003c22:	6860      	ldr	r0, [r4, #4]
 8003c24:	f7ff ff82 	bl	8003b2c <std>
 8003c28:	68a0      	ldr	r0, [r4, #8]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	2109      	movs	r1, #9
 8003c2e:	f7ff ff7d 	bl	8003b2c <std>
 8003c32:	68e0      	ldr	r0, [r4, #12]
 8003c34:	2202      	movs	r2, #2
 8003c36:	2112      	movs	r1, #18
 8003c38:	f7ff ff78 	bl	8003b2c <std>
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	61a3      	str	r3, [r4, #24]
 8003c40:	e7d2      	b.n	8003be8 <__sinit+0xc>
 8003c42:	bf00      	nop
 8003c44:	08004a84 	.word	0x08004a84
 8003c48:	08003b75 	.word	0x08003b75

08003c4c <__sfp>:
 8003c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c4e:	4607      	mov	r7, r0
 8003c50:	f7ff ffac 	bl	8003bac <__sfp_lock_acquire>
 8003c54:	4b1e      	ldr	r3, [pc, #120]	; (8003cd0 <__sfp+0x84>)
 8003c56:	681e      	ldr	r6, [r3, #0]
 8003c58:	69b3      	ldr	r3, [r6, #24]
 8003c5a:	b913      	cbnz	r3, 8003c62 <__sfp+0x16>
 8003c5c:	4630      	mov	r0, r6
 8003c5e:	f7ff ffbd 	bl	8003bdc <__sinit>
 8003c62:	3648      	adds	r6, #72	; 0x48
 8003c64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003c68:	3b01      	subs	r3, #1
 8003c6a:	d503      	bpl.n	8003c74 <__sfp+0x28>
 8003c6c:	6833      	ldr	r3, [r6, #0]
 8003c6e:	b30b      	cbz	r3, 8003cb4 <__sfp+0x68>
 8003c70:	6836      	ldr	r6, [r6, #0]
 8003c72:	e7f7      	b.n	8003c64 <__sfp+0x18>
 8003c74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003c78:	b9d5      	cbnz	r5, 8003cb0 <__sfp+0x64>
 8003c7a:	4b16      	ldr	r3, [pc, #88]	; (8003cd4 <__sfp+0x88>)
 8003c7c:	60e3      	str	r3, [r4, #12]
 8003c7e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003c82:	6665      	str	r5, [r4, #100]	; 0x64
 8003c84:	f000 f847 	bl	8003d16 <__retarget_lock_init_recursive>
 8003c88:	f7ff ff96 	bl	8003bb8 <__sfp_lock_release>
 8003c8c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003c90:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003c94:	6025      	str	r5, [r4, #0]
 8003c96:	61a5      	str	r5, [r4, #24]
 8003c98:	2208      	movs	r2, #8
 8003c9a:	4629      	mov	r1, r5
 8003c9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003ca0:	f7ff ff24 	bl	8003aec <memset>
 8003ca4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003ca8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003cac:	4620      	mov	r0, r4
 8003cae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003cb0:	3468      	adds	r4, #104	; 0x68
 8003cb2:	e7d9      	b.n	8003c68 <__sfp+0x1c>
 8003cb4:	2104      	movs	r1, #4
 8003cb6:	4638      	mov	r0, r7
 8003cb8:	f7ff ff62 	bl	8003b80 <__sfmoreglue>
 8003cbc:	4604      	mov	r4, r0
 8003cbe:	6030      	str	r0, [r6, #0]
 8003cc0:	2800      	cmp	r0, #0
 8003cc2:	d1d5      	bne.n	8003c70 <__sfp+0x24>
 8003cc4:	f7ff ff78 	bl	8003bb8 <__sfp_lock_release>
 8003cc8:	230c      	movs	r3, #12
 8003cca:	603b      	str	r3, [r7, #0]
 8003ccc:	e7ee      	b.n	8003cac <__sfp+0x60>
 8003cce:	bf00      	nop
 8003cd0:	08004a84 	.word	0x08004a84
 8003cd4:	ffff0001 	.word	0xffff0001

08003cd8 <_fwalk_reent>:
 8003cd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003cdc:	4606      	mov	r6, r0
 8003cde:	4688      	mov	r8, r1
 8003ce0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003ce4:	2700      	movs	r7, #0
 8003ce6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003cea:	f1b9 0901 	subs.w	r9, r9, #1
 8003cee:	d505      	bpl.n	8003cfc <_fwalk_reent+0x24>
 8003cf0:	6824      	ldr	r4, [r4, #0]
 8003cf2:	2c00      	cmp	r4, #0
 8003cf4:	d1f7      	bne.n	8003ce6 <_fwalk_reent+0xe>
 8003cf6:	4638      	mov	r0, r7
 8003cf8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003cfc:	89ab      	ldrh	r3, [r5, #12]
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d907      	bls.n	8003d12 <_fwalk_reent+0x3a>
 8003d02:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003d06:	3301      	adds	r3, #1
 8003d08:	d003      	beq.n	8003d12 <_fwalk_reent+0x3a>
 8003d0a:	4629      	mov	r1, r5
 8003d0c:	4630      	mov	r0, r6
 8003d0e:	47c0      	blx	r8
 8003d10:	4307      	orrs	r7, r0
 8003d12:	3568      	adds	r5, #104	; 0x68
 8003d14:	e7e9      	b.n	8003cea <_fwalk_reent+0x12>

08003d16 <__retarget_lock_init_recursive>:
 8003d16:	4770      	bx	lr

08003d18 <__retarget_lock_acquire_recursive>:
 8003d18:	4770      	bx	lr

08003d1a <__retarget_lock_release_recursive>:
 8003d1a:	4770      	bx	lr

08003d1c <sbrk_aligned>:
 8003d1c:	b570      	push	{r4, r5, r6, lr}
 8003d1e:	4e0e      	ldr	r6, [pc, #56]	; (8003d58 <sbrk_aligned+0x3c>)
 8003d20:	460c      	mov	r4, r1
 8003d22:	6831      	ldr	r1, [r6, #0]
 8003d24:	4605      	mov	r5, r0
 8003d26:	b911      	cbnz	r1, 8003d2e <sbrk_aligned+0x12>
 8003d28:	f000 fb7a 	bl	8004420 <_sbrk_r>
 8003d2c:	6030      	str	r0, [r6, #0]
 8003d2e:	4621      	mov	r1, r4
 8003d30:	4628      	mov	r0, r5
 8003d32:	f000 fb75 	bl	8004420 <_sbrk_r>
 8003d36:	1c43      	adds	r3, r0, #1
 8003d38:	d00a      	beq.n	8003d50 <sbrk_aligned+0x34>
 8003d3a:	1cc4      	adds	r4, r0, #3
 8003d3c:	f024 0403 	bic.w	r4, r4, #3
 8003d40:	42a0      	cmp	r0, r4
 8003d42:	d007      	beq.n	8003d54 <sbrk_aligned+0x38>
 8003d44:	1a21      	subs	r1, r4, r0
 8003d46:	4628      	mov	r0, r5
 8003d48:	f000 fb6a 	bl	8004420 <_sbrk_r>
 8003d4c:	3001      	adds	r0, #1
 8003d4e:	d101      	bne.n	8003d54 <sbrk_aligned+0x38>
 8003d50:	f04f 34ff 	mov.w	r4, #4294967295
 8003d54:	4620      	mov	r0, r4
 8003d56:	bd70      	pop	{r4, r5, r6, pc}
 8003d58:	200000f8 	.word	0x200000f8

08003d5c <_malloc_r>:
 8003d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d60:	1ccd      	adds	r5, r1, #3
 8003d62:	f025 0503 	bic.w	r5, r5, #3
 8003d66:	3508      	adds	r5, #8
 8003d68:	2d0c      	cmp	r5, #12
 8003d6a:	bf38      	it	cc
 8003d6c:	250c      	movcc	r5, #12
 8003d6e:	2d00      	cmp	r5, #0
 8003d70:	4607      	mov	r7, r0
 8003d72:	db01      	blt.n	8003d78 <_malloc_r+0x1c>
 8003d74:	42a9      	cmp	r1, r5
 8003d76:	d905      	bls.n	8003d84 <_malloc_r+0x28>
 8003d78:	230c      	movs	r3, #12
 8003d7a:	603b      	str	r3, [r7, #0]
 8003d7c:	2600      	movs	r6, #0
 8003d7e:	4630      	mov	r0, r6
 8003d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d84:	4e2e      	ldr	r6, [pc, #184]	; (8003e40 <_malloc_r+0xe4>)
 8003d86:	f000 fdbb 	bl	8004900 <__malloc_lock>
 8003d8a:	6833      	ldr	r3, [r6, #0]
 8003d8c:	461c      	mov	r4, r3
 8003d8e:	bb34      	cbnz	r4, 8003dde <_malloc_r+0x82>
 8003d90:	4629      	mov	r1, r5
 8003d92:	4638      	mov	r0, r7
 8003d94:	f7ff ffc2 	bl	8003d1c <sbrk_aligned>
 8003d98:	1c43      	adds	r3, r0, #1
 8003d9a:	4604      	mov	r4, r0
 8003d9c:	d14d      	bne.n	8003e3a <_malloc_r+0xde>
 8003d9e:	6834      	ldr	r4, [r6, #0]
 8003da0:	4626      	mov	r6, r4
 8003da2:	2e00      	cmp	r6, #0
 8003da4:	d140      	bne.n	8003e28 <_malloc_r+0xcc>
 8003da6:	6823      	ldr	r3, [r4, #0]
 8003da8:	4631      	mov	r1, r6
 8003daa:	4638      	mov	r0, r7
 8003dac:	eb04 0803 	add.w	r8, r4, r3
 8003db0:	f000 fb36 	bl	8004420 <_sbrk_r>
 8003db4:	4580      	cmp	r8, r0
 8003db6:	d13a      	bne.n	8003e2e <_malloc_r+0xd2>
 8003db8:	6821      	ldr	r1, [r4, #0]
 8003dba:	3503      	adds	r5, #3
 8003dbc:	1a6d      	subs	r5, r5, r1
 8003dbe:	f025 0503 	bic.w	r5, r5, #3
 8003dc2:	3508      	adds	r5, #8
 8003dc4:	2d0c      	cmp	r5, #12
 8003dc6:	bf38      	it	cc
 8003dc8:	250c      	movcc	r5, #12
 8003dca:	4629      	mov	r1, r5
 8003dcc:	4638      	mov	r0, r7
 8003dce:	f7ff ffa5 	bl	8003d1c <sbrk_aligned>
 8003dd2:	3001      	adds	r0, #1
 8003dd4:	d02b      	beq.n	8003e2e <_malloc_r+0xd2>
 8003dd6:	6823      	ldr	r3, [r4, #0]
 8003dd8:	442b      	add	r3, r5
 8003dda:	6023      	str	r3, [r4, #0]
 8003ddc:	e00e      	b.n	8003dfc <_malloc_r+0xa0>
 8003dde:	6822      	ldr	r2, [r4, #0]
 8003de0:	1b52      	subs	r2, r2, r5
 8003de2:	d41e      	bmi.n	8003e22 <_malloc_r+0xc6>
 8003de4:	2a0b      	cmp	r2, #11
 8003de6:	d916      	bls.n	8003e16 <_malloc_r+0xba>
 8003de8:	1961      	adds	r1, r4, r5
 8003dea:	42a3      	cmp	r3, r4
 8003dec:	6025      	str	r5, [r4, #0]
 8003dee:	bf18      	it	ne
 8003df0:	6059      	strne	r1, [r3, #4]
 8003df2:	6863      	ldr	r3, [r4, #4]
 8003df4:	bf08      	it	eq
 8003df6:	6031      	streq	r1, [r6, #0]
 8003df8:	5162      	str	r2, [r4, r5]
 8003dfa:	604b      	str	r3, [r1, #4]
 8003dfc:	4638      	mov	r0, r7
 8003dfe:	f104 060b 	add.w	r6, r4, #11
 8003e02:	f000 fd83 	bl	800490c <__malloc_unlock>
 8003e06:	f026 0607 	bic.w	r6, r6, #7
 8003e0a:	1d23      	adds	r3, r4, #4
 8003e0c:	1af2      	subs	r2, r6, r3
 8003e0e:	d0b6      	beq.n	8003d7e <_malloc_r+0x22>
 8003e10:	1b9b      	subs	r3, r3, r6
 8003e12:	50a3      	str	r3, [r4, r2]
 8003e14:	e7b3      	b.n	8003d7e <_malloc_r+0x22>
 8003e16:	6862      	ldr	r2, [r4, #4]
 8003e18:	42a3      	cmp	r3, r4
 8003e1a:	bf0c      	ite	eq
 8003e1c:	6032      	streq	r2, [r6, #0]
 8003e1e:	605a      	strne	r2, [r3, #4]
 8003e20:	e7ec      	b.n	8003dfc <_malloc_r+0xa0>
 8003e22:	4623      	mov	r3, r4
 8003e24:	6864      	ldr	r4, [r4, #4]
 8003e26:	e7b2      	b.n	8003d8e <_malloc_r+0x32>
 8003e28:	4634      	mov	r4, r6
 8003e2a:	6876      	ldr	r6, [r6, #4]
 8003e2c:	e7b9      	b.n	8003da2 <_malloc_r+0x46>
 8003e2e:	230c      	movs	r3, #12
 8003e30:	603b      	str	r3, [r7, #0]
 8003e32:	4638      	mov	r0, r7
 8003e34:	f000 fd6a 	bl	800490c <__malloc_unlock>
 8003e38:	e7a1      	b.n	8003d7e <_malloc_r+0x22>
 8003e3a:	6025      	str	r5, [r4, #0]
 8003e3c:	e7de      	b.n	8003dfc <_malloc_r+0xa0>
 8003e3e:	bf00      	nop
 8003e40:	200000f4 	.word	0x200000f4

08003e44 <__sfputc_r>:
 8003e44:	6893      	ldr	r3, [r2, #8]
 8003e46:	3b01      	subs	r3, #1
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	b410      	push	{r4}
 8003e4c:	6093      	str	r3, [r2, #8]
 8003e4e:	da08      	bge.n	8003e62 <__sfputc_r+0x1e>
 8003e50:	6994      	ldr	r4, [r2, #24]
 8003e52:	42a3      	cmp	r3, r4
 8003e54:	db01      	blt.n	8003e5a <__sfputc_r+0x16>
 8003e56:	290a      	cmp	r1, #10
 8003e58:	d103      	bne.n	8003e62 <__sfputc_r+0x1e>
 8003e5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e5e:	f000 bb33 	b.w	80044c8 <__swbuf_r>
 8003e62:	6813      	ldr	r3, [r2, #0]
 8003e64:	1c58      	adds	r0, r3, #1
 8003e66:	6010      	str	r0, [r2, #0]
 8003e68:	7019      	strb	r1, [r3, #0]
 8003e6a:	4608      	mov	r0, r1
 8003e6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e70:	4770      	bx	lr

08003e72 <__sfputs_r>:
 8003e72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e74:	4606      	mov	r6, r0
 8003e76:	460f      	mov	r7, r1
 8003e78:	4614      	mov	r4, r2
 8003e7a:	18d5      	adds	r5, r2, r3
 8003e7c:	42ac      	cmp	r4, r5
 8003e7e:	d101      	bne.n	8003e84 <__sfputs_r+0x12>
 8003e80:	2000      	movs	r0, #0
 8003e82:	e007      	b.n	8003e94 <__sfputs_r+0x22>
 8003e84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e88:	463a      	mov	r2, r7
 8003e8a:	4630      	mov	r0, r6
 8003e8c:	f7ff ffda 	bl	8003e44 <__sfputc_r>
 8003e90:	1c43      	adds	r3, r0, #1
 8003e92:	d1f3      	bne.n	8003e7c <__sfputs_r+0xa>
 8003e94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003e98 <_vfiprintf_r>:
 8003e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e9c:	460d      	mov	r5, r1
 8003e9e:	b09d      	sub	sp, #116	; 0x74
 8003ea0:	4614      	mov	r4, r2
 8003ea2:	4698      	mov	r8, r3
 8003ea4:	4606      	mov	r6, r0
 8003ea6:	b118      	cbz	r0, 8003eb0 <_vfiprintf_r+0x18>
 8003ea8:	6983      	ldr	r3, [r0, #24]
 8003eaa:	b90b      	cbnz	r3, 8003eb0 <_vfiprintf_r+0x18>
 8003eac:	f7ff fe96 	bl	8003bdc <__sinit>
 8003eb0:	4b89      	ldr	r3, [pc, #548]	; (80040d8 <_vfiprintf_r+0x240>)
 8003eb2:	429d      	cmp	r5, r3
 8003eb4:	d11b      	bne.n	8003eee <_vfiprintf_r+0x56>
 8003eb6:	6875      	ldr	r5, [r6, #4]
 8003eb8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003eba:	07d9      	lsls	r1, r3, #31
 8003ebc:	d405      	bmi.n	8003eca <_vfiprintf_r+0x32>
 8003ebe:	89ab      	ldrh	r3, [r5, #12]
 8003ec0:	059a      	lsls	r2, r3, #22
 8003ec2:	d402      	bmi.n	8003eca <_vfiprintf_r+0x32>
 8003ec4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003ec6:	f7ff ff27 	bl	8003d18 <__retarget_lock_acquire_recursive>
 8003eca:	89ab      	ldrh	r3, [r5, #12]
 8003ecc:	071b      	lsls	r3, r3, #28
 8003ece:	d501      	bpl.n	8003ed4 <_vfiprintf_r+0x3c>
 8003ed0:	692b      	ldr	r3, [r5, #16]
 8003ed2:	b9eb      	cbnz	r3, 8003f10 <_vfiprintf_r+0x78>
 8003ed4:	4629      	mov	r1, r5
 8003ed6:	4630      	mov	r0, r6
 8003ed8:	f000 fb5a 	bl	8004590 <__swsetup_r>
 8003edc:	b1c0      	cbz	r0, 8003f10 <_vfiprintf_r+0x78>
 8003ede:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003ee0:	07dc      	lsls	r4, r3, #31
 8003ee2:	d50e      	bpl.n	8003f02 <_vfiprintf_r+0x6a>
 8003ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ee8:	b01d      	add	sp, #116	; 0x74
 8003eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003eee:	4b7b      	ldr	r3, [pc, #492]	; (80040dc <_vfiprintf_r+0x244>)
 8003ef0:	429d      	cmp	r5, r3
 8003ef2:	d101      	bne.n	8003ef8 <_vfiprintf_r+0x60>
 8003ef4:	68b5      	ldr	r5, [r6, #8]
 8003ef6:	e7df      	b.n	8003eb8 <_vfiprintf_r+0x20>
 8003ef8:	4b79      	ldr	r3, [pc, #484]	; (80040e0 <_vfiprintf_r+0x248>)
 8003efa:	429d      	cmp	r5, r3
 8003efc:	bf08      	it	eq
 8003efe:	68f5      	ldreq	r5, [r6, #12]
 8003f00:	e7da      	b.n	8003eb8 <_vfiprintf_r+0x20>
 8003f02:	89ab      	ldrh	r3, [r5, #12]
 8003f04:	0598      	lsls	r0, r3, #22
 8003f06:	d4ed      	bmi.n	8003ee4 <_vfiprintf_r+0x4c>
 8003f08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003f0a:	f7ff ff06 	bl	8003d1a <__retarget_lock_release_recursive>
 8003f0e:	e7e9      	b.n	8003ee4 <_vfiprintf_r+0x4c>
 8003f10:	2300      	movs	r3, #0
 8003f12:	9309      	str	r3, [sp, #36]	; 0x24
 8003f14:	2320      	movs	r3, #32
 8003f16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003f1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f1e:	2330      	movs	r3, #48	; 0x30
 8003f20:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80040e4 <_vfiprintf_r+0x24c>
 8003f24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f28:	f04f 0901 	mov.w	r9, #1
 8003f2c:	4623      	mov	r3, r4
 8003f2e:	469a      	mov	sl, r3
 8003f30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f34:	b10a      	cbz	r2, 8003f3a <_vfiprintf_r+0xa2>
 8003f36:	2a25      	cmp	r2, #37	; 0x25
 8003f38:	d1f9      	bne.n	8003f2e <_vfiprintf_r+0x96>
 8003f3a:	ebba 0b04 	subs.w	fp, sl, r4
 8003f3e:	d00b      	beq.n	8003f58 <_vfiprintf_r+0xc0>
 8003f40:	465b      	mov	r3, fp
 8003f42:	4622      	mov	r2, r4
 8003f44:	4629      	mov	r1, r5
 8003f46:	4630      	mov	r0, r6
 8003f48:	f7ff ff93 	bl	8003e72 <__sfputs_r>
 8003f4c:	3001      	adds	r0, #1
 8003f4e:	f000 80aa 	beq.w	80040a6 <_vfiprintf_r+0x20e>
 8003f52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003f54:	445a      	add	r2, fp
 8003f56:	9209      	str	r2, [sp, #36]	; 0x24
 8003f58:	f89a 3000 	ldrb.w	r3, [sl]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	f000 80a2 	beq.w	80040a6 <_vfiprintf_r+0x20e>
 8003f62:	2300      	movs	r3, #0
 8003f64:	f04f 32ff 	mov.w	r2, #4294967295
 8003f68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f6c:	f10a 0a01 	add.w	sl, sl, #1
 8003f70:	9304      	str	r3, [sp, #16]
 8003f72:	9307      	str	r3, [sp, #28]
 8003f74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f78:	931a      	str	r3, [sp, #104]	; 0x68
 8003f7a:	4654      	mov	r4, sl
 8003f7c:	2205      	movs	r2, #5
 8003f7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f82:	4858      	ldr	r0, [pc, #352]	; (80040e4 <_vfiprintf_r+0x24c>)
 8003f84:	f7fc f944 	bl	8000210 <memchr>
 8003f88:	9a04      	ldr	r2, [sp, #16]
 8003f8a:	b9d8      	cbnz	r0, 8003fc4 <_vfiprintf_r+0x12c>
 8003f8c:	06d1      	lsls	r1, r2, #27
 8003f8e:	bf44      	itt	mi
 8003f90:	2320      	movmi	r3, #32
 8003f92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f96:	0713      	lsls	r3, r2, #28
 8003f98:	bf44      	itt	mi
 8003f9a:	232b      	movmi	r3, #43	; 0x2b
 8003f9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003fa0:	f89a 3000 	ldrb.w	r3, [sl]
 8003fa4:	2b2a      	cmp	r3, #42	; 0x2a
 8003fa6:	d015      	beq.n	8003fd4 <_vfiprintf_r+0x13c>
 8003fa8:	9a07      	ldr	r2, [sp, #28]
 8003faa:	4654      	mov	r4, sl
 8003fac:	2000      	movs	r0, #0
 8003fae:	f04f 0c0a 	mov.w	ip, #10
 8003fb2:	4621      	mov	r1, r4
 8003fb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003fb8:	3b30      	subs	r3, #48	; 0x30
 8003fba:	2b09      	cmp	r3, #9
 8003fbc:	d94e      	bls.n	800405c <_vfiprintf_r+0x1c4>
 8003fbe:	b1b0      	cbz	r0, 8003fee <_vfiprintf_r+0x156>
 8003fc0:	9207      	str	r2, [sp, #28]
 8003fc2:	e014      	b.n	8003fee <_vfiprintf_r+0x156>
 8003fc4:	eba0 0308 	sub.w	r3, r0, r8
 8003fc8:	fa09 f303 	lsl.w	r3, r9, r3
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	9304      	str	r3, [sp, #16]
 8003fd0:	46a2      	mov	sl, r4
 8003fd2:	e7d2      	b.n	8003f7a <_vfiprintf_r+0xe2>
 8003fd4:	9b03      	ldr	r3, [sp, #12]
 8003fd6:	1d19      	adds	r1, r3, #4
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	9103      	str	r1, [sp, #12]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	bfbb      	ittet	lt
 8003fe0:	425b      	neglt	r3, r3
 8003fe2:	f042 0202 	orrlt.w	r2, r2, #2
 8003fe6:	9307      	strge	r3, [sp, #28]
 8003fe8:	9307      	strlt	r3, [sp, #28]
 8003fea:	bfb8      	it	lt
 8003fec:	9204      	strlt	r2, [sp, #16]
 8003fee:	7823      	ldrb	r3, [r4, #0]
 8003ff0:	2b2e      	cmp	r3, #46	; 0x2e
 8003ff2:	d10c      	bne.n	800400e <_vfiprintf_r+0x176>
 8003ff4:	7863      	ldrb	r3, [r4, #1]
 8003ff6:	2b2a      	cmp	r3, #42	; 0x2a
 8003ff8:	d135      	bne.n	8004066 <_vfiprintf_r+0x1ce>
 8003ffa:	9b03      	ldr	r3, [sp, #12]
 8003ffc:	1d1a      	adds	r2, r3, #4
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	9203      	str	r2, [sp, #12]
 8004002:	2b00      	cmp	r3, #0
 8004004:	bfb8      	it	lt
 8004006:	f04f 33ff 	movlt.w	r3, #4294967295
 800400a:	3402      	adds	r4, #2
 800400c:	9305      	str	r3, [sp, #20]
 800400e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80040f4 <_vfiprintf_r+0x25c>
 8004012:	7821      	ldrb	r1, [r4, #0]
 8004014:	2203      	movs	r2, #3
 8004016:	4650      	mov	r0, sl
 8004018:	f7fc f8fa 	bl	8000210 <memchr>
 800401c:	b140      	cbz	r0, 8004030 <_vfiprintf_r+0x198>
 800401e:	2340      	movs	r3, #64	; 0x40
 8004020:	eba0 000a 	sub.w	r0, r0, sl
 8004024:	fa03 f000 	lsl.w	r0, r3, r0
 8004028:	9b04      	ldr	r3, [sp, #16]
 800402a:	4303      	orrs	r3, r0
 800402c:	3401      	adds	r4, #1
 800402e:	9304      	str	r3, [sp, #16]
 8004030:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004034:	482c      	ldr	r0, [pc, #176]	; (80040e8 <_vfiprintf_r+0x250>)
 8004036:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800403a:	2206      	movs	r2, #6
 800403c:	f7fc f8e8 	bl	8000210 <memchr>
 8004040:	2800      	cmp	r0, #0
 8004042:	d03f      	beq.n	80040c4 <_vfiprintf_r+0x22c>
 8004044:	4b29      	ldr	r3, [pc, #164]	; (80040ec <_vfiprintf_r+0x254>)
 8004046:	bb1b      	cbnz	r3, 8004090 <_vfiprintf_r+0x1f8>
 8004048:	9b03      	ldr	r3, [sp, #12]
 800404a:	3307      	adds	r3, #7
 800404c:	f023 0307 	bic.w	r3, r3, #7
 8004050:	3308      	adds	r3, #8
 8004052:	9303      	str	r3, [sp, #12]
 8004054:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004056:	443b      	add	r3, r7
 8004058:	9309      	str	r3, [sp, #36]	; 0x24
 800405a:	e767      	b.n	8003f2c <_vfiprintf_r+0x94>
 800405c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004060:	460c      	mov	r4, r1
 8004062:	2001      	movs	r0, #1
 8004064:	e7a5      	b.n	8003fb2 <_vfiprintf_r+0x11a>
 8004066:	2300      	movs	r3, #0
 8004068:	3401      	adds	r4, #1
 800406a:	9305      	str	r3, [sp, #20]
 800406c:	4619      	mov	r1, r3
 800406e:	f04f 0c0a 	mov.w	ip, #10
 8004072:	4620      	mov	r0, r4
 8004074:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004078:	3a30      	subs	r2, #48	; 0x30
 800407a:	2a09      	cmp	r2, #9
 800407c:	d903      	bls.n	8004086 <_vfiprintf_r+0x1ee>
 800407e:	2b00      	cmp	r3, #0
 8004080:	d0c5      	beq.n	800400e <_vfiprintf_r+0x176>
 8004082:	9105      	str	r1, [sp, #20]
 8004084:	e7c3      	b.n	800400e <_vfiprintf_r+0x176>
 8004086:	fb0c 2101 	mla	r1, ip, r1, r2
 800408a:	4604      	mov	r4, r0
 800408c:	2301      	movs	r3, #1
 800408e:	e7f0      	b.n	8004072 <_vfiprintf_r+0x1da>
 8004090:	ab03      	add	r3, sp, #12
 8004092:	9300      	str	r3, [sp, #0]
 8004094:	462a      	mov	r2, r5
 8004096:	4b16      	ldr	r3, [pc, #88]	; (80040f0 <_vfiprintf_r+0x258>)
 8004098:	a904      	add	r1, sp, #16
 800409a:	4630      	mov	r0, r6
 800409c:	f3af 8000 	nop.w
 80040a0:	4607      	mov	r7, r0
 80040a2:	1c78      	adds	r0, r7, #1
 80040a4:	d1d6      	bne.n	8004054 <_vfiprintf_r+0x1bc>
 80040a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80040a8:	07d9      	lsls	r1, r3, #31
 80040aa:	d405      	bmi.n	80040b8 <_vfiprintf_r+0x220>
 80040ac:	89ab      	ldrh	r3, [r5, #12]
 80040ae:	059a      	lsls	r2, r3, #22
 80040b0:	d402      	bmi.n	80040b8 <_vfiprintf_r+0x220>
 80040b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80040b4:	f7ff fe31 	bl	8003d1a <__retarget_lock_release_recursive>
 80040b8:	89ab      	ldrh	r3, [r5, #12]
 80040ba:	065b      	lsls	r3, r3, #25
 80040bc:	f53f af12 	bmi.w	8003ee4 <_vfiprintf_r+0x4c>
 80040c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80040c2:	e711      	b.n	8003ee8 <_vfiprintf_r+0x50>
 80040c4:	ab03      	add	r3, sp, #12
 80040c6:	9300      	str	r3, [sp, #0]
 80040c8:	462a      	mov	r2, r5
 80040ca:	4b09      	ldr	r3, [pc, #36]	; (80040f0 <_vfiprintf_r+0x258>)
 80040cc:	a904      	add	r1, sp, #16
 80040ce:	4630      	mov	r0, r6
 80040d0:	f000 f880 	bl	80041d4 <_printf_i>
 80040d4:	e7e4      	b.n	80040a0 <_vfiprintf_r+0x208>
 80040d6:	bf00      	nop
 80040d8:	08004aa8 	.word	0x08004aa8
 80040dc:	08004ac8 	.word	0x08004ac8
 80040e0:	08004a88 	.word	0x08004a88
 80040e4:	08004ae8 	.word	0x08004ae8
 80040e8:	08004af2 	.word	0x08004af2
 80040ec:	00000000 	.word	0x00000000
 80040f0:	08003e73 	.word	0x08003e73
 80040f4:	08004aee 	.word	0x08004aee

080040f8 <_printf_common>:
 80040f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040fc:	4616      	mov	r6, r2
 80040fe:	4699      	mov	r9, r3
 8004100:	688a      	ldr	r2, [r1, #8]
 8004102:	690b      	ldr	r3, [r1, #16]
 8004104:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004108:	4293      	cmp	r3, r2
 800410a:	bfb8      	it	lt
 800410c:	4613      	movlt	r3, r2
 800410e:	6033      	str	r3, [r6, #0]
 8004110:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004114:	4607      	mov	r7, r0
 8004116:	460c      	mov	r4, r1
 8004118:	b10a      	cbz	r2, 800411e <_printf_common+0x26>
 800411a:	3301      	adds	r3, #1
 800411c:	6033      	str	r3, [r6, #0]
 800411e:	6823      	ldr	r3, [r4, #0]
 8004120:	0699      	lsls	r1, r3, #26
 8004122:	bf42      	ittt	mi
 8004124:	6833      	ldrmi	r3, [r6, #0]
 8004126:	3302      	addmi	r3, #2
 8004128:	6033      	strmi	r3, [r6, #0]
 800412a:	6825      	ldr	r5, [r4, #0]
 800412c:	f015 0506 	ands.w	r5, r5, #6
 8004130:	d106      	bne.n	8004140 <_printf_common+0x48>
 8004132:	f104 0a19 	add.w	sl, r4, #25
 8004136:	68e3      	ldr	r3, [r4, #12]
 8004138:	6832      	ldr	r2, [r6, #0]
 800413a:	1a9b      	subs	r3, r3, r2
 800413c:	42ab      	cmp	r3, r5
 800413e:	dc26      	bgt.n	800418e <_printf_common+0x96>
 8004140:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004144:	1e13      	subs	r3, r2, #0
 8004146:	6822      	ldr	r2, [r4, #0]
 8004148:	bf18      	it	ne
 800414a:	2301      	movne	r3, #1
 800414c:	0692      	lsls	r2, r2, #26
 800414e:	d42b      	bmi.n	80041a8 <_printf_common+0xb0>
 8004150:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004154:	4649      	mov	r1, r9
 8004156:	4638      	mov	r0, r7
 8004158:	47c0      	blx	r8
 800415a:	3001      	adds	r0, #1
 800415c:	d01e      	beq.n	800419c <_printf_common+0xa4>
 800415e:	6823      	ldr	r3, [r4, #0]
 8004160:	68e5      	ldr	r5, [r4, #12]
 8004162:	6832      	ldr	r2, [r6, #0]
 8004164:	f003 0306 	and.w	r3, r3, #6
 8004168:	2b04      	cmp	r3, #4
 800416a:	bf08      	it	eq
 800416c:	1aad      	subeq	r5, r5, r2
 800416e:	68a3      	ldr	r3, [r4, #8]
 8004170:	6922      	ldr	r2, [r4, #16]
 8004172:	bf0c      	ite	eq
 8004174:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004178:	2500      	movne	r5, #0
 800417a:	4293      	cmp	r3, r2
 800417c:	bfc4      	itt	gt
 800417e:	1a9b      	subgt	r3, r3, r2
 8004180:	18ed      	addgt	r5, r5, r3
 8004182:	2600      	movs	r6, #0
 8004184:	341a      	adds	r4, #26
 8004186:	42b5      	cmp	r5, r6
 8004188:	d11a      	bne.n	80041c0 <_printf_common+0xc8>
 800418a:	2000      	movs	r0, #0
 800418c:	e008      	b.n	80041a0 <_printf_common+0xa8>
 800418e:	2301      	movs	r3, #1
 8004190:	4652      	mov	r2, sl
 8004192:	4649      	mov	r1, r9
 8004194:	4638      	mov	r0, r7
 8004196:	47c0      	blx	r8
 8004198:	3001      	adds	r0, #1
 800419a:	d103      	bne.n	80041a4 <_printf_common+0xac>
 800419c:	f04f 30ff 	mov.w	r0, #4294967295
 80041a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041a4:	3501      	adds	r5, #1
 80041a6:	e7c6      	b.n	8004136 <_printf_common+0x3e>
 80041a8:	18e1      	adds	r1, r4, r3
 80041aa:	1c5a      	adds	r2, r3, #1
 80041ac:	2030      	movs	r0, #48	; 0x30
 80041ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80041b2:	4422      	add	r2, r4
 80041b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80041b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80041bc:	3302      	adds	r3, #2
 80041be:	e7c7      	b.n	8004150 <_printf_common+0x58>
 80041c0:	2301      	movs	r3, #1
 80041c2:	4622      	mov	r2, r4
 80041c4:	4649      	mov	r1, r9
 80041c6:	4638      	mov	r0, r7
 80041c8:	47c0      	blx	r8
 80041ca:	3001      	adds	r0, #1
 80041cc:	d0e6      	beq.n	800419c <_printf_common+0xa4>
 80041ce:	3601      	adds	r6, #1
 80041d0:	e7d9      	b.n	8004186 <_printf_common+0x8e>
	...

080041d4 <_printf_i>:
 80041d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80041d8:	7e0f      	ldrb	r7, [r1, #24]
 80041da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80041dc:	2f78      	cmp	r7, #120	; 0x78
 80041de:	4691      	mov	r9, r2
 80041e0:	4680      	mov	r8, r0
 80041e2:	460c      	mov	r4, r1
 80041e4:	469a      	mov	sl, r3
 80041e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80041ea:	d807      	bhi.n	80041fc <_printf_i+0x28>
 80041ec:	2f62      	cmp	r7, #98	; 0x62
 80041ee:	d80a      	bhi.n	8004206 <_printf_i+0x32>
 80041f0:	2f00      	cmp	r7, #0
 80041f2:	f000 80d8 	beq.w	80043a6 <_printf_i+0x1d2>
 80041f6:	2f58      	cmp	r7, #88	; 0x58
 80041f8:	f000 80a3 	beq.w	8004342 <_printf_i+0x16e>
 80041fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004200:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004204:	e03a      	b.n	800427c <_printf_i+0xa8>
 8004206:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800420a:	2b15      	cmp	r3, #21
 800420c:	d8f6      	bhi.n	80041fc <_printf_i+0x28>
 800420e:	a101      	add	r1, pc, #4	; (adr r1, 8004214 <_printf_i+0x40>)
 8004210:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004214:	0800426d 	.word	0x0800426d
 8004218:	08004281 	.word	0x08004281
 800421c:	080041fd 	.word	0x080041fd
 8004220:	080041fd 	.word	0x080041fd
 8004224:	080041fd 	.word	0x080041fd
 8004228:	080041fd 	.word	0x080041fd
 800422c:	08004281 	.word	0x08004281
 8004230:	080041fd 	.word	0x080041fd
 8004234:	080041fd 	.word	0x080041fd
 8004238:	080041fd 	.word	0x080041fd
 800423c:	080041fd 	.word	0x080041fd
 8004240:	0800438d 	.word	0x0800438d
 8004244:	080042b1 	.word	0x080042b1
 8004248:	0800436f 	.word	0x0800436f
 800424c:	080041fd 	.word	0x080041fd
 8004250:	080041fd 	.word	0x080041fd
 8004254:	080043af 	.word	0x080043af
 8004258:	080041fd 	.word	0x080041fd
 800425c:	080042b1 	.word	0x080042b1
 8004260:	080041fd 	.word	0x080041fd
 8004264:	080041fd 	.word	0x080041fd
 8004268:	08004377 	.word	0x08004377
 800426c:	682b      	ldr	r3, [r5, #0]
 800426e:	1d1a      	adds	r2, r3, #4
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	602a      	str	r2, [r5, #0]
 8004274:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004278:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800427c:	2301      	movs	r3, #1
 800427e:	e0a3      	b.n	80043c8 <_printf_i+0x1f4>
 8004280:	6820      	ldr	r0, [r4, #0]
 8004282:	6829      	ldr	r1, [r5, #0]
 8004284:	0606      	lsls	r6, r0, #24
 8004286:	f101 0304 	add.w	r3, r1, #4
 800428a:	d50a      	bpl.n	80042a2 <_printf_i+0xce>
 800428c:	680e      	ldr	r6, [r1, #0]
 800428e:	602b      	str	r3, [r5, #0]
 8004290:	2e00      	cmp	r6, #0
 8004292:	da03      	bge.n	800429c <_printf_i+0xc8>
 8004294:	232d      	movs	r3, #45	; 0x2d
 8004296:	4276      	negs	r6, r6
 8004298:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800429c:	485e      	ldr	r0, [pc, #376]	; (8004418 <_printf_i+0x244>)
 800429e:	230a      	movs	r3, #10
 80042a0:	e019      	b.n	80042d6 <_printf_i+0x102>
 80042a2:	680e      	ldr	r6, [r1, #0]
 80042a4:	602b      	str	r3, [r5, #0]
 80042a6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80042aa:	bf18      	it	ne
 80042ac:	b236      	sxthne	r6, r6
 80042ae:	e7ef      	b.n	8004290 <_printf_i+0xbc>
 80042b0:	682b      	ldr	r3, [r5, #0]
 80042b2:	6820      	ldr	r0, [r4, #0]
 80042b4:	1d19      	adds	r1, r3, #4
 80042b6:	6029      	str	r1, [r5, #0]
 80042b8:	0601      	lsls	r1, r0, #24
 80042ba:	d501      	bpl.n	80042c0 <_printf_i+0xec>
 80042bc:	681e      	ldr	r6, [r3, #0]
 80042be:	e002      	b.n	80042c6 <_printf_i+0xf2>
 80042c0:	0646      	lsls	r6, r0, #25
 80042c2:	d5fb      	bpl.n	80042bc <_printf_i+0xe8>
 80042c4:	881e      	ldrh	r6, [r3, #0]
 80042c6:	4854      	ldr	r0, [pc, #336]	; (8004418 <_printf_i+0x244>)
 80042c8:	2f6f      	cmp	r7, #111	; 0x6f
 80042ca:	bf0c      	ite	eq
 80042cc:	2308      	moveq	r3, #8
 80042ce:	230a      	movne	r3, #10
 80042d0:	2100      	movs	r1, #0
 80042d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80042d6:	6865      	ldr	r5, [r4, #4]
 80042d8:	60a5      	str	r5, [r4, #8]
 80042da:	2d00      	cmp	r5, #0
 80042dc:	bfa2      	ittt	ge
 80042de:	6821      	ldrge	r1, [r4, #0]
 80042e0:	f021 0104 	bicge.w	r1, r1, #4
 80042e4:	6021      	strge	r1, [r4, #0]
 80042e6:	b90e      	cbnz	r6, 80042ec <_printf_i+0x118>
 80042e8:	2d00      	cmp	r5, #0
 80042ea:	d04d      	beq.n	8004388 <_printf_i+0x1b4>
 80042ec:	4615      	mov	r5, r2
 80042ee:	fbb6 f1f3 	udiv	r1, r6, r3
 80042f2:	fb03 6711 	mls	r7, r3, r1, r6
 80042f6:	5dc7      	ldrb	r7, [r0, r7]
 80042f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80042fc:	4637      	mov	r7, r6
 80042fe:	42bb      	cmp	r3, r7
 8004300:	460e      	mov	r6, r1
 8004302:	d9f4      	bls.n	80042ee <_printf_i+0x11a>
 8004304:	2b08      	cmp	r3, #8
 8004306:	d10b      	bne.n	8004320 <_printf_i+0x14c>
 8004308:	6823      	ldr	r3, [r4, #0]
 800430a:	07de      	lsls	r6, r3, #31
 800430c:	d508      	bpl.n	8004320 <_printf_i+0x14c>
 800430e:	6923      	ldr	r3, [r4, #16]
 8004310:	6861      	ldr	r1, [r4, #4]
 8004312:	4299      	cmp	r1, r3
 8004314:	bfde      	ittt	le
 8004316:	2330      	movle	r3, #48	; 0x30
 8004318:	f805 3c01 	strble.w	r3, [r5, #-1]
 800431c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004320:	1b52      	subs	r2, r2, r5
 8004322:	6122      	str	r2, [r4, #16]
 8004324:	f8cd a000 	str.w	sl, [sp]
 8004328:	464b      	mov	r3, r9
 800432a:	aa03      	add	r2, sp, #12
 800432c:	4621      	mov	r1, r4
 800432e:	4640      	mov	r0, r8
 8004330:	f7ff fee2 	bl	80040f8 <_printf_common>
 8004334:	3001      	adds	r0, #1
 8004336:	d14c      	bne.n	80043d2 <_printf_i+0x1fe>
 8004338:	f04f 30ff 	mov.w	r0, #4294967295
 800433c:	b004      	add	sp, #16
 800433e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004342:	4835      	ldr	r0, [pc, #212]	; (8004418 <_printf_i+0x244>)
 8004344:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004348:	6829      	ldr	r1, [r5, #0]
 800434a:	6823      	ldr	r3, [r4, #0]
 800434c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004350:	6029      	str	r1, [r5, #0]
 8004352:	061d      	lsls	r5, r3, #24
 8004354:	d514      	bpl.n	8004380 <_printf_i+0x1ac>
 8004356:	07df      	lsls	r7, r3, #31
 8004358:	bf44      	itt	mi
 800435a:	f043 0320 	orrmi.w	r3, r3, #32
 800435e:	6023      	strmi	r3, [r4, #0]
 8004360:	b91e      	cbnz	r6, 800436a <_printf_i+0x196>
 8004362:	6823      	ldr	r3, [r4, #0]
 8004364:	f023 0320 	bic.w	r3, r3, #32
 8004368:	6023      	str	r3, [r4, #0]
 800436a:	2310      	movs	r3, #16
 800436c:	e7b0      	b.n	80042d0 <_printf_i+0xfc>
 800436e:	6823      	ldr	r3, [r4, #0]
 8004370:	f043 0320 	orr.w	r3, r3, #32
 8004374:	6023      	str	r3, [r4, #0]
 8004376:	2378      	movs	r3, #120	; 0x78
 8004378:	4828      	ldr	r0, [pc, #160]	; (800441c <_printf_i+0x248>)
 800437a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800437e:	e7e3      	b.n	8004348 <_printf_i+0x174>
 8004380:	0659      	lsls	r1, r3, #25
 8004382:	bf48      	it	mi
 8004384:	b2b6      	uxthmi	r6, r6
 8004386:	e7e6      	b.n	8004356 <_printf_i+0x182>
 8004388:	4615      	mov	r5, r2
 800438a:	e7bb      	b.n	8004304 <_printf_i+0x130>
 800438c:	682b      	ldr	r3, [r5, #0]
 800438e:	6826      	ldr	r6, [r4, #0]
 8004390:	6961      	ldr	r1, [r4, #20]
 8004392:	1d18      	adds	r0, r3, #4
 8004394:	6028      	str	r0, [r5, #0]
 8004396:	0635      	lsls	r5, r6, #24
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	d501      	bpl.n	80043a0 <_printf_i+0x1cc>
 800439c:	6019      	str	r1, [r3, #0]
 800439e:	e002      	b.n	80043a6 <_printf_i+0x1d2>
 80043a0:	0670      	lsls	r0, r6, #25
 80043a2:	d5fb      	bpl.n	800439c <_printf_i+0x1c8>
 80043a4:	8019      	strh	r1, [r3, #0]
 80043a6:	2300      	movs	r3, #0
 80043a8:	6123      	str	r3, [r4, #16]
 80043aa:	4615      	mov	r5, r2
 80043ac:	e7ba      	b.n	8004324 <_printf_i+0x150>
 80043ae:	682b      	ldr	r3, [r5, #0]
 80043b0:	1d1a      	adds	r2, r3, #4
 80043b2:	602a      	str	r2, [r5, #0]
 80043b4:	681d      	ldr	r5, [r3, #0]
 80043b6:	6862      	ldr	r2, [r4, #4]
 80043b8:	2100      	movs	r1, #0
 80043ba:	4628      	mov	r0, r5
 80043bc:	f7fb ff28 	bl	8000210 <memchr>
 80043c0:	b108      	cbz	r0, 80043c6 <_printf_i+0x1f2>
 80043c2:	1b40      	subs	r0, r0, r5
 80043c4:	6060      	str	r0, [r4, #4]
 80043c6:	6863      	ldr	r3, [r4, #4]
 80043c8:	6123      	str	r3, [r4, #16]
 80043ca:	2300      	movs	r3, #0
 80043cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043d0:	e7a8      	b.n	8004324 <_printf_i+0x150>
 80043d2:	6923      	ldr	r3, [r4, #16]
 80043d4:	462a      	mov	r2, r5
 80043d6:	4649      	mov	r1, r9
 80043d8:	4640      	mov	r0, r8
 80043da:	47d0      	blx	sl
 80043dc:	3001      	adds	r0, #1
 80043de:	d0ab      	beq.n	8004338 <_printf_i+0x164>
 80043e0:	6823      	ldr	r3, [r4, #0]
 80043e2:	079b      	lsls	r3, r3, #30
 80043e4:	d413      	bmi.n	800440e <_printf_i+0x23a>
 80043e6:	68e0      	ldr	r0, [r4, #12]
 80043e8:	9b03      	ldr	r3, [sp, #12]
 80043ea:	4298      	cmp	r0, r3
 80043ec:	bfb8      	it	lt
 80043ee:	4618      	movlt	r0, r3
 80043f0:	e7a4      	b.n	800433c <_printf_i+0x168>
 80043f2:	2301      	movs	r3, #1
 80043f4:	4632      	mov	r2, r6
 80043f6:	4649      	mov	r1, r9
 80043f8:	4640      	mov	r0, r8
 80043fa:	47d0      	blx	sl
 80043fc:	3001      	adds	r0, #1
 80043fe:	d09b      	beq.n	8004338 <_printf_i+0x164>
 8004400:	3501      	adds	r5, #1
 8004402:	68e3      	ldr	r3, [r4, #12]
 8004404:	9903      	ldr	r1, [sp, #12]
 8004406:	1a5b      	subs	r3, r3, r1
 8004408:	42ab      	cmp	r3, r5
 800440a:	dcf2      	bgt.n	80043f2 <_printf_i+0x21e>
 800440c:	e7eb      	b.n	80043e6 <_printf_i+0x212>
 800440e:	2500      	movs	r5, #0
 8004410:	f104 0619 	add.w	r6, r4, #25
 8004414:	e7f5      	b.n	8004402 <_printf_i+0x22e>
 8004416:	bf00      	nop
 8004418:	08004af9 	.word	0x08004af9
 800441c:	08004b0a 	.word	0x08004b0a

08004420 <_sbrk_r>:
 8004420:	b538      	push	{r3, r4, r5, lr}
 8004422:	4d06      	ldr	r5, [pc, #24]	; (800443c <_sbrk_r+0x1c>)
 8004424:	2300      	movs	r3, #0
 8004426:	4604      	mov	r4, r0
 8004428:	4608      	mov	r0, r1
 800442a:	602b      	str	r3, [r5, #0]
 800442c:	f7fc fbdc 	bl	8000be8 <_sbrk>
 8004430:	1c43      	adds	r3, r0, #1
 8004432:	d102      	bne.n	800443a <_sbrk_r+0x1a>
 8004434:	682b      	ldr	r3, [r5, #0]
 8004436:	b103      	cbz	r3, 800443a <_sbrk_r+0x1a>
 8004438:	6023      	str	r3, [r4, #0]
 800443a:	bd38      	pop	{r3, r4, r5, pc}
 800443c:	200000fc 	.word	0x200000fc

08004440 <__sread>:
 8004440:	b510      	push	{r4, lr}
 8004442:	460c      	mov	r4, r1
 8004444:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004448:	f000 fab2 	bl	80049b0 <_read_r>
 800444c:	2800      	cmp	r0, #0
 800444e:	bfab      	itete	ge
 8004450:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004452:	89a3      	ldrhlt	r3, [r4, #12]
 8004454:	181b      	addge	r3, r3, r0
 8004456:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800445a:	bfac      	ite	ge
 800445c:	6563      	strge	r3, [r4, #84]	; 0x54
 800445e:	81a3      	strhlt	r3, [r4, #12]
 8004460:	bd10      	pop	{r4, pc}

08004462 <__swrite>:
 8004462:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004466:	461f      	mov	r7, r3
 8004468:	898b      	ldrh	r3, [r1, #12]
 800446a:	05db      	lsls	r3, r3, #23
 800446c:	4605      	mov	r5, r0
 800446e:	460c      	mov	r4, r1
 8004470:	4616      	mov	r6, r2
 8004472:	d505      	bpl.n	8004480 <__swrite+0x1e>
 8004474:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004478:	2302      	movs	r3, #2
 800447a:	2200      	movs	r2, #0
 800447c:	f000 f9c8 	bl	8004810 <_lseek_r>
 8004480:	89a3      	ldrh	r3, [r4, #12]
 8004482:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004486:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800448a:	81a3      	strh	r3, [r4, #12]
 800448c:	4632      	mov	r2, r6
 800448e:	463b      	mov	r3, r7
 8004490:	4628      	mov	r0, r5
 8004492:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004496:	f000 b869 	b.w	800456c <_write_r>

0800449a <__sseek>:
 800449a:	b510      	push	{r4, lr}
 800449c:	460c      	mov	r4, r1
 800449e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044a2:	f000 f9b5 	bl	8004810 <_lseek_r>
 80044a6:	1c43      	adds	r3, r0, #1
 80044a8:	89a3      	ldrh	r3, [r4, #12]
 80044aa:	bf15      	itete	ne
 80044ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80044ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80044b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80044b6:	81a3      	strheq	r3, [r4, #12]
 80044b8:	bf18      	it	ne
 80044ba:	81a3      	strhne	r3, [r4, #12]
 80044bc:	bd10      	pop	{r4, pc}

080044be <__sclose>:
 80044be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044c2:	f000 b8d3 	b.w	800466c <_close_r>
	...

080044c8 <__swbuf_r>:
 80044c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ca:	460e      	mov	r6, r1
 80044cc:	4614      	mov	r4, r2
 80044ce:	4605      	mov	r5, r0
 80044d0:	b118      	cbz	r0, 80044da <__swbuf_r+0x12>
 80044d2:	6983      	ldr	r3, [r0, #24]
 80044d4:	b90b      	cbnz	r3, 80044da <__swbuf_r+0x12>
 80044d6:	f7ff fb81 	bl	8003bdc <__sinit>
 80044da:	4b21      	ldr	r3, [pc, #132]	; (8004560 <__swbuf_r+0x98>)
 80044dc:	429c      	cmp	r4, r3
 80044de:	d12b      	bne.n	8004538 <__swbuf_r+0x70>
 80044e0:	686c      	ldr	r4, [r5, #4]
 80044e2:	69a3      	ldr	r3, [r4, #24]
 80044e4:	60a3      	str	r3, [r4, #8]
 80044e6:	89a3      	ldrh	r3, [r4, #12]
 80044e8:	071a      	lsls	r2, r3, #28
 80044ea:	d52f      	bpl.n	800454c <__swbuf_r+0x84>
 80044ec:	6923      	ldr	r3, [r4, #16]
 80044ee:	b36b      	cbz	r3, 800454c <__swbuf_r+0x84>
 80044f0:	6923      	ldr	r3, [r4, #16]
 80044f2:	6820      	ldr	r0, [r4, #0]
 80044f4:	1ac0      	subs	r0, r0, r3
 80044f6:	6963      	ldr	r3, [r4, #20]
 80044f8:	b2f6      	uxtb	r6, r6
 80044fa:	4283      	cmp	r3, r0
 80044fc:	4637      	mov	r7, r6
 80044fe:	dc04      	bgt.n	800450a <__swbuf_r+0x42>
 8004500:	4621      	mov	r1, r4
 8004502:	4628      	mov	r0, r5
 8004504:	f000 f948 	bl	8004798 <_fflush_r>
 8004508:	bb30      	cbnz	r0, 8004558 <__swbuf_r+0x90>
 800450a:	68a3      	ldr	r3, [r4, #8]
 800450c:	3b01      	subs	r3, #1
 800450e:	60a3      	str	r3, [r4, #8]
 8004510:	6823      	ldr	r3, [r4, #0]
 8004512:	1c5a      	adds	r2, r3, #1
 8004514:	6022      	str	r2, [r4, #0]
 8004516:	701e      	strb	r6, [r3, #0]
 8004518:	6963      	ldr	r3, [r4, #20]
 800451a:	3001      	adds	r0, #1
 800451c:	4283      	cmp	r3, r0
 800451e:	d004      	beq.n	800452a <__swbuf_r+0x62>
 8004520:	89a3      	ldrh	r3, [r4, #12]
 8004522:	07db      	lsls	r3, r3, #31
 8004524:	d506      	bpl.n	8004534 <__swbuf_r+0x6c>
 8004526:	2e0a      	cmp	r6, #10
 8004528:	d104      	bne.n	8004534 <__swbuf_r+0x6c>
 800452a:	4621      	mov	r1, r4
 800452c:	4628      	mov	r0, r5
 800452e:	f000 f933 	bl	8004798 <_fflush_r>
 8004532:	b988      	cbnz	r0, 8004558 <__swbuf_r+0x90>
 8004534:	4638      	mov	r0, r7
 8004536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004538:	4b0a      	ldr	r3, [pc, #40]	; (8004564 <__swbuf_r+0x9c>)
 800453a:	429c      	cmp	r4, r3
 800453c:	d101      	bne.n	8004542 <__swbuf_r+0x7a>
 800453e:	68ac      	ldr	r4, [r5, #8]
 8004540:	e7cf      	b.n	80044e2 <__swbuf_r+0x1a>
 8004542:	4b09      	ldr	r3, [pc, #36]	; (8004568 <__swbuf_r+0xa0>)
 8004544:	429c      	cmp	r4, r3
 8004546:	bf08      	it	eq
 8004548:	68ec      	ldreq	r4, [r5, #12]
 800454a:	e7ca      	b.n	80044e2 <__swbuf_r+0x1a>
 800454c:	4621      	mov	r1, r4
 800454e:	4628      	mov	r0, r5
 8004550:	f000 f81e 	bl	8004590 <__swsetup_r>
 8004554:	2800      	cmp	r0, #0
 8004556:	d0cb      	beq.n	80044f0 <__swbuf_r+0x28>
 8004558:	f04f 37ff 	mov.w	r7, #4294967295
 800455c:	e7ea      	b.n	8004534 <__swbuf_r+0x6c>
 800455e:	bf00      	nop
 8004560:	08004aa8 	.word	0x08004aa8
 8004564:	08004ac8 	.word	0x08004ac8
 8004568:	08004a88 	.word	0x08004a88

0800456c <_write_r>:
 800456c:	b538      	push	{r3, r4, r5, lr}
 800456e:	4d07      	ldr	r5, [pc, #28]	; (800458c <_write_r+0x20>)
 8004570:	4604      	mov	r4, r0
 8004572:	4608      	mov	r0, r1
 8004574:	4611      	mov	r1, r2
 8004576:	2200      	movs	r2, #0
 8004578:	602a      	str	r2, [r5, #0]
 800457a:	461a      	mov	r2, r3
 800457c:	f7fc fae3 	bl	8000b46 <_write>
 8004580:	1c43      	adds	r3, r0, #1
 8004582:	d102      	bne.n	800458a <_write_r+0x1e>
 8004584:	682b      	ldr	r3, [r5, #0]
 8004586:	b103      	cbz	r3, 800458a <_write_r+0x1e>
 8004588:	6023      	str	r3, [r4, #0]
 800458a:	bd38      	pop	{r3, r4, r5, pc}
 800458c:	200000fc 	.word	0x200000fc

08004590 <__swsetup_r>:
 8004590:	4b32      	ldr	r3, [pc, #200]	; (800465c <__swsetup_r+0xcc>)
 8004592:	b570      	push	{r4, r5, r6, lr}
 8004594:	681d      	ldr	r5, [r3, #0]
 8004596:	4606      	mov	r6, r0
 8004598:	460c      	mov	r4, r1
 800459a:	b125      	cbz	r5, 80045a6 <__swsetup_r+0x16>
 800459c:	69ab      	ldr	r3, [r5, #24]
 800459e:	b913      	cbnz	r3, 80045a6 <__swsetup_r+0x16>
 80045a0:	4628      	mov	r0, r5
 80045a2:	f7ff fb1b 	bl	8003bdc <__sinit>
 80045a6:	4b2e      	ldr	r3, [pc, #184]	; (8004660 <__swsetup_r+0xd0>)
 80045a8:	429c      	cmp	r4, r3
 80045aa:	d10f      	bne.n	80045cc <__swsetup_r+0x3c>
 80045ac:	686c      	ldr	r4, [r5, #4]
 80045ae:	89a3      	ldrh	r3, [r4, #12]
 80045b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80045b4:	0719      	lsls	r1, r3, #28
 80045b6:	d42c      	bmi.n	8004612 <__swsetup_r+0x82>
 80045b8:	06dd      	lsls	r5, r3, #27
 80045ba:	d411      	bmi.n	80045e0 <__swsetup_r+0x50>
 80045bc:	2309      	movs	r3, #9
 80045be:	6033      	str	r3, [r6, #0]
 80045c0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80045c4:	81a3      	strh	r3, [r4, #12]
 80045c6:	f04f 30ff 	mov.w	r0, #4294967295
 80045ca:	e03e      	b.n	800464a <__swsetup_r+0xba>
 80045cc:	4b25      	ldr	r3, [pc, #148]	; (8004664 <__swsetup_r+0xd4>)
 80045ce:	429c      	cmp	r4, r3
 80045d0:	d101      	bne.n	80045d6 <__swsetup_r+0x46>
 80045d2:	68ac      	ldr	r4, [r5, #8]
 80045d4:	e7eb      	b.n	80045ae <__swsetup_r+0x1e>
 80045d6:	4b24      	ldr	r3, [pc, #144]	; (8004668 <__swsetup_r+0xd8>)
 80045d8:	429c      	cmp	r4, r3
 80045da:	bf08      	it	eq
 80045dc:	68ec      	ldreq	r4, [r5, #12]
 80045de:	e7e6      	b.n	80045ae <__swsetup_r+0x1e>
 80045e0:	0758      	lsls	r0, r3, #29
 80045e2:	d512      	bpl.n	800460a <__swsetup_r+0x7a>
 80045e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80045e6:	b141      	cbz	r1, 80045fa <__swsetup_r+0x6a>
 80045e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80045ec:	4299      	cmp	r1, r3
 80045ee:	d002      	beq.n	80045f6 <__swsetup_r+0x66>
 80045f0:	4630      	mov	r0, r6
 80045f2:	f000 f991 	bl	8004918 <_free_r>
 80045f6:	2300      	movs	r3, #0
 80045f8:	6363      	str	r3, [r4, #52]	; 0x34
 80045fa:	89a3      	ldrh	r3, [r4, #12]
 80045fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004600:	81a3      	strh	r3, [r4, #12]
 8004602:	2300      	movs	r3, #0
 8004604:	6063      	str	r3, [r4, #4]
 8004606:	6923      	ldr	r3, [r4, #16]
 8004608:	6023      	str	r3, [r4, #0]
 800460a:	89a3      	ldrh	r3, [r4, #12]
 800460c:	f043 0308 	orr.w	r3, r3, #8
 8004610:	81a3      	strh	r3, [r4, #12]
 8004612:	6923      	ldr	r3, [r4, #16]
 8004614:	b94b      	cbnz	r3, 800462a <__swsetup_r+0x9a>
 8004616:	89a3      	ldrh	r3, [r4, #12]
 8004618:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800461c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004620:	d003      	beq.n	800462a <__swsetup_r+0x9a>
 8004622:	4621      	mov	r1, r4
 8004624:	4630      	mov	r0, r6
 8004626:	f000 f92b 	bl	8004880 <__smakebuf_r>
 800462a:	89a0      	ldrh	r0, [r4, #12]
 800462c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004630:	f010 0301 	ands.w	r3, r0, #1
 8004634:	d00a      	beq.n	800464c <__swsetup_r+0xbc>
 8004636:	2300      	movs	r3, #0
 8004638:	60a3      	str	r3, [r4, #8]
 800463a:	6963      	ldr	r3, [r4, #20]
 800463c:	425b      	negs	r3, r3
 800463e:	61a3      	str	r3, [r4, #24]
 8004640:	6923      	ldr	r3, [r4, #16]
 8004642:	b943      	cbnz	r3, 8004656 <__swsetup_r+0xc6>
 8004644:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004648:	d1ba      	bne.n	80045c0 <__swsetup_r+0x30>
 800464a:	bd70      	pop	{r4, r5, r6, pc}
 800464c:	0781      	lsls	r1, r0, #30
 800464e:	bf58      	it	pl
 8004650:	6963      	ldrpl	r3, [r4, #20]
 8004652:	60a3      	str	r3, [r4, #8]
 8004654:	e7f4      	b.n	8004640 <__swsetup_r+0xb0>
 8004656:	2000      	movs	r0, #0
 8004658:	e7f7      	b.n	800464a <__swsetup_r+0xba>
 800465a:	bf00      	nop
 800465c:	2000000c 	.word	0x2000000c
 8004660:	08004aa8 	.word	0x08004aa8
 8004664:	08004ac8 	.word	0x08004ac8
 8004668:	08004a88 	.word	0x08004a88

0800466c <_close_r>:
 800466c:	b538      	push	{r3, r4, r5, lr}
 800466e:	4d06      	ldr	r5, [pc, #24]	; (8004688 <_close_r+0x1c>)
 8004670:	2300      	movs	r3, #0
 8004672:	4604      	mov	r4, r0
 8004674:	4608      	mov	r0, r1
 8004676:	602b      	str	r3, [r5, #0]
 8004678:	f7fc fa81 	bl	8000b7e <_close>
 800467c:	1c43      	adds	r3, r0, #1
 800467e:	d102      	bne.n	8004686 <_close_r+0x1a>
 8004680:	682b      	ldr	r3, [r5, #0]
 8004682:	b103      	cbz	r3, 8004686 <_close_r+0x1a>
 8004684:	6023      	str	r3, [r4, #0]
 8004686:	bd38      	pop	{r3, r4, r5, pc}
 8004688:	200000fc 	.word	0x200000fc

0800468c <__sflush_r>:
 800468c:	898a      	ldrh	r2, [r1, #12]
 800468e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004692:	4605      	mov	r5, r0
 8004694:	0710      	lsls	r0, r2, #28
 8004696:	460c      	mov	r4, r1
 8004698:	d458      	bmi.n	800474c <__sflush_r+0xc0>
 800469a:	684b      	ldr	r3, [r1, #4]
 800469c:	2b00      	cmp	r3, #0
 800469e:	dc05      	bgt.n	80046ac <__sflush_r+0x20>
 80046a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	dc02      	bgt.n	80046ac <__sflush_r+0x20>
 80046a6:	2000      	movs	r0, #0
 80046a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80046ae:	2e00      	cmp	r6, #0
 80046b0:	d0f9      	beq.n	80046a6 <__sflush_r+0x1a>
 80046b2:	2300      	movs	r3, #0
 80046b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80046b8:	682f      	ldr	r7, [r5, #0]
 80046ba:	602b      	str	r3, [r5, #0]
 80046bc:	d032      	beq.n	8004724 <__sflush_r+0x98>
 80046be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80046c0:	89a3      	ldrh	r3, [r4, #12]
 80046c2:	075a      	lsls	r2, r3, #29
 80046c4:	d505      	bpl.n	80046d2 <__sflush_r+0x46>
 80046c6:	6863      	ldr	r3, [r4, #4]
 80046c8:	1ac0      	subs	r0, r0, r3
 80046ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80046cc:	b10b      	cbz	r3, 80046d2 <__sflush_r+0x46>
 80046ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80046d0:	1ac0      	subs	r0, r0, r3
 80046d2:	2300      	movs	r3, #0
 80046d4:	4602      	mov	r2, r0
 80046d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80046d8:	6a21      	ldr	r1, [r4, #32]
 80046da:	4628      	mov	r0, r5
 80046dc:	47b0      	blx	r6
 80046de:	1c43      	adds	r3, r0, #1
 80046e0:	89a3      	ldrh	r3, [r4, #12]
 80046e2:	d106      	bne.n	80046f2 <__sflush_r+0x66>
 80046e4:	6829      	ldr	r1, [r5, #0]
 80046e6:	291d      	cmp	r1, #29
 80046e8:	d82c      	bhi.n	8004744 <__sflush_r+0xb8>
 80046ea:	4a2a      	ldr	r2, [pc, #168]	; (8004794 <__sflush_r+0x108>)
 80046ec:	40ca      	lsrs	r2, r1
 80046ee:	07d6      	lsls	r6, r2, #31
 80046f0:	d528      	bpl.n	8004744 <__sflush_r+0xb8>
 80046f2:	2200      	movs	r2, #0
 80046f4:	6062      	str	r2, [r4, #4]
 80046f6:	04d9      	lsls	r1, r3, #19
 80046f8:	6922      	ldr	r2, [r4, #16]
 80046fa:	6022      	str	r2, [r4, #0]
 80046fc:	d504      	bpl.n	8004708 <__sflush_r+0x7c>
 80046fe:	1c42      	adds	r2, r0, #1
 8004700:	d101      	bne.n	8004706 <__sflush_r+0x7a>
 8004702:	682b      	ldr	r3, [r5, #0]
 8004704:	b903      	cbnz	r3, 8004708 <__sflush_r+0x7c>
 8004706:	6560      	str	r0, [r4, #84]	; 0x54
 8004708:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800470a:	602f      	str	r7, [r5, #0]
 800470c:	2900      	cmp	r1, #0
 800470e:	d0ca      	beq.n	80046a6 <__sflush_r+0x1a>
 8004710:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004714:	4299      	cmp	r1, r3
 8004716:	d002      	beq.n	800471e <__sflush_r+0x92>
 8004718:	4628      	mov	r0, r5
 800471a:	f000 f8fd 	bl	8004918 <_free_r>
 800471e:	2000      	movs	r0, #0
 8004720:	6360      	str	r0, [r4, #52]	; 0x34
 8004722:	e7c1      	b.n	80046a8 <__sflush_r+0x1c>
 8004724:	6a21      	ldr	r1, [r4, #32]
 8004726:	2301      	movs	r3, #1
 8004728:	4628      	mov	r0, r5
 800472a:	47b0      	blx	r6
 800472c:	1c41      	adds	r1, r0, #1
 800472e:	d1c7      	bne.n	80046c0 <__sflush_r+0x34>
 8004730:	682b      	ldr	r3, [r5, #0]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d0c4      	beq.n	80046c0 <__sflush_r+0x34>
 8004736:	2b1d      	cmp	r3, #29
 8004738:	d001      	beq.n	800473e <__sflush_r+0xb2>
 800473a:	2b16      	cmp	r3, #22
 800473c:	d101      	bne.n	8004742 <__sflush_r+0xb6>
 800473e:	602f      	str	r7, [r5, #0]
 8004740:	e7b1      	b.n	80046a6 <__sflush_r+0x1a>
 8004742:	89a3      	ldrh	r3, [r4, #12]
 8004744:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004748:	81a3      	strh	r3, [r4, #12]
 800474a:	e7ad      	b.n	80046a8 <__sflush_r+0x1c>
 800474c:	690f      	ldr	r7, [r1, #16]
 800474e:	2f00      	cmp	r7, #0
 8004750:	d0a9      	beq.n	80046a6 <__sflush_r+0x1a>
 8004752:	0793      	lsls	r3, r2, #30
 8004754:	680e      	ldr	r6, [r1, #0]
 8004756:	bf08      	it	eq
 8004758:	694b      	ldreq	r3, [r1, #20]
 800475a:	600f      	str	r7, [r1, #0]
 800475c:	bf18      	it	ne
 800475e:	2300      	movne	r3, #0
 8004760:	eba6 0807 	sub.w	r8, r6, r7
 8004764:	608b      	str	r3, [r1, #8]
 8004766:	f1b8 0f00 	cmp.w	r8, #0
 800476a:	dd9c      	ble.n	80046a6 <__sflush_r+0x1a>
 800476c:	6a21      	ldr	r1, [r4, #32]
 800476e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004770:	4643      	mov	r3, r8
 8004772:	463a      	mov	r2, r7
 8004774:	4628      	mov	r0, r5
 8004776:	47b0      	blx	r6
 8004778:	2800      	cmp	r0, #0
 800477a:	dc06      	bgt.n	800478a <__sflush_r+0xfe>
 800477c:	89a3      	ldrh	r3, [r4, #12]
 800477e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004782:	81a3      	strh	r3, [r4, #12]
 8004784:	f04f 30ff 	mov.w	r0, #4294967295
 8004788:	e78e      	b.n	80046a8 <__sflush_r+0x1c>
 800478a:	4407      	add	r7, r0
 800478c:	eba8 0800 	sub.w	r8, r8, r0
 8004790:	e7e9      	b.n	8004766 <__sflush_r+0xda>
 8004792:	bf00      	nop
 8004794:	20400001 	.word	0x20400001

08004798 <_fflush_r>:
 8004798:	b538      	push	{r3, r4, r5, lr}
 800479a:	690b      	ldr	r3, [r1, #16]
 800479c:	4605      	mov	r5, r0
 800479e:	460c      	mov	r4, r1
 80047a0:	b913      	cbnz	r3, 80047a8 <_fflush_r+0x10>
 80047a2:	2500      	movs	r5, #0
 80047a4:	4628      	mov	r0, r5
 80047a6:	bd38      	pop	{r3, r4, r5, pc}
 80047a8:	b118      	cbz	r0, 80047b2 <_fflush_r+0x1a>
 80047aa:	6983      	ldr	r3, [r0, #24]
 80047ac:	b90b      	cbnz	r3, 80047b2 <_fflush_r+0x1a>
 80047ae:	f7ff fa15 	bl	8003bdc <__sinit>
 80047b2:	4b14      	ldr	r3, [pc, #80]	; (8004804 <_fflush_r+0x6c>)
 80047b4:	429c      	cmp	r4, r3
 80047b6:	d11b      	bne.n	80047f0 <_fflush_r+0x58>
 80047b8:	686c      	ldr	r4, [r5, #4]
 80047ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d0ef      	beq.n	80047a2 <_fflush_r+0xa>
 80047c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80047c4:	07d0      	lsls	r0, r2, #31
 80047c6:	d404      	bmi.n	80047d2 <_fflush_r+0x3a>
 80047c8:	0599      	lsls	r1, r3, #22
 80047ca:	d402      	bmi.n	80047d2 <_fflush_r+0x3a>
 80047cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80047ce:	f7ff faa3 	bl	8003d18 <__retarget_lock_acquire_recursive>
 80047d2:	4628      	mov	r0, r5
 80047d4:	4621      	mov	r1, r4
 80047d6:	f7ff ff59 	bl	800468c <__sflush_r>
 80047da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80047dc:	07da      	lsls	r2, r3, #31
 80047de:	4605      	mov	r5, r0
 80047e0:	d4e0      	bmi.n	80047a4 <_fflush_r+0xc>
 80047e2:	89a3      	ldrh	r3, [r4, #12]
 80047e4:	059b      	lsls	r3, r3, #22
 80047e6:	d4dd      	bmi.n	80047a4 <_fflush_r+0xc>
 80047e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80047ea:	f7ff fa96 	bl	8003d1a <__retarget_lock_release_recursive>
 80047ee:	e7d9      	b.n	80047a4 <_fflush_r+0xc>
 80047f0:	4b05      	ldr	r3, [pc, #20]	; (8004808 <_fflush_r+0x70>)
 80047f2:	429c      	cmp	r4, r3
 80047f4:	d101      	bne.n	80047fa <_fflush_r+0x62>
 80047f6:	68ac      	ldr	r4, [r5, #8]
 80047f8:	e7df      	b.n	80047ba <_fflush_r+0x22>
 80047fa:	4b04      	ldr	r3, [pc, #16]	; (800480c <_fflush_r+0x74>)
 80047fc:	429c      	cmp	r4, r3
 80047fe:	bf08      	it	eq
 8004800:	68ec      	ldreq	r4, [r5, #12]
 8004802:	e7da      	b.n	80047ba <_fflush_r+0x22>
 8004804:	08004aa8 	.word	0x08004aa8
 8004808:	08004ac8 	.word	0x08004ac8
 800480c:	08004a88 	.word	0x08004a88

08004810 <_lseek_r>:
 8004810:	b538      	push	{r3, r4, r5, lr}
 8004812:	4d07      	ldr	r5, [pc, #28]	; (8004830 <_lseek_r+0x20>)
 8004814:	4604      	mov	r4, r0
 8004816:	4608      	mov	r0, r1
 8004818:	4611      	mov	r1, r2
 800481a:	2200      	movs	r2, #0
 800481c:	602a      	str	r2, [r5, #0]
 800481e:	461a      	mov	r2, r3
 8004820:	f7fc f9d4 	bl	8000bcc <_lseek>
 8004824:	1c43      	adds	r3, r0, #1
 8004826:	d102      	bne.n	800482e <_lseek_r+0x1e>
 8004828:	682b      	ldr	r3, [r5, #0]
 800482a:	b103      	cbz	r3, 800482e <_lseek_r+0x1e>
 800482c:	6023      	str	r3, [r4, #0]
 800482e:	bd38      	pop	{r3, r4, r5, pc}
 8004830:	200000fc 	.word	0x200000fc

08004834 <__swhatbuf_r>:
 8004834:	b570      	push	{r4, r5, r6, lr}
 8004836:	460e      	mov	r6, r1
 8004838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800483c:	2900      	cmp	r1, #0
 800483e:	b096      	sub	sp, #88	; 0x58
 8004840:	4614      	mov	r4, r2
 8004842:	461d      	mov	r5, r3
 8004844:	da08      	bge.n	8004858 <__swhatbuf_r+0x24>
 8004846:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800484a:	2200      	movs	r2, #0
 800484c:	602a      	str	r2, [r5, #0]
 800484e:	061a      	lsls	r2, r3, #24
 8004850:	d410      	bmi.n	8004874 <__swhatbuf_r+0x40>
 8004852:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004856:	e00e      	b.n	8004876 <__swhatbuf_r+0x42>
 8004858:	466a      	mov	r2, sp
 800485a:	f000 f8bb 	bl	80049d4 <_fstat_r>
 800485e:	2800      	cmp	r0, #0
 8004860:	dbf1      	blt.n	8004846 <__swhatbuf_r+0x12>
 8004862:	9a01      	ldr	r2, [sp, #4]
 8004864:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004868:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800486c:	425a      	negs	r2, r3
 800486e:	415a      	adcs	r2, r3
 8004870:	602a      	str	r2, [r5, #0]
 8004872:	e7ee      	b.n	8004852 <__swhatbuf_r+0x1e>
 8004874:	2340      	movs	r3, #64	; 0x40
 8004876:	2000      	movs	r0, #0
 8004878:	6023      	str	r3, [r4, #0]
 800487a:	b016      	add	sp, #88	; 0x58
 800487c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004880 <__smakebuf_r>:
 8004880:	898b      	ldrh	r3, [r1, #12]
 8004882:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004884:	079d      	lsls	r5, r3, #30
 8004886:	4606      	mov	r6, r0
 8004888:	460c      	mov	r4, r1
 800488a:	d507      	bpl.n	800489c <__smakebuf_r+0x1c>
 800488c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004890:	6023      	str	r3, [r4, #0]
 8004892:	6123      	str	r3, [r4, #16]
 8004894:	2301      	movs	r3, #1
 8004896:	6163      	str	r3, [r4, #20]
 8004898:	b002      	add	sp, #8
 800489a:	bd70      	pop	{r4, r5, r6, pc}
 800489c:	ab01      	add	r3, sp, #4
 800489e:	466a      	mov	r2, sp
 80048a0:	f7ff ffc8 	bl	8004834 <__swhatbuf_r>
 80048a4:	9900      	ldr	r1, [sp, #0]
 80048a6:	4605      	mov	r5, r0
 80048a8:	4630      	mov	r0, r6
 80048aa:	f7ff fa57 	bl	8003d5c <_malloc_r>
 80048ae:	b948      	cbnz	r0, 80048c4 <__smakebuf_r+0x44>
 80048b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048b4:	059a      	lsls	r2, r3, #22
 80048b6:	d4ef      	bmi.n	8004898 <__smakebuf_r+0x18>
 80048b8:	f023 0303 	bic.w	r3, r3, #3
 80048bc:	f043 0302 	orr.w	r3, r3, #2
 80048c0:	81a3      	strh	r3, [r4, #12]
 80048c2:	e7e3      	b.n	800488c <__smakebuf_r+0xc>
 80048c4:	4b0d      	ldr	r3, [pc, #52]	; (80048fc <__smakebuf_r+0x7c>)
 80048c6:	62b3      	str	r3, [r6, #40]	; 0x28
 80048c8:	89a3      	ldrh	r3, [r4, #12]
 80048ca:	6020      	str	r0, [r4, #0]
 80048cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048d0:	81a3      	strh	r3, [r4, #12]
 80048d2:	9b00      	ldr	r3, [sp, #0]
 80048d4:	6163      	str	r3, [r4, #20]
 80048d6:	9b01      	ldr	r3, [sp, #4]
 80048d8:	6120      	str	r0, [r4, #16]
 80048da:	b15b      	cbz	r3, 80048f4 <__smakebuf_r+0x74>
 80048dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80048e0:	4630      	mov	r0, r6
 80048e2:	f000 f889 	bl	80049f8 <_isatty_r>
 80048e6:	b128      	cbz	r0, 80048f4 <__smakebuf_r+0x74>
 80048e8:	89a3      	ldrh	r3, [r4, #12]
 80048ea:	f023 0303 	bic.w	r3, r3, #3
 80048ee:	f043 0301 	orr.w	r3, r3, #1
 80048f2:	81a3      	strh	r3, [r4, #12]
 80048f4:	89a0      	ldrh	r0, [r4, #12]
 80048f6:	4305      	orrs	r5, r0
 80048f8:	81a5      	strh	r5, [r4, #12]
 80048fa:	e7cd      	b.n	8004898 <__smakebuf_r+0x18>
 80048fc:	08003b75 	.word	0x08003b75

08004900 <__malloc_lock>:
 8004900:	4801      	ldr	r0, [pc, #4]	; (8004908 <__malloc_lock+0x8>)
 8004902:	f7ff ba09 	b.w	8003d18 <__retarget_lock_acquire_recursive>
 8004906:	bf00      	nop
 8004908:	200000f0 	.word	0x200000f0

0800490c <__malloc_unlock>:
 800490c:	4801      	ldr	r0, [pc, #4]	; (8004914 <__malloc_unlock+0x8>)
 800490e:	f7ff ba04 	b.w	8003d1a <__retarget_lock_release_recursive>
 8004912:	bf00      	nop
 8004914:	200000f0 	.word	0x200000f0

08004918 <_free_r>:
 8004918:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800491a:	2900      	cmp	r1, #0
 800491c:	d044      	beq.n	80049a8 <_free_r+0x90>
 800491e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004922:	9001      	str	r0, [sp, #4]
 8004924:	2b00      	cmp	r3, #0
 8004926:	f1a1 0404 	sub.w	r4, r1, #4
 800492a:	bfb8      	it	lt
 800492c:	18e4      	addlt	r4, r4, r3
 800492e:	f7ff ffe7 	bl	8004900 <__malloc_lock>
 8004932:	4a1e      	ldr	r2, [pc, #120]	; (80049ac <_free_r+0x94>)
 8004934:	9801      	ldr	r0, [sp, #4]
 8004936:	6813      	ldr	r3, [r2, #0]
 8004938:	b933      	cbnz	r3, 8004948 <_free_r+0x30>
 800493a:	6063      	str	r3, [r4, #4]
 800493c:	6014      	str	r4, [r2, #0]
 800493e:	b003      	add	sp, #12
 8004940:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004944:	f7ff bfe2 	b.w	800490c <__malloc_unlock>
 8004948:	42a3      	cmp	r3, r4
 800494a:	d908      	bls.n	800495e <_free_r+0x46>
 800494c:	6825      	ldr	r5, [r4, #0]
 800494e:	1961      	adds	r1, r4, r5
 8004950:	428b      	cmp	r3, r1
 8004952:	bf01      	itttt	eq
 8004954:	6819      	ldreq	r1, [r3, #0]
 8004956:	685b      	ldreq	r3, [r3, #4]
 8004958:	1949      	addeq	r1, r1, r5
 800495a:	6021      	streq	r1, [r4, #0]
 800495c:	e7ed      	b.n	800493a <_free_r+0x22>
 800495e:	461a      	mov	r2, r3
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	b10b      	cbz	r3, 8004968 <_free_r+0x50>
 8004964:	42a3      	cmp	r3, r4
 8004966:	d9fa      	bls.n	800495e <_free_r+0x46>
 8004968:	6811      	ldr	r1, [r2, #0]
 800496a:	1855      	adds	r5, r2, r1
 800496c:	42a5      	cmp	r5, r4
 800496e:	d10b      	bne.n	8004988 <_free_r+0x70>
 8004970:	6824      	ldr	r4, [r4, #0]
 8004972:	4421      	add	r1, r4
 8004974:	1854      	adds	r4, r2, r1
 8004976:	42a3      	cmp	r3, r4
 8004978:	6011      	str	r1, [r2, #0]
 800497a:	d1e0      	bne.n	800493e <_free_r+0x26>
 800497c:	681c      	ldr	r4, [r3, #0]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	6053      	str	r3, [r2, #4]
 8004982:	4421      	add	r1, r4
 8004984:	6011      	str	r1, [r2, #0]
 8004986:	e7da      	b.n	800493e <_free_r+0x26>
 8004988:	d902      	bls.n	8004990 <_free_r+0x78>
 800498a:	230c      	movs	r3, #12
 800498c:	6003      	str	r3, [r0, #0]
 800498e:	e7d6      	b.n	800493e <_free_r+0x26>
 8004990:	6825      	ldr	r5, [r4, #0]
 8004992:	1961      	adds	r1, r4, r5
 8004994:	428b      	cmp	r3, r1
 8004996:	bf04      	itt	eq
 8004998:	6819      	ldreq	r1, [r3, #0]
 800499a:	685b      	ldreq	r3, [r3, #4]
 800499c:	6063      	str	r3, [r4, #4]
 800499e:	bf04      	itt	eq
 80049a0:	1949      	addeq	r1, r1, r5
 80049a2:	6021      	streq	r1, [r4, #0]
 80049a4:	6054      	str	r4, [r2, #4]
 80049a6:	e7ca      	b.n	800493e <_free_r+0x26>
 80049a8:	b003      	add	sp, #12
 80049aa:	bd30      	pop	{r4, r5, pc}
 80049ac:	200000f4 	.word	0x200000f4

080049b0 <_read_r>:
 80049b0:	b538      	push	{r3, r4, r5, lr}
 80049b2:	4d07      	ldr	r5, [pc, #28]	; (80049d0 <_read_r+0x20>)
 80049b4:	4604      	mov	r4, r0
 80049b6:	4608      	mov	r0, r1
 80049b8:	4611      	mov	r1, r2
 80049ba:	2200      	movs	r2, #0
 80049bc:	602a      	str	r2, [r5, #0]
 80049be:	461a      	mov	r2, r3
 80049c0:	f7fc f8a4 	bl	8000b0c <_read>
 80049c4:	1c43      	adds	r3, r0, #1
 80049c6:	d102      	bne.n	80049ce <_read_r+0x1e>
 80049c8:	682b      	ldr	r3, [r5, #0]
 80049ca:	b103      	cbz	r3, 80049ce <_read_r+0x1e>
 80049cc:	6023      	str	r3, [r4, #0]
 80049ce:	bd38      	pop	{r3, r4, r5, pc}
 80049d0:	200000fc 	.word	0x200000fc

080049d4 <_fstat_r>:
 80049d4:	b538      	push	{r3, r4, r5, lr}
 80049d6:	4d07      	ldr	r5, [pc, #28]	; (80049f4 <_fstat_r+0x20>)
 80049d8:	2300      	movs	r3, #0
 80049da:	4604      	mov	r4, r0
 80049dc:	4608      	mov	r0, r1
 80049de:	4611      	mov	r1, r2
 80049e0:	602b      	str	r3, [r5, #0]
 80049e2:	f7fc f8d8 	bl	8000b96 <_fstat>
 80049e6:	1c43      	adds	r3, r0, #1
 80049e8:	d102      	bne.n	80049f0 <_fstat_r+0x1c>
 80049ea:	682b      	ldr	r3, [r5, #0]
 80049ec:	b103      	cbz	r3, 80049f0 <_fstat_r+0x1c>
 80049ee:	6023      	str	r3, [r4, #0]
 80049f0:	bd38      	pop	{r3, r4, r5, pc}
 80049f2:	bf00      	nop
 80049f4:	200000fc 	.word	0x200000fc

080049f8 <_isatty_r>:
 80049f8:	b538      	push	{r3, r4, r5, lr}
 80049fa:	4d06      	ldr	r5, [pc, #24]	; (8004a14 <_isatty_r+0x1c>)
 80049fc:	2300      	movs	r3, #0
 80049fe:	4604      	mov	r4, r0
 8004a00:	4608      	mov	r0, r1
 8004a02:	602b      	str	r3, [r5, #0]
 8004a04:	f7fc f8d7 	bl	8000bb6 <_isatty>
 8004a08:	1c43      	adds	r3, r0, #1
 8004a0a:	d102      	bne.n	8004a12 <_isatty_r+0x1a>
 8004a0c:	682b      	ldr	r3, [r5, #0]
 8004a0e:	b103      	cbz	r3, 8004a12 <_isatty_r+0x1a>
 8004a10:	6023      	str	r3, [r4, #0]
 8004a12:	bd38      	pop	{r3, r4, r5, pc}
 8004a14:	200000fc 	.word	0x200000fc

08004a18 <_init>:
 8004a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a1a:	bf00      	nop
 8004a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a1e:	bc08      	pop	{r3}
 8004a20:	469e      	mov	lr, r3
 8004a22:	4770      	bx	lr

08004a24 <_fini>:
 8004a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a26:	bf00      	nop
 8004a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a2a:	bc08      	pop	{r3}
 8004a2c:	469e      	mov	lr, r3
 8004a2e:	4770      	bx	lr
