/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "math.h"
#include <stdio.h>
#include <stdlib.h>
#include "adc.h"
#include "dma.h"
#include "tim.h"
#include "usb_device.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "asservissement.h"
#include "interruption.h"

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define  vitesseRef1 20
#define z1   1000/(periodMotor1)
#define z2   1000/(periodMotor2)
#define z3   1000/(periodMotor3)
#define z4   1000/(periodMotor4)
#define z5   1000/(periodMotor5)
#define z6   1000/(periodMotor6)
//#define counttot(d,e)   (d+e)

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
//double interrA();
void moveTo( double pos1,double pos2,double pos3);
void moveTo1( double pos1);
//definitions des vitesses est ses symetries par exp speedMotor1-->spedMotor2
float speedMotor1=0;
float speedMotor2=0;
float speedMotor3=0;
float speedMotor4=0;
float speedMotor5=0;
float speedMotor6=0;

//definitions des periodes est ses symetries par exp periodMotor1-->periodMotor2
uint16_t periodMotor1=0;
uint16_t periodMotor2=0;
uint16_t periodMotor3=0;
uint16_t periodMotor4=0;
uint16_t periodMotor5=0;
uint16_t periodMotor6=0;

/* USER CODE END 0 */
volatile int Is_First_Captured1=0;
volatile int Is_First_Captured2=0;
volatile int Is_First_Captured3=0;
volatile int Is_First_Captured4=0;
volatile int Is_First_Captured5=0;
volatile int Is_First_Captured6=0;

volatile float IC1_Val1=0;
volatile float IC2_Val1=0;
volatile float IC3_Val1=0;
volatile float IC4_Val1=0;
volatile float IC5_Val1=0;
volatile float IC6_Val1=0;


volatile float Difference1=0;
volatile float Difference2=0;
volatile float Difference3=0;
volatile float Difference4=0;
volatile float Difference5=0;
volatile float Difference6=0;

uint32_t buffer;
float Tension_actuelle;
double countM1=0;
double countM2=0;
double countM3=0;
double countM4=0;
double countM5=0;
double countM6=0;
char data,data1;
int flag=0;
char *dta="ok";
int P=0;
double temp=0;
double impulsionTo_course = 230.00/2809.00 ;
double try =0;
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */



void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
	  if(htim->Instance==TIM2){
		  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)// MOTEUR 1

		  			{interrA();



		  			if (Is_First_Captured1 == 0)
		  				{
		  				IC1_Val1=HAL_GetTick();
		  				Is_First_Captured1++;
		  				}
		  			else if (Is_First_Captured1 == 1)
		  				{
		  				periodMotor1 = HAL_GetTick()-IC1_Val1;//periode1
		  				if(periodMotor1!=0){
		  				speedMotor1 = z1;


		  				  }
		  				Is_First_Captured1 = 0;

		  				}

		  			}
		  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)// MOTEUR 2

		  		  			{interrB();

		  		  			if (Is_First_Captured2 == 0)
		  		  				{
		  		  				IC2_Val1=HAL_GetTick();
		  		  				Is_First_Captured2++;
		  		  				}
		  		  			else if (Is_First_Captured2 == 1)
		  		  				{
		  		  				periodMotor2 = HAL_GetTick()-IC2_Val1;//periode1
		  		  				if(periodMotor2!=0){
		  		  				speedMotor2 = z2;}

		  		  				Is_First_Captured2 = 0;

		  		  				}


	                   }

	  }



	  if(htim->Instance==TIM4){



               if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)	//MOTEUR3

	  		  			{
		                    interrC();

	  		  			if (Is_First_Captured3 == 0)
	  		  				{
	  		  				IC3_Val1=HAL_GetTick();
	  		  				Is_First_Captured3++;
	  		  				}
	  		  			else if (Is_First_Captured3 == 1)
	  		  				{
	  		  				periodMotor3 = HAL_GetTick()-IC3_Val1;//periode1
	  		  				if(periodMotor3!=0){
	  		  				speedMotor3 = z3;}
	  		  				Is_First_Captured3 = 0;

	  		  				}

	  		  			}



	  		if(htim->Channel==HAL_TIM_ACTIVE_CHANNEL_2)//MOTEUR4
	  			  			{
	  			       interrD();

					if (Is_First_Captured4 == 0)
									{
									IC4_Val1=HAL_GetTick();
									//timestamp1C1 = HAL_GetTick();
									Is_First_Captured4++;
									}
								else if (Is_First_Captured4== 1)
									{
									periodMotor4 = HAL_GetTick()-IC4_Val1;//periode1periode1*0.5 both edge
										  if(periodMotor4!=0){
									speedMotor4 = z4;
										  }
									Is_First_Captured4 = 0;

									}

					}

	  		if(htim->Channel==HAL_TIM_ACTIVE_CHANNEL_3)//MOTEUR5
	  			  			  			{
	  			                        interrE();
							if (Is_First_Captured5 == 0)
											{
											IC5_Val1=HAL_GetTick();
											//timestamp1C1 = HAL_GetTick();
											Is_First_Captured5++;
											}
										else if (Is_First_Captured5== 1)
											{
											periodMotor5 = HAL_GetTick()-IC5_Val1;//periode1periode1*0.5 both edge
												  if(periodMotor5!=0){
											speedMotor5 = z5;
												  }
											Is_First_Captured5 = 0;

											}

	  			  			  			}
	  		if(htim->Channel==HAL_TIM_ACTIVE_CHANNEL_4)//MOTEUR6
	  			  			  			{
	  			                             interrF();
							if (Is_First_Captured6 == 0)
											{
											IC6_Val1=HAL_GetTick();
											//timestamp1C1 = HAL_GetTick();
											Is_First_Captured6++;
											}
										else if (Is_First_Captured6== 1)
											{
											periodMotor6 = HAL_GetTick()-IC6_Val1;//periode1periode1*0.5 both edge
												  if(periodMotor6!=0){
											speedMotor6 =z6;
												  }
											Is_First_Captured6 = 0;

											}

	  			  			  			}
	  		}




}



void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
   Tension_actuelle = buffer*21.5/4096;
}

void moveTo1( double pos1){

	while ( (pos1 > try)||
		  (pos1-try <-1 ))
	{
		try =floor( countM3*impulsionTo_course);

		if  (( pos1 - try  )>1)//>=0.4
						{
				     // temp=HAL_GetTick();

				      P=0;
				      HAL_GPIO_WritePin(GPIOC,  AV_RE_M1_Pin, RESET);

				      TIM1->CCR3=60;
					  HAL_Delay(2);

						}

			 if (( pos1 - try  )<=-3   )//<=-0.5
							{
			                   P=0;
					          HAL_GPIO_WritePin(GPIOC,  AV_RE_M1_Pin, SET);

					          TIM1->CCR3=60;
					 		  HAL_Delay(2);

							}
			 if  (( pos1  -try )==0)
			 	 			   {
			 	 				  TIM1->CCR3=0;
			 	 			   }


	}
}

///////////////////////////////////////////////////////////////////////////////////////////
void moveTo( double pos1,double pos2,double pos3 ){
while ( ((pos1 > countM1*impulsionTo_course)&&(pos1>countM2*impulsionTo_course))|| ((pos1-countM1*impulsionTo_course <-1 )&&(pos1-countM2*impulsionTo_course<-1)) ||
		((pos2>countM3*impulsionTo_course)&&(pos2>countM4*impulsionTo_course))  ||((pos2-countM3*impulsionTo_course <-1 )&&(pos2-countM4*impulsionTo_course<-1)) ||
		((pos3>countM5*impulsionTo_course)&&(pos3>countM6*impulsionTo_course))  ||((pos3-countM5*impulsionTo_course <-1 )&&(pos3-countM6*impulsionTo_course<-1))  )
{


	///////////////////////////////////////////////////MOTEUR5 &&MOTEUR6
	if  (( pos3 - countM5*impulsionTo_course  )>1)//>=0.4
									{
		P=0;
		  HAL_GPIO_WritePin(GPIOC,  AV_RE_M5_Pin, RESET);

		  regulation_Mt5(speedMotor5, speedMotor6,vitesseRef1, 20);
		  HAL_Delay(2);

								  	}
			 if (( pos3 - countM5*impulsionTo_course   )<=-3   )//<=-0.5
								{
				                   P=0;

				 				  HAL_GPIO_WritePin(GPIOC,  AV_RE_M5_Pin, SET);

						          regulation_Mt5(speedMotor5, speedMotor6,vitesseRef1, 20);
						          HAL_Delay(2);

								}
////MT6
			 if  (( pos3 - countM6*impulsionTo_course  )>1)//>=0.4
			 									{
			 					        P=0;

			 						  HAL_GPIO_WritePin(GPIOC,  AV_RE_M6_Pin, RESET);

			 						  regulation_Mt6(speedMotor6, speedMotor5,vitesseRef1, 20);
			 						  HAL_Delay(2);

			 								  	}
			 			 if (( pos3 - countM6*impulsionTo_course   )<=-3   )//<=-0.5
			 								{
			 				                   P=0;

			 				 				  HAL_GPIO_WritePin(GPIOC,  AV_RE_M6_Pin, SET);

			 						          regulation_Mt6(speedMotor6, speedMotor5,vitesseRef1, 20);
			 						          HAL_Delay(2);

			 								}
			 			if  (( pos3  -countM5*impulsionTo_course  )==0 )
							   {
								  TIM3->CCR2=0;

							   }
						if  (( pos3 -countM6*impulsionTo_course  )==0 )
		                       {
							TIM3->CCR3 =0;

		                       }

///////////////////////////////////////////////////////////MOTEUR3 & MOTEUR4
	if  (( pos2 - countM3*impulsionTo_course  )>1)//>=0.4
								{
				        P=0;

					  HAL_GPIO_WritePin(GPIOC,  AV_RE_M3_Pin, RESET);

					  regulation_Mt3(speedMotor3, speedMotor4,vitesseRef1, 20);
					  HAL_Delay(2);

							  	}
		 if (( pos2 - countM3*impulsionTo_course   )<=-3   )//<=-0.5
							{
			                   P=0;

			 				  HAL_GPIO_WritePin(GPIOC,  AV_RE_M3_Pin, SET);

					          regulation_Mt3(speedMotor3, speedMotor4,vitesseRef1, 20);
					          HAL_Delay(2);

							}


		 //mt4
		 if  (( pos2 - countM4*impulsionTo_course )>1)//>=0.4
		 								{
		 				        P=0;

		 					  HAL_GPIO_WritePin(GPIOC,  AV_RE_M4_Pin, RESET);

		 					  regulation_Mt4(speedMotor4, speedMotor3,vitesseRef1, 20);
		 					  HAL_Delay(2);

		 							  	}
		 		 if (( pos2- countM4*impulsionTo_course   )<=-3   )//<=-0.5
		 							{
		 			                   P=0;

		 			 				  HAL_GPIO_WritePin(GPIOC,  AV_RE_M4_Pin, SET);

		 					          regulation_Mt4(speedMotor4, speedMotor3,vitesseRef1, 20);
		 					          HAL_Delay(2);

		 							}
			if  (( pos2  -countM3*impulsionTo_course)==0 )
						   {
							  TIM1->CCR3=0;

						   }
			if  (( pos2  -countM4*impulsionTo_course  )==0 )
									   {
				TIM3->CCR1 =0;

									   }
	///////////////////////////////////////////////////MOTEUR2 et Moteur1
	if  (( pos1 - countM2*impulsionTo_course  )>1)//>=0.4
							{
			        P=0;

				  HAL_GPIO_WritePin(GPIOC,  AV_RE_M2_Pin, RESET);

				  regulation_Mt2(speedMotor2, speedMotor1,vitesseRef1, 20);
				  HAL_Delay(2);

						  	}
	 if (( pos1 - countM2*impulsionTo_course   )<=-3   )//<=-0.5
						{
		                   P=0;

		 				  HAL_GPIO_WritePin(GPIOC,  AV_RE_M2_Pin, SET);

				          regulation_Mt2(speedMotor2, speedMotor1,vitesseRef1, 20);
				          HAL_Delay(2);

						}
		if  (( pos1  -countM2*impulsionTo_course  )==0 )
						   {
							  TIM1->CCR2=0;

						   }
   //MOTEUR1
	if  (( pos1 - countM1*impulsionTo_course  )>1)//>=0.4
				{
		     // temp=HAL_GetTick();

		      P=0;
		      HAL_GPIO_WritePin(GPIOC,  AV_RE_M1_Pin, RESET);

			  regulation_Mt1(speedMotor1, speedMotor2, vitesseRef1, 20);
			  HAL_Delay(2);

				}

	 if (( pos1 - countM1*impulsionTo_course   )<=-3   )//<=-0.5
					{
	                   P=0;
			          HAL_GPIO_WritePin(GPIOC,  AV_RE_M1_Pin, SET);

			 	      regulation_Mt1(speedMotor1, speedMotor2, vitesseRef1, 20);
			 		  HAL_Delay(2);

					}
	 if  (( pos1  -countM1*impulsionTo_course  )==0)
	 	 			   {
	 	 				  TIM1->CCR1=0;
	 	 			   }
////////////////////////////////////////////////////////////////////////////
}
	 			if  (( pos1  -countM1*impulsionTo_course  )==0)
	 			   {
	 				  TIM1->CCR1=0;
	 			   }
	 			if  (( pos1  -countM2*impulsionTo_course  )==0 )
				   {
					  TIM1->CCR2=0;

				   }
	 			if  (( pos2  -countM3*impulsionTo_course  )==0 )
				   {
					  TIM1->CCR3=0;

				   }
				if  (( pos2  -countM4*impulsionTo_course  )==0 )
				   {
					TIM3->CCR1 =0;

					}
				if  (( pos3  -countM5*impulsionTo_course  )==0 )
					   {
						  TIM3->CCR2=0;

					   }
				if  (( pos3 -countM6*impulsionTo_course  )==0 )
					   {
					TIM3->CCR3 =0;

					   }
}

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_TIM1_Init();
  MX_TIM4_Init();
  MX_ADC1_Init();
  MX_TIM2_Init();
  MX_TIM3_Init();
  MX_USB_DEVICE_Init();
  MX_TIM12_Init();
  /* USER CODE BEGIN 2 */
  // start the adc

HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);

HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);

HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);



TIM1->CCR1 =0; //MT1
TIM1->CCR2 =0;//MT2

TIM1->CCR3 =0;//MT3
TIM3->CCR1 =0;//MT4

TIM3->CCR2 =0;//MT5
TIM3->CCR3 =0;//MT6



//moteur1
HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);//PA0
//moteur2
HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);//PA1

//moteur3
HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);//PB6
//moteur4
HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);//PB7
//moteur5
HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_3);//PB8
//moteur6
HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_4);//PB9

// BATTERY
HAL_ADC_Start_DMA (&hadc1, &buffer, 1);

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {



moveTo1(100);







    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 72;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 3;
  RCC_OscInitStruct.PLL.PLLR = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
  for(i=0 ; i<len ; i++)
    ITM_SendChar((*ptr++));
  return len;
}

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
