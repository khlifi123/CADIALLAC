
ADCTEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047d8  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800499c  0800499c  0001499c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049b4  080049b4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080049b4  080049b4  000149b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080049bc  080049bc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049bc  080049bc  000149bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049c0  080049c0  000149c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080049c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  2000000c  080049d0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000288  080049d0  00020288  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c17d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e46  00000000  00000000  0002c1b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be8  00000000  00000000  0002e000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b00  00000000  00000000  0002ebe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022284  00000000  00000000  0002f6e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e0a7  00000000  00000000  0005196c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d714d  00000000  00000000  0005fa13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00136b60  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032a0  00000000  00000000  00136bb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004984 	.word	0x08004984

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08004984 	.word	0x08004984

08000204 <__aeabi_drsub>:
 8000204:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000208:	e002      	b.n	8000210 <__adddf3>
 800020a:	bf00      	nop

0800020c <__aeabi_dsub>:
 800020c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000210 <__adddf3>:
 8000210:	b530      	push	{r4, r5, lr}
 8000212:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000216:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021a:	ea94 0f05 	teq	r4, r5
 800021e:	bf08      	it	eq
 8000220:	ea90 0f02 	teqeq	r0, r2
 8000224:	bf1f      	itttt	ne
 8000226:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000232:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000236:	f000 80e2 	beq.w	80003fe <__adddf3+0x1ee>
 800023a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000242:	bfb8      	it	lt
 8000244:	426d      	neglt	r5, r5
 8000246:	dd0c      	ble.n	8000262 <__adddf3+0x52>
 8000248:	442c      	add	r4, r5
 800024a:	ea80 0202 	eor.w	r2, r0, r2
 800024e:	ea81 0303 	eor.w	r3, r1, r3
 8000252:	ea82 0000 	eor.w	r0, r2, r0
 8000256:	ea83 0101 	eor.w	r1, r3, r1
 800025a:	ea80 0202 	eor.w	r2, r0, r2
 800025e:	ea81 0303 	eor.w	r3, r1, r3
 8000262:	2d36      	cmp	r5, #54	; 0x36
 8000264:	bf88      	it	hi
 8000266:	bd30      	pophi	{r4, r5, pc}
 8000268:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800026c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000270:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000274:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x70>
 800027a:	4240      	negs	r0, r0
 800027c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000280:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000284:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000288:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x84>
 800028e:	4252      	negs	r2, r2
 8000290:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000294:	ea94 0f05 	teq	r4, r5
 8000298:	f000 80a7 	beq.w	80003ea <__adddf3+0x1da>
 800029c:	f1a4 0401 	sub.w	r4, r4, #1
 80002a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a4:	db0d      	blt.n	80002c2 <__adddf3+0xb2>
 80002a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002aa:	fa22 f205 	lsr.w	r2, r2, r5
 80002ae:	1880      	adds	r0, r0, r2
 80002b0:	f141 0100 	adc.w	r1, r1, #0
 80002b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b8:	1880      	adds	r0, r0, r2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	4159      	adcs	r1, r3
 80002c0:	e00e      	b.n	80002e0 <__adddf3+0xd0>
 80002c2:	f1a5 0520 	sub.w	r5, r5, #32
 80002c6:	f10e 0e20 	add.w	lr, lr, #32
 80002ca:	2a01      	cmp	r2, #1
 80002cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d0:	bf28      	it	cs
 80002d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	18c0      	adds	r0, r0, r3
 80002dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e4:	d507      	bpl.n	80002f6 <__adddf3+0xe6>
 80002e6:	f04f 0e00 	mov.w	lr, #0
 80002ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fa:	d31b      	bcc.n	8000334 <__adddf3+0x124>
 80002fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000300:	d30c      	bcc.n	800031c <__adddf3+0x10c>
 8000302:	0849      	lsrs	r1, r1, #1
 8000304:	ea5f 0030 	movs.w	r0, r0, rrx
 8000308:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800030c:	f104 0401 	add.w	r4, r4, #1
 8000310:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000314:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000318:	f080 809a 	bcs.w	8000450 <__adddf3+0x240>
 800031c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000320:	bf08      	it	eq
 8000322:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000326:	f150 0000 	adcs.w	r0, r0, #0
 800032a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032e:	ea41 0105 	orr.w	r1, r1, r5
 8000332:	bd30      	pop	{r4, r5, pc}
 8000334:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000338:	4140      	adcs	r0, r0
 800033a:	eb41 0101 	adc.w	r1, r1, r1
 800033e:	3c01      	subs	r4, #1
 8000340:	bf28      	it	cs
 8000342:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000346:	d2e9      	bcs.n	800031c <__adddf3+0x10c>
 8000348:	f091 0f00 	teq	r1, #0
 800034c:	bf04      	itt	eq
 800034e:	4601      	moveq	r1, r0
 8000350:	2000      	moveq	r0, #0
 8000352:	fab1 f381 	clz	r3, r1
 8000356:	bf08      	it	eq
 8000358:	3320      	addeq	r3, #32
 800035a:	f1a3 030b 	sub.w	r3, r3, #11
 800035e:	f1b3 0220 	subs.w	r2, r3, #32
 8000362:	da0c      	bge.n	800037e <__adddf3+0x16e>
 8000364:	320c      	adds	r2, #12
 8000366:	dd08      	ble.n	800037a <__adddf3+0x16a>
 8000368:	f102 0c14 	add.w	ip, r2, #20
 800036c:	f1c2 020c 	rsb	r2, r2, #12
 8000370:	fa01 f00c 	lsl.w	r0, r1, ip
 8000374:	fa21 f102 	lsr.w	r1, r1, r2
 8000378:	e00c      	b.n	8000394 <__adddf3+0x184>
 800037a:	f102 0214 	add.w	r2, r2, #20
 800037e:	bfd8      	it	le
 8000380:	f1c2 0c20 	rsble	ip, r2, #32
 8000384:	fa01 f102 	lsl.w	r1, r1, r2
 8000388:	fa20 fc0c 	lsr.w	ip, r0, ip
 800038c:	bfdc      	itt	le
 800038e:	ea41 010c 	orrle.w	r1, r1, ip
 8000392:	4090      	lslle	r0, r2
 8000394:	1ae4      	subs	r4, r4, r3
 8000396:	bfa2      	ittt	ge
 8000398:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800039c:	4329      	orrge	r1, r5
 800039e:	bd30      	popge	{r4, r5, pc}
 80003a0:	ea6f 0404 	mvn.w	r4, r4
 80003a4:	3c1f      	subs	r4, #31
 80003a6:	da1c      	bge.n	80003e2 <__adddf3+0x1d2>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc0e      	bgt.n	80003ca <__adddf3+0x1ba>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0220 	rsb	r2, r4, #32
 80003b4:	fa20 f004 	lsr.w	r0, r0, r4
 80003b8:	fa01 f302 	lsl.w	r3, r1, r2
 80003bc:	ea40 0003 	orr.w	r0, r0, r3
 80003c0:	fa21 f304 	lsr.w	r3, r1, r4
 80003c4:	ea45 0103 	orr.w	r1, r5, r3
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	f1c4 040c 	rsb	r4, r4, #12
 80003ce:	f1c4 0220 	rsb	r2, r4, #32
 80003d2:	fa20 f002 	lsr.w	r0, r0, r2
 80003d6:	fa01 f304 	lsl.w	r3, r1, r4
 80003da:	ea40 0003 	orr.w	r0, r0, r3
 80003de:	4629      	mov	r1, r5
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	fa21 f004 	lsr.w	r0, r1, r4
 80003e6:	4629      	mov	r1, r5
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	f094 0f00 	teq	r4, #0
 80003ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f2:	bf06      	itte	eq
 80003f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f8:	3401      	addeq	r4, #1
 80003fa:	3d01      	subne	r5, #1
 80003fc:	e74e      	b.n	800029c <__adddf3+0x8c>
 80003fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000402:	bf18      	it	ne
 8000404:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000408:	d029      	beq.n	800045e <__adddf3+0x24e>
 800040a:	ea94 0f05 	teq	r4, r5
 800040e:	bf08      	it	eq
 8000410:	ea90 0f02 	teqeq	r0, r2
 8000414:	d005      	beq.n	8000422 <__adddf3+0x212>
 8000416:	ea54 0c00 	orrs.w	ip, r4, r0
 800041a:	bf04      	itt	eq
 800041c:	4619      	moveq	r1, r3
 800041e:	4610      	moveq	r0, r2
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea91 0f03 	teq	r1, r3
 8000426:	bf1e      	ittt	ne
 8000428:	2100      	movne	r1, #0
 800042a:	2000      	movne	r0, #0
 800042c:	bd30      	popne	{r4, r5, pc}
 800042e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000432:	d105      	bne.n	8000440 <__adddf3+0x230>
 8000434:	0040      	lsls	r0, r0, #1
 8000436:	4149      	adcs	r1, r1
 8000438:	bf28      	it	cs
 800043a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000444:	bf3c      	itt	cc
 8000446:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044a:	bd30      	popcc	{r4, r5, pc}
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000454:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000458:	f04f 0000 	mov.w	r0, #0
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000462:	bf1a      	itte	ne
 8000464:	4619      	movne	r1, r3
 8000466:	4610      	movne	r0, r2
 8000468:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800046c:	bf1c      	itt	ne
 800046e:	460b      	movne	r3, r1
 8000470:	4602      	movne	r2, r0
 8000472:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000476:	bf06      	itte	eq
 8000478:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800047c:	ea91 0f03 	teqeq	r1, r3
 8000480:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	bf00      	nop

08000488 <__aeabi_ui2d>:
 8000488:	f090 0f00 	teq	r0, #0
 800048c:	bf04      	itt	eq
 800048e:	2100      	moveq	r1, #0
 8000490:	4770      	bxeq	lr
 8000492:	b530      	push	{r4, r5, lr}
 8000494:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000498:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049c:	f04f 0500 	mov.w	r5, #0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e750      	b.n	8000348 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_i2d>:
 80004a8:	f090 0f00 	teq	r0, #0
 80004ac:	bf04      	itt	eq
 80004ae:	2100      	moveq	r1, #0
 80004b0:	4770      	bxeq	lr
 80004b2:	b530      	push	{r4, r5, lr}
 80004b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c0:	bf48      	it	mi
 80004c2:	4240      	negmi	r0, r0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e73e      	b.n	8000348 <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_f2d>:
 80004cc:	0042      	lsls	r2, r0, #1
 80004ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004da:	bf1f      	itttt	ne
 80004dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e8:	4770      	bxne	lr
 80004ea:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ee:	bf08      	it	eq
 80004f0:	4770      	bxeq	lr
 80004f2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004f6:	bf04      	itt	eq
 80004f8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000504:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000508:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800050c:	e71c      	b.n	8000348 <__adddf3+0x138>
 800050e:	bf00      	nop

08000510 <__aeabi_ul2d>:
 8000510:	ea50 0201 	orrs.w	r2, r0, r1
 8000514:	bf08      	it	eq
 8000516:	4770      	bxeq	lr
 8000518:	b530      	push	{r4, r5, lr}
 800051a:	f04f 0500 	mov.w	r5, #0
 800051e:	e00a      	b.n	8000536 <__aeabi_l2d+0x16>

08000520 <__aeabi_l2d>:
 8000520:	ea50 0201 	orrs.w	r2, r0, r1
 8000524:	bf08      	it	eq
 8000526:	4770      	bxeq	lr
 8000528:	b530      	push	{r4, r5, lr}
 800052a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052e:	d502      	bpl.n	8000536 <__aeabi_l2d+0x16>
 8000530:	4240      	negs	r0, r0
 8000532:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000536:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000542:	f43f aed8 	beq.w	80002f6 <__adddf3+0xe6>
 8000546:	f04f 0203 	mov.w	r2, #3
 800054a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054e:	bf18      	it	ne
 8000550:	3203      	addne	r2, #3
 8000552:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000556:	bf18      	it	ne
 8000558:	3203      	addne	r2, #3
 800055a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055e:	f1c2 0320 	rsb	r3, r2, #32
 8000562:	fa00 fc03 	lsl.w	ip, r0, r3
 8000566:	fa20 f002 	lsr.w	r0, r0, r2
 800056a:	fa01 fe03 	lsl.w	lr, r1, r3
 800056e:	ea40 000e 	orr.w	r0, r0, lr
 8000572:	fa21 f102 	lsr.w	r1, r1, r2
 8000576:	4414      	add	r4, r2
 8000578:	e6bd      	b.n	80002f6 <__adddf3+0xe6>
 800057a:	bf00      	nop

0800057c <__aeabi_dmul>:
 800057c:	b570      	push	{r4, r5, r6, lr}
 800057e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000582:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000586:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058a:	bf1d      	ittte	ne
 800058c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000590:	ea94 0f0c 	teqne	r4, ip
 8000594:	ea95 0f0c 	teqne	r5, ip
 8000598:	f000 f8de 	bleq	8000758 <__aeabi_dmul+0x1dc>
 800059c:	442c      	add	r4, r5
 800059e:	ea81 0603 	eor.w	r6, r1, r3
 80005a2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005aa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ae:	bf18      	it	ne
 80005b0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005bc:	d038      	beq.n	8000630 <__aeabi_dmul+0xb4>
 80005be:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c2:	f04f 0500 	mov.w	r5, #0
 80005c6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ca:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ce:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d2:	f04f 0600 	mov.w	r6, #0
 80005d6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005da:	f09c 0f00 	teq	ip, #0
 80005de:	bf18      	it	ne
 80005e0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005ec:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f0:	d204      	bcs.n	80005fc <__aeabi_dmul+0x80>
 80005f2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f6:	416d      	adcs	r5, r5
 80005f8:	eb46 0606 	adc.w	r6, r6, r6
 80005fc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000600:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000604:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000608:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800060c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000610:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000614:	bf88      	it	hi
 8000616:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061a:	d81e      	bhi.n	800065a <__aeabi_dmul+0xde>
 800061c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	bd70      	pop	{r4, r5, r6, pc}
 8000630:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000634:	ea46 0101 	orr.w	r1, r6, r1
 8000638:	ea40 0002 	orr.w	r0, r0, r2
 800063c:	ea81 0103 	eor.w	r1, r1, r3
 8000640:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000644:	bfc2      	ittt	gt
 8000646:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064e:	bd70      	popgt	{r4, r5, r6, pc}
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f04f 0e00 	mov.w	lr, #0
 8000658:	3c01      	subs	r4, #1
 800065a:	f300 80ab 	bgt.w	80007b4 <__aeabi_dmul+0x238>
 800065e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000662:	bfde      	ittt	le
 8000664:	2000      	movle	r0, #0
 8000666:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066a:	bd70      	pople	{r4, r5, r6, pc}
 800066c:	f1c4 0400 	rsb	r4, r4, #0
 8000670:	3c20      	subs	r4, #32
 8000672:	da35      	bge.n	80006e0 <__aeabi_dmul+0x164>
 8000674:	340c      	adds	r4, #12
 8000676:	dc1b      	bgt.n	80006b0 <__aeabi_dmul+0x134>
 8000678:	f104 0414 	add.w	r4, r4, #20
 800067c:	f1c4 0520 	rsb	r5, r4, #32
 8000680:	fa00 f305 	lsl.w	r3, r0, r5
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f205 	lsl.w	r2, r1, r5
 800068c:	ea40 0002 	orr.w	r0, r0, r2
 8000690:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	fa21 f604 	lsr.w	r6, r1, r4
 80006a0:	eb42 0106 	adc.w	r1, r2, r6
 80006a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a8:	bf08      	it	eq
 80006aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ae:	bd70      	pop	{r4, r5, r6, pc}
 80006b0:	f1c4 040c 	rsb	r4, r4, #12
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f304 	lsl.w	r3, r0, r4
 80006bc:	fa20 f005 	lsr.w	r0, r0, r5
 80006c0:	fa01 f204 	lsl.w	r2, r1, r4
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	f141 0100 	adc.w	r1, r1, #0
 80006d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d8:	bf08      	it	eq
 80006da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f205 	lsl.w	r2, r0, r5
 80006e8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006ec:	fa20 f304 	lsr.w	r3, r0, r4
 80006f0:	fa01 f205 	lsl.w	r2, r1, r5
 80006f4:	ea43 0302 	orr.w	r3, r3, r2
 80006f8:	fa21 f004 	lsr.w	r0, r1, r4
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	fa21 f204 	lsr.w	r2, r1, r4
 8000704:	ea20 0002 	bic.w	r0, r0, r2
 8000708:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800070c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000710:	bf08      	it	eq
 8000712:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000716:	bd70      	pop	{r4, r5, r6, pc}
 8000718:	f094 0f00 	teq	r4, #0
 800071c:	d10f      	bne.n	800073e <__aeabi_dmul+0x1c2>
 800071e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000722:	0040      	lsls	r0, r0, #1
 8000724:	eb41 0101 	adc.w	r1, r1, r1
 8000728:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800072c:	bf08      	it	eq
 800072e:	3c01      	subeq	r4, #1
 8000730:	d0f7      	beq.n	8000722 <__aeabi_dmul+0x1a6>
 8000732:	ea41 0106 	orr.w	r1, r1, r6
 8000736:	f095 0f00 	teq	r5, #0
 800073a:	bf18      	it	ne
 800073c:	4770      	bxne	lr
 800073e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000742:	0052      	lsls	r2, r2, #1
 8000744:	eb43 0303 	adc.w	r3, r3, r3
 8000748:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800074c:	bf08      	it	eq
 800074e:	3d01      	subeq	r5, #1
 8000750:	d0f7      	beq.n	8000742 <__aeabi_dmul+0x1c6>
 8000752:	ea43 0306 	orr.w	r3, r3, r6
 8000756:	4770      	bx	lr
 8000758:	ea94 0f0c 	teq	r4, ip
 800075c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000760:	bf18      	it	ne
 8000762:	ea95 0f0c 	teqne	r5, ip
 8000766:	d00c      	beq.n	8000782 <__aeabi_dmul+0x206>
 8000768:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076c:	bf18      	it	ne
 800076e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000772:	d1d1      	bne.n	8000718 <__aeabi_dmul+0x19c>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000786:	bf06      	itte	eq
 8000788:	4610      	moveq	r0, r2
 800078a:	4619      	moveq	r1, r3
 800078c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000790:	d019      	beq.n	80007c6 <__aeabi_dmul+0x24a>
 8000792:	ea94 0f0c 	teq	r4, ip
 8000796:	d102      	bne.n	800079e <__aeabi_dmul+0x222>
 8000798:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800079c:	d113      	bne.n	80007c6 <__aeabi_dmul+0x24a>
 800079e:	ea95 0f0c 	teq	r5, ip
 80007a2:	d105      	bne.n	80007b0 <__aeabi_dmul+0x234>
 80007a4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a8:	bf1c      	itt	ne
 80007aa:	4610      	movne	r0, r2
 80007ac:	4619      	movne	r1, r3
 80007ae:	d10a      	bne.n	80007c6 <__aeabi_dmul+0x24a>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c0:	f04f 0000 	mov.w	r0, #0
 80007c4:	bd70      	pop	{r4, r5, r6, pc}
 80007c6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ca:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ce:	bd70      	pop	{r4, r5, r6, pc}

080007d0 <__aeabi_ddiv>:
 80007d0:	b570      	push	{r4, r5, r6, lr}
 80007d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007de:	bf1d      	ittte	ne
 80007e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e4:	ea94 0f0c 	teqne	r4, ip
 80007e8:	ea95 0f0c 	teqne	r5, ip
 80007ec:	f000 f8a7 	bleq	800093e <__aeabi_ddiv+0x16e>
 80007f0:	eba4 0405 	sub.w	r4, r4, r5
 80007f4:	ea81 0e03 	eor.w	lr, r1, r3
 80007f8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000800:	f000 8088 	beq.w	8000914 <__aeabi_ddiv+0x144>
 8000804:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000808:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800080c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000810:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000814:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000818:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800081c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000820:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000824:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000828:	429d      	cmp	r5, r3
 800082a:	bf08      	it	eq
 800082c:	4296      	cmpeq	r6, r2
 800082e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000832:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000836:	d202      	bcs.n	800083e <__aeabi_ddiv+0x6e>
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	1ab6      	subs	r6, r6, r2
 8000840:	eb65 0503 	sbc.w	r5, r5, r3
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800084e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 000c 	orrcs.w	r0, r0, ip
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000894:	085b      	lsrs	r3, r3, #1
 8000896:	ea4f 0232 	mov.w	r2, r2, rrx
 800089a:	ebb6 0e02 	subs.w	lr, r6, r2
 800089e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a2:	bf22      	ittt	cs
 80008a4:	1ab6      	subcs	r6, r6, r2
 80008a6:	4675      	movcs	r5, lr
 80008a8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008ac:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b0:	d018      	beq.n	80008e4 <__aeabi_ddiv+0x114>
 80008b2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ba:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008be:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ca:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ce:	d1c0      	bne.n	8000852 <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	d10b      	bne.n	80008ee <__aeabi_ddiv+0x11e>
 80008d6:	ea41 0100 	orr.w	r1, r1, r0
 80008da:	f04f 0000 	mov.w	r0, #0
 80008de:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e2:	e7b6      	b.n	8000852 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	bf04      	itt	eq
 80008ea:	4301      	orreq	r1, r0
 80008ec:	2000      	moveq	r0, #0
 80008ee:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f2:	bf88      	it	hi
 80008f4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f8:	f63f aeaf 	bhi.w	800065a <__aeabi_dmul+0xde>
 80008fc:	ebb5 0c03 	subs.w	ip, r5, r3
 8000900:	bf04      	itt	eq
 8000902:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000906:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090a:	f150 0000 	adcs.w	r0, r0, #0
 800090e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000912:	bd70      	pop	{r4, r5, r6, pc}
 8000914:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000918:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800091c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000920:	bfc2      	ittt	gt
 8000922:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000926:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092a:	bd70      	popgt	{r4, r5, r6, pc}
 800092c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000930:	f04f 0e00 	mov.w	lr, #0
 8000934:	3c01      	subs	r4, #1
 8000936:	e690      	b.n	800065a <__aeabi_dmul+0xde>
 8000938:	ea45 0e06 	orr.w	lr, r5, r6
 800093c:	e68d      	b.n	800065a <__aeabi_dmul+0xde>
 800093e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000942:	ea94 0f0c 	teq	r4, ip
 8000946:	bf08      	it	eq
 8000948:	ea95 0f0c 	teqeq	r5, ip
 800094c:	f43f af3b 	beq.w	80007c6 <__aeabi_dmul+0x24a>
 8000950:	ea94 0f0c 	teq	r4, ip
 8000954:	d10a      	bne.n	800096c <__aeabi_ddiv+0x19c>
 8000956:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095a:	f47f af34 	bne.w	80007c6 <__aeabi_dmul+0x24a>
 800095e:	ea95 0f0c 	teq	r5, ip
 8000962:	f47f af25 	bne.w	80007b0 <__aeabi_dmul+0x234>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e72c      	b.n	80007c6 <__aeabi_dmul+0x24a>
 800096c:	ea95 0f0c 	teq	r5, ip
 8000970:	d106      	bne.n	8000980 <__aeabi_ddiv+0x1b0>
 8000972:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000976:	f43f aefd 	beq.w	8000774 <__aeabi_dmul+0x1f8>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e722      	b.n	80007c6 <__aeabi_dmul+0x24a>
 8000980:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000984:	bf18      	it	ne
 8000986:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098a:	f47f aec5 	bne.w	8000718 <__aeabi_dmul+0x19c>
 800098e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000992:	f47f af0d 	bne.w	80007b0 <__aeabi_dmul+0x234>
 8000996:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099a:	f47f aeeb 	bne.w	8000774 <__aeabi_dmul+0x1f8>
 800099e:	e712      	b.n	80007c6 <__aeabi_dmul+0x24a>

080009a0 <__aeabi_d2uiz>:
 80009a0:	004a      	lsls	r2, r1, #1
 80009a2:	d211      	bcs.n	80009c8 <__aeabi_d2uiz+0x28>
 80009a4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009a8:	d211      	bcs.n	80009ce <__aeabi_d2uiz+0x2e>
 80009aa:	d50d      	bpl.n	80009c8 <__aeabi_d2uiz+0x28>
 80009ac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009b0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b4:	d40e      	bmi.n	80009d4 <__aeabi_d2uiz+0x34>
 80009b6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009be:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009c2:	fa23 f002 	lsr.w	r0, r3, r2
 80009c6:	4770      	bx	lr
 80009c8:	f04f 0000 	mov.w	r0, #0
 80009cc:	4770      	bx	lr
 80009ce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009d2:	d102      	bne.n	80009da <__aeabi_d2uiz+0x3a>
 80009d4:	f04f 30ff 	mov.w	r0, #4294967295
 80009d8:	4770      	bx	lr
 80009da:	f04f 0000 	mov.w	r0, #0
 80009de:	4770      	bx	lr

080009e0 <__aeabi_uldivmod>:
 80009e0:	b953      	cbnz	r3, 80009f8 <__aeabi_uldivmod+0x18>
 80009e2:	b94a      	cbnz	r2, 80009f8 <__aeabi_uldivmod+0x18>
 80009e4:	2900      	cmp	r1, #0
 80009e6:	bf08      	it	eq
 80009e8:	2800      	cmpeq	r0, #0
 80009ea:	bf1c      	itt	ne
 80009ec:	f04f 31ff 	movne.w	r1, #4294967295
 80009f0:	f04f 30ff 	movne.w	r0, #4294967295
 80009f4:	f000 b974 	b.w	8000ce0 <__aeabi_idiv0>
 80009f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80009fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a00:	f000 f806 	bl	8000a10 <__udivmoddi4>
 8000a04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a0c:	b004      	add	sp, #16
 8000a0e:	4770      	bx	lr

08000a10 <__udivmoddi4>:
 8000a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a14:	9d08      	ldr	r5, [sp, #32]
 8000a16:	4604      	mov	r4, r0
 8000a18:	468e      	mov	lr, r1
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d14d      	bne.n	8000aba <__udivmoddi4+0xaa>
 8000a1e:	428a      	cmp	r2, r1
 8000a20:	4694      	mov	ip, r2
 8000a22:	d969      	bls.n	8000af8 <__udivmoddi4+0xe8>
 8000a24:	fab2 f282 	clz	r2, r2
 8000a28:	b152      	cbz	r2, 8000a40 <__udivmoddi4+0x30>
 8000a2a:	fa01 f302 	lsl.w	r3, r1, r2
 8000a2e:	f1c2 0120 	rsb	r1, r2, #32
 8000a32:	fa20 f101 	lsr.w	r1, r0, r1
 8000a36:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a3a:	ea41 0e03 	orr.w	lr, r1, r3
 8000a3e:	4094      	lsls	r4, r2
 8000a40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a44:	0c21      	lsrs	r1, r4, #16
 8000a46:	fbbe f6f8 	udiv	r6, lr, r8
 8000a4a:	fa1f f78c 	uxth.w	r7, ip
 8000a4e:	fb08 e316 	mls	r3, r8, r6, lr
 8000a52:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a56:	fb06 f107 	mul.w	r1, r6, r7
 8000a5a:	4299      	cmp	r1, r3
 8000a5c:	d90a      	bls.n	8000a74 <__udivmoddi4+0x64>
 8000a5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000a62:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a66:	f080 811f 	bcs.w	8000ca8 <__udivmoddi4+0x298>
 8000a6a:	4299      	cmp	r1, r3
 8000a6c:	f240 811c 	bls.w	8000ca8 <__udivmoddi4+0x298>
 8000a70:	3e02      	subs	r6, #2
 8000a72:	4463      	add	r3, ip
 8000a74:	1a5b      	subs	r3, r3, r1
 8000a76:	b2a4      	uxth	r4, r4
 8000a78:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a7c:	fb08 3310 	mls	r3, r8, r0, r3
 8000a80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a84:	fb00 f707 	mul.w	r7, r0, r7
 8000a88:	42a7      	cmp	r7, r4
 8000a8a:	d90a      	bls.n	8000aa2 <__udivmoddi4+0x92>
 8000a8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a90:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a94:	f080 810a 	bcs.w	8000cac <__udivmoddi4+0x29c>
 8000a98:	42a7      	cmp	r7, r4
 8000a9a:	f240 8107 	bls.w	8000cac <__udivmoddi4+0x29c>
 8000a9e:	4464      	add	r4, ip
 8000aa0:	3802      	subs	r0, #2
 8000aa2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000aa6:	1be4      	subs	r4, r4, r7
 8000aa8:	2600      	movs	r6, #0
 8000aaa:	b11d      	cbz	r5, 8000ab4 <__udivmoddi4+0xa4>
 8000aac:	40d4      	lsrs	r4, r2
 8000aae:	2300      	movs	r3, #0
 8000ab0:	e9c5 4300 	strd	r4, r3, [r5]
 8000ab4:	4631      	mov	r1, r6
 8000ab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aba:	428b      	cmp	r3, r1
 8000abc:	d909      	bls.n	8000ad2 <__udivmoddi4+0xc2>
 8000abe:	2d00      	cmp	r5, #0
 8000ac0:	f000 80ef 	beq.w	8000ca2 <__udivmoddi4+0x292>
 8000ac4:	2600      	movs	r6, #0
 8000ac6:	e9c5 0100 	strd	r0, r1, [r5]
 8000aca:	4630      	mov	r0, r6
 8000acc:	4631      	mov	r1, r6
 8000ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ad2:	fab3 f683 	clz	r6, r3
 8000ad6:	2e00      	cmp	r6, #0
 8000ad8:	d14a      	bne.n	8000b70 <__udivmoddi4+0x160>
 8000ada:	428b      	cmp	r3, r1
 8000adc:	d302      	bcc.n	8000ae4 <__udivmoddi4+0xd4>
 8000ade:	4282      	cmp	r2, r0
 8000ae0:	f200 80f9 	bhi.w	8000cd6 <__udivmoddi4+0x2c6>
 8000ae4:	1a84      	subs	r4, r0, r2
 8000ae6:	eb61 0303 	sbc.w	r3, r1, r3
 8000aea:	2001      	movs	r0, #1
 8000aec:	469e      	mov	lr, r3
 8000aee:	2d00      	cmp	r5, #0
 8000af0:	d0e0      	beq.n	8000ab4 <__udivmoddi4+0xa4>
 8000af2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000af6:	e7dd      	b.n	8000ab4 <__udivmoddi4+0xa4>
 8000af8:	b902      	cbnz	r2, 8000afc <__udivmoddi4+0xec>
 8000afa:	deff      	udf	#255	; 0xff
 8000afc:	fab2 f282 	clz	r2, r2
 8000b00:	2a00      	cmp	r2, #0
 8000b02:	f040 8092 	bne.w	8000c2a <__udivmoddi4+0x21a>
 8000b06:	eba1 010c 	sub.w	r1, r1, ip
 8000b0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b0e:	fa1f fe8c 	uxth.w	lr, ip
 8000b12:	2601      	movs	r6, #1
 8000b14:	0c20      	lsrs	r0, r4, #16
 8000b16:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b1a:	fb07 1113 	mls	r1, r7, r3, r1
 8000b1e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b22:	fb0e f003 	mul.w	r0, lr, r3
 8000b26:	4288      	cmp	r0, r1
 8000b28:	d908      	bls.n	8000b3c <__udivmoddi4+0x12c>
 8000b2a:	eb1c 0101 	adds.w	r1, ip, r1
 8000b2e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b32:	d202      	bcs.n	8000b3a <__udivmoddi4+0x12a>
 8000b34:	4288      	cmp	r0, r1
 8000b36:	f200 80cb 	bhi.w	8000cd0 <__udivmoddi4+0x2c0>
 8000b3a:	4643      	mov	r3, r8
 8000b3c:	1a09      	subs	r1, r1, r0
 8000b3e:	b2a4      	uxth	r4, r4
 8000b40:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b44:	fb07 1110 	mls	r1, r7, r0, r1
 8000b48:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b4c:	fb0e fe00 	mul.w	lr, lr, r0
 8000b50:	45a6      	cmp	lr, r4
 8000b52:	d908      	bls.n	8000b66 <__udivmoddi4+0x156>
 8000b54:	eb1c 0404 	adds.w	r4, ip, r4
 8000b58:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b5c:	d202      	bcs.n	8000b64 <__udivmoddi4+0x154>
 8000b5e:	45a6      	cmp	lr, r4
 8000b60:	f200 80bb 	bhi.w	8000cda <__udivmoddi4+0x2ca>
 8000b64:	4608      	mov	r0, r1
 8000b66:	eba4 040e 	sub.w	r4, r4, lr
 8000b6a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b6e:	e79c      	b.n	8000aaa <__udivmoddi4+0x9a>
 8000b70:	f1c6 0720 	rsb	r7, r6, #32
 8000b74:	40b3      	lsls	r3, r6
 8000b76:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b7a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b7e:	fa20 f407 	lsr.w	r4, r0, r7
 8000b82:	fa01 f306 	lsl.w	r3, r1, r6
 8000b86:	431c      	orrs	r4, r3
 8000b88:	40f9      	lsrs	r1, r7
 8000b8a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b8e:	fa00 f306 	lsl.w	r3, r0, r6
 8000b92:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b96:	0c20      	lsrs	r0, r4, #16
 8000b98:	fa1f fe8c 	uxth.w	lr, ip
 8000b9c:	fb09 1118 	mls	r1, r9, r8, r1
 8000ba0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ba4:	fb08 f00e 	mul.w	r0, r8, lr
 8000ba8:	4288      	cmp	r0, r1
 8000baa:	fa02 f206 	lsl.w	r2, r2, r6
 8000bae:	d90b      	bls.n	8000bc8 <__udivmoddi4+0x1b8>
 8000bb0:	eb1c 0101 	adds.w	r1, ip, r1
 8000bb4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bb8:	f080 8088 	bcs.w	8000ccc <__udivmoddi4+0x2bc>
 8000bbc:	4288      	cmp	r0, r1
 8000bbe:	f240 8085 	bls.w	8000ccc <__udivmoddi4+0x2bc>
 8000bc2:	f1a8 0802 	sub.w	r8, r8, #2
 8000bc6:	4461      	add	r1, ip
 8000bc8:	1a09      	subs	r1, r1, r0
 8000bca:	b2a4      	uxth	r4, r4
 8000bcc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000bd0:	fb09 1110 	mls	r1, r9, r0, r1
 8000bd4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000bd8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bdc:	458e      	cmp	lr, r1
 8000bde:	d908      	bls.n	8000bf2 <__udivmoddi4+0x1e2>
 8000be0:	eb1c 0101 	adds.w	r1, ip, r1
 8000be4:	f100 34ff 	add.w	r4, r0, #4294967295
 8000be8:	d26c      	bcs.n	8000cc4 <__udivmoddi4+0x2b4>
 8000bea:	458e      	cmp	lr, r1
 8000bec:	d96a      	bls.n	8000cc4 <__udivmoddi4+0x2b4>
 8000bee:	3802      	subs	r0, #2
 8000bf0:	4461      	add	r1, ip
 8000bf2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bf6:	fba0 9402 	umull	r9, r4, r0, r2
 8000bfa:	eba1 010e 	sub.w	r1, r1, lr
 8000bfe:	42a1      	cmp	r1, r4
 8000c00:	46c8      	mov	r8, r9
 8000c02:	46a6      	mov	lr, r4
 8000c04:	d356      	bcc.n	8000cb4 <__udivmoddi4+0x2a4>
 8000c06:	d053      	beq.n	8000cb0 <__udivmoddi4+0x2a0>
 8000c08:	b15d      	cbz	r5, 8000c22 <__udivmoddi4+0x212>
 8000c0a:	ebb3 0208 	subs.w	r2, r3, r8
 8000c0e:	eb61 010e 	sbc.w	r1, r1, lr
 8000c12:	fa01 f707 	lsl.w	r7, r1, r7
 8000c16:	fa22 f306 	lsr.w	r3, r2, r6
 8000c1a:	40f1      	lsrs	r1, r6
 8000c1c:	431f      	orrs	r7, r3
 8000c1e:	e9c5 7100 	strd	r7, r1, [r5]
 8000c22:	2600      	movs	r6, #0
 8000c24:	4631      	mov	r1, r6
 8000c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2a:	f1c2 0320 	rsb	r3, r2, #32
 8000c2e:	40d8      	lsrs	r0, r3
 8000c30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c34:	fa21 f303 	lsr.w	r3, r1, r3
 8000c38:	4091      	lsls	r1, r2
 8000c3a:	4301      	orrs	r1, r0
 8000c3c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c40:	fa1f fe8c 	uxth.w	lr, ip
 8000c44:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c48:	fb07 3610 	mls	r6, r7, r0, r3
 8000c4c:	0c0b      	lsrs	r3, r1, #16
 8000c4e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c52:	fb00 f60e 	mul.w	r6, r0, lr
 8000c56:	429e      	cmp	r6, r3
 8000c58:	fa04 f402 	lsl.w	r4, r4, r2
 8000c5c:	d908      	bls.n	8000c70 <__udivmoddi4+0x260>
 8000c5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c62:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c66:	d22f      	bcs.n	8000cc8 <__udivmoddi4+0x2b8>
 8000c68:	429e      	cmp	r6, r3
 8000c6a:	d92d      	bls.n	8000cc8 <__udivmoddi4+0x2b8>
 8000c6c:	3802      	subs	r0, #2
 8000c6e:	4463      	add	r3, ip
 8000c70:	1b9b      	subs	r3, r3, r6
 8000c72:	b289      	uxth	r1, r1
 8000c74:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c78:	fb07 3316 	mls	r3, r7, r6, r3
 8000c7c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c80:	fb06 f30e 	mul.w	r3, r6, lr
 8000c84:	428b      	cmp	r3, r1
 8000c86:	d908      	bls.n	8000c9a <__udivmoddi4+0x28a>
 8000c88:	eb1c 0101 	adds.w	r1, ip, r1
 8000c8c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c90:	d216      	bcs.n	8000cc0 <__udivmoddi4+0x2b0>
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d914      	bls.n	8000cc0 <__udivmoddi4+0x2b0>
 8000c96:	3e02      	subs	r6, #2
 8000c98:	4461      	add	r1, ip
 8000c9a:	1ac9      	subs	r1, r1, r3
 8000c9c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ca0:	e738      	b.n	8000b14 <__udivmoddi4+0x104>
 8000ca2:	462e      	mov	r6, r5
 8000ca4:	4628      	mov	r0, r5
 8000ca6:	e705      	b.n	8000ab4 <__udivmoddi4+0xa4>
 8000ca8:	4606      	mov	r6, r0
 8000caa:	e6e3      	b.n	8000a74 <__udivmoddi4+0x64>
 8000cac:	4618      	mov	r0, r3
 8000cae:	e6f8      	b.n	8000aa2 <__udivmoddi4+0x92>
 8000cb0:	454b      	cmp	r3, r9
 8000cb2:	d2a9      	bcs.n	8000c08 <__udivmoddi4+0x1f8>
 8000cb4:	ebb9 0802 	subs.w	r8, r9, r2
 8000cb8:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000cbc:	3801      	subs	r0, #1
 8000cbe:	e7a3      	b.n	8000c08 <__udivmoddi4+0x1f8>
 8000cc0:	4646      	mov	r6, r8
 8000cc2:	e7ea      	b.n	8000c9a <__udivmoddi4+0x28a>
 8000cc4:	4620      	mov	r0, r4
 8000cc6:	e794      	b.n	8000bf2 <__udivmoddi4+0x1e2>
 8000cc8:	4640      	mov	r0, r8
 8000cca:	e7d1      	b.n	8000c70 <__udivmoddi4+0x260>
 8000ccc:	46d0      	mov	r8, sl
 8000cce:	e77b      	b.n	8000bc8 <__udivmoddi4+0x1b8>
 8000cd0:	3b02      	subs	r3, #2
 8000cd2:	4461      	add	r1, ip
 8000cd4:	e732      	b.n	8000b3c <__udivmoddi4+0x12c>
 8000cd6:	4630      	mov	r0, r6
 8000cd8:	e709      	b.n	8000aee <__udivmoddi4+0xde>
 8000cda:	4464      	add	r4, ip
 8000cdc:	3802      	subs	r0, #2
 8000cde:	e742      	b.n	8000b66 <__udivmoddi4+0x156>

08000ce0 <__aeabi_idiv0>:
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop

08000ce4 <HAL_ADC_ConvCpltCallback>:
static void MX_ADC3_Init(void);
static void MX_ADC1_Init(void);
static void MX_TIM1_Init(void);
/* USER CODE BEGIN PFP */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC3)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a1d      	ldr	r2, [pc, #116]	; (8000d68 <HAL_ADC_ConvCpltCallback+0x84>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d121      	bne.n	8000d3a <HAL_ADC_ConvCpltCallback+0x56>
    {
        // Traitement pour ADC3
        courant1 = HAL_ADC_GetValue(&hadc3) * 20.5 / 4096;
 8000cf6:	481d      	ldr	r0, [pc, #116]	; (8000d6c <HAL_ADC_ConvCpltCallback+0x88>)
 8000cf8:	f001 f854 	bl	8001da4 <HAL_ADC_GetValue>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f7ff fbc2 	bl	8000488 <__aeabi_ui2d>
 8000d04:	f04f 0200 	mov.w	r2, #0
 8000d08:	4b19      	ldr	r3, [pc, #100]	; (8000d70 <HAL_ADC_ConvCpltCallback+0x8c>)
 8000d0a:	f7ff fc37 	bl	800057c <__aeabi_dmul>
 8000d0e:	4602      	mov	r2, r0
 8000d10:	460b      	mov	r3, r1
 8000d12:	4610      	mov	r0, r2
 8000d14:	4619      	mov	r1, r3
 8000d16:	f04f 0200 	mov.w	r2, #0
 8000d1a:	4b16      	ldr	r3, [pc, #88]	; (8000d74 <HAL_ADC_ConvCpltCallback+0x90>)
 8000d1c:	f7ff fd58 	bl	80007d0 <__aeabi_ddiv>
 8000d20:	4602      	mov	r2, r0
 8000d22:	460b      	mov	r3, r1
 8000d24:	4610      	mov	r0, r2
 8000d26:	4619      	mov	r1, r3
 8000d28:	f7ff fe3a 	bl	80009a0 <__aeabi_d2uiz>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	4a12      	ldr	r2, [pc, #72]	; (8000d78 <HAL_ADC_ConvCpltCallback+0x94>)
 8000d30:	6013      	str	r3, [r2, #0]
        // Redémarrer la conversion pour ADC3
        HAL_ADC_Start_IT(&hadc3);
 8000d32:	480e      	ldr	r0, [pc, #56]	; (8000d6c <HAL_ADC_ConvCpltCallback+0x88>)
 8000d34:	f000 fe48 	bl	80019c8 <HAL_ADC_Start_IT>
        {
            // Traitement pour ADC2
            // Redémarrer la conversion pour ADC2
           // HAL_ADC_Start_IT(&hadc1);
        }
}
 8000d38:	e011      	b.n	8000d5e <HAL_ADC_ConvCpltCallback+0x7a>
    else if (hadc->Instance == ADC2)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a0f      	ldr	r2, [pc, #60]	; (8000d7c <HAL_ADC_ConvCpltCallback+0x98>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d10c      	bne.n	8000d5e <HAL_ADC_ConvCpltCallback+0x7a>
     r=buffer2[0]/35;
 8000d44:	4b0e      	ldr	r3, [pc, #56]	; (8000d80 <HAL_ADC_ConvCpltCallback+0x9c>)
 8000d46:	881a      	ldrh	r2, [r3, #0]
 8000d48:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <HAL_ADC_ConvCpltCallback+0xa0>)
 8000d4a:	fba3 1302 	umull	r1, r3, r3, r2
 8000d4e:	1ad2      	subs	r2, r2, r3
 8000d50:	0852      	lsrs	r2, r2, #1
 8000d52:	4413      	add	r3, r2
 8000d54:	095b      	lsrs	r3, r3, #5
 8000d56:	b29b      	uxth	r3, r3
 8000d58:	461a      	mov	r2, r3
 8000d5a:	4b0b      	ldr	r3, [pc, #44]	; (8000d88 <HAL_ADC_ConvCpltCallback+0xa4>)
 8000d5c:	601a      	str	r2, [r3, #0]
}
 8000d5e:	bf00      	nop
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40012200 	.word	0x40012200
 8000d6c:	200000d4 	.word	0x200000d4
 8000d70:	40348000 	.word	0x40348000
 8000d74:	40b00000 	.word	0x40b00000
 8000d78:	20000028 	.word	0x20000028
 8000d7c:	40012100 	.word	0x40012100
 8000d80:	20000034 	.word	0x20000034
 8000d84:	d41d41d5 	.word	0xd41d41d5
 8000d88:	20000040 	.word	0x20000040

08000d8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d90:	f000 fd64 	bl	800185c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d94:	f000 f836 	bl	8000e04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d98:	f000 fabc 	bl	8001314 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d9c:	f000 fa8a 	bl	80012b4 <MX_DMA_Init>
  MX_ADC2_Init();
 8000da0:	f000 f924 	bl	8000fec <MX_ADC2_Init>
  MX_ADC3_Init();
 8000da4:	f000 f994 	bl	80010d0 <MX_ADC3_Init>
  MX_ADC1_Init();
 8000da8:	f000 f89e 	bl	8000ee8 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000dac:	f000 f9e2 	bl	8001174 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc2,(uint32_t *)&buffer2, 3);
 8000db0:	2203      	movs	r2, #3
 8000db2:	490b      	ldr	r1, [pc, #44]	; (8000de0 <main+0x54>)
 8000db4:	480b      	ldr	r0, [pc, #44]	; (8000de4 <main+0x58>)
 8000db6:	f000 fee5 	bl	8001b84 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc3,(uint32_t *)&buffer3, 1);
 8000dba:	2201      	movs	r2, #1
 8000dbc:	490a      	ldr	r1, [pc, #40]	; (8000de8 <main+0x5c>)
 8000dbe:	480b      	ldr	r0, [pc, #44]	; (8000dec <main+0x60>)
 8000dc0:	f000 fee0 	bl	8001b84 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc1,(uint32_t *)&buffer1, 4);
 8000dc4:	2204      	movs	r2, #4
 8000dc6:	490a      	ldr	r1, [pc, #40]	; (8000df0 <main+0x64>)
 8000dc8:	480a      	ldr	r0, [pc, #40]	; (8000df4 <main+0x68>)
 8000dca:	f000 fedb 	bl	8001b84 <HAL_ADC_Start_DMA>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);//MT1
 8000dce:	2100      	movs	r1, #0
 8000dd0:	4809      	ldr	r0, [pc, #36]	; (8000df8 <main+0x6c>)
 8000dd2:	f002 ff7b 	bl	8003ccc <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
TIM1->CCR1=r;
 8000dd6:	4b09      	ldr	r3, [pc, #36]	; (8000dfc <main+0x70>)
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	4b09      	ldr	r3, [pc, #36]	; (8000e00 <main+0x74>)
 8000ddc:	635a      	str	r2, [r3, #52]	; 0x34
 8000dde:	e7fa      	b.n	8000dd6 <main+0x4a>
 8000de0:	20000034 	.word	0x20000034
 8000de4:	2000008c 	.word	0x2000008c
 8000de8:	2000003c 	.word	0x2000003c
 8000dec:	200000d4 	.word	0x200000d4
 8000df0:	2000002c 	.word	0x2000002c
 8000df4:	20000044 	.word	0x20000044
 8000df8:	2000023c 	.word	0x2000023c
 8000dfc:	20000040 	.word	0x20000040
 8000e00:	40010000 	.word	0x40010000

08000e04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b094      	sub	sp, #80	; 0x50
 8000e08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e0a:	f107 031c 	add.w	r3, r7, #28
 8000e0e:	2234      	movs	r2, #52	; 0x34
 8000e10:	2100      	movs	r1, #0
 8000e12:	4618      	mov	r0, r3
 8000e14:	f003 fdae 	bl	8004974 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e18:	f107 0308 	add.w	r3, r7, #8
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]
 8000e26:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e28:	2300      	movs	r3, #0
 8000e2a:	607b      	str	r3, [r7, #4]
 8000e2c:	4b2c      	ldr	r3, [pc, #176]	; (8000ee0 <SystemClock_Config+0xdc>)
 8000e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e30:	4a2b      	ldr	r2, [pc, #172]	; (8000ee0 <SystemClock_Config+0xdc>)
 8000e32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e36:	6413      	str	r3, [r2, #64]	; 0x40
 8000e38:	4b29      	ldr	r3, [pc, #164]	; (8000ee0 <SystemClock_Config+0xdc>)
 8000e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e40:	607b      	str	r3, [r7, #4]
 8000e42:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e44:	2300      	movs	r3, #0
 8000e46:	603b      	str	r3, [r7, #0]
 8000e48:	4b26      	ldr	r3, [pc, #152]	; (8000ee4 <SystemClock_Config+0xe0>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a25      	ldr	r2, [pc, #148]	; (8000ee4 <SystemClock_Config+0xe0>)
 8000e4e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e52:	6013      	str	r3, [r2, #0]
 8000e54:	4b23      	ldr	r3, [pc, #140]	; (8000ee4 <SystemClock_Config+0xe0>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e5c:	603b      	str	r3, [r7, #0]
 8000e5e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e60:	2302      	movs	r3, #2
 8000e62:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e64:	2301      	movs	r3, #1
 8000e66:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e68:	2310      	movs	r3, #16
 8000e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e70:	2300      	movs	r3, #0
 8000e72:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e74:	2308      	movs	r3, #8
 8000e76:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000e78:	23b4      	movs	r3, #180	; 0xb4
 8000e7a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e80:	2302      	movs	r3, #2
 8000e82:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e84:	2302      	movs	r3, #2
 8000e86:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e88:	f107 031c 	add.w	r3, r7, #28
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f002 fbd7 	bl	8003640 <HAL_RCC_OscConfig>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000e98:	f000 fa72 	bl	8001380 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000e9c:	f002 f86a 	bl	8002f74 <HAL_PWREx_EnableOverDrive>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000ea6:	f000 fa6b 	bl	8001380 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eaa:	230f      	movs	r3, #15
 8000eac:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000eb6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000eba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ebc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ec0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ec2:	f107 0308 	add.w	r3, r7, #8
 8000ec6:	2105      	movs	r1, #5
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f002 f8a3 	bl	8003014 <HAL_RCC_ClockConfig>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000ed4:	f000 fa54 	bl	8001380 <Error_Handler>
  }
}
 8000ed8:	bf00      	nop
 8000eda:	3750      	adds	r7, #80	; 0x50
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	40023800 	.word	0x40023800
 8000ee4:	40007000 	.word	0x40007000

08000ee8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000eee:	463b      	mov	r3, r7
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000efa:	4b39      	ldr	r3, [pc, #228]	; (8000fe0 <MX_ADC1_Init+0xf8>)
 8000efc:	4a39      	ldr	r2, [pc, #228]	; (8000fe4 <MX_ADC1_Init+0xfc>)
 8000efe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f00:	4b37      	ldr	r3, [pc, #220]	; (8000fe0 <MX_ADC1_Init+0xf8>)
 8000f02:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f06:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f08:	4b35      	ldr	r3, [pc, #212]	; (8000fe0 <MX_ADC1_Init+0xf8>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000f0e:	4b34      	ldr	r3, [pc, #208]	; (8000fe0 <MX_ADC1_Init+0xf8>)
 8000f10:	2201      	movs	r2, #1
 8000f12:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f14:	4b32      	ldr	r3, [pc, #200]	; (8000fe0 <MX_ADC1_Init+0xf8>)
 8000f16:	2201      	movs	r2, #1
 8000f18:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f1a:	4b31      	ldr	r3, [pc, #196]	; (8000fe0 <MX_ADC1_Init+0xf8>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f22:	4b2f      	ldr	r3, [pc, #188]	; (8000fe0 <MX_ADC1_Init+0xf8>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f28:	4b2d      	ldr	r3, [pc, #180]	; (8000fe0 <MX_ADC1_Init+0xf8>)
 8000f2a:	4a2f      	ldr	r2, [pc, #188]	; (8000fe8 <MX_ADC1_Init+0x100>)
 8000f2c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f2e:	4b2c      	ldr	r3, [pc, #176]	; (8000fe0 <MX_ADC1_Init+0xf8>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000f34:	4b2a      	ldr	r3, [pc, #168]	; (8000fe0 <MX_ADC1_Init+0xf8>)
 8000f36:	2204      	movs	r2, #4
 8000f38:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f3a:	4b29      	ldr	r3, [pc, #164]	; (8000fe0 <MX_ADC1_Init+0xf8>)
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f42:	4b27      	ldr	r3, [pc, #156]	; (8000fe0 <MX_ADC1_Init+0xf8>)
 8000f44:	2201      	movs	r2, #1
 8000f46:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f48:	4825      	ldr	r0, [pc, #148]	; (8000fe0 <MX_ADC1_Init+0xf8>)
 8000f4a:	f000 fcf9 	bl	8001940 <HAL_ADC_Init>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000f54:	f000 fa14 	bl	8001380 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000f58:	2304      	movs	r3, #4
 8000f5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000f60:	2302      	movs	r3, #2
 8000f62:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f64:	463b      	mov	r3, r7
 8000f66:	4619      	mov	r1, r3
 8000f68:	481d      	ldr	r0, [pc, #116]	; (8000fe0 <MX_ADC1_Init+0xf8>)
 8000f6a:	f000 ff3d 	bl	8001de8 <HAL_ADC_ConfigChannel>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f74:	f000 fa04 	bl	8001380 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000f78:	2305      	movs	r3, #5
 8000f7a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000f80:	2303      	movs	r3, #3
 8000f82:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f84:	463b      	mov	r3, r7
 8000f86:	4619      	mov	r1, r3
 8000f88:	4815      	ldr	r0, [pc, #84]	; (8000fe0 <MX_ADC1_Init+0xf8>)
 8000f8a:	f000 ff2d 	bl	8001de8 <HAL_ADC_ConfigChannel>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000f94:	f000 f9f4 	bl	8001380 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000f98:	2306      	movs	r3, #6
 8000f9a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8000fa0:	2304      	movs	r3, #4
 8000fa2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fa4:	463b      	mov	r3, r7
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	480d      	ldr	r0, [pc, #52]	; (8000fe0 <MX_ADC1_Init+0xf8>)
 8000faa:	f000 ff1d 	bl	8001de8 <HAL_ADC_ConfigChannel>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 8000fb4:	f000 f9e4 	bl	8001380 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000fb8:	2307      	movs	r3, #7
 8000fba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000fbc:	2304      	movs	r3, #4
 8000fbe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8000fc0:	2305      	movs	r3, #5
 8000fc2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fc4:	463b      	mov	r3, r7
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4805      	ldr	r0, [pc, #20]	; (8000fe0 <MX_ADC1_Init+0xf8>)
 8000fca:	f000 ff0d 	bl	8001de8 <HAL_ADC_ConfigChannel>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 8000fd4:	f000 f9d4 	bl	8001380 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fd8:	bf00      	nop
 8000fda:	3710      	adds	r7, #16
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	20000044 	.word	0x20000044
 8000fe4:	40012000 	.word	0x40012000
 8000fe8:	0f000001 	.word	0x0f000001

08000fec <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ff2:	463b      	mov	r3, r7
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000ffe:	4b31      	ldr	r3, [pc, #196]	; (80010c4 <MX_ADC2_Init+0xd8>)
 8001000:	4a31      	ldr	r2, [pc, #196]	; (80010c8 <MX_ADC2_Init+0xdc>)
 8001002:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001004:	4b2f      	ldr	r3, [pc, #188]	; (80010c4 <MX_ADC2_Init+0xd8>)
 8001006:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800100a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800100c:	4b2d      	ldr	r3, [pc, #180]	; (80010c4 <MX_ADC2_Init+0xd8>)
 800100e:	2200      	movs	r2, #0
 8001010:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8001012:	4b2c      	ldr	r3, [pc, #176]	; (80010c4 <MX_ADC2_Init+0xd8>)
 8001014:	2201      	movs	r2, #1
 8001016:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001018:	4b2a      	ldr	r3, [pc, #168]	; (80010c4 <MX_ADC2_Init+0xd8>)
 800101a:	2201      	movs	r2, #1
 800101c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800101e:	4b29      	ldr	r3, [pc, #164]	; (80010c4 <MX_ADC2_Init+0xd8>)
 8001020:	2200      	movs	r2, #0
 8001022:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001026:	4b27      	ldr	r3, [pc, #156]	; (80010c4 <MX_ADC2_Init+0xd8>)
 8001028:	2200      	movs	r2, #0
 800102a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800102c:	4b25      	ldr	r3, [pc, #148]	; (80010c4 <MX_ADC2_Init+0xd8>)
 800102e:	4a27      	ldr	r2, [pc, #156]	; (80010cc <MX_ADC2_Init+0xe0>)
 8001030:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001032:	4b24      	ldr	r3, [pc, #144]	; (80010c4 <MX_ADC2_Init+0xd8>)
 8001034:	2200      	movs	r2, #0
 8001036:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 3;
 8001038:	4b22      	ldr	r3, [pc, #136]	; (80010c4 <MX_ADC2_Init+0xd8>)
 800103a:	2203      	movs	r2, #3
 800103c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800103e:	4b21      	ldr	r3, [pc, #132]	; (80010c4 <MX_ADC2_Init+0xd8>)
 8001040:	2201      	movs	r2, #1
 8001042:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001046:	4b1f      	ldr	r3, [pc, #124]	; (80010c4 <MX_ADC2_Init+0xd8>)
 8001048:	2201      	movs	r2, #1
 800104a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800104c:	481d      	ldr	r0, [pc, #116]	; (80010c4 <MX_ADC2_Init+0xd8>)
 800104e:	f000 fc77 	bl	8001940 <HAL_ADC_Init>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001058:	f000 f992 	bl	8001380 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800105c:	2301      	movs	r3, #1
 800105e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001060:	2301      	movs	r3, #1
 8001062:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001064:	2301      	movs	r3, #1
 8001066:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001068:	463b      	mov	r3, r7
 800106a:	4619      	mov	r1, r3
 800106c:	4815      	ldr	r0, [pc, #84]	; (80010c4 <MX_ADC2_Init+0xd8>)
 800106e:	f000 febb 	bl	8001de8 <HAL_ADC_ConfigChannel>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001078:	f000 f982 	bl	8001380 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800107c:	2308      	movs	r3, #8
 800107e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001080:	2302      	movs	r3, #2
 8001082:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8001084:	2302      	movs	r3, #2
 8001086:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001088:	463b      	mov	r3, r7
 800108a:	4619      	mov	r1, r3
 800108c:	480d      	ldr	r0, [pc, #52]	; (80010c4 <MX_ADC2_Init+0xd8>)
 800108e:	f000 feab 	bl	8001de8 <HAL_ADC_ConfigChannel>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_ADC2_Init+0xb0>
  {
    Error_Handler();
 8001098:	f000 f972 	bl	8001380 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800109c:	2309      	movs	r3, #9
 800109e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80010a0:	2303      	movs	r3, #3
 80010a2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 80010a4:	2305      	movs	r3, #5
 80010a6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80010a8:	463b      	mov	r3, r7
 80010aa:	4619      	mov	r1, r3
 80010ac:	4805      	ldr	r0, [pc, #20]	; (80010c4 <MX_ADC2_Init+0xd8>)
 80010ae:	f000 fe9b 	bl	8001de8 <HAL_ADC_ConfigChannel>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_ADC2_Init+0xd0>
  {
    Error_Handler();
 80010b8:	f000 f962 	bl	8001380 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80010bc:	bf00      	nop
 80010be:	3710      	adds	r7, #16
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	2000008c 	.word	0x2000008c
 80010c8:	40012100 	.word	0x40012100
 80010cc:	0f000001 	.word	0x0f000001

080010d0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010d6:	463b      	mov	r3, r7
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80010e2:	4b21      	ldr	r3, [pc, #132]	; (8001168 <MX_ADC3_Init+0x98>)
 80010e4:	4a21      	ldr	r2, [pc, #132]	; (800116c <MX_ADC3_Init+0x9c>)
 80010e6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010e8:	4b1f      	ldr	r3, [pc, #124]	; (8001168 <MX_ADC3_Init+0x98>)
 80010ea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010ee:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80010f0:	4b1d      	ldr	r3, [pc, #116]	; (8001168 <MX_ADC3_Init+0x98>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80010f6:	4b1c      	ldr	r3, [pc, #112]	; (8001168 <MX_ADC3_Init+0x98>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80010fc:	4b1a      	ldr	r3, [pc, #104]	; (8001168 <MX_ADC3_Init+0x98>)
 80010fe:	2201      	movs	r2, #1
 8001100:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001102:	4b19      	ldr	r3, [pc, #100]	; (8001168 <MX_ADC3_Init+0x98>)
 8001104:	2200      	movs	r2, #0
 8001106:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800110a:	4b17      	ldr	r3, [pc, #92]	; (8001168 <MX_ADC3_Init+0x98>)
 800110c:	2200      	movs	r2, #0
 800110e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001110:	4b15      	ldr	r3, [pc, #84]	; (8001168 <MX_ADC3_Init+0x98>)
 8001112:	4a17      	ldr	r2, [pc, #92]	; (8001170 <MX_ADC3_Init+0xa0>)
 8001114:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001116:	4b14      	ldr	r3, [pc, #80]	; (8001168 <MX_ADC3_Init+0x98>)
 8001118:	2200      	movs	r2, #0
 800111a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800111c:	4b12      	ldr	r3, [pc, #72]	; (8001168 <MX_ADC3_Init+0x98>)
 800111e:	2201      	movs	r2, #1
 8001120:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001122:	4b11      	ldr	r3, [pc, #68]	; (8001168 <MX_ADC3_Init+0x98>)
 8001124:	2201      	movs	r2, #1
 8001126:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800112a:	4b0f      	ldr	r3, [pc, #60]	; (8001168 <MX_ADC3_Init+0x98>)
 800112c:	2201      	movs	r2, #1
 800112e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001130:	480d      	ldr	r0, [pc, #52]	; (8001168 <MX_ADC3_Init+0x98>)
 8001132:	f000 fc05 	bl	8001940 <HAL_ADC_Init>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 800113c:	f000 f920 	bl	8001380 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001140:	230a      	movs	r3, #10
 8001142:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001144:	2301      	movs	r3, #1
 8001146:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001148:	2307      	movs	r3, #7
 800114a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800114c:	463b      	mov	r3, r7
 800114e:	4619      	mov	r1, r3
 8001150:	4805      	ldr	r0, [pc, #20]	; (8001168 <MX_ADC3_Init+0x98>)
 8001152:	f000 fe49 	bl	8001de8 <HAL_ADC_ConfigChannel>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 800115c:	f000 f910 	bl	8001380 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001160:	bf00      	nop
 8001162:	3710      	adds	r7, #16
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	200000d4 	.word	0x200000d4
 800116c:	40012200 	.word	0x40012200
 8001170:	0f000001 	.word	0x0f000001

08001174 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b096      	sub	sp, #88	; 0x58
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800117a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]
 8001184:	609a      	str	r2, [r3, #8]
 8001186:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001188:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001192:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	605a      	str	r2, [r3, #4]
 800119c:	609a      	str	r2, [r3, #8]
 800119e:	60da      	str	r2, [r3, #12]
 80011a0:	611a      	str	r2, [r3, #16]
 80011a2:	615a      	str	r2, [r3, #20]
 80011a4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011a6:	1d3b      	adds	r3, r7, #4
 80011a8:	2220      	movs	r2, #32
 80011aa:	2100      	movs	r1, #0
 80011ac:	4618      	mov	r0, r3
 80011ae:	f003 fbe1 	bl	8004974 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011b2:	4b3e      	ldr	r3, [pc, #248]	; (80012ac <MX_TIM1_Init+0x138>)
 80011b4:	4a3e      	ldr	r2, [pc, #248]	; (80012b0 <MX_TIM1_Init+0x13c>)
 80011b6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 180;
 80011b8:	4b3c      	ldr	r3, [pc, #240]	; (80012ac <MX_TIM1_Init+0x138>)
 80011ba:	22b4      	movs	r2, #180	; 0xb4
 80011bc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011be:	4b3b      	ldr	r3, [pc, #236]	; (80012ac <MX_TIM1_Init+0x138>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 80011c4:	4b39      	ldr	r3, [pc, #228]	; (80012ac <MX_TIM1_Init+0x138>)
 80011c6:	2264      	movs	r2, #100	; 0x64
 80011c8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ca:	4b38      	ldr	r3, [pc, #224]	; (80012ac <MX_TIM1_Init+0x138>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011d0:	4b36      	ldr	r3, [pc, #216]	; (80012ac <MX_TIM1_Init+0x138>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011d6:	4b35      	ldr	r3, [pc, #212]	; (80012ac <MX_TIM1_Init+0x138>)
 80011d8:	2200      	movs	r2, #0
 80011da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011dc:	4833      	ldr	r0, [pc, #204]	; (80012ac <MX_TIM1_Init+0x138>)
 80011de:	f002 fccd 	bl	8003b7c <HAL_TIM_Base_Init>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80011e8:	f000 f8ca 	bl	8001380 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011f0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011f2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011f6:	4619      	mov	r1, r3
 80011f8:	482c      	ldr	r0, [pc, #176]	; (80012ac <MX_TIM1_Init+0x138>)
 80011fa:	f002 fef1 	bl	8003fe0 <HAL_TIM_ConfigClockSource>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001204:	f000 f8bc 	bl	8001380 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001208:	4828      	ldr	r0, [pc, #160]	; (80012ac <MX_TIM1_Init+0x138>)
 800120a:	f002 fd06 	bl	8003c1a <HAL_TIM_PWM_Init>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001214:	f000 f8b4 	bl	8001380 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001218:	2300      	movs	r3, #0
 800121a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800121c:	2300      	movs	r3, #0
 800121e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001220:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001224:	4619      	mov	r1, r3
 8001226:	4821      	ldr	r0, [pc, #132]	; (80012ac <MX_TIM1_Init+0x138>)
 8001228:	f003 fab2 	bl	8004790 <HAL_TIMEx_MasterConfigSynchronization>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001232:	f000 f8a5 	bl	8001380 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001236:	2360      	movs	r3, #96	; 0x60
 8001238:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800123a:	2300      	movs	r3, #0
 800123c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800123e:	2300      	movs	r3, #0
 8001240:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001242:	2300      	movs	r3, #0
 8001244:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001246:	2300      	movs	r3, #0
 8001248:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800124a:	2300      	movs	r3, #0
 800124c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800124e:	2300      	movs	r3, #0
 8001250:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001252:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001256:	2200      	movs	r2, #0
 8001258:	4619      	mov	r1, r3
 800125a:	4814      	ldr	r0, [pc, #80]	; (80012ac <MX_TIM1_Init+0x138>)
 800125c:	f002 fdfe 	bl	8003e5c <HAL_TIM_PWM_ConfigChannel>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001266:	f000 f88b 	bl	8001380 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800126a:	2300      	movs	r3, #0
 800126c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800126e:	2300      	movs	r3, #0
 8001270:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001272:	2300      	movs	r3, #0
 8001274:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001276:	2300      	movs	r3, #0
 8001278:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800127a:	2300      	movs	r3, #0
 800127c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800127e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001282:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001284:	2300      	movs	r3, #0
 8001286:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001288:	1d3b      	adds	r3, r7, #4
 800128a:	4619      	mov	r1, r3
 800128c:	4807      	ldr	r0, [pc, #28]	; (80012ac <MX_TIM1_Init+0x138>)
 800128e:	f003 fafb 	bl	8004888 <HAL_TIMEx_ConfigBreakDeadTime>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001298:	f000 f872 	bl	8001380 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800129c:	4803      	ldr	r0, [pc, #12]	; (80012ac <MX_TIM1_Init+0x138>)
 800129e:	f000 fa1f 	bl	80016e0 <HAL_TIM_MspPostInit>

}
 80012a2:	bf00      	nop
 80012a4:	3758      	adds	r7, #88	; 0x58
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	2000023c 	.word	0x2000023c
 80012b0:	40010000 	.word	0x40010000

080012b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	607b      	str	r3, [r7, #4]
 80012be:	4b14      	ldr	r3, [pc, #80]	; (8001310 <MX_DMA_Init+0x5c>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	4a13      	ldr	r2, [pc, #76]	; (8001310 <MX_DMA_Init+0x5c>)
 80012c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012c8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ca:	4b11      	ldr	r3, [pc, #68]	; (8001310 <MX_DMA_Init+0x5c>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012d2:	607b      	str	r3, [r7, #4]
 80012d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80012d6:	2200      	movs	r2, #0
 80012d8:	2100      	movs	r1, #0
 80012da:	2038      	movs	r0, #56	; 0x38
 80012dc:	f001 f90f 	bl	80024fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80012e0:	2038      	movs	r0, #56	; 0x38
 80012e2:	f001 f928 	bl	8002536 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80012e6:	2200      	movs	r2, #0
 80012e8:	2100      	movs	r1, #0
 80012ea:	203a      	movs	r0, #58	; 0x3a
 80012ec:	f001 f907 	bl	80024fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80012f0:	203a      	movs	r0, #58	; 0x3a
 80012f2:	f001 f920 	bl	8002536 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 80012f6:	2200      	movs	r2, #0
 80012f8:	2100      	movs	r1, #0
 80012fa:	203c      	movs	r0, #60	; 0x3c
 80012fc:	f001 f8ff 	bl	80024fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8001300:	203c      	movs	r0, #60	; 0x3c
 8001302:	f001 f918 	bl	8002536 <HAL_NVIC_EnableIRQ>

}
 8001306:	bf00      	nop
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40023800 	.word	0x40023800

08001314 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	60fb      	str	r3, [r7, #12]
 800131e:	4b17      	ldr	r3, [pc, #92]	; (800137c <MX_GPIO_Init+0x68>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	4a16      	ldr	r2, [pc, #88]	; (800137c <MX_GPIO_Init+0x68>)
 8001324:	f043 0304 	orr.w	r3, r3, #4
 8001328:	6313      	str	r3, [r2, #48]	; 0x30
 800132a:	4b14      	ldr	r3, [pc, #80]	; (800137c <MX_GPIO_Init+0x68>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	f003 0304 	and.w	r3, r3, #4
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	60bb      	str	r3, [r7, #8]
 800133a:	4b10      	ldr	r3, [pc, #64]	; (800137c <MX_GPIO_Init+0x68>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	4a0f      	ldr	r2, [pc, #60]	; (800137c <MX_GPIO_Init+0x68>)
 8001340:	f043 0301 	orr.w	r3, r3, #1
 8001344:	6313      	str	r3, [r2, #48]	; 0x30
 8001346:	4b0d      	ldr	r3, [pc, #52]	; (800137c <MX_GPIO_Init+0x68>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	60bb      	str	r3, [r7, #8]
 8001350:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	607b      	str	r3, [r7, #4]
 8001356:	4b09      	ldr	r3, [pc, #36]	; (800137c <MX_GPIO_Init+0x68>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	4a08      	ldr	r2, [pc, #32]	; (800137c <MX_GPIO_Init+0x68>)
 800135c:	f043 0302 	orr.w	r3, r3, #2
 8001360:	6313      	str	r3, [r2, #48]	; 0x30
 8001362:	4b06      	ldr	r3, [pc, #24]	; (800137c <MX_GPIO_Init+0x68>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	f003 0302 	and.w	r3, r3, #2
 800136a:	607b      	str	r3, [r7, #4]
 800136c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800136e:	bf00      	nop
 8001370:	3714      	adds	r7, #20
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	40023800 	.word	0x40023800

08001380 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001384:	b672      	cpsid	i
}
 8001386:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001388:	e7fe      	b.n	8001388 <Error_Handler+0x8>
	...

0800138c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	607b      	str	r3, [r7, #4]
 8001396:	4b10      	ldr	r3, [pc, #64]	; (80013d8 <HAL_MspInit+0x4c>)
 8001398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139a:	4a0f      	ldr	r2, [pc, #60]	; (80013d8 <HAL_MspInit+0x4c>)
 800139c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013a0:	6453      	str	r3, [r2, #68]	; 0x44
 80013a2:	4b0d      	ldr	r3, [pc, #52]	; (80013d8 <HAL_MspInit+0x4c>)
 80013a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013aa:	607b      	str	r3, [r7, #4]
 80013ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	603b      	str	r3, [r7, #0]
 80013b2:	4b09      	ldr	r3, [pc, #36]	; (80013d8 <HAL_MspInit+0x4c>)
 80013b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b6:	4a08      	ldr	r2, [pc, #32]	; (80013d8 <HAL_MspInit+0x4c>)
 80013b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013bc:	6413      	str	r3, [r2, #64]	; 0x40
 80013be:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <HAL_MspInit+0x4c>)
 80013c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c6:	603b      	str	r3, [r7, #0]
 80013c8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80013ca:	2007      	movs	r0, #7
 80013cc:	f001 f88c 	bl	80024e8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013d0:	bf00      	nop
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40023800 	.word	0x40023800

080013dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08e      	sub	sp, #56	; 0x38
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	60da      	str	r2, [r3, #12]
 80013f2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a9b      	ldr	r2, [pc, #620]	; (8001668 <HAL_ADC_MspInit+0x28c>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d158      	bne.n	80014b0 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	623b      	str	r3, [r7, #32]
 8001402:	4b9a      	ldr	r3, [pc, #616]	; (800166c <HAL_ADC_MspInit+0x290>)
 8001404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001406:	4a99      	ldr	r2, [pc, #612]	; (800166c <HAL_ADC_MspInit+0x290>)
 8001408:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800140c:	6453      	str	r3, [r2, #68]	; 0x44
 800140e:	4b97      	ldr	r3, [pc, #604]	; (800166c <HAL_ADC_MspInit+0x290>)
 8001410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001416:	623b      	str	r3, [r7, #32]
 8001418:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	61fb      	str	r3, [r7, #28]
 800141e:	4b93      	ldr	r3, [pc, #588]	; (800166c <HAL_ADC_MspInit+0x290>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	4a92      	ldr	r2, [pc, #584]	; (800166c <HAL_ADC_MspInit+0x290>)
 8001424:	f043 0301 	orr.w	r3, r3, #1
 8001428:	6313      	str	r3, [r2, #48]	; 0x30
 800142a:	4b90      	ldr	r3, [pc, #576]	; (800166c <HAL_ADC_MspInit+0x290>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	61fb      	str	r3, [r7, #28]
 8001434:	69fb      	ldr	r3, [r7, #28]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001436:	23f0      	movs	r3, #240	; 0xf0
 8001438:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800143a:	2303      	movs	r3, #3
 800143c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143e:	2300      	movs	r3, #0
 8001440:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001442:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001446:	4619      	mov	r1, r3
 8001448:	4889      	ldr	r0, [pc, #548]	; (8001670 <HAL_ADC_MspInit+0x294>)
 800144a:	f001 fbff 	bl	8002c4c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 800144e:	4b89      	ldr	r3, [pc, #548]	; (8001674 <HAL_ADC_MspInit+0x298>)
 8001450:	4a89      	ldr	r2, [pc, #548]	; (8001678 <HAL_ADC_MspInit+0x29c>)
 8001452:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001454:	4b87      	ldr	r3, [pc, #540]	; (8001674 <HAL_ADC_MspInit+0x298>)
 8001456:	2200      	movs	r2, #0
 8001458:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800145a:	4b86      	ldr	r3, [pc, #536]	; (8001674 <HAL_ADC_MspInit+0x298>)
 800145c:	2200      	movs	r2, #0
 800145e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001460:	4b84      	ldr	r3, [pc, #528]	; (8001674 <HAL_ADC_MspInit+0x298>)
 8001462:	2200      	movs	r2, #0
 8001464:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001466:	4b83      	ldr	r3, [pc, #524]	; (8001674 <HAL_ADC_MspInit+0x298>)
 8001468:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800146c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800146e:	4b81      	ldr	r3, [pc, #516]	; (8001674 <HAL_ADC_MspInit+0x298>)
 8001470:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001474:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001476:	4b7f      	ldr	r3, [pc, #508]	; (8001674 <HAL_ADC_MspInit+0x298>)
 8001478:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800147c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800147e:	4b7d      	ldr	r3, [pc, #500]	; (8001674 <HAL_ADC_MspInit+0x298>)
 8001480:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001484:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001486:	4b7b      	ldr	r3, [pc, #492]	; (8001674 <HAL_ADC_MspInit+0x298>)
 8001488:	2200      	movs	r2, #0
 800148a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800148c:	4b79      	ldr	r3, [pc, #484]	; (8001674 <HAL_ADC_MspInit+0x298>)
 800148e:	2200      	movs	r2, #0
 8001490:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001492:	4878      	ldr	r0, [pc, #480]	; (8001674 <HAL_ADC_MspInit+0x298>)
 8001494:	f001 f86a 	bl	800256c <HAL_DMA_Init>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800149e:	f7ff ff6f 	bl	8001380 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a73      	ldr	r2, [pc, #460]	; (8001674 <HAL_ADC_MspInit+0x298>)
 80014a6:	639a      	str	r2, [r3, #56]	; 0x38
 80014a8:	4a72      	ldr	r2, [pc, #456]	; (8001674 <HAL_ADC_MspInit+0x298>)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80014ae:	e0d6      	b.n	800165e <HAL_ADC_MspInit+0x282>
  else if(hadc->Instance==ADC2)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a71      	ldr	r2, [pc, #452]	; (800167c <HAL_ADC_MspInit+0x2a0>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d173      	bne.n	80015a2 <HAL_ADC_MspInit+0x1c6>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	61bb      	str	r3, [r7, #24]
 80014be:	4b6b      	ldr	r3, [pc, #428]	; (800166c <HAL_ADC_MspInit+0x290>)
 80014c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c2:	4a6a      	ldr	r2, [pc, #424]	; (800166c <HAL_ADC_MspInit+0x290>)
 80014c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014c8:	6453      	str	r3, [r2, #68]	; 0x44
 80014ca:	4b68      	ldr	r3, [pc, #416]	; (800166c <HAL_ADC_MspInit+0x290>)
 80014cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014d2:	61bb      	str	r3, [r7, #24]
 80014d4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	617b      	str	r3, [r7, #20]
 80014da:	4b64      	ldr	r3, [pc, #400]	; (800166c <HAL_ADC_MspInit+0x290>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	4a63      	ldr	r2, [pc, #396]	; (800166c <HAL_ADC_MspInit+0x290>)
 80014e0:	f043 0301 	orr.w	r3, r3, #1
 80014e4:	6313      	str	r3, [r2, #48]	; 0x30
 80014e6:	4b61      	ldr	r3, [pc, #388]	; (800166c <HAL_ADC_MspInit+0x290>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	617b      	str	r3, [r7, #20]
 80014f0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	613b      	str	r3, [r7, #16]
 80014f6:	4b5d      	ldr	r3, [pc, #372]	; (800166c <HAL_ADC_MspInit+0x290>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	4a5c      	ldr	r2, [pc, #368]	; (800166c <HAL_ADC_MspInit+0x290>)
 80014fc:	f043 0302 	orr.w	r3, r3, #2
 8001500:	6313      	str	r3, [r2, #48]	; 0x30
 8001502:	4b5a      	ldr	r3, [pc, #360]	; (800166c <HAL_ADC_MspInit+0x290>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	613b      	str	r3, [r7, #16]
 800150c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800150e:	2302      	movs	r3, #2
 8001510:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001512:	2303      	movs	r3, #3
 8001514:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800151e:	4619      	mov	r1, r3
 8001520:	4853      	ldr	r0, [pc, #332]	; (8001670 <HAL_ADC_MspInit+0x294>)
 8001522:	f001 fb93 	bl	8002c4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001526:	2303      	movs	r3, #3
 8001528:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800152a:	2303      	movs	r3, #3
 800152c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	2300      	movs	r3, #0
 8001530:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001532:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001536:	4619      	mov	r1, r3
 8001538:	4851      	ldr	r0, [pc, #324]	; (8001680 <HAL_ADC_MspInit+0x2a4>)
 800153a:	f001 fb87 	bl	8002c4c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 800153e:	4b51      	ldr	r3, [pc, #324]	; (8001684 <HAL_ADC_MspInit+0x2a8>)
 8001540:	4a51      	ldr	r2, [pc, #324]	; (8001688 <HAL_ADC_MspInit+0x2ac>)
 8001542:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8001544:	4b4f      	ldr	r3, [pc, #316]	; (8001684 <HAL_ADC_MspInit+0x2a8>)
 8001546:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800154a:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800154c:	4b4d      	ldr	r3, [pc, #308]	; (8001684 <HAL_ADC_MspInit+0x2a8>)
 800154e:	2200      	movs	r2, #0
 8001550:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001552:	4b4c      	ldr	r3, [pc, #304]	; (8001684 <HAL_ADC_MspInit+0x2a8>)
 8001554:	2200      	movs	r2, #0
 8001556:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001558:	4b4a      	ldr	r3, [pc, #296]	; (8001684 <HAL_ADC_MspInit+0x2a8>)
 800155a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800155e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001560:	4b48      	ldr	r3, [pc, #288]	; (8001684 <HAL_ADC_MspInit+0x2a8>)
 8001562:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001566:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001568:	4b46      	ldr	r3, [pc, #280]	; (8001684 <HAL_ADC_MspInit+0x2a8>)
 800156a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800156e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001570:	4b44      	ldr	r3, [pc, #272]	; (8001684 <HAL_ADC_MspInit+0x2a8>)
 8001572:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001576:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001578:	4b42      	ldr	r3, [pc, #264]	; (8001684 <HAL_ADC_MspInit+0x2a8>)
 800157a:	2200      	movs	r2, #0
 800157c:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800157e:	4b41      	ldr	r3, [pc, #260]	; (8001684 <HAL_ADC_MspInit+0x2a8>)
 8001580:	2200      	movs	r2, #0
 8001582:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001584:	483f      	ldr	r0, [pc, #252]	; (8001684 <HAL_ADC_MspInit+0x2a8>)
 8001586:	f000 fff1 	bl	800256c <HAL_DMA_Init>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <HAL_ADC_MspInit+0x1b8>
      Error_Handler();
 8001590:	f7ff fef6 	bl	8001380 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	4a3b      	ldr	r2, [pc, #236]	; (8001684 <HAL_ADC_MspInit+0x2a8>)
 8001598:	639a      	str	r2, [r3, #56]	; 0x38
 800159a:	4a3a      	ldr	r2, [pc, #232]	; (8001684 <HAL_ADC_MspInit+0x2a8>)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6393      	str	r3, [r2, #56]	; 0x38
}
 80015a0:	e05d      	b.n	800165e <HAL_ADC_MspInit+0x282>
  else if(hadc->Instance==ADC3)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a39      	ldr	r2, [pc, #228]	; (800168c <HAL_ADC_MspInit+0x2b0>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d158      	bne.n	800165e <HAL_ADC_MspInit+0x282>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80015ac:	2300      	movs	r3, #0
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	4b2e      	ldr	r3, [pc, #184]	; (800166c <HAL_ADC_MspInit+0x290>)
 80015b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b4:	4a2d      	ldr	r2, [pc, #180]	; (800166c <HAL_ADC_MspInit+0x290>)
 80015b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015ba:	6453      	str	r3, [r2, #68]	; 0x44
 80015bc:	4b2b      	ldr	r3, [pc, #172]	; (800166c <HAL_ADC_MspInit+0x290>)
 80015be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015c4:	60fb      	str	r3, [r7, #12]
 80015c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015c8:	2300      	movs	r3, #0
 80015ca:	60bb      	str	r3, [r7, #8]
 80015cc:	4b27      	ldr	r3, [pc, #156]	; (800166c <HAL_ADC_MspInit+0x290>)
 80015ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d0:	4a26      	ldr	r2, [pc, #152]	; (800166c <HAL_ADC_MspInit+0x290>)
 80015d2:	f043 0304 	orr.w	r3, r3, #4
 80015d6:	6313      	str	r3, [r2, #48]	; 0x30
 80015d8:	4b24      	ldr	r3, [pc, #144]	; (800166c <HAL_ADC_MspInit+0x290>)
 80015da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015dc:	f003 0304 	and.w	r3, r3, #4
 80015e0:	60bb      	str	r3, [r7, #8]
 80015e2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015e4:	2301      	movs	r3, #1
 80015e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015e8:	2303      	movs	r3, #3
 80015ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f4:	4619      	mov	r1, r3
 80015f6:	4826      	ldr	r0, [pc, #152]	; (8001690 <HAL_ADC_MspInit+0x2b4>)
 80015f8:	f001 fb28 	bl	8002c4c <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream0;
 80015fc:	4b25      	ldr	r3, [pc, #148]	; (8001694 <HAL_ADC_MspInit+0x2b8>)
 80015fe:	4a26      	ldr	r2, [pc, #152]	; (8001698 <HAL_ADC_MspInit+0x2bc>)
 8001600:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8001602:	4b24      	ldr	r3, [pc, #144]	; (8001694 <HAL_ADC_MspInit+0x2b8>)
 8001604:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001608:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800160a:	4b22      	ldr	r3, [pc, #136]	; (8001694 <HAL_ADC_MspInit+0x2b8>)
 800160c:	2200      	movs	r2, #0
 800160e:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001610:	4b20      	ldr	r3, [pc, #128]	; (8001694 <HAL_ADC_MspInit+0x2b8>)
 8001612:	2200      	movs	r2, #0
 8001614:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001616:	4b1f      	ldr	r3, [pc, #124]	; (8001694 <HAL_ADC_MspInit+0x2b8>)
 8001618:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800161c:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800161e:	4b1d      	ldr	r3, [pc, #116]	; (8001694 <HAL_ADC_MspInit+0x2b8>)
 8001620:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001624:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001626:	4b1b      	ldr	r3, [pc, #108]	; (8001694 <HAL_ADC_MspInit+0x2b8>)
 8001628:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800162c:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800162e:	4b19      	ldr	r3, [pc, #100]	; (8001694 <HAL_ADC_MspInit+0x2b8>)
 8001630:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001634:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001636:	4b17      	ldr	r3, [pc, #92]	; (8001694 <HAL_ADC_MspInit+0x2b8>)
 8001638:	2200      	movs	r2, #0
 800163a:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800163c:	4b15      	ldr	r3, [pc, #84]	; (8001694 <HAL_ADC_MspInit+0x2b8>)
 800163e:	2200      	movs	r2, #0
 8001640:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001642:	4814      	ldr	r0, [pc, #80]	; (8001694 <HAL_ADC_MspInit+0x2b8>)
 8001644:	f000 ff92 	bl	800256c <HAL_DMA_Init>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <HAL_ADC_MspInit+0x276>
      Error_Handler();
 800164e:	f7ff fe97 	bl	8001380 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4a0f      	ldr	r2, [pc, #60]	; (8001694 <HAL_ADC_MspInit+0x2b8>)
 8001656:	639a      	str	r2, [r3, #56]	; 0x38
 8001658:	4a0e      	ldr	r2, [pc, #56]	; (8001694 <HAL_ADC_MspInit+0x2b8>)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800165e:	bf00      	nop
 8001660:	3738      	adds	r7, #56	; 0x38
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40012000 	.word	0x40012000
 800166c:	40023800 	.word	0x40023800
 8001670:	40020000 	.word	0x40020000
 8001674:	2000011c 	.word	0x2000011c
 8001678:	40026470 	.word	0x40026470
 800167c:	40012100 	.word	0x40012100
 8001680:	40020400 	.word	0x40020400
 8001684:	2000017c 	.word	0x2000017c
 8001688:	40026440 	.word	0x40026440
 800168c:	40012200 	.word	0x40012200
 8001690:	40020800 	.word	0x40020800
 8001694:	200001dc 	.word	0x200001dc
 8001698:	40026410 	.word	0x40026410

0800169c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800169c:	b480      	push	{r7}
 800169e:	b085      	sub	sp, #20
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a0b      	ldr	r2, [pc, #44]	; (80016d8 <HAL_TIM_Base_MspInit+0x3c>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d10d      	bne.n	80016ca <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	60fb      	str	r3, [r7, #12]
 80016b2:	4b0a      	ldr	r3, [pc, #40]	; (80016dc <HAL_TIM_Base_MspInit+0x40>)
 80016b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b6:	4a09      	ldr	r2, [pc, #36]	; (80016dc <HAL_TIM_Base_MspInit+0x40>)
 80016b8:	f043 0301 	orr.w	r3, r3, #1
 80016bc:	6453      	str	r3, [r2, #68]	; 0x44
 80016be:	4b07      	ldr	r3, [pc, #28]	; (80016dc <HAL_TIM_Base_MspInit+0x40>)
 80016c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80016ca:	bf00      	nop
 80016cc:	3714      	adds	r7, #20
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	40010000 	.word	0x40010000
 80016dc:	40023800 	.word	0x40023800

080016e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b088      	sub	sp, #32
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e8:	f107 030c 	add.w	r3, r7, #12
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	60da      	str	r2, [r3, #12]
 80016f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a12      	ldr	r2, [pc, #72]	; (8001748 <HAL_TIM_MspPostInit+0x68>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d11e      	bne.n	8001740 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	60bb      	str	r3, [r7, #8]
 8001706:	4b11      	ldr	r3, [pc, #68]	; (800174c <HAL_TIM_MspPostInit+0x6c>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	4a10      	ldr	r2, [pc, #64]	; (800174c <HAL_TIM_MspPostInit+0x6c>)
 800170c:	f043 0301 	orr.w	r3, r3, #1
 8001710:	6313      	str	r3, [r2, #48]	; 0x30
 8001712:	4b0e      	ldr	r3, [pc, #56]	; (800174c <HAL_TIM_MspPostInit+0x6c>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	60bb      	str	r3, [r7, #8]
 800171c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800171e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001722:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001724:	2302      	movs	r3, #2
 8001726:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172c:	2300      	movs	r3, #0
 800172e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001730:	2301      	movs	r3, #1
 8001732:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001734:	f107 030c 	add.w	r3, r7, #12
 8001738:	4619      	mov	r1, r3
 800173a:	4805      	ldr	r0, [pc, #20]	; (8001750 <HAL_TIM_MspPostInit+0x70>)
 800173c:	f001 fa86 	bl	8002c4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001740:	bf00      	nop
 8001742:	3720      	adds	r7, #32
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	40010000 	.word	0x40010000
 800174c:	40023800 	.word	0x40023800
 8001750:	40020000 	.word	0x40020000

08001754 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001758:	e7fe      	b.n	8001758 <NMI_Handler+0x4>

0800175a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800175a:	b480      	push	{r7}
 800175c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800175e:	e7fe      	b.n	800175e <HardFault_Handler+0x4>

08001760 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001764:	e7fe      	b.n	8001764 <MemManage_Handler+0x4>

08001766 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001766:	b480      	push	{r7}
 8001768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800176a:	e7fe      	b.n	800176a <BusFault_Handler+0x4>

0800176c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001770:	e7fe      	b.n	8001770 <UsageFault_Handler+0x4>

08001772 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001772:	b480      	push	{r7}
 8001774:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001776:	bf00      	nop
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001784:	bf00      	nop
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr

0800178e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800178e:	b480      	push	{r7}
 8001790:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017a0:	f000 f8ae 	bl	8001900 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017a4:	bf00      	nop
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80017ac:	4802      	ldr	r0, [pc, #8]	; (80017b8 <DMA2_Stream0_IRQHandler+0x10>)
 80017ae:	f000 ffe3 	bl	8002778 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	200001dc 	.word	0x200001dc

080017bc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80017c0:	4802      	ldr	r0, [pc, #8]	; (80017cc <DMA2_Stream2_IRQHandler+0x10>)
 80017c2:	f000 ffd9 	bl	8002778 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	2000017c 	.word	0x2000017c

080017d0 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80017d4:	4802      	ldr	r0, [pc, #8]	; (80017e0 <DMA2_Stream4_IRQHandler+0x10>)
 80017d6:	f000 ffcf 	bl	8002778 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	2000011c 	.word	0x2000011c

080017e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017e8:	4b06      	ldr	r3, [pc, #24]	; (8001804 <SystemInit+0x20>)
 80017ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017ee:	4a05      	ldr	r2, [pc, #20]	; (8001804 <SystemInit+0x20>)
 80017f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017f8:	bf00      	nop
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	e000ed00 	.word	0xe000ed00

08001808 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001808:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001840 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800180c:	480d      	ldr	r0, [pc, #52]	; (8001844 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800180e:	490e      	ldr	r1, [pc, #56]	; (8001848 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001810:	4a0e      	ldr	r2, [pc, #56]	; (800184c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001812:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001814:	e002      	b.n	800181c <LoopCopyDataInit>

08001816 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001816:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001818:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800181a:	3304      	adds	r3, #4

0800181c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800181c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800181e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001820:	d3f9      	bcc.n	8001816 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001822:	4a0b      	ldr	r2, [pc, #44]	; (8001850 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001824:	4c0b      	ldr	r4, [pc, #44]	; (8001854 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001826:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001828:	e001      	b.n	800182e <LoopFillZerobss>

0800182a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800182a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800182c:	3204      	adds	r2, #4

0800182e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800182e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001830:	d3fb      	bcc.n	800182a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001832:	f7ff ffd7 	bl	80017e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001836:	f003 f879 	bl	800492c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800183a:	f7ff faa7 	bl	8000d8c <main>
  bx  lr    
 800183e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001840:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001844:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001848:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800184c:	080049c4 	.word	0x080049c4
  ldr r2, =_sbss
 8001850:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001854:	20000288 	.word	0x20000288

08001858 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001858:	e7fe      	b.n	8001858 <ADC_IRQHandler>
	...

0800185c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001860:	4b0e      	ldr	r3, [pc, #56]	; (800189c <HAL_Init+0x40>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a0d      	ldr	r2, [pc, #52]	; (800189c <HAL_Init+0x40>)
 8001866:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800186a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800186c:	4b0b      	ldr	r3, [pc, #44]	; (800189c <HAL_Init+0x40>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a0a      	ldr	r2, [pc, #40]	; (800189c <HAL_Init+0x40>)
 8001872:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001876:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001878:	4b08      	ldr	r3, [pc, #32]	; (800189c <HAL_Init+0x40>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a07      	ldr	r2, [pc, #28]	; (800189c <HAL_Init+0x40>)
 800187e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001882:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001884:	2003      	movs	r0, #3
 8001886:	f000 fe2f 	bl	80024e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800188a:	2000      	movs	r0, #0
 800188c:	f000 f808 	bl	80018a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001890:	f7ff fd7c 	bl	800138c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40023c00 	.word	0x40023c00

080018a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018a8:	4b12      	ldr	r3, [pc, #72]	; (80018f4 <HAL_InitTick+0x54>)
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	4b12      	ldr	r3, [pc, #72]	; (80018f8 <HAL_InitTick+0x58>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	4619      	mov	r1, r3
 80018b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80018be:	4618      	mov	r0, r3
 80018c0:	f000 fe47 	bl	8002552 <HAL_SYSTICK_Config>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e00e      	b.n	80018ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2b0f      	cmp	r3, #15
 80018d2:	d80a      	bhi.n	80018ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018d4:	2200      	movs	r2, #0
 80018d6:	6879      	ldr	r1, [r7, #4]
 80018d8:	f04f 30ff 	mov.w	r0, #4294967295
 80018dc:	f000 fe0f 	bl	80024fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018e0:	4a06      	ldr	r2, [pc, #24]	; (80018fc <HAL_InitTick+0x5c>)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018e6:	2300      	movs	r3, #0
 80018e8:	e000      	b.n	80018ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3708      	adds	r7, #8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	20000000 	.word	0x20000000
 80018f8:	20000008 	.word	0x20000008
 80018fc:	20000004 	.word	0x20000004

08001900 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001904:	4b06      	ldr	r3, [pc, #24]	; (8001920 <HAL_IncTick+0x20>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	461a      	mov	r2, r3
 800190a:	4b06      	ldr	r3, [pc, #24]	; (8001924 <HAL_IncTick+0x24>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4413      	add	r3, r2
 8001910:	4a04      	ldr	r2, [pc, #16]	; (8001924 <HAL_IncTick+0x24>)
 8001912:	6013      	str	r3, [r2, #0]
}
 8001914:	bf00      	nop
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	20000008 	.word	0x20000008
 8001924:	20000284 	.word	0x20000284

08001928 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  return uwTick;
 800192c:	4b03      	ldr	r3, [pc, #12]	; (800193c <HAL_GetTick+0x14>)
 800192e:	681b      	ldr	r3, [r3, #0]
}
 8001930:	4618      	mov	r0, r3
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	20000284 	.word	0x20000284

08001940 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001948:	2300      	movs	r3, #0
 800194a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d101      	bne.n	8001956 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e033      	b.n	80019be <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195a:	2b00      	cmp	r3, #0
 800195c:	d109      	bne.n	8001972 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f7ff fd3c 	bl	80013dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2200      	movs	r2, #0
 8001968:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001976:	f003 0310 	and.w	r3, r3, #16
 800197a:	2b00      	cmp	r3, #0
 800197c:	d118      	bne.n	80019b0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001982:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001986:	f023 0302 	bic.w	r3, r3, #2
 800198a:	f043 0202 	orr.w	r2, r3, #2
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f000 fb5a 	bl	800204c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2200      	movs	r2, #0
 800199c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a2:	f023 0303 	bic.w	r3, r3, #3
 80019a6:	f043 0201 	orr.w	r2, r3, #1
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	641a      	str	r2, [r3, #64]	; 0x40
 80019ae:	e001      	b.n	80019b4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80019bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3710      	adds	r7, #16
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
	...

080019c8 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80019d0:	2300      	movs	r3, #0
 80019d2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d101      	bne.n	80019e2 <HAL_ADC_Start_IT+0x1a>
 80019de:	2302      	movs	r3, #2
 80019e0:	e0bd      	b.n	8001b5e <HAL_ADC_Start_IT+0x196>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2201      	movs	r2, #1
 80019e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f003 0301 	and.w	r3, r3, #1
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d018      	beq.n	8001a2a <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	689a      	ldr	r2, [r3, #8]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f042 0201 	orr.w	r2, r2, #1
 8001a06:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a08:	4b58      	ldr	r3, [pc, #352]	; (8001b6c <HAL_ADC_Start_IT+0x1a4>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a58      	ldr	r2, [pc, #352]	; (8001b70 <HAL_ADC_Start_IT+0x1a8>)
 8001a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a12:	0c9a      	lsrs	r2, r3, #18
 8001a14:	4613      	mov	r3, r2
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	4413      	add	r3, r2
 8001a1a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001a1c:	e002      	b.n	8001a24 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	3b01      	subs	r3, #1
 8001a22:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d1f9      	bne.n	8001a1e <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	f003 0301 	and.w	r3, r3, #1
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	f040 8085 	bne.w	8001b44 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001a42:	f023 0301 	bic.w	r3, r3, #1
 8001a46:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d007      	beq.n	8001a6c <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a60:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a64:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a78:	d106      	bne.n	8001a88 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7e:	f023 0206 	bic.w	r2, r3, #6
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	645a      	str	r2, [r3, #68]	; 0x44
 8001a86:	e002      	b.n	8001a8e <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a96:	4b37      	ldr	r3, [pc, #220]	; (8001b74 <HAL_ADC_Start_IT+0x1ac>)
 8001a98:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001aa2:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	6812      	ldr	r2, [r2, #0]
 8001aae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001ab2:	f043 0320 	orr.w	r3, r3, #32
 8001ab6:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f003 031f 	and.w	r3, r3, #31
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d12a      	bne.n	8001b1a <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a2b      	ldr	r2, [pc, #172]	; (8001b78 <HAL_ADC_Start_IT+0x1b0>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d015      	beq.n	8001afa <HAL_ADC_Start_IT+0x132>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a2a      	ldr	r2, [pc, #168]	; (8001b7c <HAL_ADC_Start_IT+0x1b4>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d105      	bne.n	8001ae4 <HAL_ADC_Start_IT+0x11c>
 8001ad8:	4b26      	ldr	r3, [pc, #152]	; (8001b74 <HAL_ADC_Start_IT+0x1ac>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f003 031f 	and.w	r3, r3, #31
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d00a      	beq.n	8001afa <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a25      	ldr	r2, [pc, #148]	; (8001b80 <HAL_ADC_Start_IT+0x1b8>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d136      	bne.n	8001b5c <HAL_ADC_Start_IT+0x194>
 8001aee:	4b21      	ldr	r3, [pc, #132]	; (8001b74 <HAL_ADC_Start_IT+0x1ac>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f003 0310 	and.w	r3, r3, #16
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d130      	bne.n	8001b5c <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d129      	bne.n	8001b5c <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	689a      	ldr	r2, [r3, #8]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b16:	609a      	str	r2, [r3, #8]
 8001b18:	e020      	b.n	8001b5c <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a16      	ldr	r2, [pc, #88]	; (8001b78 <HAL_ADC_Start_IT+0x1b0>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d11b      	bne.n	8001b5c <HAL_ADC_Start_IT+0x194>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d114      	bne.n	8001b5c <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	689a      	ldr	r2, [r3, #8]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b40:	609a      	str	r2, [r3, #8]
 8001b42:	e00b      	b.n	8001b5c <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b48:	f043 0210 	orr.w	r2, r3, #16
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b54:	f043 0201 	orr.w	r2, r3, #1
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3714      	adds	r7, #20
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	20000000 	.word	0x20000000
 8001b70:	431bde83 	.word	0x431bde83
 8001b74:	40012300 	.word	0x40012300
 8001b78:	40012000 	.word	0x40012000
 8001b7c:	40012100 	.word	0x40012100
 8001b80:	40012200 	.word	0x40012200

08001b84 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	60b9      	str	r1, [r7, #8]
 8001b8e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001b90:	2300      	movs	r3, #0
 8001b92:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d101      	bne.n	8001ba2 <HAL_ADC_Start_DMA+0x1e>
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	e0e9      	b.n	8001d76 <HAL_ADC_Start_DMA+0x1f2>
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f003 0301 	and.w	r3, r3, #1
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d018      	beq.n	8001bea <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	689a      	ldr	r2, [r3, #8]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f042 0201 	orr.w	r2, r2, #1
 8001bc6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001bc8:	4b6d      	ldr	r3, [pc, #436]	; (8001d80 <HAL_ADC_Start_DMA+0x1fc>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a6d      	ldr	r2, [pc, #436]	; (8001d84 <HAL_ADC_Start_DMA+0x200>)
 8001bce:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd2:	0c9a      	lsrs	r2, r3, #18
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	4413      	add	r3, r2
 8001bda:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001bdc:	e002      	b.n	8001be4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	3b01      	subs	r3, #1
 8001be2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1f9      	bne.n	8001bde <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bf8:	d107      	bne.n	8001c0a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	689a      	ldr	r2, [r3, #8]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c08:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f003 0301 	and.w	r3, r3, #1
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	f040 80a1 	bne.w	8001d5c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001c22:	f023 0301 	bic.w	r3, r3, #1
 8001c26:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d007      	beq.n	8001c4c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c40:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c44:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c58:	d106      	bne.n	8001c68 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5e:	f023 0206 	bic.w	r2, r3, #6
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	645a      	str	r2, [r3, #68]	; 0x44
 8001c66:	e002      	b.n	8001c6e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2200      	movs	r2, #0
 8001c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c76:	4b44      	ldr	r3, [pc, #272]	; (8001d88 <HAL_ADC_Start_DMA+0x204>)
 8001c78:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c7e:	4a43      	ldr	r2, [pc, #268]	; (8001d8c <HAL_ADC_Start_DMA+0x208>)
 8001c80:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c86:	4a42      	ldr	r2, [pc, #264]	; (8001d90 <HAL_ADC_Start_DMA+0x20c>)
 8001c88:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c8e:	4a41      	ldr	r2, [pc, #260]	; (8001d94 <HAL_ADC_Start_DMA+0x210>)
 8001c90:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001c9a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	685a      	ldr	r2, [r3, #4]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001caa:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	689a      	ldr	r2, [r3, #8]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cba:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	334c      	adds	r3, #76	; 0x4c
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	68ba      	ldr	r2, [r7, #8]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f000 fcfc 	bl	80026c8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f003 031f 	and.w	r3, r3, #31
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d12a      	bne.n	8001d32 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a2d      	ldr	r2, [pc, #180]	; (8001d98 <HAL_ADC_Start_DMA+0x214>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d015      	beq.n	8001d12 <HAL_ADC_Start_DMA+0x18e>
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a2c      	ldr	r2, [pc, #176]	; (8001d9c <HAL_ADC_Start_DMA+0x218>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d105      	bne.n	8001cfc <HAL_ADC_Start_DMA+0x178>
 8001cf0:	4b25      	ldr	r3, [pc, #148]	; (8001d88 <HAL_ADC_Start_DMA+0x204>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f003 031f 	and.w	r3, r3, #31
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d00a      	beq.n	8001d12 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a27      	ldr	r2, [pc, #156]	; (8001da0 <HAL_ADC_Start_DMA+0x21c>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d136      	bne.n	8001d74 <HAL_ADC_Start_DMA+0x1f0>
 8001d06:	4b20      	ldr	r3, [pc, #128]	; (8001d88 <HAL_ADC_Start_DMA+0x204>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f003 0310 	and.w	r3, r3, #16
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d130      	bne.n	8001d74 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d129      	bne.n	8001d74 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	689a      	ldr	r2, [r3, #8]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d2e:	609a      	str	r2, [r3, #8]
 8001d30:	e020      	b.n	8001d74 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a18      	ldr	r2, [pc, #96]	; (8001d98 <HAL_ADC_Start_DMA+0x214>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d11b      	bne.n	8001d74 <HAL_ADC_Start_DMA+0x1f0>
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d114      	bne.n	8001d74 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	689a      	ldr	r2, [r3, #8]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d58:	609a      	str	r2, [r3, #8]
 8001d5a:	e00b      	b.n	8001d74 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d60:	f043 0210 	orr.w	r2, r3, #16
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d6c:	f043 0201 	orr.w	r2, r3, #1
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3718      	adds	r7, #24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	20000000 	.word	0x20000000
 8001d84:	431bde83 	.word	0x431bde83
 8001d88:	40012300 	.word	0x40012300
 8001d8c:	08002245 	.word	0x08002245
 8001d90:	080022ff 	.word	0x080022ff
 8001d94:	0800231b 	.word	0x0800231b
 8001d98:	40012000 	.word	0x40012000
 8001d9c:	40012100 	.word	0x40012100
 8001da0:	40012200 	.word	0x40012200

08001da4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr

08001dbe <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	b083      	sub	sp, #12
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001dc6:	bf00      	nop
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr

08001dd2 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	b083      	sub	sp, #12
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001dda:	bf00      	nop
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
	...

08001de8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b085      	sub	sp, #20
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001df2:	2300      	movs	r3, #0
 8001df4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d101      	bne.n	8001e04 <HAL_ADC_ConfigChannel+0x1c>
 8001e00:	2302      	movs	r3, #2
 8001e02:	e113      	b.n	800202c <HAL_ADC_ConfigChannel+0x244>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2201      	movs	r2, #1
 8001e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2b09      	cmp	r3, #9
 8001e12:	d925      	bls.n	8001e60 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	68d9      	ldr	r1, [r3, #12]
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	461a      	mov	r2, r3
 8001e22:	4613      	mov	r3, r2
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	4413      	add	r3, r2
 8001e28:	3b1e      	subs	r3, #30
 8001e2a:	2207      	movs	r2, #7
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	43da      	mvns	r2, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	400a      	ands	r2, r1
 8001e38:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	68d9      	ldr	r1, [r3, #12]
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	689a      	ldr	r2, [r3, #8]
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	4403      	add	r3, r0
 8001e52:	3b1e      	subs	r3, #30
 8001e54:	409a      	lsls	r2, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	60da      	str	r2, [r3, #12]
 8001e5e:	e022      	b.n	8001ea6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	6919      	ldr	r1, [r3, #16]
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	4613      	mov	r3, r2
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	4413      	add	r3, r2
 8001e74:	2207      	movs	r2, #7
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	43da      	mvns	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	400a      	ands	r2, r1
 8001e82:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	6919      	ldr	r1, [r3, #16]
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	689a      	ldr	r2, [r3, #8]
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	4618      	mov	r0, r3
 8001e96:	4603      	mov	r3, r0
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	4403      	add	r3, r0
 8001e9c:	409a      	lsls	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	2b06      	cmp	r3, #6
 8001eac:	d824      	bhi.n	8001ef8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685a      	ldr	r2, [r3, #4]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	4413      	add	r3, r2
 8001ebe:	3b05      	subs	r3, #5
 8001ec0:	221f      	movs	r2, #31
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	43da      	mvns	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	400a      	ands	r2, r1
 8001ece:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	4618      	mov	r0, r3
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	685a      	ldr	r2, [r3, #4]
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	4413      	add	r3, r2
 8001ee8:	3b05      	subs	r3, #5
 8001eea:	fa00 f203 	lsl.w	r2, r0, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	635a      	str	r2, [r3, #52]	; 0x34
 8001ef6:	e04c      	b.n	8001f92 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	2b0c      	cmp	r3, #12
 8001efe:	d824      	bhi.n	8001f4a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685a      	ldr	r2, [r3, #4]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	4413      	add	r3, r2
 8001f10:	3b23      	subs	r3, #35	; 0x23
 8001f12:	221f      	movs	r2, #31
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	43da      	mvns	r2, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	400a      	ands	r2, r1
 8001f20:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	4618      	mov	r0, r3
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685a      	ldr	r2, [r3, #4]
 8001f34:	4613      	mov	r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	4413      	add	r3, r2
 8001f3a:	3b23      	subs	r3, #35	; 0x23
 8001f3c:	fa00 f203 	lsl.w	r2, r0, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	430a      	orrs	r2, r1
 8001f46:	631a      	str	r2, [r3, #48]	; 0x30
 8001f48:	e023      	b.n	8001f92 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685a      	ldr	r2, [r3, #4]
 8001f54:	4613      	mov	r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	4413      	add	r3, r2
 8001f5a:	3b41      	subs	r3, #65	; 0x41
 8001f5c:	221f      	movs	r2, #31
 8001f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f62:	43da      	mvns	r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	400a      	ands	r2, r1
 8001f6a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	4618      	mov	r0, r3
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685a      	ldr	r2, [r3, #4]
 8001f7e:	4613      	mov	r3, r2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	4413      	add	r3, r2
 8001f84:	3b41      	subs	r3, #65	; 0x41
 8001f86:	fa00 f203 	lsl.w	r2, r0, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	430a      	orrs	r2, r1
 8001f90:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f92:	4b29      	ldr	r3, [pc, #164]	; (8002038 <HAL_ADC_ConfigChannel+0x250>)
 8001f94:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a28      	ldr	r2, [pc, #160]	; (800203c <HAL_ADC_ConfigChannel+0x254>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d10f      	bne.n	8001fc0 <HAL_ADC_ConfigChannel+0x1d8>
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2b12      	cmp	r3, #18
 8001fa6:	d10b      	bne.n	8001fc0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a1d      	ldr	r2, [pc, #116]	; (800203c <HAL_ADC_ConfigChannel+0x254>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d12b      	bne.n	8002022 <HAL_ADC_ConfigChannel+0x23a>
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a1c      	ldr	r2, [pc, #112]	; (8002040 <HAL_ADC_ConfigChannel+0x258>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d003      	beq.n	8001fdc <HAL_ADC_ConfigChannel+0x1f4>
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2b11      	cmp	r3, #17
 8001fda:	d122      	bne.n	8002022 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a11      	ldr	r2, [pc, #68]	; (8002040 <HAL_ADC_ConfigChannel+0x258>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d111      	bne.n	8002022 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ffe:	4b11      	ldr	r3, [pc, #68]	; (8002044 <HAL_ADC_ConfigChannel+0x25c>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a11      	ldr	r2, [pc, #68]	; (8002048 <HAL_ADC_ConfigChannel+0x260>)
 8002004:	fba2 2303 	umull	r2, r3, r2, r3
 8002008:	0c9a      	lsrs	r2, r3, #18
 800200a:	4613      	mov	r3, r2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	4413      	add	r3, r2
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002014:	e002      	b.n	800201c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	3b01      	subs	r3, #1
 800201a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d1f9      	bne.n	8002016 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800202a:	2300      	movs	r3, #0
}
 800202c:	4618      	mov	r0, r3
 800202e:	3714      	adds	r7, #20
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr
 8002038:	40012300 	.word	0x40012300
 800203c:	40012000 	.word	0x40012000
 8002040:	10000012 	.word	0x10000012
 8002044:	20000000 	.word	0x20000000
 8002048:	431bde83 	.word	0x431bde83

0800204c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002054:	4b79      	ldr	r3, [pc, #484]	; (800223c <ADC_Init+0x1f0>)
 8002056:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	685a      	ldr	r2, [r3, #4]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	431a      	orrs	r2, r3
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	685a      	ldr	r2, [r3, #4]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002080:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	6859      	ldr	r1, [r3, #4]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	691b      	ldr	r3, [r3, #16]
 800208c:	021a      	lsls	r2, r3, #8
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	430a      	orrs	r2, r1
 8002094:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	685a      	ldr	r2, [r3, #4]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80020a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	6859      	ldr	r1, [r3, #4]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	689a      	ldr	r2, [r3, #8]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	430a      	orrs	r2, r1
 80020b6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	689a      	ldr	r2, [r3, #8]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	6899      	ldr	r1, [r3, #8]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	68da      	ldr	r2, [r3, #12]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	430a      	orrs	r2, r1
 80020d8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020de:	4a58      	ldr	r2, [pc, #352]	; (8002240 <ADC_Init+0x1f4>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d022      	beq.n	800212a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	689a      	ldr	r2, [r3, #8]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020f2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	6899      	ldr	r1, [r3, #8]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	430a      	orrs	r2, r1
 8002104:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	689a      	ldr	r2, [r3, #8]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002114:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	6899      	ldr	r1, [r3, #8]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	430a      	orrs	r2, r1
 8002126:	609a      	str	r2, [r3, #8]
 8002128:	e00f      	b.n	800214a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	689a      	ldr	r2, [r3, #8]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002138:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	689a      	ldr	r2, [r3, #8]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002148:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	689a      	ldr	r2, [r3, #8]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f022 0202 	bic.w	r2, r2, #2
 8002158:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	6899      	ldr	r1, [r3, #8]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	7e1b      	ldrb	r3, [r3, #24]
 8002164:	005a      	lsls	r2, r3, #1
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	430a      	orrs	r2, r1
 800216c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d01b      	beq.n	80021b0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	685a      	ldr	r2, [r3, #4]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002186:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	685a      	ldr	r2, [r3, #4]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002196:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	6859      	ldr	r1, [r3, #4]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a2:	3b01      	subs	r3, #1
 80021a4:	035a      	lsls	r2, r3, #13
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	430a      	orrs	r2, r1
 80021ac:	605a      	str	r2, [r3, #4]
 80021ae:	e007      	b.n	80021c0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	685a      	ldr	r2, [r3, #4]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021be:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80021ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	69db      	ldr	r3, [r3, #28]
 80021da:	3b01      	subs	r3, #1
 80021dc:	051a      	lsls	r2, r3, #20
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	430a      	orrs	r2, r1
 80021e4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	689a      	ldr	r2, [r3, #8]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80021f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	6899      	ldr	r1, [r3, #8]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002202:	025a      	lsls	r2, r3, #9
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	430a      	orrs	r2, r1
 800220a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	689a      	ldr	r2, [r3, #8]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800221a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	6899      	ldr	r1, [r3, #8]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	029a      	lsls	r2, r3, #10
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	430a      	orrs	r2, r1
 800222e:	609a      	str	r2, [r3, #8]
}
 8002230:	bf00      	nop
 8002232:	3714      	adds	r7, #20
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr
 800223c:	40012300 	.word	0x40012300
 8002240:	0f000001 	.word	0x0f000001

08002244 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002250:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002256:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800225a:	2b00      	cmp	r3, #0
 800225c:	d13c      	bne.n	80022d8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002262:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d12b      	bne.n	80022d0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800227c:	2b00      	cmp	r3, #0
 800227e:	d127      	bne.n	80022d0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002286:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800228a:	2b00      	cmp	r3, #0
 800228c:	d006      	beq.n	800229c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002298:	2b00      	cmp	r3, #0
 800229a:	d119      	bne.n	80022d0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	685a      	ldr	r2, [r3, #4]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f022 0220 	bic.w	r2, r2, #32
 80022aa:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d105      	bne.n	80022d0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c8:	f043 0201 	orr.w	r2, r3, #1
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80022d0:	68f8      	ldr	r0, [r7, #12]
 80022d2:	f7fe fd07 	bl	8000ce4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80022d6:	e00e      	b.n	80022f6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022dc:	f003 0310 	and.w	r3, r3, #16
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d003      	beq.n	80022ec <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80022e4:	68f8      	ldr	r0, [r7, #12]
 80022e6:	f7ff fd74 	bl	8001dd2 <HAL_ADC_ErrorCallback>
}
 80022ea:	e004      	b.n	80022f6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	4798      	blx	r3
}
 80022f6:	bf00      	nop
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	b084      	sub	sp, #16
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800230a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800230c:	68f8      	ldr	r0, [r7, #12]
 800230e:	f7ff fd56 	bl	8001dbe <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002312:	bf00      	nop
 8002314:	3710      	adds	r7, #16
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b084      	sub	sp, #16
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002326:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2240      	movs	r2, #64	; 0x40
 800232c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002332:	f043 0204 	orr.w	r2, r3, #4
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800233a:	68f8      	ldr	r0, [r7, #12]
 800233c:	f7ff fd49 	bl	8001dd2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002340:	bf00      	nop
 8002342:	3710      	adds	r7, #16
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002348:	b480      	push	{r7}
 800234a:	b085      	sub	sp, #20
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f003 0307 	and.w	r3, r3, #7
 8002356:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002358:	4b0c      	ldr	r3, [pc, #48]	; (800238c <__NVIC_SetPriorityGrouping+0x44>)
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800235e:	68ba      	ldr	r2, [r7, #8]
 8002360:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002364:	4013      	ands	r3, r2
 8002366:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002370:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002374:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002378:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800237a:	4a04      	ldr	r2, [pc, #16]	; (800238c <__NVIC_SetPriorityGrouping+0x44>)
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	60d3      	str	r3, [r2, #12]
}
 8002380:	bf00      	nop
 8002382:	3714      	adds	r7, #20
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr
 800238c:	e000ed00 	.word	0xe000ed00

08002390 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002394:	4b04      	ldr	r3, [pc, #16]	; (80023a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	0a1b      	lsrs	r3, r3, #8
 800239a:	f003 0307 	and.w	r3, r3, #7
}
 800239e:	4618      	mov	r0, r3
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	e000ed00 	.word	0xe000ed00

080023ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	4603      	mov	r3, r0
 80023b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	db0b      	blt.n	80023d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023be:	79fb      	ldrb	r3, [r7, #7]
 80023c0:	f003 021f 	and.w	r2, r3, #31
 80023c4:	4907      	ldr	r1, [pc, #28]	; (80023e4 <__NVIC_EnableIRQ+0x38>)
 80023c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ca:	095b      	lsrs	r3, r3, #5
 80023cc:	2001      	movs	r0, #1
 80023ce:	fa00 f202 	lsl.w	r2, r0, r2
 80023d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023d6:	bf00      	nop
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	e000e100 	.word	0xe000e100

080023e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	4603      	mov	r3, r0
 80023f0:	6039      	str	r1, [r7, #0]
 80023f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	db0a      	blt.n	8002412 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	b2da      	uxtb	r2, r3
 8002400:	490c      	ldr	r1, [pc, #48]	; (8002434 <__NVIC_SetPriority+0x4c>)
 8002402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002406:	0112      	lsls	r2, r2, #4
 8002408:	b2d2      	uxtb	r2, r2
 800240a:	440b      	add	r3, r1
 800240c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002410:	e00a      	b.n	8002428 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	b2da      	uxtb	r2, r3
 8002416:	4908      	ldr	r1, [pc, #32]	; (8002438 <__NVIC_SetPriority+0x50>)
 8002418:	79fb      	ldrb	r3, [r7, #7]
 800241a:	f003 030f 	and.w	r3, r3, #15
 800241e:	3b04      	subs	r3, #4
 8002420:	0112      	lsls	r2, r2, #4
 8002422:	b2d2      	uxtb	r2, r2
 8002424:	440b      	add	r3, r1
 8002426:	761a      	strb	r2, [r3, #24]
}
 8002428:	bf00      	nop
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr
 8002434:	e000e100 	.word	0xe000e100
 8002438:	e000ed00 	.word	0xe000ed00

0800243c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800243c:	b480      	push	{r7}
 800243e:	b089      	sub	sp, #36	; 0x24
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f003 0307 	and.w	r3, r3, #7
 800244e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	f1c3 0307 	rsb	r3, r3, #7
 8002456:	2b04      	cmp	r3, #4
 8002458:	bf28      	it	cs
 800245a:	2304      	movcs	r3, #4
 800245c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	3304      	adds	r3, #4
 8002462:	2b06      	cmp	r3, #6
 8002464:	d902      	bls.n	800246c <NVIC_EncodePriority+0x30>
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	3b03      	subs	r3, #3
 800246a:	e000      	b.n	800246e <NVIC_EncodePriority+0x32>
 800246c:	2300      	movs	r3, #0
 800246e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002470:	f04f 32ff 	mov.w	r2, #4294967295
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	fa02 f303 	lsl.w	r3, r2, r3
 800247a:	43da      	mvns	r2, r3
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	401a      	ands	r2, r3
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002484:	f04f 31ff 	mov.w	r1, #4294967295
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	fa01 f303 	lsl.w	r3, r1, r3
 800248e:	43d9      	mvns	r1, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002494:	4313      	orrs	r3, r2
         );
}
 8002496:	4618      	mov	r0, r3
 8002498:	3724      	adds	r7, #36	; 0x24
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
	...

080024a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	3b01      	subs	r3, #1
 80024b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024b4:	d301      	bcc.n	80024ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024b6:	2301      	movs	r3, #1
 80024b8:	e00f      	b.n	80024da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024ba:	4a0a      	ldr	r2, [pc, #40]	; (80024e4 <SysTick_Config+0x40>)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	3b01      	subs	r3, #1
 80024c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024c2:	210f      	movs	r1, #15
 80024c4:	f04f 30ff 	mov.w	r0, #4294967295
 80024c8:	f7ff ff8e 	bl	80023e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024cc:	4b05      	ldr	r3, [pc, #20]	; (80024e4 <SysTick_Config+0x40>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024d2:	4b04      	ldr	r3, [pc, #16]	; (80024e4 <SysTick_Config+0x40>)
 80024d4:	2207      	movs	r2, #7
 80024d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	e000e010 	.word	0xe000e010

080024e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f7ff ff29 	bl	8002348 <__NVIC_SetPriorityGrouping>
}
 80024f6:	bf00      	nop
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024fe:	b580      	push	{r7, lr}
 8002500:	b086      	sub	sp, #24
 8002502:	af00      	add	r7, sp, #0
 8002504:	4603      	mov	r3, r0
 8002506:	60b9      	str	r1, [r7, #8]
 8002508:	607a      	str	r2, [r7, #4]
 800250a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800250c:	2300      	movs	r3, #0
 800250e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002510:	f7ff ff3e 	bl	8002390 <__NVIC_GetPriorityGrouping>
 8002514:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	68b9      	ldr	r1, [r7, #8]
 800251a:	6978      	ldr	r0, [r7, #20]
 800251c:	f7ff ff8e 	bl	800243c <NVIC_EncodePriority>
 8002520:	4602      	mov	r2, r0
 8002522:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002526:	4611      	mov	r1, r2
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff ff5d 	bl	80023e8 <__NVIC_SetPriority>
}
 800252e:	bf00      	nop
 8002530:	3718      	adds	r7, #24
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	b082      	sub	sp, #8
 800253a:	af00      	add	r7, sp, #0
 800253c:	4603      	mov	r3, r0
 800253e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002544:	4618      	mov	r0, r3
 8002546:	f7ff ff31 	bl	80023ac <__NVIC_EnableIRQ>
}
 800254a:	bf00      	nop
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	b082      	sub	sp, #8
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f7ff ffa2 	bl	80024a4 <SysTick_Config>
 8002560:	4603      	mov	r3, r0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
	...

0800256c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b086      	sub	sp, #24
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002574:	2300      	movs	r3, #0
 8002576:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002578:	f7ff f9d6 	bl	8001928 <HAL_GetTick>
 800257c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d101      	bne.n	8002588 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e099      	b.n	80026bc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2202      	movs	r2, #2
 800258c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f022 0201 	bic.w	r2, r2, #1
 80025a6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025a8:	e00f      	b.n	80025ca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025aa:	f7ff f9bd 	bl	8001928 <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	2b05      	cmp	r3, #5
 80025b6:	d908      	bls.n	80025ca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2220      	movs	r2, #32
 80025bc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2203      	movs	r2, #3
 80025c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e078      	b.n	80026bc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0301 	and.w	r3, r3, #1
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d1e8      	bne.n	80025aa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80025e0:	697a      	ldr	r2, [r7, #20]
 80025e2:	4b38      	ldr	r3, [pc, #224]	; (80026c4 <HAL_DMA_Init+0x158>)
 80025e4:	4013      	ands	r3, r2
 80025e6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685a      	ldr	r2, [r3, #4]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002602:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800260e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a1b      	ldr	r3, [r3, #32]
 8002614:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002616:	697a      	ldr	r2, [r7, #20]
 8002618:	4313      	orrs	r3, r2
 800261a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002620:	2b04      	cmp	r3, #4
 8002622:	d107      	bne.n	8002634 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262c:	4313      	orrs	r3, r2
 800262e:	697a      	ldr	r2, [r7, #20]
 8002630:	4313      	orrs	r3, r2
 8002632:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	697a      	ldr	r2, [r7, #20]
 800263a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	695b      	ldr	r3, [r3, #20]
 8002642:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	f023 0307 	bic.w	r3, r3, #7
 800264a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002650:	697a      	ldr	r2, [r7, #20]
 8002652:	4313      	orrs	r3, r2
 8002654:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265a:	2b04      	cmp	r3, #4
 800265c:	d117      	bne.n	800268e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002662:	697a      	ldr	r2, [r7, #20]
 8002664:	4313      	orrs	r3, r2
 8002666:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800266c:	2b00      	cmp	r3, #0
 800266e:	d00e      	beq.n	800268e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f000 fa6f 	bl	8002b54 <DMA_CheckFifoParam>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d008      	beq.n	800268e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2240      	movs	r2, #64	; 0x40
 8002680:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2201      	movs	r2, #1
 8002686:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800268a:	2301      	movs	r3, #1
 800268c:	e016      	b.n	80026bc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	697a      	ldr	r2, [r7, #20]
 8002694:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 fa26 	bl	8002ae8 <DMA_CalcBaseAndBitshift>
 800269c:	4603      	mov	r3, r0
 800269e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a4:	223f      	movs	r2, #63	; 0x3f
 80026a6:	409a      	lsls	r2, r3
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2201      	movs	r2, #1
 80026b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3718      	adds	r7, #24
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	f010803f 	.word	0xf010803f

080026c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	607a      	str	r2, [r7, #4]
 80026d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026d6:	2300      	movs	r3, #0
 80026d8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026de:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d101      	bne.n	80026ee <HAL_DMA_Start_IT+0x26>
 80026ea:	2302      	movs	r3, #2
 80026ec:	e040      	b.n	8002770 <HAL_DMA_Start_IT+0xa8>
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2201      	movs	r2, #1
 80026f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d12f      	bne.n	8002762 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2202      	movs	r2, #2
 8002706:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2200      	movs	r2, #0
 800270e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	68b9      	ldr	r1, [r7, #8]
 8002716:	68f8      	ldr	r0, [r7, #12]
 8002718:	f000 f9b8 	bl	8002a8c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002720:	223f      	movs	r2, #63	; 0x3f
 8002722:	409a      	lsls	r2, r3
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f042 0216 	orr.w	r2, r2, #22
 8002736:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273c:	2b00      	cmp	r3, #0
 800273e:	d007      	beq.n	8002750 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f042 0208 	orr.w	r2, r2, #8
 800274e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f042 0201 	orr.w	r2, r2, #1
 800275e:	601a      	str	r2, [r3, #0]
 8002760:	e005      	b.n	800276e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800276a:	2302      	movs	r3, #2
 800276c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800276e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002770:	4618      	mov	r0, r3
 8002772:	3718      	adds	r7, #24
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}

08002778 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b086      	sub	sp, #24
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002780:	2300      	movs	r3, #0
 8002782:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002784:	4b8e      	ldr	r3, [pc, #568]	; (80029c0 <HAL_DMA_IRQHandler+0x248>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a8e      	ldr	r2, [pc, #568]	; (80029c4 <HAL_DMA_IRQHandler+0x24c>)
 800278a:	fba2 2303 	umull	r2, r3, r2, r3
 800278e:	0a9b      	lsrs	r3, r3, #10
 8002790:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002796:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a2:	2208      	movs	r2, #8
 80027a4:	409a      	lsls	r2, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	4013      	ands	r3, r2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d01a      	beq.n	80027e4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0304 	and.w	r3, r3, #4
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d013      	beq.n	80027e4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f022 0204 	bic.w	r2, r2, #4
 80027ca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027d0:	2208      	movs	r2, #8
 80027d2:	409a      	lsls	r2, r3
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027dc:	f043 0201 	orr.w	r2, r3, #1
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e8:	2201      	movs	r2, #1
 80027ea:	409a      	lsls	r2, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	4013      	ands	r3, r2
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d012      	beq.n	800281a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	695b      	ldr	r3, [r3, #20]
 80027fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d00b      	beq.n	800281a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002806:	2201      	movs	r2, #1
 8002808:	409a      	lsls	r2, r3
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002812:	f043 0202 	orr.w	r2, r3, #2
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800281e:	2204      	movs	r2, #4
 8002820:	409a      	lsls	r2, r3
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	4013      	ands	r3, r2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d012      	beq.n	8002850 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0302 	and.w	r3, r3, #2
 8002834:	2b00      	cmp	r3, #0
 8002836:	d00b      	beq.n	8002850 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800283c:	2204      	movs	r2, #4
 800283e:	409a      	lsls	r2, r3
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002848:	f043 0204 	orr.w	r2, r3, #4
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002854:	2210      	movs	r2, #16
 8002856:	409a      	lsls	r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	4013      	ands	r3, r2
 800285c:	2b00      	cmp	r3, #0
 800285e:	d043      	beq.n	80028e8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0308 	and.w	r3, r3, #8
 800286a:	2b00      	cmp	r3, #0
 800286c:	d03c      	beq.n	80028e8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002872:	2210      	movs	r2, #16
 8002874:	409a      	lsls	r2, r3
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d018      	beq.n	80028ba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d108      	bne.n	80028a8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289a:	2b00      	cmp	r3, #0
 800289c:	d024      	beq.n	80028e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	4798      	blx	r3
 80028a6:	e01f      	b.n	80028e8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d01b      	beq.n	80028e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	4798      	blx	r3
 80028b8:	e016      	b.n	80028e8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d107      	bne.n	80028d8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f022 0208 	bic.w	r2, r2, #8
 80028d6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d003      	beq.n	80028e8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ec:	2220      	movs	r2, #32
 80028ee:	409a      	lsls	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	4013      	ands	r3, r2
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	f000 808f 	beq.w	8002a18 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0310 	and.w	r3, r3, #16
 8002904:	2b00      	cmp	r3, #0
 8002906:	f000 8087 	beq.w	8002a18 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800290e:	2220      	movs	r2, #32
 8002910:	409a      	lsls	r2, r3
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800291c:	b2db      	uxtb	r3, r3
 800291e:	2b05      	cmp	r3, #5
 8002920:	d136      	bne.n	8002990 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f022 0216 	bic.w	r2, r2, #22
 8002930:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	695a      	ldr	r2, [r3, #20]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002940:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002946:	2b00      	cmp	r3, #0
 8002948:	d103      	bne.n	8002952 <HAL_DMA_IRQHandler+0x1da>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800294e:	2b00      	cmp	r3, #0
 8002950:	d007      	beq.n	8002962 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f022 0208 	bic.w	r2, r2, #8
 8002960:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002966:	223f      	movs	r2, #63	; 0x3f
 8002968:	409a      	lsls	r2, r3
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2201      	movs	r2, #1
 8002972:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002982:	2b00      	cmp	r3, #0
 8002984:	d07e      	beq.n	8002a84 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	4798      	blx	r3
        }
        return;
 800298e:	e079      	b.n	8002a84 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d01d      	beq.n	80029da <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d10d      	bne.n	80029c8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d031      	beq.n	8002a18 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	4798      	blx	r3
 80029bc:	e02c      	b.n	8002a18 <HAL_DMA_IRQHandler+0x2a0>
 80029be:	bf00      	nop
 80029c0:	20000000 	.word	0x20000000
 80029c4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d023      	beq.n	8002a18 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	4798      	blx	r3
 80029d8:	e01e      	b.n	8002a18 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d10f      	bne.n	8002a08 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f022 0210 	bic.w	r2, r2, #16
 80029f6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d003      	beq.n	8002a18 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d032      	beq.n	8002a86 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a24:	f003 0301 	and.w	r3, r3, #1
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d022      	beq.n	8002a72 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2205      	movs	r2, #5
 8002a30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f022 0201 	bic.w	r2, r2, #1
 8002a42:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	3301      	adds	r3, #1
 8002a48:	60bb      	str	r3, [r7, #8]
 8002a4a:	697a      	ldr	r2, [r7, #20]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d307      	bcc.n	8002a60 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1f2      	bne.n	8002a44 <HAL_DMA_IRQHandler+0x2cc>
 8002a5e:	e000      	b.n	8002a62 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002a60:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2201      	movs	r2, #1
 8002a66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d005      	beq.n	8002a86 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	4798      	blx	r3
 8002a82:	e000      	b.n	8002a86 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002a84:	bf00      	nop
    }
  }
}
 8002a86:	3718      	adds	r7, #24
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	607a      	str	r2, [r7, #4]
 8002a98:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002aa8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	683a      	ldr	r2, [r7, #0]
 8002ab0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	2b40      	cmp	r3, #64	; 0x40
 8002ab8:	d108      	bne.n	8002acc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	68ba      	ldr	r2, [r7, #8]
 8002ac8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002aca:	e007      	b.n	8002adc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68ba      	ldr	r2, [r7, #8]
 8002ad2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	60da      	str	r2, [r3, #12]
}
 8002adc:	bf00      	nop
 8002ade:	3714      	adds	r7, #20
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	3b10      	subs	r3, #16
 8002af8:	4a14      	ldr	r2, [pc, #80]	; (8002b4c <DMA_CalcBaseAndBitshift+0x64>)
 8002afa:	fba2 2303 	umull	r2, r3, r2, r3
 8002afe:	091b      	lsrs	r3, r3, #4
 8002b00:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b02:	4a13      	ldr	r2, [pc, #76]	; (8002b50 <DMA_CalcBaseAndBitshift+0x68>)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	4413      	add	r3, r2
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2b03      	cmp	r3, #3
 8002b14:	d909      	bls.n	8002b2a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b1e:	f023 0303 	bic.w	r3, r3, #3
 8002b22:	1d1a      	adds	r2, r3, #4
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	659a      	str	r2, [r3, #88]	; 0x58
 8002b28:	e007      	b.n	8002b3a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b32:	f023 0303 	bic.w	r3, r3, #3
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3714      	adds	r7, #20
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	aaaaaaab 	.word	0xaaaaaaab
 8002b50:	080049ac 	.word	0x080049ac

08002b54 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b085      	sub	sp, #20
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b64:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d11f      	bne.n	8002bae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	2b03      	cmp	r3, #3
 8002b72:	d856      	bhi.n	8002c22 <DMA_CheckFifoParam+0xce>
 8002b74:	a201      	add	r2, pc, #4	; (adr r2, 8002b7c <DMA_CheckFifoParam+0x28>)
 8002b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b7a:	bf00      	nop
 8002b7c:	08002b8d 	.word	0x08002b8d
 8002b80:	08002b9f 	.word	0x08002b9f
 8002b84:	08002b8d 	.word	0x08002b8d
 8002b88:	08002c23 	.word	0x08002c23
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d046      	beq.n	8002c26 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b9c:	e043      	b.n	8002c26 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ba6:	d140      	bne.n	8002c2a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bac:	e03d      	b.n	8002c2a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	699b      	ldr	r3, [r3, #24]
 8002bb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bb6:	d121      	bne.n	8002bfc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	2b03      	cmp	r3, #3
 8002bbc:	d837      	bhi.n	8002c2e <DMA_CheckFifoParam+0xda>
 8002bbe:	a201      	add	r2, pc, #4	; (adr r2, 8002bc4 <DMA_CheckFifoParam+0x70>)
 8002bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bc4:	08002bd5 	.word	0x08002bd5
 8002bc8:	08002bdb 	.word	0x08002bdb
 8002bcc:	08002bd5 	.word	0x08002bd5
 8002bd0:	08002bed 	.word	0x08002bed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	73fb      	strb	r3, [r7, #15]
      break;
 8002bd8:	e030      	b.n	8002c3c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bde:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d025      	beq.n	8002c32 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bea:	e022      	b.n	8002c32 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002bf4:	d11f      	bne.n	8002c36 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002bfa:	e01c      	b.n	8002c36 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d903      	bls.n	8002c0a <DMA_CheckFifoParam+0xb6>
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	2b03      	cmp	r3, #3
 8002c06:	d003      	beq.n	8002c10 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c08:	e018      	b.n	8002c3c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	73fb      	strb	r3, [r7, #15]
      break;
 8002c0e:	e015      	b.n	8002c3c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d00e      	beq.n	8002c3a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	73fb      	strb	r3, [r7, #15]
      break;
 8002c20:	e00b      	b.n	8002c3a <DMA_CheckFifoParam+0xe6>
      break;
 8002c22:	bf00      	nop
 8002c24:	e00a      	b.n	8002c3c <DMA_CheckFifoParam+0xe8>
      break;
 8002c26:	bf00      	nop
 8002c28:	e008      	b.n	8002c3c <DMA_CheckFifoParam+0xe8>
      break;
 8002c2a:	bf00      	nop
 8002c2c:	e006      	b.n	8002c3c <DMA_CheckFifoParam+0xe8>
      break;
 8002c2e:	bf00      	nop
 8002c30:	e004      	b.n	8002c3c <DMA_CheckFifoParam+0xe8>
      break;
 8002c32:	bf00      	nop
 8002c34:	e002      	b.n	8002c3c <DMA_CheckFifoParam+0xe8>
      break;   
 8002c36:	bf00      	nop
 8002c38:	e000      	b.n	8002c3c <DMA_CheckFifoParam+0xe8>
      break;
 8002c3a:	bf00      	nop
    }
  } 
  
  return status; 
 8002c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3714      	adds	r7, #20
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop

08002c4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b089      	sub	sp, #36	; 0x24
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c56:	2300      	movs	r3, #0
 8002c58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c62:	2300      	movs	r3, #0
 8002c64:	61fb      	str	r3, [r7, #28]
 8002c66:	e165      	b.n	8002f34 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c68:	2201      	movs	r2, #1
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	697a      	ldr	r2, [r7, #20]
 8002c78:	4013      	ands	r3, r2
 8002c7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c7c:	693a      	ldr	r2, [r7, #16]
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	f040 8154 	bne.w	8002f2e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f003 0303 	and.w	r3, r3, #3
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d005      	beq.n	8002c9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d130      	bne.n	8002d00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	005b      	lsls	r3, r3, #1
 8002ca8:	2203      	movs	r2, #3
 8002caa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cae:	43db      	mvns	r3, r3
 8002cb0:	69ba      	ldr	r2, [r7, #24]
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	68da      	ldr	r2, [r3, #12]
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc2:	69ba      	ldr	r2, [r7, #24]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	69ba      	ldr	r2, [r7, #24]
 8002ccc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cdc:	43db      	mvns	r3, r3
 8002cde:	69ba      	ldr	r2, [r7, #24]
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	091b      	lsrs	r3, r3, #4
 8002cea:	f003 0201 	and.w	r2, r3, #1
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf4:	69ba      	ldr	r2, [r7, #24]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f003 0303 	and.w	r3, r3, #3
 8002d08:	2b03      	cmp	r3, #3
 8002d0a:	d017      	beq.n	8002d3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	005b      	lsls	r3, r3, #1
 8002d16:	2203      	movs	r2, #3
 8002d18:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1c:	43db      	mvns	r3, r3
 8002d1e:	69ba      	ldr	r2, [r7, #24]
 8002d20:	4013      	ands	r3, r2
 8002d22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	689a      	ldr	r2, [r3, #8]
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f003 0303 	and.w	r3, r3, #3
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d123      	bne.n	8002d90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	08da      	lsrs	r2, r3, #3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	3208      	adds	r2, #8
 8002d50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	f003 0307 	and.w	r3, r3, #7
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	220f      	movs	r2, #15
 8002d60:	fa02 f303 	lsl.w	r3, r2, r3
 8002d64:	43db      	mvns	r3, r3
 8002d66:	69ba      	ldr	r2, [r7, #24]
 8002d68:	4013      	ands	r3, r2
 8002d6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	691a      	ldr	r2, [r3, #16]
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	f003 0307 	and.w	r3, r3, #7
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	08da      	lsrs	r2, r3, #3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	3208      	adds	r2, #8
 8002d8a:	69b9      	ldr	r1, [r7, #24]
 8002d8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	005b      	lsls	r3, r3, #1
 8002d9a:	2203      	movs	r2, #3
 8002d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002da0:	43db      	mvns	r3, r3
 8002da2:	69ba      	ldr	r2, [r7, #24]
 8002da4:	4013      	ands	r3, r2
 8002da6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f003 0203 	and.w	r2, r3, #3
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	fa02 f303 	lsl.w	r3, r2, r3
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	f000 80ae 	beq.w	8002f2e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	60fb      	str	r3, [r7, #12]
 8002dd6:	4b5d      	ldr	r3, [pc, #372]	; (8002f4c <HAL_GPIO_Init+0x300>)
 8002dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dda:	4a5c      	ldr	r2, [pc, #368]	; (8002f4c <HAL_GPIO_Init+0x300>)
 8002ddc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002de0:	6453      	str	r3, [r2, #68]	; 0x44
 8002de2:	4b5a      	ldr	r3, [pc, #360]	; (8002f4c <HAL_GPIO_Init+0x300>)
 8002de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dea:	60fb      	str	r3, [r7, #12]
 8002dec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002dee:	4a58      	ldr	r2, [pc, #352]	; (8002f50 <HAL_GPIO_Init+0x304>)
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	089b      	lsrs	r3, r3, #2
 8002df4:	3302      	adds	r3, #2
 8002df6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	f003 0303 	and.w	r3, r3, #3
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	220f      	movs	r2, #15
 8002e06:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0a:	43db      	mvns	r3, r3
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a4f      	ldr	r2, [pc, #316]	; (8002f54 <HAL_GPIO_Init+0x308>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d025      	beq.n	8002e66 <HAL_GPIO_Init+0x21a>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a4e      	ldr	r2, [pc, #312]	; (8002f58 <HAL_GPIO_Init+0x30c>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d01f      	beq.n	8002e62 <HAL_GPIO_Init+0x216>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a4d      	ldr	r2, [pc, #308]	; (8002f5c <HAL_GPIO_Init+0x310>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d019      	beq.n	8002e5e <HAL_GPIO_Init+0x212>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a4c      	ldr	r2, [pc, #304]	; (8002f60 <HAL_GPIO_Init+0x314>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d013      	beq.n	8002e5a <HAL_GPIO_Init+0x20e>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a4b      	ldr	r2, [pc, #300]	; (8002f64 <HAL_GPIO_Init+0x318>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d00d      	beq.n	8002e56 <HAL_GPIO_Init+0x20a>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a4a      	ldr	r2, [pc, #296]	; (8002f68 <HAL_GPIO_Init+0x31c>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d007      	beq.n	8002e52 <HAL_GPIO_Init+0x206>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a49      	ldr	r2, [pc, #292]	; (8002f6c <HAL_GPIO_Init+0x320>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d101      	bne.n	8002e4e <HAL_GPIO_Init+0x202>
 8002e4a:	2306      	movs	r3, #6
 8002e4c:	e00c      	b.n	8002e68 <HAL_GPIO_Init+0x21c>
 8002e4e:	2307      	movs	r3, #7
 8002e50:	e00a      	b.n	8002e68 <HAL_GPIO_Init+0x21c>
 8002e52:	2305      	movs	r3, #5
 8002e54:	e008      	b.n	8002e68 <HAL_GPIO_Init+0x21c>
 8002e56:	2304      	movs	r3, #4
 8002e58:	e006      	b.n	8002e68 <HAL_GPIO_Init+0x21c>
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e004      	b.n	8002e68 <HAL_GPIO_Init+0x21c>
 8002e5e:	2302      	movs	r3, #2
 8002e60:	e002      	b.n	8002e68 <HAL_GPIO_Init+0x21c>
 8002e62:	2301      	movs	r3, #1
 8002e64:	e000      	b.n	8002e68 <HAL_GPIO_Init+0x21c>
 8002e66:	2300      	movs	r3, #0
 8002e68:	69fa      	ldr	r2, [r7, #28]
 8002e6a:	f002 0203 	and.w	r2, r2, #3
 8002e6e:	0092      	lsls	r2, r2, #2
 8002e70:	4093      	lsls	r3, r2
 8002e72:	69ba      	ldr	r2, [r7, #24]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e78:	4935      	ldr	r1, [pc, #212]	; (8002f50 <HAL_GPIO_Init+0x304>)
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	089b      	lsrs	r3, r3, #2
 8002e7e:	3302      	adds	r3, #2
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e86:	4b3a      	ldr	r3, [pc, #232]	; (8002f70 <HAL_GPIO_Init+0x324>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	43db      	mvns	r3, r3
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	4013      	ands	r3, r2
 8002e94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d003      	beq.n	8002eaa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002ea2:	69ba      	ldr	r2, [r7, #24]
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002eaa:	4a31      	ldr	r2, [pc, #196]	; (8002f70 <HAL_GPIO_Init+0x324>)
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002eb0:	4b2f      	ldr	r3, [pc, #188]	; (8002f70 <HAL_GPIO_Init+0x324>)
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	43db      	mvns	r3, r3
 8002eba:	69ba      	ldr	r2, [r7, #24]
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d003      	beq.n	8002ed4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002ecc:	69ba      	ldr	r2, [r7, #24]
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ed4:	4a26      	ldr	r2, [pc, #152]	; (8002f70 <HAL_GPIO_Init+0x324>)
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002eda:	4b25      	ldr	r3, [pc, #148]	; (8002f70 <HAL_GPIO_Init+0x324>)
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	43db      	mvns	r3, r3
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d003      	beq.n	8002efe <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002ef6:	69ba      	ldr	r2, [r7, #24]
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002efe:	4a1c      	ldr	r2, [pc, #112]	; (8002f70 <HAL_GPIO_Init+0x324>)
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f04:	4b1a      	ldr	r3, [pc, #104]	; (8002f70 <HAL_GPIO_Init+0x324>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	43db      	mvns	r3, r3
 8002f0e:	69ba      	ldr	r2, [r7, #24]
 8002f10:	4013      	ands	r3, r2
 8002f12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d003      	beq.n	8002f28 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002f20:	69ba      	ldr	r2, [r7, #24]
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f28:	4a11      	ldr	r2, [pc, #68]	; (8002f70 <HAL_GPIO_Init+0x324>)
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	3301      	adds	r3, #1
 8002f32:	61fb      	str	r3, [r7, #28]
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	2b0f      	cmp	r3, #15
 8002f38:	f67f ae96 	bls.w	8002c68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f3c:	bf00      	nop
 8002f3e:	bf00      	nop
 8002f40:	3724      	adds	r7, #36	; 0x24
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	40023800 	.word	0x40023800
 8002f50:	40013800 	.word	0x40013800
 8002f54:	40020000 	.word	0x40020000
 8002f58:	40020400 	.word	0x40020400
 8002f5c:	40020800 	.word	0x40020800
 8002f60:	40020c00 	.word	0x40020c00
 8002f64:	40021000 	.word	0x40021000
 8002f68:	40021400 	.word	0x40021400
 8002f6c:	40021800 	.word	0x40021800
 8002f70:	40013c00 	.word	0x40013c00

08002f74 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002f7e:	2300      	movs	r3, #0
 8002f80:	603b      	str	r3, [r7, #0]
 8002f82:	4b20      	ldr	r3, [pc, #128]	; (8003004 <HAL_PWREx_EnableOverDrive+0x90>)
 8002f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f86:	4a1f      	ldr	r2, [pc, #124]	; (8003004 <HAL_PWREx_EnableOverDrive+0x90>)
 8002f88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f8c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f8e:	4b1d      	ldr	r3, [pc, #116]	; (8003004 <HAL_PWREx_EnableOverDrive+0x90>)
 8002f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f96:	603b      	str	r3, [r7, #0]
 8002f98:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002f9a:	4b1b      	ldr	r3, [pc, #108]	; (8003008 <HAL_PWREx_EnableOverDrive+0x94>)
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002fa0:	f7fe fcc2 	bl	8001928 <HAL_GetTick>
 8002fa4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002fa6:	e009      	b.n	8002fbc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002fa8:	f7fe fcbe 	bl	8001928 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002fb6:	d901      	bls.n	8002fbc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e01f      	b.n	8002ffc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002fbc:	4b13      	ldr	r3, [pc, #76]	; (800300c <HAL_PWREx_EnableOverDrive+0x98>)
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fc8:	d1ee      	bne.n	8002fa8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002fca:	4b11      	ldr	r3, [pc, #68]	; (8003010 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002fcc:	2201      	movs	r2, #1
 8002fce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002fd0:	f7fe fcaa 	bl	8001928 <HAL_GetTick>
 8002fd4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002fd6:	e009      	b.n	8002fec <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002fd8:	f7fe fca6 	bl	8001928 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002fe6:	d901      	bls.n	8002fec <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e007      	b.n	8002ffc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002fec:	4b07      	ldr	r3, [pc, #28]	; (800300c <HAL_PWREx_EnableOverDrive+0x98>)
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ff8:	d1ee      	bne.n	8002fd8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002ffa:	2300      	movs	r3, #0
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3708      	adds	r7, #8
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	40023800 	.word	0x40023800
 8003008:	420e0040 	.word	0x420e0040
 800300c:	40007000 	.word	0x40007000
 8003010:	420e0044 	.word	0x420e0044

08003014 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d101      	bne.n	8003028 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e0cc      	b.n	80031c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003028:	4b68      	ldr	r3, [pc, #416]	; (80031cc <HAL_RCC_ClockConfig+0x1b8>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 030f 	and.w	r3, r3, #15
 8003030:	683a      	ldr	r2, [r7, #0]
 8003032:	429a      	cmp	r2, r3
 8003034:	d90c      	bls.n	8003050 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003036:	4b65      	ldr	r3, [pc, #404]	; (80031cc <HAL_RCC_ClockConfig+0x1b8>)
 8003038:	683a      	ldr	r2, [r7, #0]
 800303a:	b2d2      	uxtb	r2, r2
 800303c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800303e:	4b63      	ldr	r3, [pc, #396]	; (80031cc <HAL_RCC_ClockConfig+0x1b8>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 030f 	and.w	r3, r3, #15
 8003046:	683a      	ldr	r2, [r7, #0]
 8003048:	429a      	cmp	r2, r3
 800304a:	d001      	beq.n	8003050 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e0b8      	b.n	80031c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0302 	and.w	r3, r3, #2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d020      	beq.n	800309e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0304 	and.w	r3, r3, #4
 8003064:	2b00      	cmp	r3, #0
 8003066:	d005      	beq.n	8003074 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003068:	4b59      	ldr	r3, [pc, #356]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	4a58      	ldr	r2, [pc, #352]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 800306e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003072:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0308 	and.w	r3, r3, #8
 800307c:	2b00      	cmp	r3, #0
 800307e:	d005      	beq.n	800308c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003080:	4b53      	ldr	r3, [pc, #332]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	4a52      	ldr	r2, [pc, #328]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003086:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800308a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800308c:	4b50      	ldr	r3, [pc, #320]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	494d      	ldr	r1, [pc, #308]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 800309a:	4313      	orrs	r3, r2
 800309c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d044      	beq.n	8003134 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d107      	bne.n	80030c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030b2:	4b47      	ldr	r3, [pc, #284]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d119      	bne.n	80030f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e07f      	b.n	80031c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d003      	beq.n	80030d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030ce:	2b03      	cmp	r3, #3
 80030d0:	d107      	bne.n	80030e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030d2:	4b3f      	ldr	r3, [pc, #252]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d109      	bne.n	80030f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e06f      	b.n	80031c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030e2:	4b3b      	ldr	r3, [pc, #236]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0302 	and.w	r3, r3, #2
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d101      	bne.n	80030f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e067      	b.n	80031c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030f2:	4b37      	ldr	r3, [pc, #220]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	f023 0203 	bic.w	r2, r3, #3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	4934      	ldr	r1, [pc, #208]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003100:	4313      	orrs	r3, r2
 8003102:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003104:	f7fe fc10 	bl	8001928 <HAL_GetTick>
 8003108:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800310a:	e00a      	b.n	8003122 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800310c:	f7fe fc0c 	bl	8001928 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	f241 3288 	movw	r2, #5000	; 0x1388
 800311a:	4293      	cmp	r3, r2
 800311c:	d901      	bls.n	8003122 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e04f      	b.n	80031c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003122:	4b2b      	ldr	r3, [pc, #172]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f003 020c 	and.w	r2, r3, #12
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	429a      	cmp	r2, r3
 8003132:	d1eb      	bne.n	800310c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003134:	4b25      	ldr	r3, [pc, #148]	; (80031cc <HAL_RCC_ClockConfig+0x1b8>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 030f 	and.w	r3, r3, #15
 800313c:	683a      	ldr	r2, [r7, #0]
 800313e:	429a      	cmp	r2, r3
 8003140:	d20c      	bcs.n	800315c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003142:	4b22      	ldr	r3, [pc, #136]	; (80031cc <HAL_RCC_ClockConfig+0x1b8>)
 8003144:	683a      	ldr	r2, [r7, #0]
 8003146:	b2d2      	uxtb	r2, r2
 8003148:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800314a:	4b20      	ldr	r3, [pc, #128]	; (80031cc <HAL_RCC_ClockConfig+0x1b8>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 030f 	and.w	r3, r3, #15
 8003152:	683a      	ldr	r2, [r7, #0]
 8003154:	429a      	cmp	r2, r3
 8003156:	d001      	beq.n	800315c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e032      	b.n	80031c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0304 	and.w	r3, r3, #4
 8003164:	2b00      	cmp	r3, #0
 8003166:	d008      	beq.n	800317a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003168:	4b19      	ldr	r3, [pc, #100]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	4916      	ldr	r1, [pc, #88]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003176:	4313      	orrs	r3, r2
 8003178:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0308 	and.w	r3, r3, #8
 8003182:	2b00      	cmp	r3, #0
 8003184:	d009      	beq.n	800319a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003186:	4b12      	ldr	r3, [pc, #72]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	490e      	ldr	r1, [pc, #56]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003196:	4313      	orrs	r3, r2
 8003198:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800319a:	f000 f821 	bl	80031e0 <HAL_RCC_GetSysClockFreq>
 800319e:	4602      	mov	r2, r0
 80031a0:	4b0b      	ldr	r3, [pc, #44]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	091b      	lsrs	r3, r3, #4
 80031a6:	f003 030f 	and.w	r3, r3, #15
 80031aa:	490a      	ldr	r1, [pc, #40]	; (80031d4 <HAL_RCC_ClockConfig+0x1c0>)
 80031ac:	5ccb      	ldrb	r3, [r1, r3]
 80031ae:	fa22 f303 	lsr.w	r3, r2, r3
 80031b2:	4a09      	ldr	r2, [pc, #36]	; (80031d8 <HAL_RCC_ClockConfig+0x1c4>)
 80031b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80031b6:	4b09      	ldr	r3, [pc, #36]	; (80031dc <HAL_RCC_ClockConfig+0x1c8>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7fe fb70 	bl	80018a0 <HAL_InitTick>

  return HAL_OK;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3710      	adds	r7, #16
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	40023c00 	.word	0x40023c00
 80031d0:	40023800 	.word	0x40023800
 80031d4:	0800499c 	.word	0x0800499c
 80031d8:	20000000 	.word	0x20000000
 80031dc:	20000004 	.word	0x20000004

080031e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031e4:	b0ae      	sub	sp, #184	; 0xb8
 80031e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80031e8:	2300      	movs	r3, #0
 80031ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80031ee:	2300      	movs	r3, #0
 80031f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80031f4:	2300      	movs	r3, #0
 80031f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80031fa:	2300      	movs	r3, #0
 80031fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003200:	2300      	movs	r3, #0
 8003202:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003206:	4bcb      	ldr	r3, [pc, #812]	; (8003534 <HAL_RCC_GetSysClockFreq+0x354>)
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f003 030c 	and.w	r3, r3, #12
 800320e:	2b0c      	cmp	r3, #12
 8003210:	f200 8206 	bhi.w	8003620 <HAL_RCC_GetSysClockFreq+0x440>
 8003214:	a201      	add	r2, pc, #4	; (adr r2, 800321c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800321a:	bf00      	nop
 800321c:	08003251 	.word	0x08003251
 8003220:	08003621 	.word	0x08003621
 8003224:	08003621 	.word	0x08003621
 8003228:	08003621 	.word	0x08003621
 800322c:	08003259 	.word	0x08003259
 8003230:	08003621 	.word	0x08003621
 8003234:	08003621 	.word	0x08003621
 8003238:	08003621 	.word	0x08003621
 800323c:	08003261 	.word	0x08003261
 8003240:	08003621 	.word	0x08003621
 8003244:	08003621 	.word	0x08003621
 8003248:	08003621 	.word	0x08003621
 800324c:	08003451 	.word	0x08003451
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003250:	4bb9      	ldr	r3, [pc, #740]	; (8003538 <HAL_RCC_GetSysClockFreq+0x358>)
 8003252:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003256:	e1e7      	b.n	8003628 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003258:	4bb8      	ldr	r3, [pc, #736]	; (800353c <HAL_RCC_GetSysClockFreq+0x35c>)
 800325a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800325e:	e1e3      	b.n	8003628 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003260:	4bb4      	ldr	r3, [pc, #720]	; (8003534 <HAL_RCC_GetSysClockFreq+0x354>)
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003268:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800326c:	4bb1      	ldr	r3, [pc, #708]	; (8003534 <HAL_RCC_GetSysClockFreq+0x354>)
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d071      	beq.n	800335c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003278:	4bae      	ldr	r3, [pc, #696]	; (8003534 <HAL_RCC_GetSysClockFreq+0x354>)
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	099b      	lsrs	r3, r3, #6
 800327e:	2200      	movs	r2, #0
 8003280:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003284:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003288:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800328c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003290:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003294:	2300      	movs	r3, #0
 8003296:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800329a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800329e:	4622      	mov	r2, r4
 80032a0:	462b      	mov	r3, r5
 80032a2:	f04f 0000 	mov.w	r0, #0
 80032a6:	f04f 0100 	mov.w	r1, #0
 80032aa:	0159      	lsls	r1, r3, #5
 80032ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032b0:	0150      	lsls	r0, r2, #5
 80032b2:	4602      	mov	r2, r0
 80032b4:	460b      	mov	r3, r1
 80032b6:	4621      	mov	r1, r4
 80032b8:	1a51      	subs	r1, r2, r1
 80032ba:	6439      	str	r1, [r7, #64]	; 0x40
 80032bc:	4629      	mov	r1, r5
 80032be:	eb63 0301 	sbc.w	r3, r3, r1
 80032c2:	647b      	str	r3, [r7, #68]	; 0x44
 80032c4:	f04f 0200 	mov.w	r2, #0
 80032c8:	f04f 0300 	mov.w	r3, #0
 80032cc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80032d0:	4649      	mov	r1, r9
 80032d2:	018b      	lsls	r3, r1, #6
 80032d4:	4641      	mov	r1, r8
 80032d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032da:	4641      	mov	r1, r8
 80032dc:	018a      	lsls	r2, r1, #6
 80032de:	4641      	mov	r1, r8
 80032e0:	1a51      	subs	r1, r2, r1
 80032e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80032e4:	4649      	mov	r1, r9
 80032e6:	eb63 0301 	sbc.w	r3, r3, r1
 80032ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032ec:	f04f 0200 	mov.w	r2, #0
 80032f0:	f04f 0300 	mov.w	r3, #0
 80032f4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80032f8:	4649      	mov	r1, r9
 80032fa:	00cb      	lsls	r3, r1, #3
 80032fc:	4641      	mov	r1, r8
 80032fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003302:	4641      	mov	r1, r8
 8003304:	00ca      	lsls	r2, r1, #3
 8003306:	4610      	mov	r0, r2
 8003308:	4619      	mov	r1, r3
 800330a:	4603      	mov	r3, r0
 800330c:	4622      	mov	r2, r4
 800330e:	189b      	adds	r3, r3, r2
 8003310:	633b      	str	r3, [r7, #48]	; 0x30
 8003312:	462b      	mov	r3, r5
 8003314:	460a      	mov	r2, r1
 8003316:	eb42 0303 	adc.w	r3, r2, r3
 800331a:	637b      	str	r3, [r7, #52]	; 0x34
 800331c:	f04f 0200 	mov.w	r2, #0
 8003320:	f04f 0300 	mov.w	r3, #0
 8003324:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003328:	4629      	mov	r1, r5
 800332a:	024b      	lsls	r3, r1, #9
 800332c:	4621      	mov	r1, r4
 800332e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003332:	4621      	mov	r1, r4
 8003334:	024a      	lsls	r2, r1, #9
 8003336:	4610      	mov	r0, r2
 8003338:	4619      	mov	r1, r3
 800333a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800333e:	2200      	movs	r2, #0
 8003340:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003344:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003348:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800334c:	f7fd fb48 	bl	80009e0 <__aeabi_uldivmod>
 8003350:	4602      	mov	r2, r0
 8003352:	460b      	mov	r3, r1
 8003354:	4613      	mov	r3, r2
 8003356:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800335a:	e067      	b.n	800342c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800335c:	4b75      	ldr	r3, [pc, #468]	; (8003534 <HAL_RCC_GetSysClockFreq+0x354>)
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	099b      	lsrs	r3, r3, #6
 8003362:	2200      	movs	r2, #0
 8003364:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003368:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800336c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003370:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003374:	67bb      	str	r3, [r7, #120]	; 0x78
 8003376:	2300      	movs	r3, #0
 8003378:	67fb      	str	r3, [r7, #124]	; 0x7c
 800337a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800337e:	4622      	mov	r2, r4
 8003380:	462b      	mov	r3, r5
 8003382:	f04f 0000 	mov.w	r0, #0
 8003386:	f04f 0100 	mov.w	r1, #0
 800338a:	0159      	lsls	r1, r3, #5
 800338c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003390:	0150      	lsls	r0, r2, #5
 8003392:	4602      	mov	r2, r0
 8003394:	460b      	mov	r3, r1
 8003396:	4621      	mov	r1, r4
 8003398:	1a51      	subs	r1, r2, r1
 800339a:	62b9      	str	r1, [r7, #40]	; 0x28
 800339c:	4629      	mov	r1, r5
 800339e:	eb63 0301 	sbc.w	r3, r3, r1
 80033a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033a4:	f04f 0200 	mov.w	r2, #0
 80033a8:	f04f 0300 	mov.w	r3, #0
 80033ac:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80033b0:	4649      	mov	r1, r9
 80033b2:	018b      	lsls	r3, r1, #6
 80033b4:	4641      	mov	r1, r8
 80033b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80033ba:	4641      	mov	r1, r8
 80033bc:	018a      	lsls	r2, r1, #6
 80033be:	4641      	mov	r1, r8
 80033c0:	ebb2 0a01 	subs.w	sl, r2, r1
 80033c4:	4649      	mov	r1, r9
 80033c6:	eb63 0b01 	sbc.w	fp, r3, r1
 80033ca:	f04f 0200 	mov.w	r2, #0
 80033ce:	f04f 0300 	mov.w	r3, #0
 80033d2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80033d6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80033da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033de:	4692      	mov	sl, r2
 80033e0:	469b      	mov	fp, r3
 80033e2:	4623      	mov	r3, r4
 80033e4:	eb1a 0303 	adds.w	r3, sl, r3
 80033e8:	623b      	str	r3, [r7, #32]
 80033ea:	462b      	mov	r3, r5
 80033ec:	eb4b 0303 	adc.w	r3, fp, r3
 80033f0:	627b      	str	r3, [r7, #36]	; 0x24
 80033f2:	f04f 0200 	mov.w	r2, #0
 80033f6:	f04f 0300 	mov.w	r3, #0
 80033fa:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80033fe:	4629      	mov	r1, r5
 8003400:	028b      	lsls	r3, r1, #10
 8003402:	4621      	mov	r1, r4
 8003404:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003408:	4621      	mov	r1, r4
 800340a:	028a      	lsls	r2, r1, #10
 800340c:	4610      	mov	r0, r2
 800340e:	4619      	mov	r1, r3
 8003410:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003414:	2200      	movs	r2, #0
 8003416:	673b      	str	r3, [r7, #112]	; 0x70
 8003418:	677a      	str	r2, [r7, #116]	; 0x74
 800341a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800341e:	f7fd fadf 	bl	80009e0 <__aeabi_uldivmod>
 8003422:	4602      	mov	r2, r0
 8003424:	460b      	mov	r3, r1
 8003426:	4613      	mov	r3, r2
 8003428:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800342c:	4b41      	ldr	r3, [pc, #260]	; (8003534 <HAL_RCC_GetSysClockFreq+0x354>)
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	0c1b      	lsrs	r3, r3, #16
 8003432:	f003 0303 	and.w	r3, r3, #3
 8003436:	3301      	adds	r3, #1
 8003438:	005b      	lsls	r3, r3, #1
 800343a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800343e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003442:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003446:	fbb2 f3f3 	udiv	r3, r2, r3
 800344a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800344e:	e0eb      	b.n	8003628 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003450:	4b38      	ldr	r3, [pc, #224]	; (8003534 <HAL_RCC_GetSysClockFreq+0x354>)
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003458:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800345c:	4b35      	ldr	r3, [pc, #212]	; (8003534 <HAL_RCC_GetSysClockFreq+0x354>)
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d06b      	beq.n	8003540 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003468:	4b32      	ldr	r3, [pc, #200]	; (8003534 <HAL_RCC_GetSysClockFreq+0x354>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	099b      	lsrs	r3, r3, #6
 800346e:	2200      	movs	r2, #0
 8003470:	66bb      	str	r3, [r7, #104]	; 0x68
 8003472:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003474:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003476:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800347a:	663b      	str	r3, [r7, #96]	; 0x60
 800347c:	2300      	movs	r3, #0
 800347e:	667b      	str	r3, [r7, #100]	; 0x64
 8003480:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003484:	4622      	mov	r2, r4
 8003486:	462b      	mov	r3, r5
 8003488:	f04f 0000 	mov.w	r0, #0
 800348c:	f04f 0100 	mov.w	r1, #0
 8003490:	0159      	lsls	r1, r3, #5
 8003492:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003496:	0150      	lsls	r0, r2, #5
 8003498:	4602      	mov	r2, r0
 800349a:	460b      	mov	r3, r1
 800349c:	4621      	mov	r1, r4
 800349e:	1a51      	subs	r1, r2, r1
 80034a0:	61b9      	str	r1, [r7, #24]
 80034a2:	4629      	mov	r1, r5
 80034a4:	eb63 0301 	sbc.w	r3, r3, r1
 80034a8:	61fb      	str	r3, [r7, #28]
 80034aa:	f04f 0200 	mov.w	r2, #0
 80034ae:	f04f 0300 	mov.w	r3, #0
 80034b2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80034b6:	4659      	mov	r1, fp
 80034b8:	018b      	lsls	r3, r1, #6
 80034ba:	4651      	mov	r1, sl
 80034bc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80034c0:	4651      	mov	r1, sl
 80034c2:	018a      	lsls	r2, r1, #6
 80034c4:	4651      	mov	r1, sl
 80034c6:	ebb2 0801 	subs.w	r8, r2, r1
 80034ca:	4659      	mov	r1, fp
 80034cc:	eb63 0901 	sbc.w	r9, r3, r1
 80034d0:	f04f 0200 	mov.w	r2, #0
 80034d4:	f04f 0300 	mov.w	r3, #0
 80034d8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034dc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034e0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034e4:	4690      	mov	r8, r2
 80034e6:	4699      	mov	r9, r3
 80034e8:	4623      	mov	r3, r4
 80034ea:	eb18 0303 	adds.w	r3, r8, r3
 80034ee:	613b      	str	r3, [r7, #16]
 80034f0:	462b      	mov	r3, r5
 80034f2:	eb49 0303 	adc.w	r3, r9, r3
 80034f6:	617b      	str	r3, [r7, #20]
 80034f8:	f04f 0200 	mov.w	r2, #0
 80034fc:	f04f 0300 	mov.w	r3, #0
 8003500:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003504:	4629      	mov	r1, r5
 8003506:	024b      	lsls	r3, r1, #9
 8003508:	4621      	mov	r1, r4
 800350a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800350e:	4621      	mov	r1, r4
 8003510:	024a      	lsls	r2, r1, #9
 8003512:	4610      	mov	r0, r2
 8003514:	4619      	mov	r1, r3
 8003516:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800351a:	2200      	movs	r2, #0
 800351c:	65bb      	str	r3, [r7, #88]	; 0x58
 800351e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003520:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003524:	f7fd fa5c 	bl	80009e0 <__aeabi_uldivmod>
 8003528:	4602      	mov	r2, r0
 800352a:	460b      	mov	r3, r1
 800352c:	4613      	mov	r3, r2
 800352e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003532:	e065      	b.n	8003600 <HAL_RCC_GetSysClockFreq+0x420>
 8003534:	40023800 	.word	0x40023800
 8003538:	00f42400 	.word	0x00f42400
 800353c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003540:	4b3d      	ldr	r3, [pc, #244]	; (8003638 <HAL_RCC_GetSysClockFreq+0x458>)
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	099b      	lsrs	r3, r3, #6
 8003546:	2200      	movs	r2, #0
 8003548:	4618      	mov	r0, r3
 800354a:	4611      	mov	r1, r2
 800354c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003550:	653b      	str	r3, [r7, #80]	; 0x50
 8003552:	2300      	movs	r3, #0
 8003554:	657b      	str	r3, [r7, #84]	; 0x54
 8003556:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800355a:	4642      	mov	r2, r8
 800355c:	464b      	mov	r3, r9
 800355e:	f04f 0000 	mov.w	r0, #0
 8003562:	f04f 0100 	mov.w	r1, #0
 8003566:	0159      	lsls	r1, r3, #5
 8003568:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800356c:	0150      	lsls	r0, r2, #5
 800356e:	4602      	mov	r2, r0
 8003570:	460b      	mov	r3, r1
 8003572:	4641      	mov	r1, r8
 8003574:	1a51      	subs	r1, r2, r1
 8003576:	60b9      	str	r1, [r7, #8]
 8003578:	4649      	mov	r1, r9
 800357a:	eb63 0301 	sbc.w	r3, r3, r1
 800357e:	60fb      	str	r3, [r7, #12]
 8003580:	f04f 0200 	mov.w	r2, #0
 8003584:	f04f 0300 	mov.w	r3, #0
 8003588:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800358c:	4659      	mov	r1, fp
 800358e:	018b      	lsls	r3, r1, #6
 8003590:	4651      	mov	r1, sl
 8003592:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003596:	4651      	mov	r1, sl
 8003598:	018a      	lsls	r2, r1, #6
 800359a:	4651      	mov	r1, sl
 800359c:	1a54      	subs	r4, r2, r1
 800359e:	4659      	mov	r1, fp
 80035a0:	eb63 0501 	sbc.w	r5, r3, r1
 80035a4:	f04f 0200 	mov.w	r2, #0
 80035a8:	f04f 0300 	mov.w	r3, #0
 80035ac:	00eb      	lsls	r3, r5, #3
 80035ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035b2:	00e2      	lsls	r2, r4, #3
 80035b4:	4614      	mov	r4, r2
 80035b6:	461d      	mov	r5, r3
 80035b8:	4643      	mov	r3, r8
 80035ba:	18e3      	adds	r3, r4, r3
 80035bc:	603b      	str	r3, [r7, #0]
 80035be:	464b      	mov	r3, r9
 80035c0:	eb45 0303 	adc.w	r3, r5, r3
 80035c4:	607b      	str	r3, [r7, #4]
 80035c6:	f04f 0200 	mov.w	r2, #0
 80035ca:	f04f 0300 	mov.w	r3, #0
 80035ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035d2:	4629      	mov	r1, r5
 80035d4:	028b      	lsls	r3, r1, #10
 80035d6:	4621      	mov	r1, r4
 80035d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035dc:	4621      	mov	r1, r4
 80035de:	028a      	lsls	r2, r1, #10
 80035e0:	4610      	mov	r0, r2
 80035e2:	4619      	mov	r1, r3
 80035e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80035e8:	2200      	movs	r2, #0
 80035ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80035ec:	64fa      	str	r2, [r7, #76]	; 0x4c
 80035ee:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80035f2:	f7fd f9f5 	bl	80009e0 <__aeabi_uldivmod>
 80035f6:	4602      	mov	r2, r0
 80035f8:	460b      	mov	r3, r1
 80035fa:	4613      	mov	r3, r2
 80035fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003600:	4b0d      	ldr	r3, [pc, #52]	; (8003638 <HAL_RCC_GetSysClockFreq+0x458>)
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	0f1b      	lsrs	r3, r3, #28
 8003606:	f003 0307 	and.w	r3, r3, #7
 800360a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800360e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003612:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003616:	fbb2 f3f3 	udiv	r3, r2, r3
 800361a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800361e:	e003      	b.n	8003628 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003620:	4b06      	ldr	r3, [pc, #24]	; (800363c <HAL_RCC_GetSysClockFreq+0x45c>)
 8003622:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003626:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003628:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800362c:	4618      	mov	r0, r3
 800362e:	37b8      	adds	r7, #184	; 0xb8
 8003630:	46bd      	mov	sp, r7
 8003632:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003636:	bf00      	nop
 8003638:	40023800 	.word	0x40023800
 800363c:	00f42400 	.word	0x00f42400

08003640 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b086      	sub	sp, #24
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d101      	bne.n	8003652 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e28d      	b.n	8003b6e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	2b00      	cmp	r3, #0
 800365c:	f000 8083 	beq.w	8003766 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003660:	4b94      	ldr	r3, [pc, #592]	; (80038b4 <HAL_RCC_OscConfig+0x274>)
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	f003 030c 	and.w	r3, r3, #12
 8003668:	2b04      	cmp	r3, #4
 800366a:	d019      	beq.n	80036a0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800366c:	4b91      	ldr	r3, [pc, #580]	; (80038b4 <HAL_RCC_OscConfig+0x274>)
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003674:	2b08      	cmp	r3, #8
 8003676:	d106      	bne.n	8003686 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003678:	4b8e      	ldr	r3, [pc, #568]	; (80038b4 <HAL_RCC_OscConfig+0x274>)
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003680:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003684:	d00c      	beq.n	80036a0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003686:	4b8b      	ldr	r3, [pc, #556]	; (80038b4 <HAL_RCC_OscConfig+0x274>)
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800368e:	2b0c      	cmp	r3, #12
 8003690:	d112      	bne.n	80036b8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003692:	4b88      	ldr	r3, [pc, #544]	; (80038b4 <HAL_RCC_OscConfig+0x274>)
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800369a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800369e:	d10b      	bne.n	80036b8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036a0:	4b84      	ldr	r3, [pc, #528]	; (80038b4 <HAL_RCC_OscConfig+0x274>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d05b      	beq.n	8003764 <HAL_RCC_OscConfig+0x124>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d157      	bne.n	8003764 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e25a      	b.n	8003b6e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036c0:	d106      	bne.n	80036d0 <HAL_RCC_OscConfig+0x90>
 80036c2:	4b7c      	ldr	r3, [pc, #496]	; (80038b4 <HAL_RCC_OscConfig+0x274>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a7b      	ldr	r2, [pc, #492]	; (80038b4 <HAL_RCC_OscConfig+0x274>)
 80036c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036cc:	6013      	str	r3, [r2, #0]
 80036ce:	e01d      	b.n	800370c <HAL_RCC_OscConfig+0xcc>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036d8:	d10c      	bne.n	80036f4 <HAL_RCC_OscConfig+0xb4>
 80036da:	4b76      	ldr	r3, [pc, #472]	; (80038b4 <HAL_RCC_OscConfig+0x274>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a75      	ldr	r2, [pc, #468]	; (80038b4 <HAL_RCC_OscConfig+0x274>)
 80036e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036e4:	6013      	str	r3, [r2, #0]
 80036e6:	4b73      	ldr	r3, [pc, #460]	; (80038b4 <HAL_RCC_OscConfig+0x274>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a72      	ldr	r2, [pc, #456]	; (80038b4 <HAL_RCC_OscConfig+0x274>)
 80036ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036f0:	6013      	str	r3, [r2, #0]
 80036f2:	e00b      	b.n	800370c <HAL_RCC_OscConfig+0xcc>
 80036f4:	4b6f      	ldr	r3, [pc, #444]	; (80038b4 <HAL_RCC_OscConfig+0x274>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a6e      	ldr	r2, [pc, #440]	; (80038b4 <HAL_RCC_OscConfig+0x274>)
 80036fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036fe:	6013      	str	r3, [r2, #0]
 8003700:	4b6c      	ldr	r3, [pc, #432]	; (80038b4 <HAL_RCC_OscConfig+0x274>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a6b      	ldr	r2, [pc, #428]	; (80038b4 <HAL_RCC_OscConfig+0x274>)
 8003706:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800370a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d013      	beq.n	800373c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003714:	f7fe f908 	bl	8001928 <HAL_GetTick>
 8003718:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800371a:	e008      	b.n	800372e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800371c:	f7fe f904 	bl	8001928 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b64      	cmp	r3, #100	; 0x64
 8003728:	d901      	bls.n	800372e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e21f      	b.n	8003b6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800372e:	4b61      	ldr	r3, [pc, #388]	; (80038b4 <HAL_RCC_OscConfig+0x274>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d0f0      	beq.n	800371c <HAL_RCC_OscConfig+0xdc>
 800373a:	e014      	b.n	8003766 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800373c:	f7fe f8f4 	bl	8001928 <HAL_GetTick>
 8003740:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003742:	e008      	b.n	8003756 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003744:	f7fe f8f0 	bl	8001928 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	2b64      	cmp	r3, #100	; 0x64
 8003750:	d901      	bls.n	8003756 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e20b      	b.n	8003b6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003756:	4b57      	ldr	r3, [pc, #348]	; (80038b4 <HAL_RCC_OscConfig+0x274>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d1f0      	bne.n	8003744 <HAL_RCC_OscConfig+0x104>
 8003762:	e000      	b.n	8003766 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003764:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0302 	and.w	r3, r3, #2
 800376e:	2b00      	cmp	r3, #0
 8003770:	d06f      	beq.n	8003852 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003772:	4b50      	ldr	r3, [pc, #320]	; (80038b4 <HAL_RCC_OscConfig+0x274>)
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f003 030c 	and.w	r3, r3, #12
 800377a:	2b00      	cmp	r3, #0
 800377c:	d017      	beq.n	80037ae <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800377e:	4b4d      	ldr	r3, [pc, #308]	; (80038b4 <HAL_RCC_OscConfig+0x274>)
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003786:	2b08      	cmp	r3, #8
 8003788:	d105      	bne.n	8003796 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800378a:	4b4a      	ldr	r3, [pc, #296]	; (80038b4 <HAL_RCC_OscConfig+0x274>)
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00b      	beq.n	80037ae <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003796:	4b47      	ldr	r3, [pc, #284]	; (80038b4 <HAL_RCC_OscConfig+0x274>)
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800379e:	2b0c      	cmp	r3, #12
 80037a0:	d11c      	bne.n	80037dc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037a2:	4b44      	ldr	r3, [pc, #272]	; (80038b4 <HAL_RCC_OscConfig+0x274>)
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d116      	bne.n	80037dc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037ae:	4b41      	ldr	r3, [pc, #260]	; (80038b4 <HAL_RCC_OscConfig+0x274>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0302 	and.w	r3, r3, #2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d005      	beq.n	80037c6 <HAL_RCC_OscConfig+0x186>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d001      	beq.n	80037c6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e1d3      	b.n	8003b6e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037c6:	4b3b      	ldr	r3, [pc, #236]	; (80038b4 <HAL_RCC_OscConfig+0x274>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	00db      	lsls	r3, r3, #3
 80037d4:	4937      	ldr	r1, [pc, #220]	; (80038b4 <HAL_RCC_OscConfig+0x274>)
 80037d6:	4313      	orrs	r3, r2
 80037d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037da:	e03a      	b.n	8003852 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d020      	beq.n	8003826 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037e4:	4b34      	ldr	r3, [pc, #208]	; (80038b8 <HAL_RCC_OscConfig+0x278>)
 80037e6:	2201      	movs	r2, #1
 80037e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ea:	f7fe f89d 	bl	8001928 <HAL_GetTick>
 80037ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037f0:	e008      	b.n	8003804 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037f2:	f7fe f899 	bl	8001928 <HAL_GetTick>
 80037f6:	4602      	mov	r2, r0
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d901      	bls.n	8003804 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003800:	2303      	movs	r3, #3
 8003802:	e1b4      	b.n	8003b6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003804:	4b2b      	ldr	r3, [pc, #172]	; (80038b4 <HAL_RCC_OscConfig+0x274>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0302 	and.w	r3, r3, #2
 800380c:	2b00      	cmp	r3, #0
 800380e:	d0f0      	beq.n	80037f2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003810:	4b28      	ldr	r3, [pc, #160]	; (80038b4 <HAL_RCC_OscConfig+0x274>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	691b      	ldr	r3, [r3, #16]
 800381c:	00db      	lsls	r3, r3, #3
 800381e:	4925      	ldr	r1, [pc, #148]	; (80038b4 <HAL_RCC_OscConfig+0x274>)
 8003820:	4313      	orrs	r3, r2
 8003822:	600b      	str	r3, [r1, #0]
 8003824:	e015      	b.n	8003852 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003826:	4b24      	ldr	r3, [pc, #144]	; (80038b8 <HAL_RCC_OscConfig+0x278>)
 8003828:	2200      	movs	r2, #0
 800382a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800382c:	f7fe f87c 	bl	8001928 <HAL_GetTick>
 8003830:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003832:	e008      	b.n	8003846 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003834:	f7fe f878 	bl	8001928 <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	2b02      	cmp	r3, #2
 8003840:	d901      	bls.n	8003846 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e193      	b.n	8003b6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003846:	4b1b      	ldr	r3, [pc, #108]	; (80038b4 <HAL_RCC_OscConfig+0x274>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0302 	and.w	r3, r3, #2
 800384e:	2b00      	cmp	r3, #0
 8003850:	d1f0      	bne.n	8003834 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0308 	and.w	r3, r3, #8
 800385a:	2b00      	cmp	r3, #0
 800385c:	d036      	beq.n	80038cc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	695b      	ldr	r3, [r3, #20]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d016      	beq.n	8003894 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003866:	4b15      	ldr	r3, [pc, #84]	; (80038bc <HAL_RCC_OscConfig+0x27c>)
 8003868:	2201      	movs	r2, #1
 800386a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800386c:	f7fe f85c 	bl	8001928 <HAL_GetTick>
 8003870:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003872:	e008      	b.n	8003886 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003874:	f7fe f858 	bl	8001928 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	2b02      	cmp	r3, #2
 8003880:	d901      	bls.n	8003886 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e173      	b.n	8003b6e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003886:	4b0b      	ldr	r3, [pc, #44]	; (80038b4 <HAL_RCC_OscConfig+0x274>)
 8003888:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800388a:	f003 0302 	and.w	r3, r3, #2
 800388e:	2b00      	cmp	r3, #0
 8003890:	d0f0      	beq.n	8003874 <HAL_RCC_OscConfig+0x234>
 8003892:	e01b      	b.n	80038cc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003894:	4b09      	ldr	r3, [pc, #36]	; (80038bc <HAL_RCC_OscConfig+0x27c>)
 8003896:	2200      	movs	r2, #0
 8003898:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800389a:	f7fe f845 	bl	8001928 <HAL_GetTick>
 800389e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038a0:	e00e      	b.n	80038c0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038a2:	f7fe f841 	bl	8001928 <HAL_GetTick>
 80038a6:	4602      	mov	r2, r0
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d907      	bls.n	80038c0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80038b0:	2303      	movs	r3, #3
 80038b2:	e15c      	b.n	8003b6e <HAL_RCC_OscConfig+0x52e>
 80038b4:	40023800 	.word	0x40023800
 80038b8:	42470000 	.word	0x42470000
 80038bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038c0:	4b8a      	ldr	r3, [pc, #552]	; (8003aec <HAL_RCC_OscConfig+0x4ac>)
 80038c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038c4:	f003 0302 	and.w	r3, r3, #2
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d1ea      	bne.n	80038a2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0304 	and.w	r3, r3, #4
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	f000 8097 	beq.w	8003a08 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038da:	2300      	movs	r3, #0
 80038dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038de:	4b83      	ldr	r3, [pc, #524]	; (8003aec <HAL_RCC_OscConfig+0x4ac>)
 80038e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d10f      	bne.n	800390a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038ea:	2300      	movs	r3, #0
 80038ec:	60bb      	str	r3, [r7, #8]
 80038ee:	4b7f      	ldr	r3, [pc, #508]	; (8003aec <HAL_RCC_OscConfig+0x4ac>)
 80038f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f2:	4a7e      	ldr	r2, [pc, #504]	; (8003aec <HAL_RCC_OscConfig+0x4ac>)
 80038f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038f8:	6413      	str	r3, [r2, #64]	; 0x40
 80038fa:	4b7c      	ldr	r3, [pc, #496]	; (8003aec <HAL_RCC_OscConfig+0x4ac>)
 80038fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003902:	60bb      	str	r3, [r7, #8]
 8003904:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003906:	2301      	movs	r3, #1
 8003908:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800390a:	4b79      	ldr	r3, [pc, #484]	; (8003af0 <HAL_RCC_OscConfig+0x4b0>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003912:	2b00      	cmp	r3, #0
 8003914:	d118      	bne.n	8003948 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003916:	4b76      	ldr	r3, [pc, #472]	; (8003af0 <HAL_RCC_OscConfig+0x4b0>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a75      	ldr	r2, [pc, #468]	; (8003af0 <HAL_RCC_OscConfig+0x4b0>)
 800391c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003920:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003922:	f7fe f801 	bl	8001928 <HAL_GetTick>
 8003926:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003928:	e008      	b.n	800393c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800392a:	f7fd fffd 	bl	8001928 <HAL_GetTick>
 800392e:	4602      	mov	r2, r0
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	2b02      	cmp	r3, #2
 8003936:	d901      	bls.n	800393c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003938:	2303      	movs	r3, #3
 800393a:	e118      	b.n	8003b6e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800393c:	4b6c      	ldr	r3, [pc, #432]	; (8003af0 <HAL_RCC_OscConfig+0x4b0>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003944:	2b00      	cmp	r3, #0
 8003946:	d0f0      	beq.n	800392a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	2b01      	cmp	r3, #1
 800394e:	d106      	bne.n	800395e <HAL_RCC_OscConfig+0x31e>
 8003950:	4b66      	ldr	r3, [pc, #408]	; (8003aec <HAL_RCC_OscConfig+0x4ac>)
 8003952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003954:	4a65      	ldr	r2, [pc, #404]	; (8003aec <HAL_RCC_OscConfig+0x4ac>)
 8003956:	f043 0301 	orr.w	r3, r3, #1
 800395a:	6713      	str	r3, [r2, #112]	; 0x70
 800395c:	e01c      	b.n	8003998 <HAL_RCC_OscConfig+0x358>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	2b05      	cmp	r3, #5
 8003964:	d10c      	bne.n	8003980 <HAL_RCC_OscConfig+0x340>
 8003966:	4b61      	ldr	r3, [pc, #388]	; (8003aec <HAL_RCC_OscConfig+0x4ac>)
 8003968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800396a:	4a60      	ldr	r2, [pc, #384]	; (8003aec <HAL_RCC_OscConfig+0x4ac>)
 800396c:	f043 0304 	orr.w	r3, r3, #4
 8003970:	6713      	str	r3, [r2, #112]	; 0x70
 8003972:	4b5e      	ldr	r3, [pc, #376]	; (8003aec <HAL_RCC_OscConfig+0x4ac>)
 8003974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003976:	4a5d      	ldr	r2, [pc, #372]	; (8003aec <HAL_RCC_OscConfig+0x4ac>)
 8003978:	f043 0301 	orr.w	r3, r3, #1
 800397c:	6713      	str	r3, [r2, #112]	; 0x70
 800397e:	e00b      	b.n	8003998 <HAL_RCC_OscConfig+0x358>
 8003980:	4b5a      	ldr	r3, [pc, #360]	; (8003aec <HAL_RCC_OscConfig+0x4ac>)
 8003982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003984:	4a59      	ldr	r2, [pc, #356]	; (8003aec <HAL_RCC_OscConfig+0x4ac>)
 8003986:	f023 0301 	bic.w	r3, r3, #1
 800398a:	6713      	str	r3, [r2, #112]	; 0x70
 800398c:	4b57      	ldr	r3, [pc, #348]	; (8003aec <HAL_RCC_OscConfig+0x4ac>)
 800398e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003990:	4a56      	ldr	r2, [pc, #344]	; (8003aec <HAL_RCC_OscConfig+0x4ac>)
 8003992:	f023 0304 	bic.w	r3, r3, #4
 8003996:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d015      	beq.n	80039cc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039a0:	f7fd ffc2 	bl	8001928 <HAL_GetTick>
 80039a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039a6:	e00a      	b.n	80039be <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039a8:	f7fd ffbe 	bl	8001928 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d901      	bls.n	80039be <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e0d7      	b.n	8003b6e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039be:	4b4b      	ldr	r3, [pc, #300]	; (8003aec <HAL_RCC_OscConfig+0x4ac>)
 80039c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c2:	f003 0302 	and.w	r3, r3, #2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d0ee      	beq.n	80039a8 <HAL_RCC_OscConfig+0x368>
 80039ca:	e014      	b.n	80039f6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039cc:	f7fd ffac 	bl	8001928 <HAL_GetTick>
 80039d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039d2:	e00a      	b.n	80039ea <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039d4:	f7fd ffa8 	bl	8001928 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	f241 3288 	movw	r2, #5000	; 0x1388
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d901      	bls.n	80039ea <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e0c1      	b.n	8003b6e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039ea:	4b40      	ldr	r3, [pc, #256]	; (8003aec <HAL_RCC_OscConfig+0x4ac>)
 80039ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ee:	f003 0302 	and.w	r3, r3, #2
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d1ee      	bne.n	80039d4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039f6:	7dfb      	ldrb	r3, [r7, #23]
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d105      	bne.n	8003a08 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039fc:	4b3b      	ldr	r3, [pc, #236]	; (8003aec <HAL_RCC_OscConfig+0x4ac>)
 80039fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a00:	4a3a      	ldr	r2, [pc, #232]	; (8003aec <HAL_RCC_OscConfig+0x4ac>)
 8003a02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a06:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	f000 80ad 	beq.w	8003b6c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a12:	4b36      	ldr	r3, [pc, #216]	; (8003aec <HAL_RCC_OscConfig+0x4ac>)
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f003 030c 	and.w	r3, r3, #12
 8003a1a:	2b08      	cmp	r3, #8
 8003a1c:	d060      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	699b      	ldr	r3, [r3, #24]
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d145      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a26:	4b33      	ldr	r3, [pc, #204]	; (8003af4 <HAL_RCC_OscConfig+0x4b4>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a2c:	f7fd ff7c 	bl	8001928 <HAL_GetTick>
 8003a30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a32:	e008      	b.n	8003a46 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a34:	f7fd ff78 	bl	8001928 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e093      	b.n	8003b6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a46:	4b29      	ldr	r3, [pc, #164]	; (8003aec <HAL_RCC_OscConfig+0x4ac>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d1f0      	bne.n	8003a34 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	69da      	ldr	r2, [r3, #28]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a1b      	ldr	r3, [r3, #32]
 8003a5a:	431a      	orrs	r2, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a60:	019b      	lsls	r3, r3, #6
 8003a62:	431a      	orrs	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a68:	085b      	lsrs	r3, r3, #1
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	041b      	lsls	r3, r3, #16
 8003a6e:	431a      	orrs	r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a74:	061b      	lsls	r3, r3, #24
 8003a76:	431a      	orrs	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7c:	071b      	lsls	r3, r3, #28
 8003a7e:	491b      	ldr	r1, [pc, #108]	; (8003aec <HAL_RCC_OscConfig+0x4ac>)
 8003a80:	4313      	orrs	r3, r2
 8003a82:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a84:	4b1b      	ldr	r3, [pc, #108]	; (8003af4 <HAL_RCC_OscConfig+0x4b4>)
 8003a86:	2201      	movs	r2, #1
 8003a88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a8a:	f7fd ff4d 	bl	8001928 <HAL_GetTick>
 8003a8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a90:	e008      	b.n	8003aa4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a92:	f7fd ff49 	bl	8001928 <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d901      	bls.n	8003aa4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e064      	b.n	8003b6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aa4:	4b11      	ldr	r3, [pc, #68]	; (8003aec <HAL_RCC_OscConfig+0x4ac>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d0f0      	beq.n	8003a92 <HAL_RCC_OscConfig+0x452>
 8003ab0:	e05c      	b.n	8003b6c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ab2:	4b10      	ldr	r3, [pc, #64]	; (8003af4 <HAL_RCC_OscConfig+0x4b4>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab8:	f7fd ff36 	bl	8001928 <HAL_GetTick>
 8003abc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003abe:	e008      	b.n	8003ad2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ac0:	f7fd ff32 	bl	8001928 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e04d      	b.n	8003b6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ad2:	4b06      	ldr	r3, [pc, #24]	; (8003aec <HAL_RCC_OscConfig+0x4ac>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d1f0      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x480>
 8003ade:	e045      	b.n	8003b6c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	699b      	ldr	r3, [r3, #24]
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d107      	bne.n	8003af8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e040      	b.n	8003b6e <HAL_RCC_OscConfig+0x52e>
 8003aec:	40023800 	.word	0x40023800
 8003af0:	40007000 	.word	0x40007000
 8003af4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003af8:	4b1f      	ldr	r3, [pc, #124]	; (8003b78 <HAL_RCC_OscConfig+0x538>)
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	699b      	ldr	r3, [r3, #24]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d030      	beq.n	8003b68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d129      	bne.n	8003b68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d122      	bne.n	8003b68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b22:	68fa      	ldr	r2, [r7, #12]
 8003b24:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b28:	4013      	ands	r3, r2
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b2e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d119      	bne.n	8003b68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b3e:	085b      	lsrs	r3, r3, #1
 8003b40:	3b01      	subs	r3, #1
 8003b42:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d10f      	bne.n	8003b68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b52:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d107      	bne.n	8003b68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b62:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d001      	beq.n	8003b6c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e000      	b.n	8003b6e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3718      	adds	r7, #24
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	40023800 	.word	0x40023800

08003b7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d101      	bne.n	8003b8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e041      	b.n	8003c12 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d106      	bne.n	8003ba8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f7fd fd7a 	bl	800169c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2202      	movs	r2, #2
 8003bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	3304      	adds	r3, #4
 8003bb8:	4619      	mov	r1, r3
 8003bba:	4610      	mov	r0, r2
 8003bbc:	f000 fad8 	bl	8004170 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3708      	adds	r7, #8
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}

08003c1a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c1a:	b580      	push	{r7, lr}
 8003c1c:	b082      	sub	sp, #8
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d101      	bne.n	8003c2c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e041      	b.n	8003cb0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d106      	bne.n	8003c46 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f000 f839 	bl	8003cb8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2202      	movs	r2, #2
 8003c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	3304      	adds	r3, #4
 8003c56:	4619      	mov	r1, r3
 8003c58:	4610      	mov	r0, r2
 8003c5a:	f000 fa89 	bl	8004170 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2201      	movs	r2, #1
 8003c62:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2201      	movs	r2, #1
 8003c72:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2201      	movs	r2, #1
 8003c82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2201      	movs	r2, #1
 8003c92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3708      	adds	r7, #8
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003cc0:	bf00      	nop
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d109      	bne.n	8003cf0 <HAL_TIM_PWM_Start+0x24>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	bf14      	ite	ne
 8003ce8:	2301      	movne	r3, #1
 8003cea:	2300      	moveq	r3, #0
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	e022      	b.n	8003d36 <HAL_TIM_PWM_Start+0x6a>
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	2b04      	cmp	r3, #4
 8003cf4:	d109      	bne.n	8003d0a <HAL_TIM_PWM_Start+0x3e>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	bf14      	ite	ne
 8003d02:	2301      	movne	r3, #1
 8003d04:	2300      	moveq	r3, #0
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	e015      	b.n	8003d36 <HAL_TIM_PWM_Start+0x6a>
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	2b08      	cmp	r3, #8
 8003d0e:	d109      	bne.n	8003d24 <HAL_TIM_PWM_Start+0x58>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	bf14      	ite	ne
 8003d1c:	2301      	movne	r3, #1
 8003d1e:	2300      	moveq	r3, #0
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	e008      	b.n	8003d36 <HAL_TIM_PWM_Start+0x6a>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	bf14      	ite	ne
 8003d30:	2301      	movne	r3, #1
 8003d32:	2300      	moveq	r3, #0
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d001      	beq.n	8003d3e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e07c      	b.n	8003e38 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d104      	bne.n	8003d4e <HAL_TIM_PWM_Start+0x82>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2202      	movs	r2, #2
 8003d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d4c:	e013      	b.n	8003d76 <HAL_TIM_PWM_Start+0xaa>
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	2b04      	cmp	r3, #4
 8003d52:	d104      	bne.n	8003d5e <HAL_TIM_PWM_Start+0x92>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2202      	movs	r2, #2
 8003d58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d5c:	e00b      	b.n	8003d76 <HAL_TIM_PWM_Start+0xaa>
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	2b08      	cmp	r3, #8
 8003d62:	d104      	bne.n	8003d6e <HAL_TIM_PWM_Start+0xa2>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2202      	movs	r2, #2
 8003d68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d6c:	e003      	b.n	8003d76 <HAL_TIM_PWM_Start+0xaa>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2202      	movs	r2, #2
 8003d72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	6839      	ldr	r1, [r7, #0]
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f000 fce0 	bl	8004744 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a2d      	ldr	r2, [pc, #180]	; (8003e40 <HAL_TIM_PWM_Start+0x174>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d004      	beq.n	8003d98 <HAL_TIM_PWM_Start+0xcc>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a2c      	ldr	r2, [pc, #176]	; (8003e44 <HAL_TIM_PWM_Start+0x178>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d101      	bne.n	8003d9c <HAL_TIM_PWM_Start+0xd0>
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e000      	b.n	8003d9e <HAL_TIM_PWM_Start+0xd2>
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d007      	beq.n	8003db2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003db0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a22      	ldr	r2, [pc, #136]	; (8003e40 <HAL_TIM_PWM_Start+0x174>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d022      	beq.n	8003e02 <HAL_TIM_PWM_Start+0x136>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dc4:	d01d      	beq.n	8003e02 <HAL_TIM_PWM_Start+0x136>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a1f      	ldr	r2, [pc, #124]	; (8003e48 <HAL_TIM_PWM_Start+0x17c>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d018      	beq.n	8003e02 <HAL_TIM_PWM_Start+0x136>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a1d      	ldr	r2, [pc, #116]	; (8003e4c <HAL_TIM_PWM_Start+0x180>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d013      	beq.n	8003e02 <HAL_TIM_PWM_Start+0x136>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a1c      	ldr	r2, [pc, #112]	; (8003e50 <HAL_TIM_PWM_Start+0x184>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d00e      	beq.n	8003e02 <HAL_TIM_PWM_Start+0x136>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a16      	ldr	r2, [pc, #88]	; (8003e44 <HAL_TIM_PWM_Start+0x178>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d009      	beq.n	8003e02 <HAL_TIM_PWM_Start+0x136>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a18      	ldr	r2, [pc, #96]	; (8003e54 <HAL_TIM_PWM_Start+0x188>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d004      	beq.n	8003e02 <HAL_TIM_PWM_Start+0x136>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a16      	ldr	r2, [pc, #88]	; (8003e58 <HAL_TIM_PWM_Start+0x18c>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d111      	bne.n	8003e26 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f003 0307 	and.w	r3, r3, #7
 8003e0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2b06      	cmp	r3, #6
 8003e12:	d010      	beq.n	8003e36 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f042 0201 	orr.w	r2, r2, #1
 8003e22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e24:	e007      	b.n	8003e36 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f042 0201 	orr.w	r2, r2, #1
 8003e34:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e36:	2300      	movs	r3, #0
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3710      	adds	r7, #16
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	40010000 	.word	0x40010000
 8003e44:	40010400 	.word	0x40010400
 8003e48:	40000400 	.word	0x40000400
 8003e4c:	40000800 	.word	0x40000800
 8003e50:	40000c00 	.word	0x40000c00
 8003e54:	40014000 	.word	0x40014000
 8003e58:	40001800 	.word	0x40001800

08003e5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b086      	sub	sp, #24
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d101      	bne.n	8003e7a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003e76:	2302      	movs	r3, #2
 8003e78:	e0ae      	b.n	8003fd8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2b0c      	cmp	r3, #12
 8003e86:	f200 809f 	bhi.w	8003fc8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003e8a:	a201      	add	r2, pc, #4	; (adr r2, 8003e90 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e90:	08003ec5 	.word	0x08003ec5
 8003e94:	08003fc9 	.word	0x08003fc9
 8003e98:	08003fc9 	.word	0x08003fc9
 8003e9c:	08003fc9 	.word	0x08003fc9
 8003ea0:	08003f05 	.word	0x08003f05
 8003ea4:	08003fc9 	.word	0x08003fc9
 8003ea8:	08003fc9 	.word	0x08003fc9
 8003eac:	08003fc9 	.word	0x08003fc9
 8003eb0:	08003f47 	.word	0x08003f47
 8003eb4:	08003fc9 	.word	0x08003fc9
 8003eb8:	08003fc9 	.word	0x08003fc9
 8003ebc:	08003fc9 	.word	0x08003fc9
 8003ec0:	08003f87 	.word	0x08003f87
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68b9      	ldr	r1, [r7, #8]
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f000 f9f0 	bl	80042b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	699a      	ldr	r2, [r3, #24]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f042 0208 	orr.w	r2, r2, #8
 8003ede:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	699a      	ldr	r2, [r3, #24]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f022 0204 	bic.w	r2, r2, #4
 8003eee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	6999      	ldr	r1, [r3, #24]
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	691a      	ldr	r2, [r3, #16]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	430a      	orrs	r2, r1
 8003f00:	619a      	str	r2, [r3, #24]
      break;
 8003f02:	e064      	b.n	8003fce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68b9      	ldr	r1, [r7, #8]
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f000 fa40 	bl	8004390 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	699a      	ldr	r2, [r3, #24]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	699a      	ldr	r2, [r3, #24]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	6999      	ldr	r1, [r3, #24]
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	021a      	lsls	r2, r3, #8
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	430a      	orrs	r2, r1
 8003f42:	619a      	str	r2, [r3, #24]
      break;
 8003f44:	e043      	b.n	8003fce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	68b9      	ldr	r1, [r7, #8]
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f000 fa95 	bl	800447c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	69da      	ldr	r2, [r3, #28]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f042 0208 	orr.w	r2, r2, #8
 8003f60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	69da      	ldr	r2, [r3, #28]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f022 0204 	bic.w	r2, r2, #4
 8003f70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	69d9      	ldr	r1, [r3, #28]
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	691a      	ldr	r2, [r3, #16]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	430a      	orrs	r2, r1
 8003f82:	61da      	str	r2, [r3, #28]
      break;
 8003f84:	e023      	b.n	8003fce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	68b9      	ldr	r1, [r7, #8]
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f000 fae9 	bl	8004564 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	69da      	ldr	r2, [r3, #28]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fa0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	69da      	ldr	r2, [r3, #28]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	69d9      	ldr	r1, [r3, #28]
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	021a      	lsls	r2, r3, #8
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	430a      	orrs	r2, r1
 8003fc4:	61da      	str	r2, [r3, #28]
      break;
 8003fc6:	e002      	b.n	8003fce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	75fb      	strb	r3, [r7, #23]
      break;
 8003fcc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003fd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3718      	adds	r7, #24
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fea:	2300      	movs	r3, #0
 8003fec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d101      	bne.n	8003ffc <HAL_TIM_ConfigClockSource+0x1c>
 8003ff8:	2302      	movs	r3, #2
 8003ffa:	e0b4      	b.n	8004166 <HAL_TIM_ConfigClockSource+0x186>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2202      	movs	r2, #2
 8004008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800401a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004022:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68ba      	ldr	r2, [r7, #8]
 800402a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004034:	d03e      	beq.n	80040b4 <HAL_TIM_ConfigClockSource+0xd4>
 8004036:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800403a:	f200 8087 	bhi.w	800414c <HAL_TIM_ConfigClockSource+0x16c>
 800403e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004042:	f000 8086 	beq.w	8004152 <HAL_TIM_ConfigClockSource+0x172>
 8004046:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800404a:	d87f      	bhi.n	800414c <HAL_TIM_ConfigClockSource+0x16c>
 800404c:	2b70      	cmp	r3, #112	; 0x70
 800404e:	d01a      	beq.n	8004086 <HAL_TIM_ConfigClockSource+0xa6>
 8004050:	2b70      	cmp	r3, #112	; 0x70
 8004052:	d87b      	bhi.n	800414c <HAL_TIM_ConfigClockSource+0x16c>
 8004054:	2b60      	cmp	r3, #96	; 0x60
 8004056:	d050      	beq.n	80040fa <HAL_TIM_ConfigClockSource+0x11a>
 8004058:	2b60      	cmp	r3, #96	; 0x60
 800405a:	d877      	bhi.n	800414c <HAL_TIM_ConfigClockSource+0x16c>
 800405c:	2b50      	cmp	r3, #80	; 0x50
 800405e:	d03c      	beq.n	80040da <HAL_TIM_ConfigClockSource+0xfa>
 8004060:	2b50      	cmp	r3, #80	; 0x50
 8004062:	d873      	bhi.n	800414c <HAL_TIM_ConfigClockSource+0x16c>
 8004064:	2b40      	cmp	r3, #64	; 0x40
 8004066:	d058      	beq.n	800411a <HAL_TIM_ConfigClockSource+0x13a>
 8004068:	2b40      	cmp	r3, #64	; 0x40
 800406a:	d86f      	bhi.n	800414c <HAL_TIM_ConfigClockSource+0x16c>
 800406c:	2b30      	cmp	r3, #48	; 0x30
 800406e:	d064      	beq.n	800413a <HAL_TIM_ConfigClockSource+0x15a>
 8004070:	2b30      	cmp	r3, #48	; 0x30
 8004072:	d86b      	bhi.n	800414c <HAL_TIM_ConfigClockSource+0x16c>
 8004074:	2b20      	cmp	r3, #32
 8004076:	d060      	beq.n	800413a <HAL_TIM_ConfigClockSource+0x15a>
 8004078:	2b20      	cmp	r3, #32
 800407a:	d867      	bhi.n	800414c <HAL_TIM_ConfigClockSource+0x16c>
 800407c:	2b00      	cmp	r3, #0
 800407e:	d05c      	beq.n	800413a <HAL_TIM_ConfigClockSource+0x15a>
 8004080:	2b10      	cmp	r3, #16
 8004082:	d05a      	beq.n	800413a <HAL_TIM_ConfigClockSource+0x15a>
 8004084:	e062      	b.n	800414c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6818      	ldr	r0, [r3, #0]
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	6899      	ldr	r1, [r3, #8]
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	685a      	ldr	r2, [r3, #4]
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	f000 fb35 	bl	8004704 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80040a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	68ba      	ldr	r2, [r7, #8]
 80040b0:	609a      	str	r2, [r3, #8]
      break;
 80040b2:	e04f      	b.n	8004154 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6818      	ldr	r0, [r3, #0]
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	6899      	ldr	r1, [r3, #8]
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	685a      	ldr	r2, [r3, #4]
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	f000 fb1e 	bl	8004704 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	689a      	ldr	r2, [r3, #8]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040d6:	609a      	str	r2, [r3, #8]
      break;
 80040d8:	e03c      	b.n	8004154 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6818      	ldr	r0, [r3, #0]
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	6859      	ldr	r1, [r3, #4]
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	461a      	mov	r2, r3
 80040e8:	f000 fa92 	bl	8004610 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2150      	movs	r1, #80	; 0x50
 80040f2:	4618      	mov	r0, r3
 80040f4:	f000 faeb 	bl	80046ce <TIM_ITRx_SetConfig>
      break;
 80040f8:	e02c      	b.n	8004154 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6818      	ldr	r0, [r3, #0]
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	6859      	ldr	r1, [r3, #4]
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	461a      	mov	r2, r3
 8004108:	f000 fab1 	bl	800466e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	2160      	movs	r1, #96	; 0x60
 8004112:	4618      	mov	r0, r3
 8004114:	f000 fadb 	bl	80046ce <TIM_ITRx_SetConfig>
      break;
 8004118:	e01c      	b.n	8004154 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6818      	ldr	r0, [r3, #0]
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	6859      	ldr	r1, [r3, #4]
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	461a      	mov	r2, r3
 8004128:	f000 fa72 	bl	8004610 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	2140      	movs	r1, #64	; 0x40
 8004132:	4618      	mov	r0, r3
 8004134:	f000 facb 	bl	80046ce <TIM_ITRx_SetConfig>
      break;
 8004138:	e00c      	b.n	8004154 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4619      	mov	r1, r3
 8004144:	4610      	mov	r0, r2
 8004146:	f000 fac2 	bl	80046ce <TIM_ITRx_SetConfig>
      break;
 800414a:	e003      	b.n	8004154 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	73fb      	strb	r3, [r7, #15]
      break;
 8004150:	e000      	b.n	8004154 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004152:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004164:	7bfb      	ldrb	r3, [r7, #15]
}
 8004166:	4618      	mov	r0, r3
 8004168:	3710      	adds	r7, #16
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
	...

08004170 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004170:	b480      	push	{r7}
 8004172:	b085      	sub	sp, #20
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4a40      	ldr	r2, [pc, #256]	; (8004284 <TIM_Base_SetConfig+0x114>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d013      	beq.n	80041b0 <TIM_Base_SetConfig+0x40>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800418e:	d00f      	beq.n	80041b0 <TIM_Base_SetConfig+0x40>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4a3d      	ldr	r2, [pc, #244]	; (8004288 <TIM_Base_SetConfig+0x118>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d00b      	beq.n	80041b0 <TIM_Base_SetConfig+0x40>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a3c      	ldr	r2, [pc, #240]	; (800428c <TIM_Base_SetConfig+0x11c>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d007      	beq.n	80041b0 <TIM_Base_SetConfig+0x40>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4a3b      	ldr	r2, [pc, #236]	; (8004290 <TIM_Base_SetConfig+0x120>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d003      	beq.n	80041b0 <TIM_Base_SetConfig+0x40>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a3a      	ldr	r2, [pc, #232]	; (8004294 <TIM_Base_SetConfig+0x124>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d108      	bne.n	80041c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	68fa      	ldr	r2, [r7, #12]
 80041be:	4313      	orrs	r3, r2
 80041c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a2f      	ldr	r2, [pc, #188]	; (8004284 <TIM_Base_SetConfig+0x114>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d02b      	beq.n	8004222 <TIM_Base_SetConfig+0xb2>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041d0:	d027      	beq.n	8004222 <TIM_Base_SetConfig+0xb2>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a2c      	ldr	r2, [pc, #176]	; (8004288 <TIM_Base_SetConfig+0x118>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d023      	beq.n	8004222 <TIM_Base_SetConfig+0xb2>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a2b      	ldr	r2, [pc, #172]	; (800428c <TIM_Base_SetConfig+0x11c>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d01f      	beq.n	8004222 <TIM_Base_SetConfig+0xb2>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a2a      	ldr	r2, [pc, #168]	; (8004290 <TIM_Base_SetConfig+0x120>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d01b      	beq.n	8004222 <TIM_Base_SetConfig+0xb2>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a29      	ldr	r2, [pc, #164]	; (8004294 <TIM_Base_SetConfig+0x124>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d017      	beq.n	8004222 <TIM_Base_SetConfig+0xb2>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a28      	ldr	r2, [pc, #160]	; (8004298 <TIM_Base_SetConfig+0x128>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d013      	beq.n	8004222 <TIM_Base_SetConfig+0xb2>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a27      	ldr	r2, [pc, #156]	; (800429c <TIM_Base_SetConfig+0x12c>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d00f      	beq.n	8004222 <TIM_Base_SetConfig+0xb2>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a26      	ldr	r2, [pc, #152]	; (80042a0 <TIM_Base_SetConfig+0x130>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d00b      	beq.n	8004222 <TIM_Base_SetConfig+0xb2>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a25      	ldr	r2, [pc, #148]	; (80042a4 <TIM_Base_SetConfig+0x134>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d007      	beq.n	8004222 <TIM_Base_SetConfig+0xb2>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a24      	ldr	r2, [pc, #144]	; (80042a8 <TIM_Base_SetConfig+0x138>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d003      	beq.n	8004222 <TIM_Base_SetConfig+0xb2>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a23      	ldr	r2, [pc, #140]	; (80042ac <TIM_Base_SetConfig+0x13c>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d108      	bne.n	8004234 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004228:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	4313      	orrs	r3, r2
 8004232:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	695b      	ldr	r3, [r3, #20]
 800423e:	4313      	orrs	r3, r2
 8004240:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	68fa      	ldr	r2, [r7, #12]
 8004246:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	689a      	ldr	r2, [r3, #8]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a0a      	ldr	r2, [pc, #40]	; (8004284 <TIM_Base_SetConfig+0x114>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d003      	beq.n	8004268 <TIM_Base_SetConfig+0xf8>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a0c      	ldr	r2, [pc, #48]	; (8004294 <TIM_Base_SetConfig+0x124>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d103      	bne.n	8004270 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	691a      	ldr	r2, [r3, #16]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	615a      	str	r2, [r3, #20]
}
 8004276:	bf00      	nop
 8004278:	3714      	adds	r7, #20
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr
 8004282:	bf00      	nop
 8004284:	40010000 	.word	0x40010000
 8004288:	40000400 	.word	0x40000400
 800428c:	40000800 	.word	0x40000800
 8004290:	40000c00 	.word	0x40000c00
 8004294:	40010400 	.word	0x40010400
 8004298:	40014000 	.word	0x40014000
 800429c:	40014400 	.word	0x40014400
 80042a0:	40014800 	.word	0x40014800
 80042a4:	40001800 	.word	0x40001800
 80042a8:	40001c00 	.word	0x40001c00
 80042ac:	40002000 	.word	0x40002000

080042b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b087      	sub	sp, #28
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a1b      	ldr	r3, [r3, #32]
 80042be:	f023 0201 	bic.w	r2, r3, #1
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a1b      	ldr	r3, [r3, #32]
 80042ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f023 0303 	bic.w	r3, r3, #3
 80042e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	68fa      	ldr	r2, [r7, #12]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	f023 0302 	bic.w	r3, r3, #2
 80042f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	697a      	ldr	r2, [r7, #20]
 8004300:	4313      	orrs	r3, r2
 8004302:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4a20      	ldr	r2, [pc, #128]	; (8004388 <TIM_OC1_SetConfig+0xd8>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d003      	beq.n	8004314 <TIM_OC1_SetConfig+0x64>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4a1f      	ldr	r2, [pc, #124]	; (800438c <TIM_OC1_SetConfig+0xdc>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d10c      	bne.n	800432e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	f023 0308 	bic.w	r3, r3, #8
 800431a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	697a      	ldr	r2, [r7, #20]
 8004322:	4313      	orrs	r3, r2
 8004324:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	f023 0304 	bic.w	r3, r3, #4
 800432c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4a15      	ldr	r2, [pc, #84]	; (8004388 <TIM_OC1_SetConfig+0xd8>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d003      	beq.n	800433e <TIM_OC1_SetConfig+0x8e>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a14      	ldr	r2, [pc, #80]	; (800438c <TIM_OC1_SetConfig+0xdc>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d111      	bne.n	8004362 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004344:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800434c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	695b      	ldr	r3, [r3, #20]
 8004352:	693a      	ldr	r2, [r7, #16]
 8004354:	4313      	orrs	r3, r2
 8004356:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	699b      	ldr	r3, [r3, #24]
 800435c:	693a      	ldr	r2, [r7, #16]
 800435e:	4313      	orrs	r3, r2
 8004360:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	693a      	ldr	r2, [r7, #16]
 8004366:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	685a      	ldr	r2, [r3, #4]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	697a      	ldr	r2, [r7, #20]
 800437a:	621a      	str	r2, [r3, #32]
}
 800437c:	bf00      	nop
 800437e:	371c      	adds	r7, #28
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr
 8004388:	40010000 	.word	0x40010000
 800438c:	40010400 	.word	0x40010400

08004390 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004390:	b480      	push	{r7}
 8004392:	b087      	sub	sp, #28
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a1b      	ldr	r3, [r3, #32]
 800439e:	f023 0210 	bic.w	r2, r3, #16
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a1b      	ldr	r3, [r3, #32]
 80043aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	021b      	lsls	r3, r3, #8
 80043ce:	68fa      	ldr	r2, [r7, #12]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	f023 0320 	bic.w	r3, r3, #32
 80043da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	011b      	lsls	r3, r3, #4
 80043e2:	697a      	ldr	r2, [r7, #20]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	4a22      	ldr	r2, [pc, #136]	; (8004474 <TIM_OC2_SetConfig+0xe4>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d003      	beq.n	80043f8 <TIM_OC2_SetConfig+0x68>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	4a21      	ldr	r2, [pc, #132]	; (8004478 <TIM_OC2_SetConfig+0xe8>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d10d      	bne.n	8004414 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	011b      	lsls	r3, r3, #4
 8004406:	697a      	ldr	r2, [r7, #20]
 8004408:	4313      	orrs	r3, r2
 800440a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004412:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4a17      	ldr	r2, [pc, #92]	; (8004474 <TIM_OC2_SetConfig+0xe4>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d003      	beq.n	8004424 <TIM_OC2_SetConfig+0x94>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	4a16      	ldr	r2, [pc, #88]	; (8004478 <TIM_OC2_SetConfig+0xe8>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d113      	bne.n	800444c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800442a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004432:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	695b      	ldr	r3, [r3, #20]
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	693a      	ldr	r2, [r7, #16]
 800443c:	4313      	orrs	r3, r2
 800443e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	699b      	ldr	r3, [r3, #24]
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	693a      	ldr	r2, [r7, #16]
 8004448:	4313      	orrs	r3, r2
 800444a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	693a      	ldr	r2, [r7, #16]
 8004450:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	68fa      	ldr	r2, [r7, #12]
 8004456:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	685a      	ldr	r2, [r3, #4]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	697a      	ldr	r2, [r7, #20]
 8004464:	621a      	str	r2, [r3, #32]
}
 8004466:	bf00      	nop
 8004468:	371c      	adds	r7, #28
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr
 8004472:	bf00      	nop
 8004474:	40010000 	.word	0x40010000
 8004478:	40010400 	.word	0x40010400

0800447c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800447c:	b480      	push	{r7}
 800447e:	b087      	sub	sp, #28
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a1b      	ldr	r3, [r3, #32]
 800448a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a1b      	ldr	r3, [r3, #32]
 8004496:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	69db      	ldr	r3, [r3, #28]
 80044a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f023 0303 	bic.w	r3, r3, #3
 80044b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	68fa      	ldr	r2, [r7, #12]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	021b      	lsls	r3, r3, #8
 80044cc:	697a      	ldr	r2, [r7, #20]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a21      	ldr	r2, [pc, #132]	; (800455c <TIM_OC3_SetConfig+0xe0>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d003      	beq.n	80044e2 <TIM_OC3_SetConfig+0x66>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a20      	ldr	r2, [pc, #128]	; (8004560 <TIM_OC3_SetConfig+0xe4>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d10d      	bne.n	80044fe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80044e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	021b      	lsls	r3, r3, #8
 80044f0:	697a      	ldr	r2, [r7, #20]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80044fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a16      	ldr	r2, [pc, #88]	; (800455c <TIM_OC3_SetConfig+0xe0>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d003      	beq.n	800450e <TIM_OC3_SetConfig+0x92>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a15      	ldr	r2, [pc, #84]	; (8004560 <TIM_OC3_SetConfig+0xe4>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d113      	bne.n	8004536 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004514:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800451c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	695b      	ldr	r3, [r3, #20]
 8004522:	011b      	lsls	r3, r3, #4
 8004524:	693a      	ldr	r2, [r7, #16]
 8004526:	4313      	orrs	r3, r2
 8004528:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	699b      	ldr	r3, [r3, #24]
 800452e:	011b      	lsls	r3, r3, #4
 8004530:	693a      	ldr	r2, [r7, #16]
 8004532:	4313      	orrs	r3, r2
 8004534:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	693a      	ldr	r2, [r7, #16]
 800453a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	685a      	ldr	r2, [r3, #4]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	697a      	ldr	r2, [r7, #20]
 800454e:	621a      	str	r2, [r3, #32]
}
 8004550:	bf00      	nop
 8004552:	371c      	adds	r7, #28
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr
 800455c:	40010000 	.word	0x40010000
 8004560:	40010400 	.word	0x40010400

08004564 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004564:	b480      	push	{r7}
 8004566:	b087      	sub	sp, #28
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a1b      	ldr	r3, [r3, #32]
 8004572:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a1b      	ldr	r3, [r3, #32]
 800457e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	69db      	ldr	r3, [r3, #28]
 800458a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004592:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800459a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	021b      	lsls	r3, r3, #8
 80045a2:	68fa      	ldr	r2, [r7, #12]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80045ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	031b      	lsls	r3, r3, #12
 80045b6:	693a      	ldr	r2, [r7, #16]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4a12      	ldr	r2, [pc, #72]	; (8004608 <TIM_OC4_SetConfig+0xa4>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d003      	beq.n	80045cc <TIM_OC4_SetConfig+0x68>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	4a11      	ldr	r2, [pc, #68]	; (800460c <TIM_OC4_SetConfig+0xa8>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d109      	bne.n	80045e0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	695b      	ldr	r3, [r3, #20]
 80045d8:	019b      	lsls	r3, r3, #6
 80045da:	697a      	ldr	r2, [r7, #20]
 80045dc:	4313      	orrs	r3, r2
 80045de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	697a      	ldr	r2, [r7, #20]
 80045e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	68fa      	ldr	r2, [r7, #12]
 80045ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	685a      	ldr	r2, [r3, #4]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	693a      	ldr	r2, [r7, #16]
 80045f8:	621a      	str	r2, [r3, #32]
}
 80045fa:	bf00      	nop
 80045fc:	371c      	adds	r7, #28
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr
 8004606:	bf00      	nop
 8004608:	40010000 	.word	0x40010000
 800460c:	40010400 	.word	0x40010400

08004610 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004610:	b480      	push	{r7}
 8004612:	b087      	sub	sp, #28
 8004614:	af00      	add	r7, sp, #0
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6a1b      	ldr	r3, [r3, #32]
 8004620:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	f023 0201 	bic.w	r2, r3, #1
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	699b      	ldr	r3, [r3, #24]
 8004632:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800463a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	011b      	lsls	r3, r3, #4
 8004640:	693a      	ldr	r2, [r7, #16]
 8004642:	4313      	orrs	r3, r2
 8004644:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	f023 030a 	bic.w	r3, r3, #10
 800464c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800464e:	697a      	ldr	r2, [r7, #20]
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	4313      	orrs	r3, r2
 8004654:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	693a      	ldr	r2, [r7, #16]
 800465a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	697a      	ldr	r2, [r7, #20]
 8004660:	621a      	str	r2, [r3, #32]
}
 8004662:	bf00      	nop
 8004664:	371c      	adds	r7, #28
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr

0800466e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800466e:	b480      	push	{r7}
 8004670:	b087      	sub	sp, #28
 8004672:	af00      	add	r7, sp, #0
 8004674:	60f8      	str	r0, [r7, #12]
 8004676:	60b9      	str	r1, [r7, #8]
 8004678:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6a1b      	ldr	r3, [r3, #32]
 800467e:	f023 0210 	bic.w	r2, r3, #16
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	699b      	ldr	r3, [r3, #24]
 800468a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6a1b      	ldr	r3, [r3, #32]
 8004690:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004698:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	031b      	lsls	r3, r3, #12
 800469e:	697a      	ldr	r2, [r7, #20]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80046aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	011b      	lsls	r3, r3, #4
 80046b0:	693a      	ldr	r2, [r7, #16]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	697a      	ldr	r2, [r7, #20]
 80046ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	693a      	ldr	r2, [r7, #16]
 80046c0:	621a      	str	r2, [r3, #32]
}
 80046c2:	bf00      	nop
 80046c4:	371c      	adds	r7, #28
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr

080046ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046ce:	b480      	push	{r7}
 80046d0:	b085      	sub	sp, #20
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
 80046d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046e6:	683a      	ldr	r2, [r7, #0]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	f043 0307 	orr.w	r3, r3, #7
 80046f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	68fa      	ldr	r2, [r7, #12]
 80046f6:	609a      	str	r2, [r3, #8]
}
 80046f8:	bf00      	nop
 80046fa:	3714      	adds	r7, #20
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr

08004704 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004704:	b480      	push	{r7}
 8004706:	b087      	sub	sp, #28
 8004708:	af00      	add	r7, sp, #0
 800470a:	60f8      	str	r0, [r7, #12]
 800470c:	60b9      	str	r1, [r7, #8]
 800470e:	607a      	str	r2, [r7, #4]
 8004710:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800471e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	021a      	lsls	r2, r3, #8
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	431a      	orrs	r2, r3
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	4313      	orrs	r3, r2
 800472c:	697a      	ldr	r2, [r7, #20]
 800472e:	4313      	orrs	r3, r2
 8004730:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	697a      	ldr	r2, [r7, #20]
 8004736:	609a      	str	r2, [r3, #8]
}
 8004738:	bf00      	nop
 800473a:	371c      	adds	r7, #28
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr

08004744 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004744:	b480      	push	{r7}
 8004746:	b087      	sub	sp, #28
 8004748:	af00      	add	r7, sp, #0
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	60b9      	str	r1, [r7, #8]
 800474e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	f003 031f 	and.w	r3, r3, #31
 8004756:	2201      	movs	r2, #1
 8004758:	fa02 f303 	lsl.w	r3, r2, r3
 800475c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	6a1a      	ldr	r2, [r3, #32]
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	43db      	mvns	r3, r3
 8004766:	401a      	ands	r2, r3
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6a1a      	ldr	r2, [r3, #32]
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	f003 031f 	and.w	r3, r3, #31
 8004776:	6879      	ldr	r1, [r7, #4]
 8004778:	fa01 f303 	lsl.w	r3, r1, r3
 800477c:	431a      	orrs	r2, r3
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	621a      	str	r2, [r3, #32]
}
 8004782:	bf00      	nop
 8004784:	371c      	adds	r7, #28
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr
	...

08004790 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004790:	b480      	push	{r7}
 8004792:	b085      	sub	sp, #20
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d101      	bne.n	80047a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047a4:	2302      	movs	r3, #2
 80047a6:	e05a      	b.n	800485e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2202      	movs	r2, #2
 80047b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68fa      	ldr	r2, [r7, #12]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a21      	ldr	r2, [pc, #132]	; (800486c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d022      	beq.n	8004832 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047f4:	d01d      	beq.n	8004832 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a1d      	ldr	r2, [pc, #116]	; (8004870 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d018      	beq.n	8004832 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a1b      	ldr	r2, [pc, #108]	; (8004874 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d013      	beq.n	8004832 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a1a      	ldr	r2, [pc, #104]	; (8004878 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d00e      	beq.n	8004832 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a18      	ldr	r2, [pc, #96]	; (800487c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d009      	beq.n	8004832 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a17      	ldr	r2, [pc, #92]	; (8004880 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d004      	beq.n	8004832 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a15      	ldr	r2, [pc, #84]	; (8004884 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d10c      	bne.n	800484c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004838:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	68ba      	ldr	r2, [r7, #8]
 8004840:	4313      	orrs	r3, r2
 8004842:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68ba      	ldr	r2, [r7, #8]
 800484a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800485c:	2300      	movs	r3, #0
}
 800485e:	4618      	mov	r0, r3
 8004860:	3714      	adds	r7, #20
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop
 800486c:	40010000 	.word	0x40010000
 8004870:	40000400 	.word	0x40000400
 8004874:	40000800 	.word	0x40000800
 8004878:	40000c00 	.word	0x40000c00
 800487c:	40010400 	.word	0x40010400
 8004880:	40014000 	.word	0x40014000
 8004884:	40001800 	.word	0x40001800

08004888 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004888:	b480      	push	{r7}
 800488a:	b085      	sub	sp, #20
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004892:	2300      	movs	r3, #0
 8004894:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800489c:	2b01      	cmp	r3, #1
 800489e:	d101      	bne.n	80048a4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80048a0:	2302      	movs	r3, #2
 80048a2:	e03d      	b.n	8004920 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	695b      	ldr	r3, [r3, #20]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	69db      	ldr	r3, [r3, #28]
 800490a:	4313      	orrs	r3, r2
 800490c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800491e:	2300      	movs	r3, #0
}
 8004920:	4618      	mov	r0, r3
 8004922:	3714      	adds	r7, #20
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <__libc_init_array>:
 800492c:	b570      	push	{r4, r5, r6, lr}
 800492e:	4d0d      	ldr	r5, [pc, #52]	; (8004964 <__libc_init_array+0x38>)
 8004930:	4c0d      	ldr	r4, [pc, #52]	; (8004968 <__libc_init_array+0x3c>)
 8004932:	1b64      	subs	r4, r4, r5
 8004934:	10a4      	asrs	r4, r4, #2
 8004936:	2600      	movs	r6, #0
 8004938:	42a6      	cmp	r6, r4
 800493a:	d109      	bne.n	8004950 <__libc_init_array+0x24>
 800493c:	4d0b      	ldr	r5, [pc, #44]	; (800496c <__libc_init_array+0x40>)
 800493e:	4c0c      	ldr	r4, [pc, #48]	; (8004970 <__libc_init_array+0x44>)
 8004940:	f000 f820 	bl	8004984 <_init>
 8004944:	1b64      	subs	r4, r4, r5
 8004946:	10a4      	asrs	r4, r4, #2
 8004948:	2600      	movs	r6, #0
 800494a:	42a6      	cmp	r6, r4
 800494c:	d105      	bne.n	800495a <__libc_init_array+0x2e>
 800494e:	bd70      	pop	{r4, r5, r6, pc}
 8004950:	f855 3b04 	ldr.w	r3, [r5], #4
 8004954:	4798      	blx	r3
 8004956:	3601      	adds	r6, #1
 8004958:	e7ee      	b.n	8004938 <__libc_init_array+0xc>
 800495a:	f855 3b04 	ldr.w	r3, [r5], #4
 800495e:	4798      	blx	r3
 8004960:	3601      	adds	r6, #1
 8004962:	e7f2      	b.n	800494a <__libc_init_array+0x1e>
 8004964:	080049bc 	.word	0x080049bc
 8004968:	080049bc 	.word	0x080049bc
 800496c:	080049bc 	.word	0x080049bc
 8004970:	080049c0 	.word	0x080049c0

08004974 <memset>:
 8004974:	4402      	add	r2, r0
 8004976:	4603      	mov	r3, r0
 8004978:	4293      	cmp	r3, r2
 800497a:	d100      	bne.n	800497e <memset+0xa>
 800497c:	4770      	bx	lr
 800497e:	f803 1b01 	strb.w	r1, [r3], #1
 8004982:	e7f9      	b.n	8004978 <memset+0x4>

08004984 <_init>:
 8004984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004986:	bf00      	nop
 8004988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800498a:	bc08      	pop	{r3}
 800498c:	469e      	mov	lr, r3
 800498e:	4770      	bx	lr

08004990 <_fini>:
 8004990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004992:	bf00      	nop
 8004994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004996:	bc08      	pop	{r3}
 8004998:	469e      	mov	lr, r3
 800499a:	4770      	bx	lr
