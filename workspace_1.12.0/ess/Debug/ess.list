
ess.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bbf0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000048c  0800bdc0  0800bdc0  0001bdc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c24c  0800c24c  000202e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c24c  0800c24c  0001c24c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c254  0800c254  000202e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c254  0800c254  0001c254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c258  0800c258  0001c258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e4  20000000  0800c25c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c90  200002e4  0800c540  000202e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001f74  0800c540  00021f74  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014b08  00000000  00000000  00020314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000351c  00000000  00000000  00034e1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001220  00000000  00000000  00038338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001078  00000000  00000000  00039558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025a70  00000000  00000000  0003a5d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000171b6  00000000  00000000  00060040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3a05  00000000  00000000  000771f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014abfb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c60  00000000  00000000  0014ac4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200002e4 	.word	0x200002e4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800bda8 	.word	0x0800bda8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200002e8 	.word	0x200002e8
 800020c:	0800bda8 	.word	0x0800bda8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2uiz>:
 8000b6c:	004a      	lsls	r2, r1, #1
 8000b6e:	d211      	bcs.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d211      	bcs.n	8000b9a <__aeabi_d2uiz+0x2e>
 8000b76:	d50d      	bpl.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d40e      	bmi.n	8000ba0 <__aeabi_d2uiz+0x34>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_d2uiz+0x3a>
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0000 	mov.w	r0, #0
 8000baa:	4770      	bx	lr

08000bac <__aeabi_uldivmod>:
 8000bac:	b953      	cbnz	r3, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bae:	b94a      	cbnz	r2, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bb0:	2900      	cmp	r1, #0
 8000bb2:	bf08      	it	eq
 8000bb4:	2800      	cmpeq	r0, #0
 8000bb6:	bf1c      	itt	ne
 8000bb8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bbc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc0:	f000 b9aa 	b.w	8000f18 <__aeabi_idiv0>
 8000bc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bcc:	f000 f83c 	bl	8000c48 <__udivmoddi4>
 8000bd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd8:	b004      	add	sp, #16
 8000bda:	4770      	bx	lr

08000bdc <__aeabi_d2lz>:
 8000bdc:	b538      	push	{r3, r4, r5, lr}
 8000bde:	2200      	movs	r2, #0
 8000be0:	2300      	movs	r3, #0
 8000be2:	4604      	mov	r4, r0
 8000be4:	460d      	mov	r5, r1
 8000be6:	f7ff ff99 	bl	8000b1c <__aeabi_dcmplt>
 8000bea:	b928      	cbnz	r0, 8000bf8 <__aeabi_d2lz+0x1c>
 8000bec:	4620      	mov	r0, r4
 8000bee:	4629      	mov	r1, r5
 8000bf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000bf4:	f000 b80a 	b.w	8000c0c <__aeabi_d2ulz>
 8000bf8:	4620      	mov	r0, r4
 8000bfa:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000bfe:	f000 f805 	bl	8000c0c <__aeabi_d2ulz>
 8000c02:	4240      	negs	r0, r0
 8000c04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c08:	bd38      	pop	{r3, r4, r5, pc}
 8000c0a:	bf00      	nop

08000c0c <__aeabi_d2ulz>:
 8000c0c:	b5d0      	push	{r4, r6, r7, lr}
 8000c0e:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <__aeabi_d2ulz+0x34>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	4606      	mov	r6, r0
 8000c14:	460f      	mov	r7, r1
 8000c16:	f7ff fd0f 	bl	8000638 <__aeabi_dmul>
 8000c1a:	f7ff ffa7 	bl	8000b6c <__aeabi_d2uiz>
 8000c1e:	4604      	mov	r4, r0
 8000c20:	f7ff fc90 	bl	8000544 <__aeabi_ui2d>
 8000c24:	4b07      	ldr	r3, [pc, #28]	; (8000c44 <__aeabi_d2ulz+0x38>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	f7ff fd06 	bl	8000638 <__aeabi_dmul>
 8000c2c:	4602      	mov	r2, r0
 8000c2e:	460b      	mov	r3, r1
 8000c30:	4630      	mov	r0, r6
 8000c32:	4639      	mov	r1, r7
 8000c34:	f7ff fb48 	bl	80002c8 <__aeabi_dsub>
 8000c38:	f7ff ff98 	bl	8000b6c <__aeabi_d2uiz>
 8000c3c:	4621      	mov	r1, r4
 8000c3e:	bdd0      	pop	{r4, r6, r7, pc}
 8000c40:	3df00000 	.word	0x3df00000
 8000c44:	41f00000 	.word	0x41f00000

08000c48 <__udivmoddi4>:
 8000c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c4c:	9d08      	ldr	r5, [sp, #32]
 8000c4e:	4604      	mov	r4, r0
 8000c50:	468e      	mov	lr, r1
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d14d      	bne.n	8000cf2 <__udivmoddi4+0xaa>
 8000c56:	428a      	cmp	r2, r1
 8000c58:	4694      	mov	ip, r2
 8000c5a:	d969      	bls.n	8000d30 <__udivmoddi4+0xe8>
 8000c5c:	fab2 f282 	clz	r2, r2
 8000c60:	b152      	cbz	r2, 8000c78 <__udivmoddi4+0x30>
 8000c62:	fa01 f302 	lsl.w	r3, r1, r2
 8000c66:	f1c2 0120 	rsb	r1, r2, #32
 8000c6a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c6e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c72:	ea41 0e03 	orr.w	lr, r1, r3
 8000c76:	4094      	lsls	r4, r2
 8000c78:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c7c:	0c21      	lsrs	r1, r4, #16
 8000c7e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c82:	fa1f f78c 	uxth.w	r7, ip
 8000c86:	fb08 e316 	mls	r3, r8, r6, lr
 8000c8a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c8e:	fb06 f107 	mul.w	r1, r6, r7
 8000c92:	4299      	cmp	r1, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x64>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c9e:	f080 811f 	bcs.w	8000ee0 <__udivmoddi4+0x298>
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	f240 811c 	bls.w	8000ee0 <__udivmoddi4+0x298>
 8000ca8:	3e02      	subs	r6, #2
 8000caa:	4463      	add	r3, ip
 8000cac:	1a5b      	subs	r3, r3, r1
 8000cae:	b2a4      	uxth	r4, r4
 8000cb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cb4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cb8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cbc:	fb00 f707 	mul.w	r7, r0, r7
 8000cc0:	42a7      	cmp	r7, r4
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x92>
 8000cc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ccc:	f080 810a 	bcs.w	8000ee4 <__udivmoddi4+0x29c>
 8000cd0:	42a7      	cmp	r7, r4
 8000cd2:	f240 8107 	bls.w	8000ee4 <__udivmoddi4+0x29c>
 8000cd6:	4464      	add	r4, ip
 8000cd8:	3802      	subs	r0, #2
 8000cda:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cde:	1be4      	subs	r4, r4, r7
 8000ce0:	2600      	movs	r6, #0
 8000ce2:	b11d      	cbz	r5, 8000cec <__udivmoddi4+0xa4>
 8000ce4:	40d4      	lsrs	r4, r2
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cec:	4631      	mov	r1, r6
 8000cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d909      	bls.n	8000d0a <__udivmoddi4+0xc2>
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	f000 80ef 	beq.w	8000eda <__udivmoddi4+0x292>
 8000cfc:	2600      	movs	r6, #0
 8000cfe:	e9c5 0100 	strd	r0, r1, [r5]
 8000d02:	4630      	mov	r0, r6
 8000d04:	4631      	mov	r1, r6
 8000d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0a:	fab3 f683 	clz	r6, r3
 8000d0e:	2e00      	cmp	r6, #0
 8000d10:	d14a      	bne.n	8000da8 <__udivmoddi4+0x160>
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d302      	bcc.n	8000d1c <__udivmoddi4+0xd4>
 8000d16:	4282      	cmp	r2, r0
 8000d18:	f200 80f9 	bhi.w	8000f0e <__udivmoddi4+0x2c6>
 8000d1c:	1a84      	subs	r4, r0, r2
 8000d1e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d22:	2001      	movs	r0, #1
 8000d24:	469e      	mov	lr, r3
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	d0e0      	beq.n	8000cec <__udivmoddi4+0xa4>
 8000d2a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d2e:	e7dd      	b.n	8000cec <__udivmoddi4+0xa4>
 8000d30:	b902      	cbnz	r2, 8000d34 <__udivmoddi4+0xec>
 8000d32:	deff      	udf	#255	; 0xff
 8000d34:	fab2 f282 	clz	r2, r2
 8000d38:	2a00      	cmp	r2, #0
 8000d3a:	f040 8092 	bne.w	8000e62 <__udivmoddi4+0x21a>
 8000d3e:	eba1 010c 	sub.w	r1, r1, ip
 8000d42:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d46:	fa1f fe8c 	uxth.w	lr, ip
 8000d4a:	2601      	movs	r6, #1
 8000d4c:	0c20      	lsrs	r0, r4, #16
 8000d4e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d52:	fb07 1113 	mls	r1, r7, r3, r1
 8000d56:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d5a:	fb0e f003 	mul.w	r0, lr, r3
 8000d5e:	4288      	cmp	r0, r1
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0x12c>
 8000d62:	eb1c 0101 	adds.w	r1, ip, r1
 8000d66:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d6a:	d202      	bcs.n	8000d72 <__udivmoddi4+0x12a>
 8000d6c:	4288      	cmp	r0, r1
 8000d6e:	f200 80cb 	bhi.w	8000f08 <__udivmoddi4+0x2c0>
 8000d72:	4643      	mov	r3, r8
 8000d74:	1a09      	subs	r1, r1, r0
 8000d76:	b2a4      	uxth	r4, r4
 8000d78:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d7c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d80:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d84:	fb0e fe00 	mul.w	lr, lr, r0
 8000d88:	45a6      	cmp	lr, r4
 8000d8a:	d908      	bls.n	8000d9e <__udivmoddi4+0x156>
 8000d8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d90:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d94:	d202      	bcs.n	8000d9c <__udivmoddi4+0x154>
 8000d96:	45a6      	cmp	lr, r4
 8000d98:	f200 80bb 	bhi.w	8000f12 <__udivmoddi4+0x2ca>
 8000d9c:	4608      	mov	r0, r1
 8000d9e:	eba4 040e 	sub.w	r4, r4, lr
 8000da2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000da6:	e79c      	b.n	8000ce2 <__udivmoddi4+0x9a>
 8000da8:	f1c6 0720 	rsb	r7, r6, #32
 8000dac:	40b3      	lsls	r3, r6
 8000dae:	fa22 fc07 	lsr.w	ip, r2, r7
 8000db2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000db6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dba:	fa01 f306 	lsl.w	r3, r1, r6
 8000dbe:	431c      	orrs	r4, r3
 8000dc0:	40f9      	lsrs	r1, r7
 8000dc2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dc6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dca:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dce:	0c20      	lsrs	r0, r4, #16
 8000dd0:	fa1f fe8c 	uxth.w	lr, ip
 8000dd4:	fb09 1118 	mls	r1, r9, r8, r1
 8000dd8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ddc:	fb08 f00e 	mul.w	r0, r8, lr
 8000de0:	4288      	cmp	r0, r1
 8000de2:	fa02 f206 	lsl.w	r2, r2, r6
 8000de6:	d90b      	bls.n	8000e00 <__udivmoddi4+0x1b8>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f108 3aff 	add.w	sl, r8, #4294967295
 8000df0:	f080 8088 	bcs.w	8000f04 <__udivmoddi4+0x2bc>
 8000df4:	4288      	cmp	r0, r1
 8000df6:	f240 8085 	bls.w	8000f04 <__udivmoddi4+0x2bc>
 8000dfa:	f1a8 0802 	sub.w	r8, r8, #2
 8000dfe:	4461      	add	r1, ip
 8000e00:	1a09      	subs	r1, r1, r0
 8000e02:	b2a4      	uxth	r4, r4
 8000e04:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e08:	fb09 1110 	mls	r1, r9, r0, r1
 8000e0c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e10:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e14:	458e      	cmp	lr, r1
 8000e16:	d908      	bls.n	8000e2a <__udivmoddi4+0x1e2>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e20:	d26c      	bcs.n	8000efc <__udivmoddi4+0x2b4>
 8000e22:	458e      	cmp	lr, r1
 8000e24:	d96a      	bls.n	8000efc <__udivmoddi4+0x2b4>
 8000e26:	3802      	subs	r0, #2
 8000e28:	4461      	add	r1, ip
 8000e2a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e2e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e32:	eba1 010e 	sub.w	r1, r1, lr
 8000e36:	42a1      	cmp	r1, r4
 8000e38:	46c8      	mov	r8, r9
 8000e3a:	46a6      	mov	lr, r4
 8000e3c:	d356      	bcc.n	8000eec <__udivmoddi4+0x2a4>
 8000e3e:	d053      	beq.n	8000ee8 <__udivmoddi4+0x2a0>
 8000e40:	b15d      	cbz	r5, 8000e5a <__udivmoddi4+0x212>
 8000e42:	ebb3 0208 	subs.w	r2, r3, r8
 8000e46:	eb61 010e 	sbc.w	r1, r1, lr
 8000e4a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e4e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e52:	40f1      	lsrs	r1, r6
 8000e54:	431f      	orrs	r7, r3
 8000e56:	e9c5 7100 	strd	r7, r1, [r5]
 8000e5a:	2600      	movs	r6, #0
 8000e5c:	4631      	mov	r1, r6
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	f1c2 0320 	rsb	r3, r2, #32
 8000e66:	40d8      	lsrs	r0, r3
 8000e68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e6c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e70:	4091      	lsls	r1, r2
 8000e72:	4301      	orrs	r1, r0
 8000e74:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e78:	fa1f fe8c 	uxth.w	lr, ip
 8000e7c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e80:	fb07 3610 	mls	r6, r7, r0, r3
 8000e84:	0c0b      	lsrs	r3, r1, #16
 8000e86:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e8a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e8e:	429e      	cmp	r6, r3
 8000e90:	fa04 f402 	lsl.w	r4, r4, r2
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x260>
 8000e96:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e9e:	d22f      	bcs.n	8000f00 <__udivmoddi4+0x2b8>
 8000ea0:	429e      	cmp	r6, r3
 8000ea2:	d92d      	bls.n	8000f00 <__udivmoddi4+0x2b8>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	4463      	add	r3, ip
 8000ea8:	1b9b      	subs	r3, r3, r6
 8000eaa:	b289      	uxth	r1, r1
 8000eac:	fbb3 f6f7 	udiv	r6, r3, r7
 8000eb0:	fb07 3316 	mls	r3, r7, r6, r3
 8000eb4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb8:	fb06 f30e 	mul.w	r3, r6, lr
 8000ebc:	428b      	cmp	r3, r1
 8000ebe:	d908      	bls.n	8000ed2 <__udivmoddi4+0x28a>
 8000ec0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ec8:	d216      	bcs.n	8000ef8 <__udivmoddi4+0x2b0>
 8000eca:	428b      	cmp	r3, r1
 8000ecc:	d914      	bls.n	8000ef8 <__udivmoddi4+0x2b0>
 8000ece:	3e02      	subs	r6, #2
 8000ed0:	4461      	add	r1, ip
 8000ed2:	1ac9      	subs	r1, r1, r3
 8000ed4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ed8:	e738      	b.n	8000d4c <__udivmoddi4+0x104>
 8000eda:	462e      	mov	r6, r5
 8000edc:	4628      	mov	r0, r5
 8000ede:	e705      	b.n	8000cec <__udivmoddi4+0xa4>
 8000ee0:	4606      	mov	r6, r0
 8000ee2:	e6e3      	b.n	8000cac <__udivmoddi4+0x64>
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	e6f8      	b.n	8000cda <__udivmoddi4+0x92>
 8000ee8:	454b      	cmp	r3, r9
 8000eea:	d2a9      	bcs.n	8000e40 <__udivmoddi4+0x1f8>
 8000eec:	ebb9 0802 	subs.w	r8, r9, r2
 8000ef0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ef4:	3801      	subs	r0, #1
 8000ef6:	e7a3      	b.n	8000e40 <__udivmoddi4+0x1f8>
 8000ef8:	4646      	mov	r6, r8
 8000efa:	e7ea      	b.n	8000ed2 <__udivmoddi4+0x28a>
 8000efc:	4620      	mov	r0, r4
 8000efe:	e794      	b.n	8000e2a <__udivmoddi4+0x1e2>
 8000f00:	4640      	mov	r0, r8
 8000f02:	e7d1      	b.n	8000ea8 <__udivmoddi4+0x260>
 8000f04:	46d0      	mov	r8, sl
 8000f06:	e77b      	b.n	8000e00 <__udivmoddi4+0x1b8>
 8000f08:	3b02      	subs	r3, #2
 8000f0a:	4461      	add	r1, ip
 8000f0c:	e732      	b.n	8000d74 <__udivmoddi4+0x12c>
 8000f0e:	4630      	mov	r0, r6
 8000f10:	e709      	b.n	8000d26 <__udivmoddi4+0xde>
 8000f12:	4464      	add	r4, ip
 8000f14:	3802      	subs	r0, #2
 8000f16:	e742      	b.n	8000d9e <__udivmoddi4+0x156>

08000f18 <__aeabi_idiv0>:
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop

08000f1c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b088      	sub	sp, #32
 8000f20:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f22:	f107 030c 	add.w	r3, r7, #12
 8000f26:	2200      	movs	r2, #0
 8000f28:	601a      	str	r2, [r3, #0]
 8000f2a:	605a      	str	r2, [r3, #4]
 8000f2c:	609a      	str	r2, [r3, #8]
 8000f2e:	60da      	str	r2, [r3, #12]
 8000f30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	60bb      	str	r3, [r7, #8]
 8000f36:	4b18      	ldr	r3, [pc, #96]	; (8000f98 <MX_GPIO_Init+0x7c>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	4a17      	ldr	r2, [pc, #92]	; (8000f98 <MX_GPIO_Init+0x7c>)
 8000f3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f40:	6313      	str	r3, [r2, #48]	; 0x30
 8000f42:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <MX_GPIO_Init+0x7c>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f4a:	60bb      	str	r3, [r7, #8]
 8000f4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	607b      	str	r3, [r7, #4]
 8000f52:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <MX_GPIO_Init+0x7c>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	4a10      	ldr	r2, [pc, #64]	; (8000f98 <MX_GPIO_Init+0x7c>)
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5e:	4b0e      	ldr	r3, [pc, #56]	; (8000f98 <MX_GPIO_Init+0x7c>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2101      	movs	r1, #1
 8000f6e:	480b      	ldr	r0, [pc, #44]	; (8000f9c <MX_GPIO_Init+0x80>)
 8000f70:	f000 fe4e 	bl	8001c10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f74:	2301      	movs	r3, #1
 8000f76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f80:	2300      	movs	r3, #0
 8000f82:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f84:	f107 030c 	add.w	r3, r7, #12
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4804      	ldr	r0, [pc, #16]	; (8000f9c <MX_GPIO_Init+0x80>)
 8000f8c:	f000 fcac 	bl	80018e8 <HAL_GPIO_Init>

}
 8000f90:	bf00      	nop
 8000f92:	3720      	adds	r7, #32
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40023800 	.word	0x40023800
 8000f9c:	40020000 	.word	0x40020000

08000fa0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa0:	b598      	push	{r3, r4, r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fa4:	f000 faf8 	bl	8001598 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fa8:	f000 f846 	bl	8001038 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fac:	f7ff ffb6 	bl	8000f1c <MX_GPIO_Init>
  MX_TIM1_Init();
 8000fb0:	f000 f9e8 	bl	8001384 <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 8000fb4:	f007 fa62 	bl	800847c <MX_USB_DEVICE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(flag==1){
 8000fb8:	4b1a      	ldr	r3, [pc, #104]	; (8001024 <main+0x84>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d1fb      	bne.n	8000fb8 <main+0x18>
	 		  //CDC_Transmit_FS("connected",9);
	 	  CDC_Transmit_FS((uint8_t*) dta, strlen(dta) );
 8000fc0:	4b19      	ldr	r3, [pc, #100]	; (8001028 <main+0x88>)
 8000fc2:	681c      	ldr	r4, [r3, #0]
 8000fc4:	4b18      	ldr	r3, [pc, #96]	; (8001028 <main+0x88>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff f921 	bl	8000210 <strlen>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	b29b      	uxth	r3, r3
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4620      	mov	r0, r4
 8000fd6:	f007 fb21 	bl	800861c <CDC_Transmit_FS>
	 	  atof(dta) ;
 8000fda:	4b13      	ldr	r3, [pc, #76]	; (8001028 <main+0x88>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f007 ffee 	bl	8008fc0 <atof>
	 	  HAL_Delay(1000);
 8000fe4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fe8:	f000 fb48 	bl	800167c <HAL_Delay>
	 	  if(data == 'M'&& data1=='1'){
 8000fec:	4b0f      	ldr	r3, [pc, #60]	; (800102c <main+0x8c>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	2b4d      	cmp	r3, #77	; 0x4d
 8000ff2:	d109      	bne.n	8001008 <main+0x68>
 8000ff4:	4b0e      	ldr	r3, [pc, #56]	; (8001030 <main+0x90>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	2b31      	cmp	r3, #49	; 0x31
 8000ffa:	d105      	bne.n	8001008 <main+0x68>
	 	    	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	2101      	movs	r1, #1
 8001000:	480c      	ldr	r0, [pc, #48]	; (8001034 <main+0x94>)
 8001002:	f000 fe05 	bl	8001c10 <HAL_GPIO_WritePin>
 8001006:	e00c      	b.n	8001022 <main+0x82>
	 	      }
	 	      else if((data == 'M')&&(data1=='0')){
 8001008:	4b08      	ldr	r3, [pc, #32]	; (800102c <main+0x8c>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b4d      	cmp	r3, #77	; 0x4d
 800100e:	d1d3      	bne.n	8000fb8 <main+0x18>
 8001010:	4b07      	ldr	r3, [pc, #28]	; (8001030 <main+0x90>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2b30      	cmp	r3, #48	; 0x30
 8001016:	d1cf      	bne.n	8000fb8 <main+0x18>
	 	    	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8001018:	2200      	movs	r2, #0
 800101a:	2101      	movs	r1, #1
 800101c:	4805      	ldr	r0, [pc, #20]	; (8001034 <main+0x94>)
 800101e:	f000 fdf7 	bl	8001c10 <HAL_GPIO_WritePin>
	  if(flag==1){
 8001022:	e7c9      	b.n	8000fb8 <main+0x18>
 8001024:	20000304 	.word	0x20000304
 8001028:	20000000 	.word	0x20000000
 800102c:	20000300 	.word	0x20000300
 8001030:	20000301 	.word	0x20000301
 8001034:	40020000 	.word	0x40020000

08001038 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b094      	sub	sp, #80	; 0x50
 800103c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800103e:	f107 031c 	add.w	r3, r7, #28
 8001042:	2234      	movs	r2, #52	; 0x34
 8001044:	2100      	movs	r1, #0
 8001046:	4618      	mov	r0, r3
 8001048:	f007 ffe8 	bl	800901c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800104c:	f107 0308 	add.w	r3, r7, #8
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800105c:	2300      	movs	r3, #0
 800105e:	607b      	str	r3, [r7, #4]
 8001060:	4b29      	ldr	r3, [pc, #164]	; (8001108 <SystemClock_Config+0xd0>)
 8001062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001064:	4a28      	ldr	r2, [pc, #160]	; (8001108 <SystemClock_Config+0xd0>)
 8001066:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800106a:	6413      	str	r3, [r2, #64]	; 0x40
 800106c:	4b26      	ldr	r3, [pc, #152]	; (8001108 <SystemClock_Config+0xd0>)
 800106e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001070:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001074:	607b      	str	r3, [r7, #4]
 8001076:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001078:	2300      	movs	r3, #0
 800107a:	603b      	str	r3, [r7, #0]
 800107c:	4b23      	ldr	r3, [pc, #140]	; (800110c <SystemClock_Config+0xd4>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001084:	4a21      	ldr	r2, [pc, #132]	; (800110c <SystemClock_Config+0xd4>)
 8001086:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800108a:	6013      	str	r3, [r2, #0]
 800108c:	4b1f      	ldr	r3, [pc, #124]	; (800110c <SystemClock_Config+0xd4>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001094:	603b      	str	r3, [r7, #0]
 8001096:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001098:	2301      	movs	r3, #1
 800109a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800109c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010a0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010a2:	2302      	movs	r3, #2
 80010a4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010ac:	2304      	movs	r3, #4
 80010ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 80010b0:	2348      	movs	r3, #72	; 0x48
 80010b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010b4:	2302      	movs	r3, #2
 80010b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80010b8:	2303      	movs	r3, #3
 80010ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010bc:	2302      	movs	r3, #2
 80010be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010c0:	f107 031c 	add.w	r3, r7, #28
 80010c4:	4618      	mov	r0, r3
 80010c6:	f002 fed1 	bl	8003e6c <HAL_RCC_OscConfig>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80010d0:	f000 f81e 	bl	8001110 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010d4:	230f      	movs	r3, #15
 80010d6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010d8:	2302      	movs	r3, #2
 80010da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010dc:	2300      	movs	r3, #0
 80010de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010e6:	2300      	movs	r3, #0
 80010e8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010ea:	f107 0308 	add.w	r3, r7, #8
 80010ee:	2102      	movs	r1, #2
 80010f0:	4618      	mov	r0, r3
 80010f2:	f002 f86f 	bl	80031d4 <HAL_RCC_ClockConfig>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80010fc:	f000 f808 	bl	8001110 <Error_Handler>
  }
}
 8001100:	bf00      	nop
 8001102:	3750      	adds	r7, #80	; 0x50
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40023800 	.word	0x40023800
 800110c:	40007000 	.word	0x40007000

08001110 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001114:	b672      	cpsid	i
}
 8001116:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001118:	e7fe      	b.n	8001118 <Error_Handler+0x8>
	...

0800111c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	607b      	str	r3, [r7, #4]
 8001126:	4b10      	ldr	r3, [pc, #64]	; (8001168 <HAL_MspInit+0x4c>)
 8001128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112a:	4a0f      	ldr	r2, [pc, #60]	; (8001168 <HAL_MspInit+0x4c>)
 800112c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001130:	6453      	str	r3, [r2, #68]	; 0x44
 8001132:	4b0d      	ldr	r3, [pc, #52]	; (8001168 <HAL_MspInit+0x4c>)
 8001134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001136:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800113a:	607b      	str	r3, [r7, #4]
 800113c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	603b      	str	r3, [r7, #0]
 8001142:	4b09      	ldr	r3, [pc, #36]	; (8001168 <HAL_MspInit+0x4c>)
 8001144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001146:	4a08      	ldr	r2, [pc, #32]	; (8001168 <HAL_MspInit+0x4c>)
 8001148:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800114c:	6413      	str	r3, [r2, #64]	; 0x40
 800114e:	4b06      	ldr	r3, [pc, #24]	; (8001168 <HAL_MspInit+0x4c>)
 8001150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001156:	603b      	str	r3, [r7, #0]
 8001158:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800115a:	bf00      	nop
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	40023800 	.word	0x40023800

0800116c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001170:	e7fe      	b.n	8001170 <NMI_Handler+0x4>

08001172 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001172:	b480      	push	{r7}
 8001174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001176:	e7fe      	b.n	8001176 <HardFault_Handler+0x4>

08001178 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800117c:	e7fe      	b.n	800117c <MemManage_Handler+0x4>

0800117e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800117e:	b480      	push	{r7}
 8001180:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001182:	e7fe      	b.n	8001182 <BusFault_Handler+0x4>

08001184 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001188:	e7fe      	b.n	8001188 <UsageFault_Handler+0x4>

0800118a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800118a:	b480      	push	{r7}
 800118c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800118e:	bf00      	nop
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr

08001198 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800119c:	bf00      	nop
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr

080011a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011a6:	b480      	push	{r7}
 80011a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011aa:	bf00      	nop
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr

080011b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011b8:	f000 fa40 	bl	800163c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011bc:	bf00      	nop
 80011be:	bd80      	pop	{r7, pc}

080011c0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80011c4:	4802      	ldr	r0, [pc, #8]	; (80011d0 <OTG_FS_IRQHandler+0x10>)
 80011c6:	f000 fe93 	bl	8001ef0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20001838 	.word	0x20001838

080011d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  return 1;
 80011d8:	2301      	movs	r3, #1
}
 80011da:	4618      	mov	r0, r3
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <_kill>:

int _kill(int pid, int sig)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80011ee:	f007 feeb 	bl	8008fc8 <__errno>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2216      	movs	r2, #22
 80011f6:	601a      	str	r2, [r3, #0]
  return -1;
 80011f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}

08001204 <_exit>:

void _exit (int status)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800120c:	f04f 31ff 	mov.w	r1, #4294967295
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f7ff ffe7 	bl	80011e4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001216:	e7fe      	b.n	8001216 <_exit+0x12>

08001218 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b086      	sub	sp, #24
 800121c:	af00      	add	r7, sp, #0
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001224:	2300      	movs	r3, #0
 8001226:	617b      	str	r3, [r7, #20]
 8001228:	e00a      	b.n	8001240 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800122a:	f3af 8000 	nop.w
 800122e:	4601      	mov	r1, r0
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	1c5a      	adds	r2, r3, #1
 8001234:	60ba      	str	r2, [r7, #8]
 8001236:	b2ca      	uxtb	r2, r1
 8001238:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	3301      	adds	r3, #1
 800123e:	617b      	str	r3, [r7, #20]
 8001240:	697a      	ldr	r2, [r7, #20]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	429a      	cmp	r2, r3
 8001246:	dbf0      	blt.n	800122a <_read+0x12>
  }

  return len;
 8001248:	687b      	ldr	r3, [r7, #4]
}
 800124a:	4618      	mov	r0, r3
 800124c:	3718      	adds	r7, #24
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	b086      	sub	sp, #24
 8001256:	af00      	add	r7, sp, #0
 8001258:	60f8      	str	r0, [r7, #12]
 800125a:	60b9      	str	r1, [r7, #8]
 800125c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800125e:	2300      	movs	r3, #0
 8001260:	617b      	str	r3, [r7, #20]
 8001262:	e009      	b.n	8001278 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	1c5a      	adds	r2, r3, #1
 8001268:	60ba      	str	r2, [r7, #8]
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	4618      	mov	r0, r3
 800126e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	3301      	adds	r3, #1
 8001276:	617b      	str	r3, [r7, #20]
 8001278:	697a      	ldr	r2, [r7, #20]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	429a      	cmp	r2, r3
 800127e:	dbf1      	blt.n	8001264 <_write+0x12>
  }
  return len;
 8001280:	687b      	ldr	r3, [r7, #4]
}
 8001282:	4618      	mov	r0, r3
 8001284:	3718      	adds	r7, #24
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <_close>:

int _close(int file)
{
 800128a:	b480      	push	{r7}
 800128c:	b083      	sub	sp, #12
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001292:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001296:	4618      	mov	r0, r3
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr

080012a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012a2:	b480      	push	{r7}
 80012a4:	b083      	sub	sp, #12
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
 80012aa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012b2:	605a      	str	r2, [r3, #4]
  return 0;
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr

080012c2 <_isatty>:

int _isatty(int file)
{
 80012c2:	b480      	push	{r7}
 80012c4:	b083      	sub	sp, #12
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012ca:	2301      	movs	r3, #1
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3714      	adds	r7, #20
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
	...

080012f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012fc:	4a14      	ldr	r2, [pc, #80]	; (8001350 <_sbrk+0x5c>)
 80012fe:	4b15      	ldr	r3, [pc, #84]	; (8001354 <_sbrk+0x60>)
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001308:	4b13      	ldr	r3, [pc, #76]	; (8001358 <_sbrk+0x64>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d102      	bne.n	8001316 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001310:	4b11      	ldr	r3, [pc, #68]	; (8001358 <_sbrk+0x64>)
 8001312:	4a12      	ldr	r2, [pc, #72]	; (800135c <_sbrk+0x68>)
 8001314:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001316:	4b10      	ldr	r3, [pc, #64]	; (8001358 <_sbrk+0x64>)
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4413      	add	r3, r2
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	429a      	cmp	r2, r3
 8001322:	d207      	bcs.n	8001334 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001324:	f007 fe50 	bl	8008fc8 <__errno>
 8001328:	4603      	mov	r3, r0
 800132a:	220c      	movs	r2, #12
 800132c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800132e:	f04f 33ff 	mov.w	r3, #4294967295
 8001332:	e009      	b.n	8001348 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001334:	4b08      	ldr	r3, [pc, #32]	; (8001358 <_sbrk+0x64>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800133a:	4b07      	ldr	r3, [pc, #28]	; (8001358 <_sbrk+0x64>)
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4413      	add	r3, r2
 8001342:	4a05      	ldr	r2, [pc, #20]	; (8001358 <_sbrk+0x64>)
 8001344:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001346:	68fb      	ldr	r3, [r7, #12]
}
 8001348:	4618      	mov	r0, r3
 800134a:	3718      	adds	r7, #24
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	20020000 	.word	0x20020000
 8001354:	00000400 	.word	0x00000400
 8001358:	20000308 	.word	0x20000308
 800135c:	20001f78 	.word	0x20001f78

08001360 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001364:	4b06      	ldr	r3, [pc, #24]	; (8001380 <SystemInit+0x20>)
 8001366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800136a:	4a05      	ldr	r2, [pc, #20]	; (8001380 <SystemInit+0x20>)
 800136c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001370:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001374:	bf00      	nop
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	e000ed00 	.word	0xe000ed00

08001384 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b092      	sub	sp, #72	; 0x48
 8001388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800138a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800138e:	2200      	movs	r2, #0
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001394:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	60da      	str	r2, [r3, #12]
 80013a2:	611a      	str	r2, [r3, #16]
 80013a4:	615a      	str	r2, [r3, #20]
 80013a6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013a8:	1d3b      	adds	r3, r7, #4
 80013aa:	2220      	movs	r2, #32
 80013ac:	2100      	movs	r1, #0
 80013ae:	4618      	mov	r0, r3
 80013b0:	f007 fe34 	bl	800901c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013b4:	4b33      	ldr	r3, [pc, #204]	; (8001484 <MX_TIM1_Init+0x100>)
 80013b6:	4a34      	ldr	r2, [pc, #208]	; (8001488 <MX_TIM1_Init+0x104>)
 80013b8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80013ba:	4b32      	ldr	r3, [pc, #200]	; (8001484 <MX_TIM1_Init+0x100>)
 80013bc:	2200      	movs	r2, #0
 80013be:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013c0:	4b30      	ldr	r3, [pc, #192]	; (8001484 <MX_TIM1_Init+0x100>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80013c6:	4b2f      	ldr	r3, [pc, #188]	; (8001484 <MX_TIM1_Init+0x100>)
 80013c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013cc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ce:	4b2d      	ldr	r3, [pc, #180]	; (8001484 <MX_TIM1_Init+0x100>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013d4:	4b2b      	ldr	r3, [pc, #172]	; (8001484 <MX_TIM1_Init+0x100>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013da:	4b2a      	ldr	r3, [pc, #168]	; (8001484 <MX_TIM1_Init+0x100>)
 80013dc:	2200      	movs	r2, #0
 80013de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80013e0:	4828      	ldr	r0, [pc, #160]	; (8001484 <MX_TIM1_Init+0x100>)
 80013e2:	f002 ffe1 	bl	80043a8 <HAL_TIM_PWM_Init>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80013ec:	f7ff fe90 	bl	8001110 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013f0:	2300      	movs	r3, #0
 80013f2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013f4:	2300      	movs	r3, #0
 80013f6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013f8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013fc:	4619      	mov	r1, r3
 80013fe:	4821      	ldr	r0, [pc, #132]	; (8001484 <MX_TIM1_Init+0x100>)
 8001400:	f003 fb34 	bl	8004a6c <HAL_TIMEx_MasterConfigSynchronization>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800140a:	f7ff fe81 	bl	8001110 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800140e:	2360      	movs	r3, #96	; 0x60
 8001410:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001412:	2300      	movs	r3, #0
 8001414:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001416:	2300      	movs	r3, #0
 8001418:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800141a:	2300      	movs	r3, #0
 800141c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800141e:	2300      	movs	r3, #0
 8001420:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001422:	2300      	movs	r3, #0
 8001424:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001426:	2300      	movs	r3, #0
 8001428:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800142a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800142e:	2200      	movs	r2, #0
 8001430:	4619      	mov	r1, r3
 8001432:	4814      	ldr	r0, [pc, #80]	; (8001484 <MX_TIM1_Init+0x100>)
 8001434:	f003 f808 	bl	8004448 <HAL_TIM_PWM_ConfigChannel>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800143e:	f7ff fe67 	bl	8001110 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001442:	2300      	movs	r3, #0
 8001444:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001446:	2300      	movs	r3, #0
 8001448:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800144a:	2300      	movs	r3, #0
 800144c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800144e:	2300      	movs	r3, #0
 8001450:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001452:	2300      	movs	r3, #0
 8001454:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001456:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800145a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800145c:	2300      	movs	r3, #0
 800145e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001460:	1d3b      	adds	r3, r7, #4
 8001462:	4619      	mov	r1, r3
 8001464:	4807      	ldr	r0, [pc, #28]	; (8001484 <MX_TIM1_Init+0x100>)
 8001466:	f003 fb7d 	bl	8004b64 <HAL_TIMEx_ConfigBreakDeadTime>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8001470:	f7ff fe4e 	bl	8001110 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001474:	4803      	ldr	r0, [pc, #12]	; (8001484 <MX_TIM1_Init+0x100>)
 8001476:	f000 f82b 	bl	80014d0 <HAL_TIM_MspPostInit>

}
 800147a:	bf00      	nop
 800147c:	3748      	adds	r7, #72	; 0x48
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	2000030c 	.word	0x2000030c
 8001488:	40010000 	.word	0x40010000

0800148c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800148c:	b480      	push	{r7}
 800148e:	b085      	sub	sp, #20
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a0b      	ldr	r2, [pc, #44]	; (80014c8 <HAL_TIM_PWM_MspInit+0x3c>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d10d      	bne.n	80014ba <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	60fb      	str	r3, [r7, #12]
 80014a2:	4b0a      	ldr	r3, [pc, #40]	; (80014cc <HAL_TIM_PWM_MspInit+0x40>)
 80014a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a6:	4a09      	ldr	r2, [pc, #36]	; (80014cc <HAL_TIM_PWM_MspInit+0x40>)
 80014a8:	f043 0301 	orr.w	r3, r3, #1
 80014ac:	6453      	str	r3, [r2, #68]	; 0x44
 80014ae:	4b07      	ldr	r3, [pc, #28]	; (80014cc <HAL_TIM_PWM_MspInit+0x40>)
 80014b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80014ba:	bf00      	nop
 80014bc:	3714      	adds	r7, #20
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	40010000 	.word	0x40010000
 80014cc:	40023800 	.word	0x40023800

080014d0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b088      	sub	sp, #32
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d8:	f107 030c 	add.w	r3, r7, #12
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	60da      	str	r2, [r3, #12]
 80014e6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a12      	ldr	r2, [pc, #72]	; (8001538 <HAL_TIM_MspPostInit+0x68>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d11e      	bne.n	8001530 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	60bb      	str	r3, [r7, #8]
 80014f6:	4b11      	ldr	r3, [pc, #68]	; (800153c <HAL_TIM_MspPostInit+0x6c>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	4a10      	ldr	r2, [pc, #64]	; (800153c <HAL_TIM_MspPostInit+0x6c>)
 80014fc:	f043 0301 	orr.w	r3, r3, #1
 8001500:	6313      	str	r3, [r2, #48]	; 0x30
 8001502:	4b0e      	ldr	r3, [pc, #56]	; (800153c <HAL_TIM_MspPostInit+0x6c>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	60bb      	str	r3, [r7, #8]
 800150c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800150e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001512:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001514:	2302      	movs	r3, #2
 8001516:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151c:	2300      	movs	r3, #0
 800151e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001520:	2301      	movs	r3, #1
 8001522:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001524:	f107 030c 	add.w	r3, r7, #12
 8001528:	4619      	mov	r1, r3
 800152a:	4805      	ldr	r0, [pc, #20]	; (8001540 <HAL_TIM_MspPostInit+0x70>)
 800152c:	f000 f9dc 	bl	80018e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001530:	bf00      	nop
 8001532:	3720      	adds	r7, #32
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40010000 	.word	0x40010000
 800153c:	40023800 	.word	0x40023800
 8001540:	40020000 	.word	0x40020000

08001544 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 8001544:	f8df d034 	ldr.w	sp, [pc, #52]	; 800157c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001548:	480d      	ldr	r0, [pc, #52]	; (8001580 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800154a:	490e      	ldr	r1, [pc, #56]	; (8001584 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800154c:	4a0e      	ldr	r2, [pc, #56]	; (8001588 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800154e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001550:	e002      	b.n	8001558 <LoopCopyDataInit>

08001552 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001552:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001554:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001556:	3304      	adds	r3, #4

08001558 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001558:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800155a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800155c:	d3f9      	bcc.n	8001552 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800155e:	4a0b      	ldr	r2, [pc, #44]	; (800158c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001560:	4c0b      	ldr	r4, [pc, #44]	; (8001590 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001562:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001564:	e001      	b.n	800156a <LoopFillZerobss>

08001566 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001566:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001568:	3204      	adds	r2, #4

0800156a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800156a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800156c:	d3fb      	bcc.n	8001566 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800156e:	f7ff fef7 	bl	8001360 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001572:	f007 fd2f 	bl	8008fd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001576:	f7ff fd13 	bl	8000fa0 <main>
  bx  lr    
 800157a:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 800157c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001580:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001584:	200002e4 	.word	0x200002e4
  ldr r2, =_sidata
 8001588:	0800c25c 	.word	0x0800c25c
  ldr r2, =_sbss
 800158c:	200002e4 	.word	0x200002e4
  ldr r4, =_ebss
 8001590:	20001f74 	.word	0x20001f74

08001594 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001594:	e7fe      	b.n	8001594 <ADC_IRQHandler>
	...

08001598 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800159c:	4b0e      	ldr	r3, [pc, #56]	; (80015d8 <HAL_Init+0x40>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a0d      	ldr	r2, [pc, #52]	; (80015d8 <HAL_Init+0x40>)
 80015a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015a8:	4b0b      	ldr	r3, [pc, #44]	; (80015d8 <HAL_Init+0x40>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a0a      	ldr	r2, [pc, #40]	; (80015d8 <HAL_Init+0x40>)
 80015ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015b4:	4b08      	ldr	r3, [pc, #32]	; (80015d8 <HAL_Init+0x40>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a07      	ldr	r2, [pc, #28]	; (80015d8 <HAL_Init+0x40>)
 80015ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015c0:	2003      	movs	r0, #3
 80015c2:	f000 f94f 	bl	8001864 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015c6:	200f      	movs	r0, #15
 80015c8:	f000 f808 	bl	80015dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015cc:	f7ff fda6 	bl	800111c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40023c00 	.word	0x40023c00

080015dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015e4:	4b12      	ldr	r3, [pc, #72]	; (8001630 <HAL_InitTick+0x54>)
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	4b12      	ldr	r3, [pc, #72]	; (8001634 <HAL_InitTick+0x58>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	4619      	mov	r1, r3
 80015ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015fa:	4618      	mov	r0, r3
 80015fc:	f000 f967 	bl	80018ce <HAL_SYSTICK_Config>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e00e      	b.n	8001628 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2b0f      	cmp	r3, #15
 800160e:	d80a      	bhi.n	8001626 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001610:	2200      	movs	r2, #0
 8001612:	6879      	ldr	r1, [r7, #4]
 8001614:	f04f 30ff 	mov.w	r0, #4294967295
 8001618:	f000 f92f 	bl	800187a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800161c:	4a06      	ldr	r2, [pc, #24]	; (8001638 <HAL_InitTick+0x5c>)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001622:	2300      	movs	r3, #0
 8001624:	e000      	b.n	8001628 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
}
 8001628:	4618      	mov	r0, r3
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	20000004 	.word	0x20000004
 8001634:	2000000c 	.word	0x2000000c
 8001638:	20000008 	.word	0x20000008

0800163c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001640:	4b06      	ldr	r3, [pc, #24]	; (800165c <HAL_IncTick+0x20>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	461a      	mov	r2, r3
 8001646:	4b06      	ldr	r3, [pc, #24]	; (8001660 <HAL_IncTick+0x24>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4413      	add	r3, r2
 800164c:	4a04      	ldr	r2, [pc, #16]	; (8001660 <HAL_IncTick+0x24>)
 800164e:	6013      	str	r3, [r2, #0]
}
 8001650:	bf00      	nop
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	2000000c 	.word	0x2000000c
 8001660:	20000354 	.word	0x20000354

08001664 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  return uwTick;
 8001668:	4b03      	ldr	r3, [pc, #12]	; (8001678 <HAL_GetTick+0x14>)
 800166a:	681b      	ldr	r3, [r3, #0]
}
 800166c:	4618      	mov	r0, r3
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	20000354 	.word	0x20000354

0800167c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001684:	f7ff ffee 	bl	8001664 <HAL_GetTick>
 8001688:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001694:	d005      	beq.n	80016a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001696:	4b0a      	ldr	r3, [pc, #40]	; (80016c0 <HAL_Delay+0x44>)
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	461a      	mov	r2, r3
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	4413      	add	r3, r2
 80016a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016a2:	bf00      	nop
 80016a4:	f7ff ffde 	bl	8001664 <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	68fa      	ldr	r2, [r7, #12]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d8f7      	bhi.n	80016a4 <HAL_Delay+0x28>
  {
  }
}
 80016b4:	bf00      	nop
 80016b6:	bf00      	nop
 80016b8:	3710      	adds	r7, #16
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	2000000c 	.word	0x2000000c

080016c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f003 0307 	and.w	r3, r3, #7
 80016d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016d4:	4b0c      	ldr	r3, [pc, #48]	; (8001708 <__NVIC_SetPriorityGrouping+0x44>)
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016da:	68ba      	ldr	r2, [r7, #8]
 80016dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016e0:	4013      	ands	r3, r2
 80016e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016f6:	4a04      	ldr	r2, [pc, #16]	; (8001708 <__NVIC_SetPriorityGrouping+0x44>)
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	60d3      	str	r3, [r2, #12]
}
 80016fc:	bf00      	nop
 80016fe:	3714      	adds	r7, #20
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	e000ed00 	.word	0xe000ed00

0800170c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001710:	4b04      	ldr	r3, [pc, #16]	; (8001724 <__NVIC_GetPriorityGrouping+0x18>)
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	0a1b      	lsrs	r3, r3, #8
 8001716:	f003 0307 	and.w	r3, r3, #7
}
 800171a:	4618      	mov	r0, r3
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	e000ed00 	.word	0xe000ed00

08001728 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001736:	2b00      	cmp	r3, #0
 8001738:	db0b      	blt.n	8001752 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800173a:	79fb      	ldrb	r3, [r7, #7]
 800173c:	f003 021f 	and.w	r2, r3, #31
 8001740:	4907      	ldr	r1, [pc, #28]	; (8001760 <__NVIC_EnableIRQ+0x38>)
 8001742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001746:	095b      	lsrs	r3, r3, #5
 8001748:	2001      	movs	r0, #1
 800174a:	fa00 f202 	lsl.w	r2, r0, r2
 800174e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001752:	bf00      	nop
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	e000e100 	.word	0xe000e100

08001764 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	6039      	str	r1, [r7, #0]
 800176e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001770:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001774:	2b00      	cmp	r3, #0
 8001776:	db0a      	blt.n	800178e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	b2da      	uxtb	r2, r3
 800177c:	490c      	ldr	r1, [pc, #48]	; (80017b0 <__NVIC_SetPriority+0x4c>)
 800177e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001782:	0112      	lsls	r2, r2, #4
 8001784:	b2d2      	uxtb	r2, r2
 8001786:	440b      	add	r3, r1
 8001788:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800178c:	e00a      	b.n	80017a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	b2da      	uxtb	r2, r3
 8001792:	4908      	ldr	r1, [pc, #32]	; (80017b4 <__NVIC_SetPriority+0x50>)
 8001794:	79fb      	ldrb	r3, [r7, #7]
 8001796:	f003 030f 	and.w	r3, r3, #15
 800179a:	3b04      	subs	r3, #4
 800179c:	0112      	lsls	r2, r2, #4
 800179e:	b2d2      	uxtb	r2, r2
 80017a0:	440b      	add	r3, r1
 80017a2:	761a      	strb	r2, [r3, #24]
}
 80017a4:	bf00      	nop
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	e000e100 	.word	0xe000e100
 80017b4:	e000ed00 	.word	0xe000ed00

080017b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b089      	sub	sp, #36	; 0x24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	60b9      	str	r1, [r7, #8]
 80017c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	f003 0307 	and.w	r3, r3, #7
 80017ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	f1c3 0307 	rsb	r3, r3, #7
 80017d2:	2b04      	cmp	r3, #4
 80017d4:	bf28      	it	cs
 80017d6:	2304      	movcs	r3, #4
 80017d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	3304      	adds	r3, #4
 80017de:	2b06      	cmp	r3, #6
 80017e0:	d902      	bls.n	80017e8 <NVIC_EncodePriority+0x30>
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	3b03      	subs	r3, #3
 80017e6:	e000      	b.n	80017ea <NVIC_EncodePriority+0x32>
 80017e8:	2300      	movs	r3, #0
 80017ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ec:	f04f 32ff 	mov.w	r2, #4294967295
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	43da      	mvns	r2, r3
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	401a      	ands	r2, r3
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001800:	f04f 31ff 	mov.w	r1, #4294967295
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	fa01 f303 	lsl.w	r3, r1, r3
 800180a:	43d9      	mvns	r1, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001810:	4313      	orrs	r3, r2
         );
}
 8001812:	4618      	mov	r0, r3
 8001814:	3724      	adds	r7, #36	; 0x24
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
	...

08001820 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	3b01      	subs	r3, #1
 800182c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001830:	d301      	bcc.n	8001836 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001832:	2301      	movs	r3, #1
 8001834:	e00f      	b.n	8001856 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001836:	4a0a      	ldr	r2, [pc, #40]	; (8001860 <SysTick_Config+0x40>)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	3b01      	subs	r3, #1
 800183c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800183e:	210f      	movs	r1, #15
 8001840:	f04f 30ff 	mov.w	r0, #4294967295
 8001844:	f7ff ff8e 	bl	8001764 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001848:	4b05      	ldr	r3, [pc, #20]	; (8001860 <SysTick_Config+0x40>)
 800184a:	2200      	movs	r2, #0
 800184c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800184e:	4b04      	ldr	r3, [pc, #16]	; (8001860 <SysTick_Config+0x40>)
 8001850:	2207      	movs	r2, #7
 8001852:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	e000e010 	.word	0xe000e010

08001864 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f7ff ff29 	bl	80016c4 <__NVIC_SetPriorityGrouping>
}
 8001872:	bf00      	nop
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800187a:	b580      	push	{r7, lr}
 800187c:	b086      	sub	sp, #24
 800187e:	af00      	add	r7, sp, #0
 8001880:	4603      	mov	r3, r0
 8001882:	60b9      	str	r1, [r7, #8]
 8001884:	607a      	str	r2, [r7, #4]
 8001886:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001888:	2300      	movs	r3, #0
 800188a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800188c:	f7ff ff3e 	bl	800170c <__NVIC_GetPriorityGrouping>
 8001890:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	68b9      	ldr	r1, [r7, #8]
 8001896:	6978      	ldr	r0, [r7, #20]
 8001898:	f7ff ff8e 	bl	80017b8 <NVIC_EncodePriority>
 800189c:	4602      	mov	r2, r0
 800189e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018a2:	4611      	mov	r1, r2
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff ff5d 	bl	8001764 <__NVIC_SetPriority>
}
 80018aa:	bf00      	nop
 80018ac:	3718      	adds	r7, #24
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b082      	sub	sp, #8
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	4603      	mov	r3, r0
 80018ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff ff31 	bl	8001728 <__NVIC_EnableIRQ>
}
 80018c6:	bf00      	nop
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b082      	sub	sp, #8
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f7ff ffa2 	bl	8001820 <SysTick_Config>
 80018dc:	4603      	mov	r3, r0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
	...

080018e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b089      	sub	sp, #36	; 0x24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018f2:	2300      	movs	r3, #0
 80018f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018f6:	2300      	movs	r3, #0
 80018f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018fa:	2300      	movs	r3, #0
 80018fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018fe:	2300      	movs	r3, #0
 8001900:	61fb      	str	r3, [r7, #28]
 8001902:	e165      	b.n	8001bd0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001904:	2201      	movs	r2, #1
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	697a      	ldr	r2, [r7, #20]
 8001914:	4013      	ands	r3, r2
 8001916:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	429a      	cmp	r2, r3
 800191e:	f040 8154 	bne.w	8001bca <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f003 0303 	and.w	r3, r3, #3
 800192a:	2b01      	cmp	r3, #1
 800192c:	d005      	beq.n	800193a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001936:	2b02      	cmp	r3, #2
 8001938:	d130      	bne.n	800199c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	2203      	movs	r2, #3
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	43db      	mvns	r3, r3
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	4013      	ands	r3, r2
 8001950:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	68da      	ldr	r2, [r3, #12]
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	4313      	orrs	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001970:	2201      	movs	r2, #1
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	43db      	mvns	r3, r3
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	4013      	ands	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	091b      	lsrs	r3, r3, #4
 8001986:	f003 0201 	and.w	r2, r3, #1
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	4313      	orrs	r3, r2
 8001994:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f003 0303 	and.w	r3, r3, #3
 80019a4:	2b03      	cmp	r3, #3
 80019a6:	d017      	beq.n	80019d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	2203      	movs	r2, #3
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	43db      	mvns	r3, r3
 80019ba:	69ba      	ldr	r2, [r7, #24]
 80019bc:	4013      	ands	r3, r2
 80019be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	689a      	ldr	r2, [r3, #8]
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	fa02 f303 	lsl.w	r3, r2, r3
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f003 0303 	and.w	r3, r3, #3
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d123      	bne.n	8001a2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	08da      	lsrs	r2, r3, #3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	3208      	adds	r2, #8
 80019ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	f003 0307 	and.w	r3, r3, #7
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	220f      	movs	r2, #15
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	43db      	mvns	r3, r3
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	4013      	ands	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	691a      	ldr	r2, [r3, #16]
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	f003 0307 	and.w	r3, r3, #7
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	08da      	lsrs	r2, r3, #3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	3208      	adds	r2, #8
 8001a26:	69b9      	ldr	r1, [r7, #24]
 8001a28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	2203      	movs	r2, #3
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	4013      	ands	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f003 0203 	and.w	r2, r3, #3
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	f000 80ae 	beq.w	8001bca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60fb      	str	r3, [r7, #12]
 8001a72:	4b5d      	ldr	r3, [pc, #372]	; (8001be8 <HAL_GPIO_Init+0x300>)
 8001a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a76:	4a5c      	ldr	r2, [pc, #368]	; (8001be8 <HAL_GPIO_Init+0x300>)
 8001a78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a7e:	4b5a      	ldr	r3, [pc, #360]	; (8001be8 <HAL_GPIO_Init+0x300>)
 8001a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a8a:	4a58      	ldr	r2, [pc, #352]	; (8001bec <HAL_GPIO_Init+0x304>)
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	089b      	lsrs	r3, r3, #2
 8001a90:	3302      	adds	r3, #2
 8001a92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	f003 0303 	and.w	r3, r3, #3
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	220f      	movs	r2, #15
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	43db      	mvns	r3, r3
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a4f      	ldr	r2, [pc, #316]	; (8001bf0 <HAL_GPIO_Init+0x308>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d025      	beq.n	8001b02 <HAL_GPIO_Init+0x21a>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a4e      	ldr	r2, [pc, #312]	; (8001bf4 <HAL_GPIO_Init+0x30c>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d01f      	beq.n	8001afe <HAL_GPIO_Init+0x216>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a4d      	ldr	r2, [pc, #308]	; (8001bf8 <HAL_GPIO_Init+0x310>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d019      	beq.n	8001afa <HAL_GPIO_Init+0x212>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a4c      	ldr	r2, [pc, #304]	; (8001bfc <HAL_GPIO_Init+0x314>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d013      	beq.n	8001af6 <HAL_GPIO_Init+0x20e>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a4b      	ldr	r2, [pc, #300]	; (8001c00 <HAL_GPIO_Init+0x318>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d00d      	beq.n	8001af2 <HAL_GPIO_Init+0x20a>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a4a      	ldr	r2, [pc, #296]	; (8001c04 <HAL_GPIO_Init+0x31c>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d007      	beq.n	8001aee <HAL_GPIO_Init+0x206>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a49      	ldr	r2, [pc, #292]	; (8001c08 <HAL_GPIO_Init+0x320>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d101      	bne.n	8001aea <HAL_GPIO_Init+0x202>
 8001ae6:	2306      	movs	r3, #6
 8001ae8:	e00c      	b.n	8001b04 <HAL_GPIO_Init+0x21c>
 8001aea:	2307      	movs	r3, #7
 8001aec:	e00a      	b.n	8001b04 <HAL_GPIO_Init+0x21c>
 8001aee:	2305      	movs	r3, #5
 8001af0:	e008      	b.n	8001b04 <HAL_GPIO_Init+0x21c>
 8001af2:	2304      	movs	r3, #4
 8001af4:	e006      	b.n	8001b04 <HAL_GPIO_Init+0x21c>
 8001af6:	2303      	movs	r3, #3
 8001af8:	e004      	b.n	8001b04 <HAL_GPIO_Init+0x21c>
 8001afa:	2302      	movs	r3, #2
 8001afc:	e002      	b.n	8001b04 <HAL_GPIO_Init+0x21c>
 8001afe:	2301      	movs	r3, #1
 8001b00:	e000      	b.n	8001b04 <HAL_GPIO_Init+0x21c>
 8001b02:	2300      	movs	r3, #0
 8001b04:	69fa      	ldr	r2, [r7, #28]
 8001b06:	f002 0203 	and.w	r2, r2, #3
 8001b0a:	0092      	lsls	r2, r2, #2
 8001b0c:	4093      	lsls	r3, r2
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b14:	4935      	ldr	r1, [pc, #212]	; (8001bec <HAL_GPIO_Init+0x304>)
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	089b      	lsrs	r3, r3, #2
 8001b1a:	3302      	adds	r3, #2
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b22:	4b3a      	ldr	r3, [pc, #232]	; (8001c0c <HAL_GPIO_Init+0x324>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	43db      	mvns	r3, r3
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d003      	beq.n	8001b46 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b46:	4a31      	ldr	r2, [pc, #196]	; (8001c0c <HAL_GPIO_Init+0x324>)
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b4c:	4b2f      	ldr	r3, [pc, #188]	; (8001c0c <HAL_GPIO_Init+0x324>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	43db      	mvns	r3, r3
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d003      	beq.n	8001b70 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b70:	4a26      	ldr	r2, [pc, #152]	; (8001c0c <HAL_GPIO_Init+0x324>)
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b76:	4b25      	ldr	r3, [pc, #148]	; (8001c0c <HAL_GPIO_Init+0x324>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	43db      	mvns	r3, r3
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	4013      	ands	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d003      	beq.n	8001b9a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b9a:	4a1c      	ldr	r2, [pc, #112]	; (8001c0c <HAL_GPIO_Init+0x324>)
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ba0:	4b1a      	ldr	r3, [pc, #104]	; (8001c0c <HAL_GPIO_Init+0x324>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	4013      	ands	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d003      	beq.n	8001bc4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bc4:	4a11      	ldr	r2, [pc, #68]	; (8001c0c <HAL_GPIO_Init+0x324>)
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	3301      	adds	r3, #1
 8001bce:	61fb      	str	r3, [r7, #28]
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	2b0f      	cmp	r3, #15
 8001bd4:	f67f ae96 	bls.w	8001904 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bd8:	bf00      	nop
 8001bda:	bf00      	nop
 8001bdc:	3724      	adds	r7, #36	; 0x24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	40023800 	.word	0x40023800
 8001bec:	40013800 	.word	0x40013800
 8001bf0:	40020000 	.word	0x40020000
 8001bf4:	40020400 	.word	0x40020400
 8001bf8:	40020800 	.word	0x40020800
 8001bfc:	40020c00 	.word	0x40020c00
 8001c00:	40021000 	.word	0x40021000
 8001c04:	40021400 	.word	0x40021400
 8001c08:	40021800 	.word	0x40021800
 8001c0c:	40013c00 	.word	0x40013c00

08001c10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	460b      	mov	r3, r1
 8001c1a:	807b      	strh	r3, [r7, #2]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c20:	787b      	ldrb	r3, [r7, #1]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d003      	beq.n	8001c2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c26:	887a      	ldrh	r2, [r7, #2]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c2c:	e003      	b.n	8001c36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c2e:	887b      	ldrh	r3, [r7, #2]
 8001c30:	041a      	lsls	r2, r3, #16
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	619a      	str	r2, [r3, #24]
}
 8001c36:	bf00      	nop
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c42:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c44:	b08f      	sub	sp, #60	; 0x3c
 8001c46:	af0a      	add	r7, sp, #40	; 0x28
 8001c48:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d101      	bne.n	8001c54 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e116      	b.n	8001e82 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d106      	bne.n	8001c74 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f006 fe2e 	bl	80088d0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2203      	movs	r2, #3
 8001c78:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d102      	bne.n	8001c8e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f003 f8cd 	bl	8004e32 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	603b      	str	r3, [r7, #0]
 8001c9e:	687e      	ldr	r6, [r7, #4]
 8001ca0:	466d      	mov	r5, sp
 8001ca2:	f106 0410 	add.w	r4, r6, #16
 8001ca6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ca8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001caa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cae:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001cb2:	e885 0003 	stmia.w	r5, {r0, r1}
 8001cb6:	1d33      	adds	r3, r6, #4
 8001cb8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cba:	6838      	ldr	r0, [r7, #0]
 8001cbc:	f002 ffa4 	bl	8004c08 <USB_CoreInit>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d005      	beq.n	8001cd2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2202      	movs	r2, #2
 8001cca:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e0d7      	b.n	8001e82 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f003 f8bb 	bl	8004e54 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cde:	2300      	movs	r3, #0
 8001ce0:	73fb      	strb	r3, [r7, #15]
 8001ce2:	e04a      	b.n	8001d7a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001ce4:	7bfa      	ldrb	r2, [r7, #15]
 8001ce6:	6879      	ldr	r1, [r7, #4]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	00db      	lsls	r3, r3, #3
 8001cec:	4413      	add	r3, r2
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	440b      	add	r3, r1
 8001cf2:	333d      	adds	r3, #61	; 0x3d
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001cf8:	7bfa      	ldrb	r2, [r7, #15]
 8001cfa:	6879      	ldr	r1, [r7, #4]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	00db      	lsls	r3, r3, #3
 8001d00:	4413      	add	r3, r2
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	440b      	add	r3, r1
 8001d06:	333c      	adds	r3, #60	; 0x3c
 8001d08:	7bfa      	ldrb	r2, [r7, #15]
 8001d0a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d0c:	7bfa      	ldrb	r2, [r7, #15]
 8001d0e:	7bfb      	ldrb	r3, [r7, #15]
 8001d10:	b298      	uxth	r0, r3
 8001d12:	6879      	ldr	r1, [r7, #4]
 8001d14:	4613      	mov	r3, r2
 8001d16:	00db      	lsls	r3, r3, #3
 8001d18:	4413      	add	r3, r2
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	440b      	add	r3, r1
 8001d1e:	3344      	adds	r3, #68	; 0x44
 8001d20:	4602      	mov	r2, r0
 8001d22:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d24:	7bfa      	ldrb	r2, [r7, #15]
 8001d26:	6879      	ldr	r1, [r7, #4]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	00db      	lsls	r3, r3, #3
 8001d2c:	4413      	add	r3, r2
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	440b      	add	r3, r1
 8001d32:	3340      	adds	r3, #64	; 0x40
 8001d34:	2200      	movs	r2, #0
 8001d36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d38:	7bfa      	ldrb	r2, [r7, #15]
 8001d3a:	6879      	ldr	r1, [r7, #4]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	00db      	lsls	r3, r3, #3
 8001d40:	4413      	add	r3, r2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	440b      	add	r3, r1
 8001d46:	3348      	adds	r3, #72	; 0x48
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d4c:	7bfa      	ldrb	r2, [r7, #15]
 8001d4e:	6879      	ldr	r1, [r7, #4]
 8001d50:	4613      	mov	r3, r2
 8001d52:	00db      	lsls	r3, r3, #3
 8001d54:	4413      	add	r3, r2
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	440b      	add	r3, r1
 8001d5a:	334c      	adds	r3, #76	; 0x4c
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d60:	7bfa      	ldrb	r2, [r7, #15]
 8001d62:	6879      	ldr	r1, [r7, #4]
 8001d64:	4613      	mov	r3, r2
 8001d66:	00db      	lsls	r3, r3, #3
 8001d68:	4413      	add	r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	440b      	add	r3, r1
 8001d6e:	3354      	adds	r3, #84	; 0x54
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d74:	7bfb      	ldrb	r3, [r7, #15]
 8001d76:	3301      	adds	r3, #1
 8001d78:	73fb      	strb	r3, [r7, #15]
 8001d7a:	7bfa      	ldrb	r2, [r7, #15]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d3af      	bcc.n	8001ce4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d84:	2300      	movs	r3, #0
 8001d86:	73fb      	strb	r3, [r7, #15]
 8001d88:	e044      	b.n	8001e14 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d8a:	7bfa      	ldrb	r2, [r7, #15]
 8001d8c:	6879      	ldr	r1, [r7, #4]
 8001d8e:	4613      	mov	r3, r2
 8001d90:	00db      	lsls	r3, r3, #3
 8001d92:	4413      	add	r3, r2
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	440b      	add	r3, r1
 8001d98:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001da0:	7bfa      	ldrb	r2, [r7, #15]
 8001da2:	6879      	ldr	r1, [r7, #4]
 8001da4:	4613      	mov	r3, r2
 8001da6:	00db      	lsls	r3, r3, #3
 8001da8:	4413      	add	r3, r2
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	440b      	add	r3, r1
 8001dae:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001db2:	7bfa      	ldrb	r2, [r7, #15]
 8001db4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001db6:	7bfa      	ldrb	r2, [r7, #15]
 8001db8:	6879      	ldr	r1, [r7, #4]
 8001dba:	4613      	mov	r3, r2
 8001dbc:	00db      	lsls	r3, r3, #3
 8001dbe:	4413      	add	r3, r2
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	440b      	add	r3, r1
 8001dc4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001dc8:	2200      	movs	r2, #0
 8001dca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001dcc:	7bfa      	ldrb	r2, [r7, #15]
 8001dce:	6879      	ldr	r1, [r7, #4]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	00db      	lsls	r3, r3, #3
 8001dd4:	4413      	add	r3, r2
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	440b      	add	r3, r1
 8001dda:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001dde:	2200      	movs	r2, #0
 8001de0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001de2:	7bfa      	ldrb	r2, [r7, #15]
 8001de4:	6879      	ldr	r1, [r7, #4]
 8001de6:	4613      	mov	r3, r2
 8001de8:	00db      	lsls	r3, r3, #3
 8001dea:	4413      	add	r3, r2
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	440b      	add	r3, r1
 8001df0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001df8:	7bfa      	ldrb	r2, [r7, #15]
 8001dfa:	6879      	ldr	r1, [r7, #4]
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	00db      	lsls	r3, r3, #3
 8001e00:	4413      	add	r3, r2
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	440b      	add	r3, r1
 8001e06:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e0e:	7bfb      	ldrb	r3, [r7, #15]
 8001e10:	3301      	adds	r3, #1
 8001e12:	73fb      	strb	r3, [r7, #15]
 8001e14:	7bfa      	ldrb	r2, [r7, #15]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d3b5      	bcc.n	8001d8a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	603b      	str	r3, [r7, #0]
 8001e24:	687e      	ldr	r6, [r7, #4]
 8001e26:	466d      	mov	r5, sp
 8001e28:	f106 0410 	add.w	r4, r6, #16
 8001e2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e34:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e38:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e3c:	1d33      	adds	r3, r6, #4
 8001e3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e40:	6838      	ldr	r0, [r7, #0]
 8001e42:	f003 f853 	bl	8004eec <USB_DevInit>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d005      	beq.n	8001e58 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2202      	movs	r2, #2
 8001e50:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e014      	b.n	8001e82 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d102      	bne.n	8001e76 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f001 f98b 	bl	800318c <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f004 f995 	bl	80061aa <USB_DevDisconnect>

  return HAL_OK;
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3714      	adds	r7, #20
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e8a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b084      	sub	sp, #16
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d101      	bne.n	8001ea6 <HAL_PCD_Start+0x1c>
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	e020      	b.n	8001ee8 <HAL_PCD_Start+0x5e>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d109      	bne.n	8001eca <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d005      	beq.n	8001eca <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ec2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f002 ff9e 	bl	8004e10 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f004 f945 	bl	8006168 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3710      	adds	r7, #16
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001ef0:	b590      	push	{r4, r7, lr}
 8001ef2:	b08d      	sub	sp, #52	; 0x34
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001efe:	6a3b      	ldr	r3, [r7, #32]
 8001f00:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f004 fa03 	bl	8006312 <USB_GetMode>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	f040 84b7 	bne.w	8002882 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f004 f967 	bl	80061ec <USB_ReadInterrupts>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	f000 84ad 	beq.w	8002880 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	0a1b      	lsrs	r3, r3, #8
 8001f30:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f004 f954 	bl	80061ec <USB_ReadInterrupts>
 8001f44:	4603      	mov	r3, r0
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d107      	bne.n	8001f5e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	695a      	ldr	r2, [r3, #20]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f002 0202 	and.w	r2, r2, #2
 8001f5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f004 f942 	bl	80061ec <USB_ReadInterrupts>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	f003 0310 	and.w	r3, r3, #16
 8001f6e:	2b10      	cmp	r3, #16
 8001f70:	d161      	bne.n	8002036 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	699a      	ldr	r2, [r3, #24]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f022 0210 	bic.w	r2, r2, #16
 8001f80:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001f82:	6a3b      	ldr	r3, [r7, #32]
 8001f84:	6a1b      	ldr	r3, [r3, #32]
 8001f86:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	f003 020f 	and.w	r2, r3, #15
 8001f8e:	4613      	mov	r3, r2
 8001f90:	00db      	lsls	r3, r3, #3
 8001f92:	4413      	add	r3, r2
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	3304      	adds	r3, #4
 8001fa0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	0c5b      	lsrs	r3, r3, #17
 8001fa6:	f003 030f 	and.w	r3, r3, #15
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d124      	bne.n	8001ff8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d035      	beq.n	8002026 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	091b      	lsrs	r3, r3, #4
 8001fc2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001fc4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	461a      	mov	r2, r3
 8001fcc:	6a38      	ldr	r0, [r7, #32]
 8001fce:	f003 ff79 	bl	8005ec4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	691a      	ldr	r2, [r3, #16]
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	091b      	lsrs	r3, r3, #4
 8001fda:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001fde:	441a      	add	r2, r3
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	6a1a      	ldr	r2, [r3, #32]
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	091b      	lsrs	r3, r3, #4
 8001fec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ff0:	441a      	add	r2, r3
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	621a      	str	r2, [r3, #32]
 8001ff6:	e016      	b.n	8002026 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	0c5b      	lsrs	r3, r3, #17
 8001ffc:	f003 030f 	and.w	r3, r3, #15
 8002000:	2b06      	cmp	r3, #6
 8002002:	d110      	bne.n	8002026 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800200a:	2208      	movs	r2, #8
 800200c:	4619      	mov	r1, r3
 800200e:	6a38      	ldr	r0, [r7, #32]
 8002010:	f003 ff58 	bl	8005ec4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	6a1a      	ldr	r2, [r3, #32]
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	091b      	lsrs	r3, r3, #4
 800201c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002020:	441a      	add	r2, r3
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	699a      	ldr	r2, [r3, #24]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f042 0210 	orr.w	r2, r2, #16
 8002034:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4618      	mov	r0, r3
 800203c:	f004 f8d6 	bl	80061ec <USB_ReadInterrupts>
 8002040:	4603      	mov	r3, r0
 8002042:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002046:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800204a:	f040 80a7 	bne.w	800219c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800204e:	2300      	movs	r3, #0
 8002050:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4618      	mov	r0, r3
 8002058:	f004 f8db 	bl	8006212 <USB_ReadDevAllOutEpInterrupt>
 800205c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800205e:	e099      	b.n	8002194 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	2b00      	cmp	r3, #0
 8002068:	f000 808e 	beq.w	8002188 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002072:	b2d2      	uxtb	r2, r2
 8002074:	4611      	mov	r1, r2
 8002076:	4618      	mov	r0, r3
 8002078:	f004 f8ff 	bl	800627a <USB_ReadDevOutEPInterrupt>
 800207c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	f003 0301 	and.w	r3, r3, #1
 8002084:	2b00      	cmp	r3, #0
 8002086:	d00c      	beq.n	80020a2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208a:	015a      	lsls	r2, r3, #5
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	4413      	add	r3, r2
 8002090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002094:	461a      	mov	r2, r3
 8002096:	2301      	movs	r3, #1
 8002098:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800209a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f000 feef 	bl	8002e80 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	f003 0308 	and.w	r3, r3, #8
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d00c      	beq.n	80020c6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80020ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ae:	015a      	lsls	r2, r3, #5
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	4413      	add	r3, r2
 80020b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020b8:	461a      	mov	r2, r3
 80020ba:	2308      	movs	r3, #8
 80020bc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80020be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f000 ffc5 	bl	8003050 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	f003 0310 	and.w	r3, r3, #16
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d008      	beq.n	80020e2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80020d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d2:	015a      	lsls	r2, r3, #5
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	4413      	add	r3, r2
 80020d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020dc:	461a      	mov	r2, r3
 80020de:	2310      	movs	r3, #16
 80020e0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	f003 0302 	and.w	r3, r3, #2
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d030      	beq.n	800214e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80020ec:	6a3b      	ldr	r3, [r7, #32]
 80020ee:	695b      	ldr	r3, [r3, #20]
 80020f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020f4:	2b80      	cmp	r3, #128	; 0x80
 80020f6:	d109      	bne.n	800210c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	69fa      	ldr	r2, [r7, #28]
 8002102:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002106:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800210a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800210c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800210e:	4613      	mov	r3, r2
 8002110:	00db      	lsls	r3, r3, #3
 8002112:	4413      	add	r3, r2
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	4413      	add	r3, r2
 800211e:	3304      	adds	r3, #4
 8002120:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	78db      	ldrb	r3, [r3, #3]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d108      	bne.n	800213c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	2200      	movs	r2, #0
 800212e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002132:	b2db      	uxtb	r3, r3
 8002134:	4619      	mov	r1, r3
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f006 fce6 	bl	8008b08 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800213c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213e:	015a      	lsls	r2, r3, #5
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	4413      	add	r3, r2
 8002144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002148:	461a      	mov	r2, r3
 800214a:	2302      	movs	r3, #2
 800214c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	f003 0320 	and.w	r3, r3, #32
 8002154:	2b00      	cmp	r3, #0
 8002156:	d008      	beq.n	800216a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215a:	015a      	lsls	r2, r3, #5
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	4413      	add	r3, r2
 8002160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002164:	461a      	mov	r2, r3
 8002166:	2320      	movs	r3, #32
 8002168:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d009      	beq.n	8002188 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002176:	015a      	lsls	r2, r3, #5
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	4413      	add	r3, r2
 800217c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002180:	461a      	mov	r2, r3
 8002182:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002186:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218a:	3301      	adds	r3, #1
 800218c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800218e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002190:	085b      	lsrs	r3, r3, #1
 8002192:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002196:	2b00      	cmp	r3, #0
 8002198:	f47f af62 	bne.w	8002060 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f004 f823 	bl	80061ec <USB_ReadInterrupts>
 80021a6:	4603      	mov	r3, r0
 80021a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021ac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80021b0:	f040 80db 	bne.w	800236a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f004 f844 	bl	8006246 <USB_ReadDevAllInEpInterrupt>
 80021be:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80021c0:	2300      	movs	r3, #0
 80021c2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80021c4:	e0cd      	b.n	8002362 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80021c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	f000 80c2 	beq.w	8002356 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021d8:	b2d2      	uxtb	r2, r2
 80021da:	4611      	mov	r1, r2
 80021dc:	4618      	mov	r0, r3
 80021de:	f004 f86a 	bl	80062b6 <USB_ReadDevInEPInterrupt>
 80021e2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d057      	beq.n	800229e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80021ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f0:	f003 030f 	and.w	r3, r3, #15
 80021f4:	2201      	movs	r2, #1
 80021f6:	fa02 f303 	lsl.w	r3, r2, r3
 80021fa:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002202:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	43db      	mvns	r3, r3
 8002208:	69f9      	ldr	r1, [r7, #28]
 800220a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800220e:	4013      	ands	r3, r2
 8002210:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002214:	015a      	lsls	r2, r3, #5
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	4413      	add	r3, r2
 800221a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800221e:	461a      	mov	r2, r3
 8002220:	2301      	movs	r3, #1
 8002222:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	2b01      	cmp	r3, #1
 800222a:	d132      	bne.n	8002292 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800222c:	6879      	ldr	r1, [r7, #4]
 800222e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002230:	4613      	mov	r3, r2
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	4413      	add	r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	440b      	add	r3, r1
 800223a:	334c      	adds	r3, #76	; 0x4c
 800223c:	6819      	ldr	r1, [r3, #0]
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002242:	4613      	mov	r3, r2
 8002244:	00db      	lsls	r3, r3, #3
 8002246:	4413      	add	r3, r2
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	4403      	add	r3, r0
 800224c:	3348      	adds	r3, #72	; 0x48
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4419      	add	r1, r3
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002256:	4613      	mov	r3, r2
 8002258:	00db      	lsls	r3, r3, #3
 800225a:	4413      	add	r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	4403      	add	r3, r0
 8002260:	334c      	adds	r3, #76	; 0x4c
 8002262:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002266:	2b00      	cmp	r3, #0
 8002268:	d113      	bne.n	8002292 <HAL_PCD_IRQHandler+0x3a2>
 800226a:	6879      	ldr	r1, [r7, #4]
 800226c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800226e:	4613      	mov	r3, r2
 8002270:	00db      	lsls	r3, r3, #3
 8002272:	4413      	add	r3, r2
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	440b      	add	r3, r1
 8002278:	3354      	adds	r3, #84	; 0x54
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d108      	bne.n	8002292 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6818      	ldr	r0, [r3, #0]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800228a:	461a      	mov	r2, r3
 800228c:	2101      	movs	r1, #1
 800228e:	f004 f871 	bl	8006374 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002294:	b2db      	uxtb	r3, r3
 8002296:	4619      	mov	r1, r3
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f006 fbb0 	bl	80089fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	f003 0308 	and.w	r3, r3, #8
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d008      	beq.n	80022ba <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80022a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022aa:	015a      	lsls	r2, r3, #5
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	4413      	add	r3, r2
 80022b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022b4:	461a      	mov	r2, r3
 80022b6:	2308      	movs	r3, #8
 80022b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	f003 0310 	and.w	r3, r3, #16
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d008      	beq.n	80022d6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80022c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c6:	015a      	lsls	r2, r3, #5
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	4413      	add	r3, r2
 80022cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022d0:	461a      	mov	r2, r3
 80022d2:	2310      	movs	r3, #16
 80022d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d008      	beq.n	80022f2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80022e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e2:	015a      	lsls	r2, r3, #5
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	4413      	add	r3, r2
 80022e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022ec:	461a      	mov	r2, r3
 80022ee:	2340      	movs	r3, #64	; 0x40
 80022f0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	f003 0302 	and.w	r3, r3, #2
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d023      	beq.n	8002344 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80022fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022fe:	6a38      	ldr	r0, [r7, #32]
 8002300:	f002 ff52 	bl	80051a8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002304:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002306:	4613      	mov	r3, r2
 8002308:	00db      	lsls	r3, r3, #3
 800230a:	4413      	add	r3, r2
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	3338      	adds	r3, #56	; 0x38
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	4413      	add	r3, r2
 8002314:	3304      	adds	r3, #4
 8002316:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	78db      	ldrb	r3, [r3, #3]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d108      	bne.n	8002332 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	2200      	movs	r2, #0
 8002324:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002328:	b2db      	uxtb	r3, r3
 800232a:	4619      	mov	r1, r3
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f006 fbfd 	bl	8008b2c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002334:	015a      	lsls	r2, r3, #5
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	4413      	add	r3, r2
 800233a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800233e:	461a      	mov	r2, r3
 8002340:	2302      	movs	r3, #2
 8002342:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800234a:	2b00      	cmp	r3, #0
 800234c:	d003      	beq.n	8002356 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800234e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f000 fd08 	bl	8002d66 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002358:	3301      	adds	r3, #1
 800235a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800235c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800235e:	085b      	lsrs	r3, r3, #1
 8002360:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002364:	2b00      	cmp	r3, #0
 8002366:	f47f af2e 	bne.w	80021c6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4618      	mov	r0, r3
 8002370:	f003 ff3c 	bl	80061ec <USB_ReadInterrupts>
 8002374:	4603      	mov	r3, r0
 8002376:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800237a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800237e:	d122      	bne.n	80023c6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	69fa      	ldr	r2, [r7, #28]
 800238a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800238e:	f023 0301 	bic.w	r3, r3, #1
 8002392:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800239a:	2b01      	cmp	r3, #1
 800239c:	d108      	bne.n	80023b0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80023a6:	2100      	movs	r1, #0
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f006 fd77 	bl	8008e9c <HAL_PCDEx_LPM_Callback>
 80023ae:	e002      	b.n	80023b6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f006 fb9b 	bl	8008aec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	695a      	ldr	r2, [r3, #20]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80023c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f003 ff0e 	bl	80061ec <USB_ReadInterrupts>
 80023d0:	4603      	mov	r3, r0
 80023d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023da:	d112      	bne.n	8002402 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f003 0301 	and.w	r3, r3, #1
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d102      	bne.n	80023f2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f006 fb57 	bl	8008aa0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	695a      	ldr	r2, [r3, #20]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002400:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4618      	mov	r0, r3
 8002408:	f003 fef0 	bl	80061ec <USB_ReadInterrupts>
 800240c:	4603      	mov	r3, r0
 800240e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002412:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002416:	d121      	bne.n	800245c <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	695a      	ldr	r2, [r3, #20]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002426:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800242e:	2b00      	cmp	r3, #0
 8002430:	d111      	bne.n	8002456 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2201      	movs	r2, #1
 8002436:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002440:	089b      	lsrs	r3, r3, #2
 8002442:	f003 020f 	and.w	r2, r3, #15
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800244c:	2101      	movs	r1, #1
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f006 fd24 	bl	8008e9c <HAL_PCDEx_LPM_Callback>
 8002454:	e002      	b.n	800245c <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f006 fb22 	bl	8008aa0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4618      	mov	r0, r3
 8002462:	f003 fec3 	bl	80061ec <USB_ReadInterrupts>
 8002466:	4603      	mov	r3, r0
 8002468:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800246c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002470:	f040 80b7 	bne.w	80025e2 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	69fa      	ldr	r2, [r7, #28]
 800247e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002482:	f023 0301 	bic.w	r3, r3, #1
 8002486:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2110      	movs	r1, #16
 800248e:	4618      	mov	r0, r3
 8002490:	f002 fe8a 	bl	80051a8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002494:	2300      	movs	r3, #0
 8002496:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002498:	e046      	b.n	8002528 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800249a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800249c:	015a      	lsls	r2, r3, #5
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	4413      	add	r3, r2
 80024a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024a6:	461a      	mov	r2, r3
 80024a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80024ac:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80024ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024b0:	015a      	lsls	r2, r3, #5
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	4413      	add	r3, r2
 80024b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024be:	0151      	lsls	r1, r2, #5
 80024c0:	69fa      	ldr	r2, [r7, #28]
 80024c2:	440a      	add	r2, r1
 80024c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80024c8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80024cc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80024ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024d0:	015a      	lsls	r2, r3, #5
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	4413      	add	r3, r2
 80024d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024da:	461a      	mov	r2, r3
 80024dc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80024e0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80024e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e4:	015a      	lsls	r2, r3, #5
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	4413      	add	r3, r2
 80024ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024f2:	0151      	lsls	r1, r2, #5
 80024f4:	69fa      	ldr	r2, [r7, #28]
 80024f6:	440a      	add	r2, r1
 80024f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80024fc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002500:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002504:	015a      	lsls	r2, r3, #5
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	4413      	add	r3, r2
 800250a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002512:	0151      	lsls	r1, r2, #5
 8002514:	69fa      	ldr	r2, [r7, #28]
 8002516:	440a      	add	r2, r1
 8002518:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800251c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002520:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002524:	3301      	adds	r3, #1
 8002526:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800252e:	429a      	cmp	r2, r3
 8002530:	d3b3      	bcc.n	800249a <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002538:	69db      	ldr	r3, [r3, #28]
 800253a:	69fa      	ldr	r2, [r7, #28]
 800253c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002540:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002544:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254a:	2b00      	cmp	r3, #0
 800254c:	d016      	beq.n	800257c <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002554:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002558:	69fa      	ldr	r2, [r7, #28]
 800255a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800255e:	f043 030b 	orr.w	r3, r3, #11
 8002562:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800256c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800256e:	69fa      	ldr	r2, [r7, #28]
 8002570:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002574:	f043 030b 	orr.w	r3, r3, #11
 8002578:	6453      	str	r3, [r2, #68]	; 0x44
 800257a:	e015      	b.n	80025a8 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002582:	695b      	ldr	r3, [r3, #20]
 8002584:	69fa      	ldr	r2, [r7, #28]
 8002586:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800258a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800258e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002592:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800259a:	691b      	ldr	r3, [r3, #16]
 800259c:	69fa      	ldr	r2, [r7, #28]
 800259e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025a2:	f043 030b 	orr.w	r3, r3, #11
 80025a6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	69fa      	ldr	r2, [r7, #28]
 80025b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025b6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80025ba:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6818      	ldr	r0, [r3, #0]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80025cc:	461a      	mov	r2, r3
 80025ce:	f003 fed1 	bl	8006374 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	695a      	ldr	r2, [r3, #20]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80025e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f003 fe00 	bl	80061ec <USB_ReadInterrupts>
 80025ec:	4603      	mov	r3, r0
 80025ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025f6:	d124      	bne.n	8002642 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4618      	mov	r0, r3
 80025fe:	f003 fe96 	bl	800632e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4618      	mov	r0, r3
 8002608:	f002 fe4b 	bl	80052a2 <USB_GetDevSpeed>
 800260c:	4603      	mov	r3, r0
 800260e:	461a      	mov	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681c      	ldr	r4, [r3, #0]
 8002618:	f000 fec2 	bl	80033a0 <HAL_RCC_GetHCLKFreq>
 800261c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002622:	b2db      	uxtb	r3, r3
 8002624:	461a      	mov	r2, r3
 8002626:	4620      	mov	r0, r4
 8002628:	f002 fb50 	bl	8004ccc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f006 fa0e 	bl	8008a4e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	695a      	ldr	r2, [r3, #20]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002640:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4618      	mov	r0, r3
 8002648:	f003 fdd0 	bl	80061ec <USB_ReadInterrupts>
 800264c:	4603      	mov	r3, r0
 800264e:	f003 0308 	and.w	r3, r3, #8
 8002652:	2b08      	cmp	r3, #8
 8002654:	d10a      	bne.n	800266c <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f006 f9eb 	bl	8008a32 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	695a      	ldr	r2, [r3, #20]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f002 0208 	and.w	r2, r2, #8
 800266a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4618      	mov	r0, r3
 8002672:	f003 fdbb 	bl	80061ec <USB_ReadInterrupts>
 8002676:	4603      	mov	r3, r0
 8002678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800267c:	2b80      	cmp	r3, #128	; 0x80
 800267e:	d122      	bne.n	80026c6 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002680:	6a3b      	ldr	r3, [r7, #32]
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002688:	6a3b      	ldr	r3, [r7, #32]
 800268a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800268c:	2301      	movs	r3, #1
 800268e:	627b      	str	r3, [r7, #36]	; 0x24
 8002690:	e014      	b.n	80026bc <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002692:	6879      	ldr	r1, [r7, #4]
 8002694:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002696:	4613      	mov	r3, r2
 8002698:	00db      	lsls	r3, r3, #3
 800269a:	4413      	add	r3, r2
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	440b      	add	r3, r1
 80026a0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d105      	bne.n	80026b6 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80026aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	4619      	mov	r1, r3
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f000 fb27 	bl	8002d04 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b8:	3301      	adds	r3, #1
 80026ba:	627b      	str	r3, [r7, #36]	; 0x24
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d3e5      	bcc.n	8002692 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f003 fd8e 	bl	80061ec <USB_ReadInterrupts>
 80026d0:	4603      	mov	r3, r0
 80026d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026da:	d13b      	bne.n	8002754 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026dc:	2301      	movs	r3, #1
 80026de:	627b      	str	r3, [r7, #36]	; 0x24
 80026e0:	e02b      	b.n	800273a <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80026e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e4:	015a      	lsls	r2, r3, #5
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	4413      	add	r3, r2
 80026ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80026f2:	6879      	ldr	r1, [r7, #4]
 80026f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026f6:	4613      	mov	r3, r2
 80026f8:	00db      	lsls	r3, r3, #3
 80026fa:	4413      	add	r3, r2
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	440b      	add	r3, r1
 8002700:	3340      	adds	r3, #64	; 0x40
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	2b01      	cmp	r3, #1
 8002706:	d115      	bne.n	8002734 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002708:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800270a:	2b00      	cmp	r3, #0
 800270c:	da12      	bge.n	8002734 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800270e:	6879      	ldr	r1, [r7, #4]
 8002710:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002712:	4613      	mov	r3, r2
 8002714:	00db      	lsls	r3, r3, #3
 8002716:	4413      	add	r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	440b      	add	r3, r1
 800271c:	333f      	adds	r3, #63	; 0x3f
 800271e:	2201      	movs	r2, #1
 8002720:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002724:	b2db      	uxtb	r3, r3
 8002726:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800272a:	b2db      	uxtb	r3, r3
 800272c:	4619      	mov	r1, r3
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f000 fae8 	bl	8002d04 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002736:	3301      	adds	r3, #1
 8002738:	627b      	str	r3, [r7, #36]	; 0x24
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002740:	429a      	cmp	r2, r3
 8002742:	d3ce      	bcc.n	80026e2 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	695a      	ldr	r2, [r3, #20]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002752:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4618      	mov	r0, r3
 800275a:	f003 fd47 	bl	80061ec <USB_ReadInterrupts>
 800275e:	4603      	mov	r3, r0
 8002760:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002764:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002768:	d155      	bne.n	8002816 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800276a:	2301      	movs	r3, #1
 800276c:	627b      	str	r3, [r7, #36]	; 0x24
 800276e:	e045      	b.n	80027fc <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002772:	015a      	lsls	r2, r3, #5
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	4413      	add	r3, r2
 8002778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002780:	6879      	ldr	r1, [r7, #4]
 8002782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002784:	4613      	mov	r3, r2
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	4413      	add	r3, r2
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	440b      	add	r3, r1
 800278e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	2b01      	cmp	r3, #1
 8002796:	d12e      	bne.n	80027f6 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002798:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800279a:	2b00      	cmp	r3, #0
 800279c:	da2b      	bge.n	80027f6 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80027aa:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d121      	bne.n	80027f6 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80027b2:	6879      	ldr	r1, [r7, #4]
 80027b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027b6:	4613      	mov	r3, r2
 80027b8:	00db      	lsls	r3, r3, #3
 80027ba:	4413      	add	r3, r2
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	440b      	add	r3, r1
 80027c0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80027c4:	2201      	movs	r2, #1
 80027c6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80027c8:	6a3b      	ldr	r3, [r7, #32]
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80027d0:	6a3b      	ldr	r3, [r7, #32]
 80027d2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80027d4:	6a3b      	ldr	r3, [r7, #32]
 80027d6:	695b      	ldr	r3, [r3, #20]
 80027d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d10a      	bne.n	80027f6 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	69fa      	ldr	r2, [r7, #28]
 80027ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027f2:	6053      	str	r3, [r2, #4]
            break;
 80027f4:	e007      	b.n	8002806 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80027f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f8:	3301      	adds	r3, #1
 80027fa:	627b      	str	r3, [r7, #36]	; 0x24
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002802:	429a      	cmp	r2, r3
 8002804:	d3b4      	bcc.n	8002770 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	695a      	ldr	r2, [r3, #20]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002814:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4618      	mov	r0, r3
 800281c:	f003 fce6 	bl	80061ec <USB_ReadInterrupts>
 8002820:	4603      	mov	r3, r0
 8002822:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002826:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800282a:	d10a      	bne.n	8002842 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f006 f98f 	bl	8008b50 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	695a      	ldr	r2, [r3, #20]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002840:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4618      	mov	r0, r3
 8002848:	f003 fcd0 	bl	80061ec <USB_ReadInterrupts>
 800284c:	4603      	mov	r3, r0
 800284e:	f003 0304 	and.w	r3, r3, #4
 8002852:	2b04      	cmp	r3, #4
 8002854:	d115      	bne.n	8002882 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	f003 0304 	and.w	r3, r3, #4
 8002864:	2b00      	cmp	r3, #0
 8002866:	d002      	beq.n	800286e <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f006 f97f 	bl	8008b6c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	6859      	ldr	r1, [r3, #4]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	430a      	orrs	r2, r1
 800287c:	605a      	str	r2, [r3, #4]
 800287e:	e000      	b.n	8002882 <HAL_PCD_IRQHandler+0x992>
      return;
 8002880:	bf00      	nop
    }
  }
}
 8002882:	3734      	adds	r7, #52	; 0x34
 8002884:	46bd      	mov	sp, r7
 8002886:	bd90      	pop	{r4, r7, pc}

08002888 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	460b      	mov	r3, r1
 8002892:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800289a:	2b01      	cmp	r3, #1
 800289c:	d101      	bne.n	80028a2 <HAL_PCD_SetAddress+0x1a>
 800289e:	2302      	movs	r3, #2
 80028a0:	e013      	b.n	80028ca <HAL_PCD_SetAddress+0x42>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2201      	movs	r2, #1
 80028a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	78fa      	ldrb	r2, [r7, #3]
 80028ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	78fa      	ldrb	r2, [r7, #3]
 80028b8:	4611      	mov	r1, r2
 80028ba:	4618      	mov	r0, r3
 80028bc:	f003 fc2e 	bl	800611c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b084      	sub	sp, #16
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
 80028da:	4608      	mov	r0, r1
 80028dc:	4611      	mov	r1, r2
 80028de:	461a      	mov	r2, r3
 80028e0:	4603      	mov	r3, r0
 80028e2:	70fb      	strb	r3, [r7, #3]
 80028e4:	460b      	mov	r3, r1
 80028e6:	803b      	strh	r3, [r7, #0]
 80028e8:	4613      	mov	r3, r2
 80028ea:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80028ec:	2300      	movs	r3, #0
 80028ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80028f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	da0f      	bge.n	8002918 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028f8:	78fb      	ldrb	r3, [r7, #3]
 80028fa:	f003 020f 	and.w	r2, r3, #15
 80028fe:	4613      	mov	r3, r2
 8002900:	00db      	lsls	r3, r3, #3
 8002902:	4413      	add	r3, r2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	3338      	adds	r3, #56	; 0x38
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	4413      	add	r3, r2
 800290c:	3304      	adds	r3, #4
 800290e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2201      	movs	r2, #1
 8002914:	705a      	strb	r2, [r3, #1]
 8002916:	e00f      	b.n	8002938 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002918:	78fb      	ldrb	r3, [r7, #3]
 800291a:	f003 020f 	and.w	r2, r3, #15
 800291e:	4613      	mov	r3, r2
 8002920:	00db      	lsls	r3, r3, #3
 8002922:	4413      	add	r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	4413      	add	r3, r2
 800292e:	3304      	adds	r3, #4
 8002930:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2200      	movs	r2, #0
 8002936:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002938:	78fb      	ldrb	r3, [r7, #3]
 800293a:	f003 030f 	and.w	r3, r3, #15
 800293e:	b2da      	uxtb	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002944:	883a      	ldrh	r2, [r7, #0]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	78ba      	ldrb	r2, [r7, #2]
 800294e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	785b      	ldrb	r3, [r3, #1]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d004      	beq.n	8002962 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	b29a      	uxth	r2, r3
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002962:	78bb      	ldrb	r3, [r7, #2]
 8002964:	2b02      	cmp	r3, #2
 8002966:	d102      	bne.n	800296e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2200      	movs	r2, #0
 800296c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002974:	2b01      	cmp	r3, #1
 8002976:	d101      	bne.n	800297c <HAL_PCD_EP_Open+0xaa>
 8002978:	2302      	movs	r3, #2
 800297a:	e00e      	b.n	800299a <HAL_PCD_EP_Open+0xc8>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68f9      	ldr	r1, [r7, #12]
 800298a:	4618      	mov	r0, r3
 800298c:	f002 fcae 	bl	80052ec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002998:	7afb      	ldrb	r3, [r7, #11]
}
 800299a:	4618      	mov	r0, r3
 800299c:	3710      	adds	r7, #16
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b084      	sub	sp, #16
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
 80029aa:	460b      	mov	r3, r1
 80029ac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80029ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	da0f      	bge.n	80029d6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029b6:	78fb      	ldrb	r3, [r7, #3]
 80029b8:	f003 020f 	and.w	r2, r3, #15
 80029bc:	4613      	mov	r3, r2
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	4413      	add	r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	3338      	adds	r3, #56	; 0x38
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	4413      	add	r3, r2
 80029ca:	3304      	adds	r3, #4
 80029cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2201      	movs	r2, #1
 80029d2:	705a      	strb	r2, [r3, #1]
 80029d4:	e00f      	b.n	80029f6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029d6:	78fb      	ldrb	r3, [r7, #3]
 80029d8:	f003 020f 	and.w	r2, r3, #15
 80029dc:	4613      	mov	r3, r2
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	4413      	add	r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	4413      	add	r3, r2
 80029ec:	3304      	adds	r3, #4
 80029ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2200      	movs	r2, #0
 80029f4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80029f6:	78fb      	ldrb	r3, [r7, #3]
 80029f8:	f003 030f 	and.w	r3, r3, #15
 80029fc:	b2da      	uxtb	r2, r3
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d101      	bne.n	8002a10 <HAL_PCD_EP_Close+0x6e>
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	e00e      	b.n	8002a2e <HAL_PCD_EP_Close+0x8c>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	68f9      	ldr	r1, [r7, #12]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f002 fcec 	bl	80053fc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3710      	adds	r7, #16
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b086      	sub	sp, #24
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	60f8      	str	r0, [r7, #12]
 8002a3e:	607a      	str	r2, [r7, #4]
 8002a40:	603b      	str	r3, [r7, #0]
 8002a42:	460b      	mov	r3, r1
 8002a44:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a46:	7afb      	ldrb	r3, [r7, #11]
 8002a48:	f003 020f 	and.w	r2, r3, #15
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	00db      	lsls	r3, r3, #3
 8002a50:	4413      	add	r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a58:	68fa      	ldr	r2, [r7, #12]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	3304      	adds	r3, #4
 8002a5e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	683a      	ldr	r2, [r7, #0]
 8002a6a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	2200      	movs	r2, #0
 8002a76:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a78:	7afb      	ldrb	r3, [r7, #11]
 8002a7a:	f003 030f 	and.w	r3, r3, #15
 8002a7e:	b2da      	uxtb	r2, r3
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	691b      	ldr	r3, [r3, #16]
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d102      	bne.n	8002a92 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a92:	7afb      	ldrb	r3, [r7, #11]
 8002a94:	f003 030f 	and.w	r3, r3, #15
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d109      	bne.n	8002ab0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6818      	ldr	r0, [r3, #0]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	691b      	ldr	r3, [r3, #16]
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	6979      	ldr	r1, [r7, #20]
 8002aaa:	f002 ffcb 	bl	8005a44 <USB_EP0StartXfer>
 8002aae:	e008      	b.n	8002ac2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6818      	ldr	r0, [r3, #0]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	691b      	ldr	r3, [r3, #16]
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	461a      	mov	r2, r3
 8002abc:	6979      	ldr	r1, [r7, #20]
 8002abe:	f002 fd79 	bl	80055b4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002ac2:	2300      	movs	r3, #0
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3718      	adds	r7, #24
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002ad8:	78fb      	ldrb	r3, [r7, #3]
 8002ada:	f003 020f 	and.w	r2, r3, #15
 8002ade:	6879      	ldr	r1, [r7, #4]
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	00db      	lsls	r3, r3, #3
 8002ae4:	4413      	add	r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	440b      	add	r3, r1
 8002aea:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002aee:	681b      	ldr	r3, [r3, #0]
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	370c      	adds	r7, #12
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b086      	sub	sp, #24
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	607a      	str	r2, [r7, #4]
 8002b06:	603b      	str	r3, [r7, #0]
 8002b08:	460b      	mov	r3, r1
 8002b0a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b0c:	7afb      	ldrb	r3, [r7, #11]
 8002b0e:	f003 020f 	and.w	r2, r3, #15
 8002b12:	4613      	mov	r3, r2
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	4413      	add	r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	3338      	adds	r3, #56	; 0x38
 8002b1c:	68fa      	ldr	r2, [r7, #12]
 8002b1e:	4413      	add	r3, r2
 8002b20:	3304      	adds	r3, #4
 8002b22:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	683a      	ldr	r2, [r7, #0]
 8002b2e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	2200      	movs	r2, #0
 8002b34:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	2201      	movs	r2, #1
 8002b3a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b3c:	7afb      	ldrb	r3, [r7, #11]
 8002b3e:	f003 030f 	and.w	r3, r3, #15
 8002b42:	b2da      	uxtb	r2, r3
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	691b      	ldr	r3, [r3, #16]
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d102      	bne.n	8002b56 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b56:	7afb      	ldrb	r3, [r7, #11]
 8002b58:	f003 030f 	and.w	r3, r3, #15
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d109      	bne.n	8002b74 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6818      	ldr	r0, [r3, #0]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	691b      	ldr	r3, [r3, #16]
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	6979      	ldr	r1, [r7, #20]
 8002b6e:	f002 ff69 	bl	8005a44 <USB_EP0StartXfer>
 8002b72:	e008      	b.n	8002b86 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6818      	ldr	r0, [r3, #0]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	691b      	ldr	r3, [r3, #16]
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	461a      	mov	r2, r3
 8002b80:	6979      	ldr	r1, [r7, #20]
 8002b82:	f002 fd17 	bl	80055b4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3718      	adds	r7, #24
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	460b      	mov	r3, r1
 8002b9a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002b9c:	78fb      	ldrb	r3, [r7, #3]
 8002b9e:	f003 020f 	and.w	r2, r3, #15
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d901      	bls.n	8002bae <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e050      	b.n	8002c50 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002bae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	da0f      	bge.n	8002bd6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bb6:	78fb      	ldrb	r3, [r7, #3]
 8002bb8:	f003 020f 	and.w	r2, r3, #15
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	00db      	lsls	r3, r3, #3
 8002bc0:	4413      	add	r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	3338      	adds	r3, #56	; 0x38
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	4413      	add	r3, r2
 8002bca:	3304      	adds	r3, #4
 8002bcc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	705a      	strb	r2, [r3, #1]
 8002bd4:	e00d      	b.n	8002bf2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002bd6:	78fa      	ldrb	r2, [r7, #3]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	4413      	add	r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	4413      	add	r3, r2
 8002be8:	3304      	adds	r3, #4
 8002bea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bf8:	78fb      	ldrb	r3, [r7, #3]
 8002bfa:	f003 030f 	and.w	r3, r3, #15
 8002bfe:	b2da      	uxtb	r2, r3
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d101      	bne.n	8002c12 <HAL_PCD_EP_SetStall+0x82>
 8002c0e:	2302      	movs	r3, #2
 8002c10:	e01e      	b.n	8002c50 <HAL_PCD_EP_SetStall+0xc0>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2201      	movs	r2, #1
 8002c16:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	68f9      	ldr	r1, [r7, #12]
 8002c20:	4618      	mov	r0, r3
 8002c22:	f003 f9a7 	bl	8005f74 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c26:	78fb      	ldrb	r3, [r7, #3]
 8002c28:	f003 030f 	and.w	r3, r3, #15
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d10a      	bne.n	8002c46 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6818      	ldr	r0, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	691b      	ldr	r3, [r3, #16]
 8002c38:	b2d9      	uxtb	r1, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002c40:	461a      	mov	r2, r3
 8002c42:	f003 fb97 	bl	8006374 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002c4e:	2300      	movs	r3, #0
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3710      	adds	r7, #16
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	460b      	mov	r3, r1
 8002c62:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002c64:	78fb      	ldrb	r3, [r7, #3]
 8002c66:	f003 020f 	and.w	r2, r3, #15
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d901      	bls.n	8002c76 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e042      	b.n	8002cfc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	da0f      	bge.n	8002c9e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c7e:	78fb      	ldrb	r3, [r7, #3]
 8002c80:	f003 020f 	and.w	r2, r3, #15
 8002c84:	4613      	mov	r3, r2
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	4413      	add	r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	3338      	adds	r3, #56	; 0x38
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	4413      	add	r3, r2
 8002c92:	3304      	adds	r3, #4
 8002c94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	705a      	strb	r2, [r3, #1]
 8002c9c:	e00f      	b.n	8002cbe <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c9e:	78fb      	ldrb	r3, [r7, #3]
 8002ca0:	f003 020f 	and.w	r2, r3, #15
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	00db      	lsls	r3, r3, #3
 8002ca8:	4413      	add	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	3304      	adds	r3, #4
 8002cb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cc4:	78fb      	ldrb	r3, [r7, #3]
 8002cc6:	f003 030f 	and.w	r3, r3, #15
 8002cca:	b2da      	uxtb	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d101      	bne.n	8002cde <HAL_PCD_EP_ClrStall+0x86>
 8002cda:	2302      	movs	r3, #2
 8002cdc:	e00e      	b.n	8002cfc <HAL_PCD_EP_ClrStall+0xa4>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	68f9      	ldr	r1, [r7, #12]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f003 f9af 	bl	8006050 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002cfa:	2300      	movs	r3, #0
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3710      	adds	r7, #16
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002d10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	da0c      	bge.n	8002d32 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d18:	78fb      	ldrb	r3, [r7, #3]
 8002d1a:	f003 020f 	and.w	r2, r3, #15
 8002d1e:	4613      	mov	r3, r2
 8002d20:	00db      	lsls	r3, r3, #3
 8002d22:	4413      	add	r3, r2
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	3338      	adds	r3, #56	; 0x38
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	3304      	adds	r3, #4
 8002d2e:	60fb      	str	r3, [r7, #12]
 8002d30:	e00c      	b.n	8002d4c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d32:	78fb      	ldrb	r3, [r7, #3]
 8002d34:	f003 020f 	and.w	r2, r3, #15
 8002d38:	4613      	mov	r3, r2
 8002d3a:	00db      	lsls	r3, r3, #3
 8002d3c:	4413      	add	r3, r2
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	4413      	add	r3, r2
 8002d48:	3304      	adds	r3, #4
 8002d4a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	68f9      	ldr	r1, [r7, #12]
 8002d52:	4618      	mov	r0, r3
 8002d54:	f002 ffce 	bl	8005cf4 <USB_EPStopXfer>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002d5c:	7afb      	ldrb	r3, [r7, #11]
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3710      	adds	r7, #16
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b08a      	sub	sp, #40	; 0x28
 8002d6a:	af02      	add	r7, sp, #8
 8002d6c:	6078      	str	r0, [r7, #4]
 8002d6e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002d7a:	683a      	ldr	r2, [r7, #0]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	4413      	add	r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	3338      	adds	r3, #56	; 0x38
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	4413      	add	r3, r2
 8002d8a:	3304      	adds	r3, #4
 8002d8c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6a1a      	ldr	r2, [r3, #32]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d901      	bls.n	8002d9e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e06c      	b.n	8002e78 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	699a      	ldr	r2, [r3, #24]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6a1b      	ldr	r3, [r3, #32]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	69fa      	ldr	r2, [r7, #28]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d902      	bls.n	8002dba <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	3303      	adds	r3, #3
 8002dbe:	089b      	lsrs	r3, r3, #2
 8002dc0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002dc2:	e02b      	b.n	8002e1c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	699a      	ldr	r2, [r3, #24]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6a1b      	ldr	r3, [r3, #32]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	69fa      	ldr	r2, [r7, #28]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d902      	bls.n	8002de0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	3303      	adds	r3, #3
 8002de4:	089b      	lsrs	r3, r3, #2
 8002de6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6919      	ldr	r1, [r3, #16]
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	b2da      	uxtb	r2, r3
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	9300      	str	r3, [sp, #0]
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	6978      	ldr	r0, [r7, #20]
 8002e00:	f003 f822 	bl	8005e48 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	691a      	ldr	r2, [r3, #16]
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	441a      	add	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6a1a      	ldr	r2, [r3, #32]
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	441a      	add	r2, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	015a      	lsls	r2, r3, #5
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	4413      	add	r3, r2
 8002e24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e28:	699b      	ldr	r3, [r3, #24]
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d809      	bhi.n	8002e46 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6a1a      	ldr	r2, [r3, #32]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d203      	bcs.n	8002e46 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1be      	bne.n	8002dc4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	699a      	ldr	r2, [r3, #24]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6a1b      	ldr	r3, [r3, #32]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d811      	bhi.n	8002e76 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	f003 030f 	and.w	r3, r3, #15
 8002e58:	2201      	movs	r2, #1
 8002e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	43db      	mvns	r3, r3
 8002e6c:	6939      	ldr	r1, [r7, #16]
 8002e6e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002e72:	4013      	ands	r3, r2
 8002e74:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002e76:	2300      	movs	r3, #0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3720      	adds	r7, #32
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b088      	sub	sp, #32
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	333c      	adds	r3, #60	; 0x3c
 8002e98:	3304      	adds	r3, #4
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	015a      	lsls	r2, r3, #5
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	4413      	add	r3, r2
 8002ea6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d17b      	bne.n	8002fae <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	f003 0308 	and.w	r3, r3, #8
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d015      	beq.n	8002eec <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	4a61      	ldr	r2, [pc, #388]	; (8003048 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	f240 80b9 	bls.w	800303c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	f000 80b3 	beq.w	800303c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	015a      	lsls	r2, r3, #5
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	4413      	add	r3, r2
 8002ede:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ee8:	6093      	str	r3, [r2, #8]
 8002eea:	e0a7      	b.n	800303c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	f003 0320 	and.w	r3, r3, #32
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d009      	beq.n	8002f0a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	015a      	lsls	r2, r3, #5
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	4413      	add	r3, r2
 8002efe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f02:	461a      	mov	r2, r3
 8002f04:	2320      	movs	r3, #32
 8002f06:	6093      	str	r3, [r2, #8]
 8002f08:	e098      	b.n	800303c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	f040 8093 	bne.w	800303c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	4a4b      	ldr	r2, [pc, #300]	; (8003048 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d90f      	bls.n	8002f3e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d00a      	beq.n	8002f3e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	015a      	lsls	r2, r3, #5
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	4413      	add	r3, r2
 8002f30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f34:	461a      	mov	r2, r3
 8002f36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f3a:	6093      	str	r3, [r2, #8]
 8002f3c:	e07e      	b.n	800303c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002f3e:	683a      	ldr	r2, [r7, #0]
 8002f40:	4613      	mov	r3, r2
 8002f42:	00db      	lsls	r3, r3, #3
 8002f44:	4413      	add	r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	4413      	add	r3, r2
 8002f50:	3304      	adds	r3, #4
 8002f52:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	69da      	ldr	r2, [r3, #28]
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	0159      	lsls	r1, r3, #5
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	440b      	add	r3, r1
 8002f60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f6a:	1ad2      	subs	r2, r2, r3
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d114      	bne.n	8002fa0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d109      	bne.n	8002f92 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6818      	ldr	r0, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002f88:	461a      	mov	r2, r3
 8002f8a:	2101      	movs	r1, #1
 8002f8c:	f003 f9f2 	bl	8006374 <USB_EP0_OutStart>
 8002f90:	e006      	b.n	8002fa0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	691a      	ldr	r2, [r3, #16]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6a1b      	ldr	r3, [r3, #32]
 8002f9a:	441a      	add	r2, r3
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f005 fd0e 	bl	80089c8 <HAL_PCD_DataOutStageCallback>
 8002fac:	e046      	b.n	800303c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	4a26      	ldr	r2, [pc, #152]	; (800304c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d124      	bne.n	8003000 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d00a      	beq.n	8002fd6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	015a      	lsls	r2, r3, #5
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fcc:	461a      	mov	r2, r3
 8002fce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fd2:	6093      	str	r3, [r2, #8]
 8002fd4:	e032      	b.n	800303c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	f003 0320 	and.w	r3, r3, #32
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d008      	beq.n	8002ff2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	015a      	lsls	r2, r3, #5
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fec:	461a      	mov	r2, r3
 8002fee:	2320      	movs	r3, #32
 8002ff0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f005 fce5 	bl	80089c8 <HAL_PCD_DataOutStageCallback>
 8002ffe:	e01d      	b.n	800303c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d114      	bne.n	8003030 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003006:	6879      	ldr	r1, [r7, #4]
 8003008:	683a      	ldr	r2, [r7, #0]
 800300a:	4613      	mov	r3, r2
 800300c:	00db      	lsls	r3, r3, #3
 800300e:	4413      	add	r3, r2
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	440b      	add	r3, r1
 8003014:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d108      	bne.n	8003030 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6818      	ldr	r0, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003028:	461a      	mov	r2, r3
 800302a:	2100      	movs	r1, #0
 800302c:	f003 f9a2 	bl	8006374 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	b2db      	uxtb	r3, r3
 8003034:	4619      	mov	r1, r3
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f005 fcc6 	bl	80089c8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3720      	adds	r7, #32
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	4f54300a 	.word	0x4f54300a
 800304c:	4f54310a 	.word	0x4f54310a

08003050 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b086      	sub	sp, #24
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	333c      	adds	r3, #60	; 0x3c
 8003068:	3304      	adds	r3, #4
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	015a      	lsls	r2, r3, #5
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	4413      	add	r3, r2
 8003076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	4a15      	ldr	r2, [pc, #84]	; (80030d8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d90e      	bls.n	80030a4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800308c:	2b00      	cmp	r3, #0
 800308e:	d009      	beq.n	80030a4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	015a      	lsls	r2, r3, #5
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	4413      	add	r3, r2
 8003098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800309c:	461a      	mov	r2, r3
 800309e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030a2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f005 fc7d 	bl	80089a4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	4a0a      	ldr	r2, [pc, #40]	; (80030d8 <PCD_EP_OutSetupPacket_int+0x88>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d90c      	bls.n	80030cc <PCD_EP_OutSetupPacket_int+0x7c>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	691b      	ldr	r3, [r3, #16]
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d108      	bne.n	80030cc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6818      	ldr	r0, [r3, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80030c4:	461a      	mov	r2, r3
 80030c6:	2101      	movs	r1, #1
 80030c8:	f003 f954 	bl	8006374 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3718      	adds	r7, #24
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	4f54300a 	.word	0x4f54300a

080030dc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80030dc:	b480      	push	{r7}
 80030de:	b085      	sub	sp, #20
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	460b      	mov	r3, r1
 80030e6:	70fb      	strb	r3, [r7, #3]
 80030e8:	4613      	mov	r3, r2
 80030ea:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80030f4:	78fb      	ldrb	r3, [r7, #3]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d107      	bne.n	800310a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80030fa:	883b      	ldrh	r3, [r7, #0]
 80030fc:	0419      	lsls	r1, r3, #16
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68ba      	ldr	r2, [r7, #8]
 8003104:	430a      	orrs	r2, r1
 8003106:	629a      	str	r2, [r3, #40]	; 0x28
 8003108:	e028      	b.n	800315c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003110:	0c1b      	lsrs	r3, r3, #16
 8003112:	68ba      	ldr	r2, [r7, #8]
 8003114:	4413      	add	r3, r2
 8003116:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003118:	2300      	movs	r3, #0
 800311a:	73fb      	strb	r3, [r7, #15]
 800311c:	e00d      	b.n	800313a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	7bfb      	ldrb	r3, [r7, #15]
 8003124:	3340      	adds	r3, #64	; 0x40
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	4413      	add	r3, r2
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	0c1b      	lsrs	r3, r3, #16
 800312e:	68ba      	ldr	r2, [r7, #8]
 8003130:	4413      	add	r3, r2
 8003132:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003134:	7bfb      	ldrb	r3, [r7, #15]
 8003136:	3301      	adds	r3, #1
 8003138:	73fb      	strb	r3, [r7, #15]
 800313a:	7bfa      	ldrb	r2, [r7, #15]
 800313c:	78fb      	ldrb	r3, [r7, #3]
 800313e:	3b01      	subs	r3, #1
 8003140:	429a      	cmp	r2, r3
 8003142:	d3ec      	bcc.n	800311e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003144:	883b      	ldrh	r3, [r7, #0]
 8003146:	0418      	lsls	r0, r3, #16
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6819      	ldr	r1, [r3, #0]
 800314c:	78fb      	ldrb	r3, [r7, #3]
 800314e:	3b01      	subs	r3, #1
 8003150:	68ba      	ldr	r2, [r7, #8]
 8003152:	4302      	orrs	r2, r0
 8003154:	3340      	adds	r3, #64	; 0x40
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	440b      	add	r3, r1
 800315a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	3714      	adds	r7, #20
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr

0800316a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800316a:	b480      	push	{r7}
 800316c:	b083      	sub	sp, #12
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
 8003172:	460b      	mov	r3, r1
 8003174:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	887a      	ldrh	r2, [r7, #2]
 800317c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800317e:	2300      	movs	r3, #0
}
 8003180:	4618      	mov	r0, r3
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800318c:	b480      	push	{r7}
 800318e:	b085      	sub	sp, #20
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2201      	movs	r2, #1
 800319e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	699b      	ldr	r3, [r3, #24]
 80031ae:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031be:	f043 0303 	orr.w	r3, r3, #3
 80031c2:	68fa      	ldr	r2, [r7, #12]
 80031c4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3714      	adds	r7, #20
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d101      	bne.n	80031e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e0cc      	b.n	8003382 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031e8:	4b68      	ldr	r3, [pc, #416]	; (800338c <HAL_RCC_ClockConfig+0x1b8>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 030f 	and.w	r3, r3, #15
 80031f0:	683a      	ldr	r2, [r7, #0]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d90c      	bls.n	8003210 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031f6:	4b65      	ldr	r3, [pc, #404]	; (800338c <HAL_RCC_ClockConfig+0x1b8>)
 80031f8:	683a      	ldr	r2, [r7, #0]
 80031fa:	b2d2      	uxtb	r2, r2
 80031fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031fe:	4b63      	ldr	r3, [pc, #396]	; (800338c <HAL_RCC_ClockConfig+0x1b8>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 030f 	and.w	r3, r3, #15
 8003206:	683a      	ldr	r2, [r7, #0]
 8003208:	429a      	cmp	r2, r3
 800320a:	d001      	beq.n	8003210 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e0b8      	b.n	8003382 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0302 	and.w	r3, r3, #2
 8003218:	2b00      	cmp	r3, #0
 800321a:	d020      	beq.n	800325e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0304 	and.w	r3, r3, #4
 8003224:	2b00      	cmp	r3, #0
 8003226:	d005      	beq.n	8003234 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003228:	4b59      	ldr	r3, [pc, #356]	; (8003390 <HAL_RCC_ClockConfig+0x1bc>)
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	4a58      	ldr	r2, [pc, #352]	; (8003390 <HAL_RCC_ClockConfig+0x1bc>)
 800322e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003232:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0308 	and.w	r3, r3, #8
 800323c:	2b00      	cmp	r3, #0
 800323e:	d005      	beq.n	800324c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003240:	4b53      	ldr	r3, [pc, #332]	; (8003390 <HAL_RCC_ClockConfig+0x1bc>)
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	4a52      	ldr	r2, [pc, #328]	; (8003390 <HAL_RCC_ClockConfig+0x1bc>)
 8003246:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800324a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800324c:	4b50      	ldr	r3, [pc, #320]	; (8003390 <HAL_RCC_ClockConfig+0x1bc>)
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	494d      	ldr	r1, [pc, #308]	; (8003390 <HAL_RCC_ClockConfig+0x1bc>)
 800325a:	4313      	orrs	r3, r2
 800325c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0301 	and.w	r3, r3, #1
 8003266:	2b00      	cmp	r3, #0
 8003268:	d044      	beq.n	80032f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	2b01      	cmp	r3, #1
 8003270:	d107      	bne.n	8003282 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003272:	4b47      	ldr	r3, [pc, #284]	; (8003390 <HAL_RCC_ClockConfig+0x1bc>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d119      	bne.n	80032b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e07f      	b.n	8003382 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	2b02      	cmp	r3, #2
 8003288:	d003      	beq.n	8003292 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800328e:	2b03      	cmp	r3, #3
 8003290:	d107      	bne.n	80032a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003292:	4b3f      	ldr	r3, [pc, #252]	; (8003390 <HAL_RCC_ClockConfig+0x1bc>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d109      	bne.n	80032b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e06f      	b.n	8003382 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032a2:	4b3b      	ldr	r3, [pc, #236]	; (8003390 <HAL_RCC_ClockConfig+0x1bc>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d101      	bne.n	80032b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e067      	b.n	8003382 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032b2:	4b37      	ldr	r3, [pc, #220]	; (8003390 <HAL_RCC_ClockConfig+0x1bc>)
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f023 0203 	bic.w	r2, r3, #3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	4934      	ldr	r1, [pc, #208]	; (8003390 <HAL_RCC_ClockConfig+0x1bc>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032c4:	f7fe f9ce 	bl	8001664 <HAL_GetTick>
 80032c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ca:	e00a      	b.n	80032e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032cc:	f7fe f9ca 	bl	8001664 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032da:	4293      	cmp	r3, r2
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e04f      	b.n	8003382 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032e2:	4b2b      	ldr	r3, [pc, #172]	; (8003390 <HAL_RCC_ClockConfig+0x1bc>)
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f003 020c 	and.w	r2, r3, #12
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d1eb      	bne.n	80032cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032f4:	4b25      	ldr	r3, [pc, #148]	; (800338c <HAL_RCC_ClockConfig+0x1b8>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 030f 	and.w	r3, r3, #15
 80032fc:	683a      	ldr	r2, [r7, #0]
 80032fe:	429a      	cmp	r2, r3
 8003300:	d20c      	bcs.n	800331c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003302:	4b22      	ldr	r3, [pc, #136]	; (800338c <HAL_RCC_ClockConfig+0x1b8>)
 8003304:	683a      	ldr	r2, [r7, #0]
 8003306:	b2d2      	uxtb	r2, r2
 8003308:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800330a:	4b20      	ldr	r3, [pc, #128]	; (800338c <HAL_RCC_ClockConfig+0x1b8>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 030f 	and.w	r3, r3, #15
 8003312:	683a      	ldr	r2, [r7, #0]
 8003314:	429a      	cmp	r2, r3
 8003316:	d001      	beq.n	800331c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e032      	b.n	8003382 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0304 	and.w	r3, r3, #4
 8003324:	2b00      	cmp	r3, #0
 8003326:	d008      	beq.n	800333a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003328:	4b19      	ldr	r3, [pc, #100]	; (8003390 <HAL_RCC_ClockConfig+0x1bc>)
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	4916      	ldr	r1, [pc, #88]	; (8003390 <HAL_RCC_ClockConfig+0x1bc>)
 8003336:	4313      	orrs	r3, r2
 8003338:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0308 	and.w	r3, r3, #8
 8003342:	2b00      	cmp	r3, #0
 8003344:	d009      	beq.n	800335a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003346:	4b12      	ldr	r3, [pc, #72]	; (8003390 <HAL_RCC_ClockConfig+0x1bc>)
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	00db      	lsls	r3, r3, #3
 8003354:	490e      	ldr	r1, [pc, #56]	; (8003390 <HAL_RCC_ClockConfig+0x1bc>)
 8003356:	4313      	orrs	r3, r2
 8003358:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800335a:	f000 fb57 	bl	8003a0c <HAL_RCC_GetSysClockFreq>
 800335e:	4602      	mov	r2, r0
 8003360:	4b0b      	ldr	r3, [pc, #44]	; (8003390 <HAL_RCC_ClockConfig+0x1bc>)
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	091b      	lsrs	r3, r3, #4
 8003366:	f003 030f 	and.w	r3, r3, #15
 800336a:	490a      	ldr	r1, [pc, #40]	; (8003394 <HAL_RCC_ClockConfig+0x1c0>)
 800336c:	5ccb      	ldrb	r3, [r1, r3]
 800336e:	fa22 f303 	lsr.w	r3, r2, r3
 8003372:	4a09      	ldr	r2, [pc, #36]	; (8003398 <HAL_RCC_ClockConfig+0x1c4>)
 8003374:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003376:	4b09      	ldr	r3, [pc, #36]	; (800339c <HAL_RCC_ClockConfig+0x1c8>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4618      	mov	r0, r3
 800337c:	f7fe f92e 	bl	80015dc <HAL_InitTick>

  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3710      	adds	r7, #16
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	40023c00 	.word	0x40023c00
 8003390:	40023800 	.word	0x40023800
 8003394:	0800be0c 	.word	0x0800be0c
 8003398:	20000004 	.word	0x20000004
 800339c:	20000008 	.word	0x20000008

080033a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033a0:	b480      	push	{r7}
 80033a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033a4:	4b03      	ldr	r3, [pc, #12]	; (80033b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80033a6:	681b      	ldr	r3, [r3, #0]
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	20000004 	.word	0x20000004

080033b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b08c      	sub	sp, #48	; 0x30
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80033c0:	2300      	movs	r3, #0
 80033c2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80033c4:	2300      	movs	r3, #0
 80033c6:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80033c8:	2300      	movs	r3, #0
 80033ca:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80033cc:	2300      	movs	r3, #0
 80033ce:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80033d0:	2300      	movs	r3, #0
 80033d2:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80033d4:	2300      	movs	r3, #0
 80033d6:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80033d8:	2300      	movs	r3, #0
 80033da:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80033dc:	2300      	movs	r3, #0
 80033de:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80033e0:	2300      	movs	r3, #0
 80033e2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0301 	and.w	r3, r3, #1
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d010      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80033f0:	4b6f      	ldr	r3, [pc, #444]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80033f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033f6:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033fe:	496c      	ldr	r1, [pc, #432]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003400:	4313      	orrs	r3, r2
 8003402:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800340a:	2b00      	cmp	r3, #0
 800340c:	d101      	bne.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800340e:	2301      	movs	r3, #1
 8003410:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d010      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800341e:	4b64      	ldr	r3, [pc, #400]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003420:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003424:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800342c:	4960      	ldr	r1, [pc, #384]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800342e:	4313      	orrs	r3, r2
 8003430:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003438:	2b00      	cmp	r3, #0
 800343a:	d101      	bne.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 800343c:	2301      	movs	r3, #1
 800343e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0304 	and.w	r3, r3, #4
 8003448:	2b00      	cmp	r3, #0
 800344a:	d017      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800344c:	4b58      	ldr	r3, [pc, #352]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800344e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003452:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345a:	4955      	ldr	r1, [pc, #340]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800345c:	4313      	orrs	r3, r2
 800345e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003466:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800346a:	d101      	bne.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 800346c:	2301      	movs	r3, #1
 800346e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003474:	2b00      	cmp	r3, #0
 8003476:	d101      	bne.n	800347c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003478:	2301      	movs	r3, #1
 800347a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0308 	and.w	r3, r3, #8
 8003484:	2b00      	cmp	r3, #0
 8003486:	d017      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003488:	4b49      	ldr	r3, [pc, #292]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800348a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800348e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003496:	4946      	ldr	r1, [pc, #280]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003498:	4313      	orrs	r3, r2
 800349a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034a6:	d101      	bne.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80034a8:	2301      	movs	r3, #1
 80034aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d101      	bne.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80034b4:	2301      	movs	r3, #1
 80034b6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0320 	and.w	r3, r3, #32
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	f000 808a 	beq.w	80035da <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80034c6:	2300      	movs	r3, #0
 80034c8:	60bb      	str	r3, [r7, #8]
 80034ca:	4b39      	ldr	r3, [pc, #228]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80034cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ce:	4a38      	ldr	r2, [pc, #224]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80034d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034d4:	6413      	str	r3, [r2, #64]	; 0x40
 80034d6:	4b36      	ldr	r3, [pc, #216]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80034d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034de:	60bb      	str	r3, [r7, #8]
 80034e0:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80034e2:	4b34      	ldr	r3, [pc, #208]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a33      	ldr	r2, [pc, #204]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80034e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034ec:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80034ee:	f7fe f8b9 	bl	8001664 <HAL_GetTick>
 80034f2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80034f4:	e008      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80034f6:	f7fe f8b5 	bl	8001664 <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	2b02      	cmp	r3, #2
 8003502:	d901      	bls.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e278      	b.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003508:	4b2a      	ldr	r3, [pc, #168]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003510:	2b00      	cmp	r3, #0
 8003512:	d0f0      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003514:	4b26      	ldr	r3, [pc, #152]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003518:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800351c:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800351e:	6a3b      	ldr	r3, [r7, #32]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d02f      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003528:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800352c:	6a3a      	ldr	r2, [r7, #32]
 800352e:	429a      	cmp	r2, r3
 8003530:	d028      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003532:	4b1f      	ldr	r3, [pc, #124]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003536:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800353a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800353c:	4b1e      	ldr	r3, [pc, #120]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800353e:	2201      	movs	r2, #1
 8003540:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003542:	4b1d      	ldr	r3, [pc, #116]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003544:	2200      	movs	r2, #0
 8003546:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003548:	4a19      	ldr	r2, [pc, #100]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800354a:	6a3b      	ldr	r3, [r7, #32]
 800354c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800354e:	4b18      	ldr	r3, [pc, #96]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003552:	f003 0301 	and.w	r3, r3, #1
 8003556:	2b01      	cmp	r3, #1
 8003558:	d114      	bne.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800355a:	f7fe f883 	bl	8001664 <HAL_GetTick>
 800355e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003560:	e00a      	b.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003562:	f7fe f87f 	bl	8001664 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003570:	4293      	cmp	r3, r2
 8003572:	d901      	bls.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e240      	b.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003578:	4b0d      	ldr	r3, [pc, #52]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800357a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800357c:	f003 0302 	and.w	r3, r3, #2
 8003580:	2b00      	cmp	r3, #0
 8003582:	d0ee      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003588:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800358c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003590:	d114      	bne.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x204>
 8003592:	4b07      	ldr	r3, [pc, #28]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80035a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035a6:	4902      	ldr	r1, [pc, #8]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80035a8:	4313      	orrs	r3, r2
 80035aa:	608b      	str	r3, [r1, #8]
 80035ac:	e00c      	b.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80035ae:	bf00      	nop
 80035b0:	40023800 	.word	0x40023800
 80035b4:	40007000 	.word	0x40007000
 80035b8:	42470e40 	.word	0x42470e40
 80035bc:	4b4a      	ldr	r3, [pc, #296]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	4a49      	ldr	r2, [pc, #292]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80035c2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80035c6:	6093      	str	r3, [r2, #8]
 80035c8:	4b47      	ldr	r3, [pc, #284]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80035ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035d4:	4944      	ldr	r1, [pc, #272]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0310 	and.w	r3, r3, #16
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d004      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80035ec:	4b3f      	ldr	r3, [pc, #252]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80035ee:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d00a      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80035fc:	4b3a      	ldr	r3, [pc, #232]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80035fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003602:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800360a:	4937      	ldr	r1, [pc, #220]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800360c:	4313      	orrs	r3, r2
 800360e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00a      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800361e:	4b32      	ldr	r3, [pc, #200]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003620:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003624:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800362c:	492e      	ldr	r1, [pc, #184]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800362e:	4313      	orrs	r3, r2
 8003630:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800363c:	2b00      	cmp	r3, #0
 800363e:	d011      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003640:	4b29      	ldr	r3, [pc, #164]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003642:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003646:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800364e:	4926      	ldr	r1, [pc, #152]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003650:	4313      	orrs	r3, r2
 8003652:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800365a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800365e:	d101      	bne.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003660:	2301      	movs	r3, #1
 8003662:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800366c:	2b00      	cmp	r3, #0
 800366e:	d00a      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003670:	4b1d      	ldr	r3, [pc, #116]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003672:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003676:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800367e:	491a      	ldr	r1, [pc, #104]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003680:	4313      	orrs	r3, r2
 8003682:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800368e:	2b00      	cmp	r3, #0
 8003690:	d011      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003692:	4b15      	ldr	r3, [pc, #84]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003694:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003698:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036a0:	4911      	ldr	r1, [pc, #68]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036b0:	d101      	bne.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80036b2:	2301      	movs	r3, #1
 80036b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80036b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d005      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036c4:	f040 80ff 	bne.w	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80036c8:	4b09      	ldr	r3, [pc, #36]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80036ce:	f7fd ffc9 	bl	8001664 <HAL_GetTick>
 80036d2:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80036d4:	e00e      	b.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80036d6:	f7fd ffc5 	bl	8001664 <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d907      	bls.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e188      	b.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x642>
 80036e8:	40023800 	.word	0x40023800
 80036ec:	424711e0 	.word	0x424711e0
 80036f0:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80036f4:	4b7e      	ldr	r3, [pc, #504]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d1ea      	bne.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0301 	and.w	r3, r3, #1
 8003708:	2b00      	cmp	r3, #0
 800370a:	d003      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003710:	2b00      	cmp	r3, #0
 8003712:	d009      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800371c:	2b00      	cmp	r3, #0
 800371e:	d028      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003724:	2b00      	cmp	r3, #0
 8003726:	d124      	bne.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003728:	4b71      	ldr	r3, [pc, #452]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800372a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800372e:	0c1b      	lsrs	r3, r3, #16
 8003730:	f003 0303 	and.w	r3, r3, #3
 8003734:	3301      	adds	r3, #1
 8003736:	005b      	lsls	r3, r3, #1
 8003738:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800373a:	4b6d      	ldr	r3, [pc, #436]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800373c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003740:	0e1b      	lsrs	r3, r3, #24
 8003742:	f003 030f 	and.w	r3, r3, #15
 8003746:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685a      	ldr	r2, [r3, #4]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	019b      	lsls	r3, r3, #6
 8003752:	431a      	orrs	r2, r3
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	085b      	lsrs	r3, r3, #1
 8003758:	3b01      	subs	r3, #1
 800375a:	041b      	lsls	r3, r3, #16
 800375c:	431a      	orrs	r2, r3
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	061b      	lsls	r3, r3, #24
 8003762:	431a      	orrs	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	695b      	ldr	r3, [r3, #20]
 8003768:	071b      	lsls	r3, r3, #28
 800376a:	4961      	ldr	r1, [pc, #388]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800376c:	4313      	orrs	r3, r2
 800376e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0304 	and.w	r3, r3, #4
 800377a:	2b00      	cmp	r3, #0
 800377c:	d004      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003782:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003786:	d00a      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003790:	2b00      	cmp	r3, #0
 8003792:	d035      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003798:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800379c:	d130      	bne.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800379e:	4b54      	ldr	r3, [pc, #336]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80037a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037a4:	0c1b      	lsrs	r3, r3, #16
 80037a6:	f003 0303 	and.w	r3, r3, #3
 80037aa:	3301      	adds	r3, #1
 80037ac:	005b      	lsls	r3, r3, #1
 80037ae:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80037b0:	4b4f      	ldr	r3, [pc, #316]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80037b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037b6:	0f1b      	lsrs	r3, r3, #28
 80037b8:	f003 0307 	and.w	r3, r3, #7
 80037bc:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685a      	ldr	r2, [r3, #4]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	019b      	lsls	r3, r3, #6
 80037c8:	431a      	orrs	r2, r3
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	085b      	lsrs	r3, r3, #1
 80037ce:	3b01      	subs	r3, #1
 80037d0:	041b      	lsls	r3, r3, #16
 80037d2:	431a      	orrs	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	061b      	lsls	r3, r3, #24
 80037da:	431a      	orrs	r2, r3
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	071b      	lsls	r3, r3, #28
 80037e0:	4943      	ldr	r1, [pc, #268]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80037e2:	4313      	orrs	r3, r2
 80037e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80037e8:	4b41      	ldr	r3, [pc, #260]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80037ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037ee:	f023 021f 	bic.w	r2, r3, #31
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f6:	3b01      	subs	r3, #1
 80037f8:	493d      	ldr	r1, [pc, #244]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003808:	2b00      	cmp	r3, #0
 800380a:	d029      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003810:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003814:	d124      	bne.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003816:	4b36      	ldr	r3, [pc, #216]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003818:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800381c:	0c1b      	lsrs	r3, r3, #16
 800381e:	f003 0303 	and.w	r3, r3, #3
 8003822:	3301      	adds	r3, #1
 8003824:	005b      	lsls	r3, r3, #1
 8003826:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003828:	4b31      	ldr	r3, [pc, #196]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800382a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800382e:	0f1b      	lsrs	r3, r3, #28
 8003830:	f003 0307 	and.w	r3, r3, #7
 8003834:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685a      	ldr	r2, [r3, #4]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	019b      	lsls	r3, r3, #6
 8003840:	431a      	orrs	r2, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	085b      	lsrs	r3, r3, #1
 8003848:	3b01      	subs	r3, #1
 800384a:	041b      	lsls	r3, r3, #16
 800384c:	431a      	orrs	r2, r3
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	061b      	lsls	r3, r3, #24
 8003852:	431a      	orrs	r2, r3
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	071b      	lsls	r3, r3, #28
 8003858:	4925      	ldr	r1, [pc, #148]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800385a:	4313      	orrs	r3, r2
 800385c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003868:	2b00      	cmp	r3, #0
 800386a:	d016      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685a      	ldr	r2, [r3, #4]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	019b      	lsls	r3, r3, #6
 8003876:	431a      	orrs	r2, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	085b      	lsrs	r3, r3, #1
 800387e:	3b01      	subs	r3, #1
 8003880:	041b      	lsls	r3, r3, #16
 8003882:	431a      	orrs	r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	061b      	lsls	r3, r3, #24
 800388a:	431a      	orrs	r2, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	695b      	ldr	r3, [r3, #20]
 8003890:	071b      	lsls	r3, r3, #28
 8003892:	4917      	ldr	r1, [pc, #92]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003894:	4313      	orrs	r3, r2
 8003896:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800389a:	4b16      	ldr	r3, [pc, #88]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800389c:	2201      	movs	r2, #1
 800389e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80038a0:	f7fd fee0 	bl	8001664 <HAL_GetTick>
 80038a4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80038a6:	e008      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80038a8:	f7fd fedc 	bl	8001664 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d901      	bls.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e09f      	b.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80038ba:	4b0d      	ldr	r3, [pc, #52]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d0f0      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80038c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	f040 8095 	bne.w	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80038ce:	4b0a      	ldr	r3, [pc, #40]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80038d4:	f7fd fec6 	bl	8001664 <HAL_GetTick>
 80038d8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80038da:	e00f      	b.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80038dc:	f7fd fec2 	bl	8001664 <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d908      	bls.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e085      	b.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x642>
 80038ee:	bf00      	nop
 80038f0:	40023800 	.word	0x40023800
 80038f4:	42470068 	.word	0x42470068
 80038f8:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80038fc:	4b41      	ldr	r3, [pc, #260]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003904:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003908:	d0e8      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0304 	and.w	r3, r3, #4
 8003912:	2b00      	cmp	r3, #0
 8003914:	d003      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x566>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391a:	2b00      	cmp	r3, #0
 800391c:	d009      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003926:	2b00      	cmp	r3, #0
 8003928:	d02b      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800392e:	2b00      	cmp	r3, #0
 8003930:	d127      	bne.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003932:	4b34      	ldr	r3, [pc, #208]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003938:	0c1b      	lsrs	r3, r3, #16
 800393a:	f003 0303 	and.w	r3, r3, #3
 800393e:	3301      	adds	r3, #1
 8003940:	005b      	lsls	r3, r3, #1
 8003942:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	699a      	ldr	r2, [r3, #24]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	69db      	ldr	r3, [r3, #28]
 800394c:	019b      	lsls	r3, r3, #6
 800394e:	431a      	orrs	r2, r3
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	085b      	lsrs	r3, r3, #1
 8003954:	3b01      	subs	r3, #1
 8003956:	041b      	lsls	r3, r3, #16
 8003958:	431a      	orrs	r2, r3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395e:	061b      	lsls	r3, r3, #24
 8003960:	4928      	ldr	r1, [pc, #160]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003962:	4313      	orrs	r3, r2
 8003964:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003968:	4b26      	ldr	r3, [pc, #152]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800396a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800396e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003976:	3b01      	subs	r3, #1
 8003978:	021b      	lsls	r3, r3, #8
 800397a:	4922      	ldr	r1, [pc, #136]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800397c:	4313      	orrs	r3, r2
 800397e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800398a:	2b00      	cmp	r3, #0
 800398c:	d01d      	beq.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x612>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003992:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003996:	d118      	bne.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003998:	4b1a      	ldr	r3, [pc, #104]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800399a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800399e:	0e1b      	lsrs	r3, r3, #24
 80039a0:	f003 030f 	and.w	r3, r3, #15
 80039a4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	699a      	ldr	r2, [r3, #24]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	69db      	ldr	r3, [r3, #28]
 80039ae:	019b      	lsls	r3, r3, #6
 80039b0:	431a      	orrs	r2, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a1b      	ldr	r3, [r3, #32]
 80039b6:	085b      	lsrs	r3, r3, #1
 80039b8:	3b01      	subs	r3, #1
 80039ba:	041b      	lsls	r3, r3, #16
 80039bc:	431a      	orrs	r2, r3
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	061b      	lsls	r3, r3, #24
 80039c2:	4910      	ldr	r1, [pc, #64]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80039ca:	4b0f      	ldr	r3, [pc, #60]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80039cc:	2201      	movs	r2, #1
 80039ce:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80039d0:	f7fd fe48 	bl	8001664 <HAL_GetTick>
 80039d4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80039d6:	e008      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80039d8:	f7fd fe44 	bl	8001664 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d901      	bls.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e007      	b.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80039ea:	4b06      	ldr	r3, [pc, #24]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039f6:	d1ef      	bne.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3730      	adds	r7, #48	; 0x30
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	40023800 	.word	0x40023800
 8003a08:	42470070 	.word	0x42470070

08003a0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a10:	b0ae      	sub	sp, #184	; 0xb8
 8003a12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003a14:	2300      	movs	r3, #0
 8003a16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003a20:	2300      	movs	r3, #0
 8003a22:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003a26:	2300      	movs	r3, #0
 8003a28:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a32:	4bcb      	ldr	r3, [pc, #812]	; (8003d60 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f003 030c 	and.w	r3, r3, #12
 8003a3a:	2b0c      	cmp	r3, #12
 8003a3c:	f200 8206 	bhi.w	8003e4c <HAL_RCC_GetSysClockFreq+0x440>
 8003a40:	a201      	add	r2, pc, #4	; (adr r2, 8003a48 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a46:	bf00      	nop
 8003a48:	08003a7d 	.word	0x08003a7d
 8003a4c:	08003e4d 	.word	0x08003e4d
 8003a50:	08003e4d 	.word	0x08003e4d
 8003a54:	08003e4d 	.word	0x08003e4d
 8003a58:	08003a85 	.word	0x08003a85
 8003a5c:	08003e4d 	.word	0x08003e4d
 8003a60:	08003e4d 	.word	0x08003e4d
 8003a64:	08003e4d 	.word	0x08003e4d
 8003a68:	08003a8d 	.word	0x08003a8d
 8003a6c:	08003e4d 	.word	0x08003e4d
 8003a70:	08003e4d 	.word	0x08003e4d
 8003a74:	08003e4d 	.word	0x08003e4d
 8003a78:	08003c7d 	.word	0x08003c7d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a7c:	4bb9      	ldr	r3, [pc, #740]	; (8003d64 <HAL_RCC_GetSysClockFreq+0x358>)
 8003a7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003a82:	e1e7      	b.n	8003e54 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a84:	4bb8      	ldr	r3, [pc, #736]	; (8003d68 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003a86:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003a8a:	e1e3      	b.n	8003e54 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a8c:	4bb4      	ldr	r3, [pc, #720]	; (8003d60 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a98:	4bb1      	ldr	r3, [pc, #708]	; (8003d60 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d071      	beq.n	8003b88 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003aa4:	4bae      	ldr	r3, [pc, #696]	; (8003d60 <HAL_RCC_GetSysClockFreq+0x354>)
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	099b      	lsrs	r3, r3, #6
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003ab0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003ab4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ab8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003abc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003ac6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003aca:	4622      	mov	r2, r4
 8003acc:	462b      	mov	r3, r5
 8003ace:	f04f 0000 	mov.w	r0, #0
 8003ad2:	f04f 0100 	mov.w	r1, #0
 8003ad6:	0159      	lsls	r1, r3, #5
 8003ad8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003adc:	0150      	lsls	r0, r2, #5
 8003ade:	4602      	mov	r2, r0
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	4621      	mov	r1, r4
 8003ae4:	1a51      	subs	r1, r2, r1
 8003ae6:	6439      	str	r1, [r7, #64]	; 0x40
 8003ae8:	4629      	mov	r1, r5
 8003aea:	eb63 0301 	sbc.w	r3, r3, r1
 8003aee:	647b      	str	r3, [r7, #68]	; 0x44
 8003af0:	f04f 0200 	mov.w	r2, #0
 8003af4:	f04f 0300 	mov.w	r3, #0
 8003af8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003afc:	4649      	mov	r1, r9
 8003afe:	018b      	lsls	r3, r1, #6
 8003b00:	4641      	mov	r1, r8
 8003b02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b06:	4641      	mov	r1, r8
 8003b08:	018a      	lsls	r2, r1, #6
 8003b0a:	4641      	mov	r1, r8
 8003b0c:	1a51      	subs	r1, r2, r1
 8003b0e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003b10:	4649      	mov	r1, r9
 8003b12:	eb63 0301 	sbc.w	r3, r3, r1
 8003b16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b18:	f04f 0200 	mov.w	r2, #0
 8003b1c:	f04f 0300 	mov.w	r3, #0
 8003b20:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003b24:	4649      	mov	r1, r9
 8003b26:	00cb      	lsls	r3, r1, #3
 8003b28:	4641      	mov	r1, r8
 8003b2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b2e:	4641      	mov	r1, r8
 8003b30:	00ca      	lsls	r2, r1, #3
 8003b32:	4610      	mov	r0, r2
 8003b34:	4619      	mov	r1, r3
 8003b36:	4603      	mov	r3, r0
 8003b38:	4622      	mov	r2, r4
 8003b3a:	189b      	adds	r3, r3, r2
 8003b3c:	633b      	str	r3, [r7, #48]	; 0x30
 8003b3e:	462b      	mov	r3, r5
 8003b40:	460a      	mov	r2, r1
 8003b42:	eb42 0303 	adc.w	r3, r2, r3
 8003b46:	637b      	str	r3, [r7, #52]	; 0x34
 8003b48:	f04f 0200 	mov.w	r2, #0
 8003b4c:	f04f 0300 	mov.w	r3, #0
 8003b50:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003b54:	4629      	mov	r1, r5
 8003b56:	024b      	lsls	r3, r1, #9
 8003b58:	4621      	mov	r1, r4
 8003b5a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b5e:	4621      	mov	r1, r4
 8003b60:	024a      	lsls	r2, r1, #9
 8003b62:	4610      	mov	r0, r2
 8003b64:	4619      	mov	r1, r3
 8003b66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003b70:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003b74:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003b78:	f7fd f818 	bl	8000bac <__aeabi_uldivmod>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	460b      	mov	r3, r1
 8003b80:	4613      	mov	r3, r2
 8003b82:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b86:	e067      	b.n	8003c58 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b88:	4b75      	ldr	r3, [pc, #468]	; (8003d60 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	099b      	lsrs	r3, r3, #6
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003b94:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003b98:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003b9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ba0:	67bb      	str	r3, [r7, #120]	; 0x78
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003ba6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003baa:	4622      	mov	r2, r4
 8003bac:	462b      	mov	r3, r5
 8003bae:	f04f 0000 	mov.w	r0, #0
 8003bb2:	f04f 0100 	mov.w	r1, #0
 8003bb6:	0159      	lsls	r1, r3, #5
 8003bb8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bbc:	0150      	lsls	r0, r2, #5
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	4621      	mov	r1, r4
 8003bc4:	1a51      	subs	r1, r2, r1
 8003bc6:	62b9      	str	r1, [r7, #40]	; 0x28
 8003bc8:	4629      	mov	r1, r5
 8003bca:	eb63 0301 	sbc.w	r3, r3, r1
 8003bce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bd0:	f04f 0200 	mov.w	r2, #0
 8003bd4:	f04f 0300 	mov.w	r3, #0
 8003bd8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003bdc:	4649      	mov	r1, r9
 8003bde:	018b      	lsls	r3, r1, #6
 8003be0:	4641      	mov	r1, r8
 8003be2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003be6:	4641      	mov	r1, r8
 8003be8:	018a      	lsls	r2, r1, #6
 8003bea:	4641      	mov	r1, r8
 8003bec:	ebb2 0a01 	subs.w	sl, r2, r1
 8003bf0:	4649      	mov	r1, r9
 8003bf2:	eb63 0b01 	sbc.w	fp, r3, r1
 8003bf6:	f04f 0200 	mov.w	r2, #0
 8003bfa:	f04f 0300 	mov.w	r3, #0
 8003bfe:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003c02:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003c06:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c0a:	4692      	mov	sl, r2
 8003c0c:	469b      	mov	fp, r3
 8003c0e:	4623      	mov	r3, r4
 8003c10:	eb1a 0303 	adds.w	r3, sl, r3
 8003c14:	623b      	str	r3, [r7, #32]
 8003c16:	462b      	mov	r3, r5
 8003c18:	eb4b 0303 	adc.w	r3, fp, r3
 8003c1c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c1e:	f04f 0200 	mov.w	r2, #0
 8003c22:	f04f 0300 	mov.w	r3, #0
 8003c26:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003c2a:	4629      	mov	r1, r5
 8003c2c:	028b      	lsls	r3, r1, #10
 8003c2e:	4621      	mov	r1, r4
 8003c30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c34:	4621      	mov	r1, r4
 8003c36:	028a      	lsls	r2, r1, #10
 8003c38:	4610      	mov	r0, r2
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003c40:	2200      	movs	r2, #0
 8003c42:	673b      	str	r3, [r7, #112]	; 0x70
 8003c44:	677a      	str	r2, [r7, #116]	; 0x74
 8003c46:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003c4a:	f7fc ffaf 	bl	8000bac <__aeabi_uldivmod>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	460b      	mov	r3, r1
 8003c52:	4613      	mov	r3, r2
 8003c54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c58:	4b41      	ldr	r3, [pc, #260]	; (8003d60 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	0c1b      	lsrs	r3, r3, #16
 8003c5e:	f003 0303 	and.w	r3, r3, #3
 8003c62:	3301      	adds	r3, #1
 8003c64:	005b      	lsls	r3, r3, #1
 8003c66:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003c6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003c6e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003c7a:	e0eb      	b.n	8003e54 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c7c:	4b38      	ldr	r3, [pc, #224]	; (8003d60 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c88:	4b35      	ldr	r3, [pc, #212]	; (8003d60 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d06b      	beq.n	8003d6c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c94:	4b32      	ldr	r3, [pc, #200]	; (8003d60 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	099b      	lsrs	r3, r3, #6
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c9e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003ca0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ca2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ca6:	663b      	str	r3, [r7, #96]	; 0x60
 8003ca8:	2300      	movs	r3, #0
 8003caa:	667b      	str	r3, [r7, #100]	; 0x64
 8003cac:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003cb0:	4622      	mov	r2, r4
 8003cb2:	462b      	mov	r3, r5
 8003cb4:	f04f 0000 	mov.w	r0, #0
 8003cb8:	f04f 0100 	mov.w	r1, #0
 8003cbc:	0159      	lsls	r1, r3, #5
 8003cbe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cc2:	0150      	lsls	r0, r2, #5
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	460b      	mov	r3, r1
 8003cc8:	4621      	mov	r1, r4
 8003cca:	1a51      	subs	r1, r2, r1
 8003ccc:	61b9      	str	r1, [r7, #24]
 8003cce:	4629      	mov	r1, r5
 8003cd0:	eb63 0301 	sbc.w	r3, r3, r1
 8003cd4:	61fb      	str	r3, [r7, #28]
 8003cd6:	f04f 0200 	mov.w	r2, #0
 8003cda:	f04f 0300 	mov.w	r3, #0
 8003cde:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003ce2:	4659      	mov	r1, fp
 8003ce4:	018b      	lsls	r3, r1, #6
 8003ce6:	4651      	mov	r1, sl
 8003ce8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003cec:	4651      	mov	r1, sl
 8003cee:	018a      	lsls	r2, r1, #6
 8003cf0:	4651      	mov	r1, sl
 8003cf2:	ebb2 0801 	subs.w	r8, r2, r1
 8003cf6:	4659      	mov	r1, fp
 8003cf8:	eb63 0901 	sbc.w	r9, r3, r1
 8003cfc:	f04f 0200 	mov.w	r2, #0
 8003d00:	f04f 0300 	mov.w	r3, #0
 8003d04:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d08:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d0c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d10:	4690      	mov	r8, r2
 8003d12:	4699      	mov	r9, r3
 8003d14:	4623      	mov	r3, r4
 8003d16:	eb18 0303 	adds.w	r3, r8, r3
 8003d1a:	613b      	str	r3, [r7, #16]
 8003d1c:	462b      	mov	r3, r5
 8003d1e:	eb49 0303 	adc.w	r3, r9, r3
 8003d22:	617b      	str	r3, [r7, #20]
 8003d24:	f04f 0200 	mov.w	r2, #0
 8003d28:	f04f 0300 	mov.w	r3, #0
 8003d2c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003d30:	4629      	mov	r1, r5
 8003d32:	024b      	lsls	r3, r1, #9
 8003d34:	4621      	mov	r1, r4
 8003d36:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d3a:	4621      	mov	r1, r4
 8003d3c:	024a      	lsls	r2, r1, #9
 8003d3e:	4610      	mov	r0, r2
 8003d40:	4619      	mov	r1, r3
 8003d42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d46:	2200      	movs	r2, #0
 8003d48:	65bb      	str	r3, [r7, #88]	; 0x58
 8003d4a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003d4c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003d50:	f7fc ff2c 	bl	8000bac <__aeabi_uldivmod>
 8003d54:	4602      	mov	r2, r0
 8003d56:	460b      	mov	r3, r1
 8003d58:	4613      	mov	r3, r2
 8003d5a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d5e:	e065      	b.n	8003e2c <HAL_RCC_GetSysClockFreq+0x420>
 8003d60:	40023800 	.word	0x40023800
 8003d64:	00f42400 	.word	0x00f42400
 8003d68:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d6c:	4b3d      	ldr	r3, [pc, #244]	; (8003e64 <HAL_RCC_GetSysClockFreq+0x458>)
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	099b      	lsrs	r3, r3, #6
 8003d72:	2200      	movs	r2, #0
 8003d74:	4618      	mov	r0, r3
 8003d76:	4611      	mov	r1, r2
 8003d78:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003d7c:	653b      	str	r3, [r7, #80]	; 0x50
 8003d7e:	2300      	movs	r3, #0
 8003d80:	657b      	str	r3, [r7, #84]	; 0x54
 8003d82:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003d86:	4642      	mov	r2, r8
 8003d88:	464b      	mov	r3, r9
 8003d8a:	f04f 0000 	mov.w	r0, #0
 8003d8e:	f04f 0100 	mov.w	r1, #0
 8003d92:	0159      	lsls	r1, r3, #5
 8003d94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d98:	0150      	lsls	r0, r2, #5
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	460b      	mov	r3, r1
 8003d9e:	4641      	mov	r1, r8
 8003da0:	1a51      	subs	r1, r2, r1
 8003da2:	60b9      	str	r1, [r7, #8]
 8003da4:	4649      	mov	r1, r9
 8003da6:	eb63 0301 	sbc.w	r3, r3, r1
 8003daa:	60fb      	str	r3, [r7, #12]
 8003dac:	f04f 0200 	mov.w	r2, #0
 8003db0:	f04f 0300 	mov.w	r3, #0
 8003db4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003db8:	4659      	mov	r1, fp
 8003dba:	018b      	lsls	r3, r1, #6
 8003dbc:	4651      	mov	r1, sl
 8003dbe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003dc2:	4651      	mov	r1, sl
 8003dc4:	018a      	lsls	r2, r1, #6
 8003dc6:	4651      	mov	r1, sl
 8003dc8:	1a54      	subs	r4, r2, r1
 8003dca:	4659      	mov	r1, fp
 8003dcc:	eb63 0501 	sbc.w	r5, r3, r1
 8003dd0:	f04f 0200 	mov.w	r2, #0
 8003dd4:	f04f 0300 	mov.w	r3, #0
 8003dd8:	00eb      	lsls	r3, r5, #3
 8003dda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003dde:	00e2      	lsls	r2, r4, #3
 8003de0:	4614      	mov	r4, r2
 8003de2:	461d      	mov	r5, r3
 8003de4:	4643      	mov	r3, r8
 8003de6:	18e3      	adds	r3, r4, r3
 8003de8:	603b      	str	r3, [r7, #0]
 8003dea:	464b      	mov	r3, r9
 8003dec:	eb45 0303 	adc.w	r3, r5, r3
 8003df0:	607b      	str	r3, [r7, #4]
 8003df2:	f04f 0200 	mov.w	r2, #0
 8003df6:	f04f 0300 	mov.w	r3, #0
 8003dfa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003dfe:	4629      	mov	r1, r5
 8003e00:	028b      	lsls	r3, r1, #10
 8003e02:	4621      	mov	r1, r4
 8003e04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e08:	4621      	mov	r1, r4
 8003e0a:	028a      	lsls	r2, r1, #10
 8003e0c:	4610      	mov	r0, r2
 8003e0e:	4619      	mov	r1, r3
 8003e10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003e14:	2200      	movs	r2, #0
 8003e16:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e18:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003e1a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003e1e:	f7fc fec5 	bl	8000bac <__aeabi_uldivmod>
 8003e22:	4602      	mov	r2, r0
 8003e24:	460b      	mov	r3, r1
 8003e26:	4613      	mov	r3, r2
 8003e28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003e2c:	4b0d      	ldr	r3, [pc, #52]	; (8003e64 <HAL_RCC_GetSysClockFreq+0x458>)
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	0f1b      	lsrs	r3, r3, #28
 8003e32:	f003 0307 	and.w	r3, r3, #7
 8003e36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003e3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003e3e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e46:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003e4a:	e003      	b.n	8003e54 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e4c:	4b06      	ldr	r3, [pc, #24]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003e4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003e52:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e54:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	37b8      	adds	r7, #184	; 0xb8
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e62:	bf00      	nop
 8003e64:	40023800 	.word	0x40023800
 8003e68:	00f42400 	.word	0x00f42400

08003e6c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b086      	sub	sp, #24
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d101      	bne.n	8003e7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e28d      	b.n	800439a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0301 	and.w	r3, r3, #1
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	f000 8083 	beq.w	8003f92 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003e8c:	4b94      	ldr	r3, [pc, #592]	; (80040e0 <HAL_RCC_OscConfig+0x274>)
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	f003 030c 	and.w	r3, r3, #12
 8003e94:	2b04      	cmp	r3, #4
 8003e96:	d019      	beq.n	8003ecc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003e98:	4b91      	ldr	r3, [pc, #580]	; (80040e0 <HAL_RCC_OscConfig+0x274>)
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003ea0:	2b08      	cmp	r3, #8
 8003ea2:	d106      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003ea4:	4b8e      	ldr	r3, [pc, #568]	; (80040e0 <HAL_RCC_OscConfig+0x274>)
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003eb0:	d00c      	beq.n	8003ecc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003eb2:	4b8b      	ldr	r3, [pc, #556]	; (80040e0 <HAL_RCC_OscConfig+0x274>)
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003eba:	2b0c      	cmp	r3, #12
 8003ebc:	d112      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ebe:	4b88      	ldr	r3, [pc, #544]	; (80040e0 <HAL_RCC_OscConfig+0x274>)
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ec6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003eca:	d10b      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ecc:	4b84      	ldr	r3, [pc, #528]	; (80040e0 <HAL_RCC_OscConfig+0x274>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d05b      	beq.n	8003f90 <HAL_RCC_OscConfig+0x124>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d157      	bne.n	8003f90 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e25a      	b.n	800439a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eec:	d106      	bne.n	8003efc <HAL_RCC_OscConfig+0x90>
 8003eee:	4b7c      	ldr	r3, [pc, #496]	; (80040e0 <HAL_RCC_OscConfig+0x274>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a7b      	ldr	r2, [pc, #492]	; (80040e0 <HAL_RCC_OscConfig+0x274>)
 8003ef4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ef8:	6013      	str	r3, [r2, #0]
 8003efa:	e01d      	b.n	8003f38 <HAL_RCC_OscConfig+0xcc>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f04:	d10c      	bne.n	8003f20 <HAL_RCC_OscConfig+0xb4>
 8003f06:	4b76      	ldr	r3, [pc, #472]	; (80040e0 <HAL_RCC_OscConfig+0x274>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a75      	ldr	r2, [pc, #468]	; (80040e0 <HAL_RCC_OscConfig+0x274>)
 8003f0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f10:	6013      	str	r3, [r2, #0]
 8003f12:	4b73      	ldr	r3, [pc, #460]	; (80040e0 <HAL_RCC_OscConfig+0x274>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a72      	ldr	r2, [pc, #456]	; (80040e0 <HAL_RCC_OscConfig+0x274>)
 8003f18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f1c:	6013      	str	r3, [r2, #0]
 8003f1e:	e00b      	b.n	8003f38 <HAL_RCC_OscConfig+0xcc>
 8003f20:	4b6f      	ldr	r3, [pc, #444]	; (80040e0 <HAL_RCC_OscConfig+0x274>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a6e      	ldr	r2, [pc, #440]	; (80040e0 <HAL_RCC_OscConfig+0x274>)
 8003f26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f2a:	6013      	str	r3, [r2, #0]
 8003f2c:	4b6c      	ldr	r3, [pc, #432]	; (80040e0 <HAL_RCC_OscConfig+0x274>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a6b      	ldr	r2, [pc, #428]	; (80040e0 <HAL_RCC_OscConfig+0x274>)
 8003f32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d013      	beq.n	8003f68 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f40:	f7fd fb90 	bl	8001664 <HAL_GetTick>
 8003f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f46:	e008      	b.n	8003f5a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f48:	f7fd fb8c 	bl	8001664 <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	2b64      	cmp	r3, #100	; 0x64
 8003f54:	d901      	bls.n	8003f5a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e21f      	b.n	800439a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f5a:	4b61      	ldr	r3, [pc, #388]	; (80040e0 <HAL_RCC_OscConfig+0x274>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d0f0      	beq.n	8003f48 <HAL_RCC_OscConfig+0xdc>
 8003f66:	e014      	b.n	8003f92 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f68:	f7fd fb7c 	bl	8001664 <HAL_GetTick>
 8003f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f6e:	e008      	b.n	8003f82 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f70:	f7fd fb78 	bl	8001664 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	2b64      	cmp	r3, #100	; 0x64
 8003f7c:	d901      	bls.n	8003f82 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e20b      	b.n	800439a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f82:	4b57      	ldr	r3, [pc, #348]	; (80040e0 <HAL_RCC_OscConfig+0x274>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d1f0      	bne.n	8003f70 <HAL_RCC_OscConfig+0x104>
 8003f8e:	e000      	b.n	8003f92 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0302 	and.w	r3, r3, #2
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d06f      	beq.n	800407e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003f9e:	4b50      	ldr	r3, [pc, #320]	; (80040e0 <HAL_RCC_OscConfig+0x274>)
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f003 030c 	and.w	r3, r3, #12
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d017      	beq.n	8003fda <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003faa:	4b4d      	ldr	r3, [pc, #308]	; (80040e0 <HAL_RCC_OscConfig+0x274>)
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003fb2:	2b08      	cmp	r3, #8
 8003fb4:	d105      	bne.n	8003fc2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003fb6:	4b4a      	ldr	r3, [pc, #296]	; (80040e0 <HAL_RCC_OscConfig+0x274>)
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00b      	beq.n	8003fda <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fc2:	4b47      	ldr	r3, [pc, #284]	; (80040e0 <HAL_RCC_OscConfig+0x274>)
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003fca:	2b0c      	cmp	r3, #12
 8003fcc:	d11c      	bne.n	8004008 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fce:	4b44      	ldr	r3, [pc, #272]	; (80040e0 <HAL_RCC_OscConfig+0x274>)
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d116      	bne.n	8004008 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fda:	4b41      	ldr	r3, [pc, #260]	; (80040e0 <HAL_RCC_OscConfig+0x274>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0302 	and.w	r3, r3, #2
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d005      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x186>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d001      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e1d3      	b.n	800439a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ff2:	4b3b      	ldr	r3, [pc, #236]	; (80040e0 <HAL_RCC_OscConfig+0x274>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	00db      	lsls	r3, r3, #3
 8004000:	4937      	ldr	r1, [pc, #220]	; (80040e0 <HAL_RCC_OscConfig+0x274>)
 8004002:	4313      	orrs	r3, r2
 8004004:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004006:	e03a      	b.n	800407e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d020      	beq.n	8004052 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004010:	4b34      	ldr	r3, [pc, #208]	; (80040e4 <HAL_RCC_OscConfig+0x278>)
 8004012:	2201      	movs	r2, #1
 8004014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004016:	f7fd fb25 	bl	8001664 <HAL_GetTick>
 800401a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800401c:	e008      	b.n	8004030 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800401e:	f7fd fb21 	bl	8001664 <HAL_GetTick>
 8004022:	4602      	mov	r2, r0
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	2b02      	cmp	r3, #2
 800402a:	d901      	bls.n	8004030 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e1b4      	b.n	800439a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004030:	4b2b      	ldr	r3, [pc, #172]	; (80040e0 <HAL_RCC_OscConfig+0x274>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0302 	and.w	r3, r3, #2
 8004038:	2b00      	cmp	r3, #0
 800403a:	d0f0      	beq.n	800401e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800403c:	4b28      	ldr	r3, [pc, #160]	; (80040e0 <HAL_RCC_OscConfig+0x274>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	691b      	ldr	r3, [r3, #16]
 8004048:	00db      	lsls	r3, r3, #3
 800404a:	4925      	ldr	r1, [pc, #148]	; (80040e0 <HAL_RCC_OscConfig+0x274>)
 800404c:	4313      	orrs	r3, r2
 800404e:	600b      	str	r3, [r1, #0]
 8004050:	e015      	b.n	800407e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004052:	4b24      	ldr	r3, [pc, #144]	; (80040e4 <HAL_RCC_OscConfig+0x278>)
 8004054:	2200      	movs	r2, #0
 8004056:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004058:	f7fd fb04 	bl	8001664 <HAL_GetTick>
 800405c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800405e:	e008      	b.n	8004072 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004060:	f7fd fb00 	bl	8001664 <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	2b02      	cmp	r3, #2
 800406c:	d901      	bls.n	8004072 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e193      	b.n	800439a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004072:	4b1b      	ldr	r3, [pc, #108]	; (80040e0 <HAL_RCC_OscConfig+0x274>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	2b00      	cmp	r3, #0
 800407c:	d1f0      	bne.n	8004060 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0308 	and.w	r3, r3, #8
 8004086:	2b00      	cmp	r3, #0
 8004088:	d036      	beq.n	80040f8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	695b      	ldr	r3, [r3, #20]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d016      	beq.n	80040c0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004092:	4b15      	ldr	r3, [pc, #84]	; (80040e8 <HAL_RCC_OscConfig+0x27c>)
 8004094:	2201      	movs	r2, #1
 8004096:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004098:	f7fd fae4 	bl	8001664 <HAL_GetTick>
 800409c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800409e:	e008      	b.n	80040b2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040a0:	f7fd fae0 	bl	8001664 <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d901      	bls.n	80040b2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e173      	b.n	800439a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040b2:	4b0b      	ldr	r3, [pc, #44]	; (80040e0 <HAL_RCC_OscConfig+0x274>)
 80040b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040b6:	f003 0302 	and.w	r3, r3, #2
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d0f0      	beq.n	80040a0 <HAL_RCC_OscConfig+0x234>
 80040be:	e01b      	b.n	80040f8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040c0:	4b09      	ldr	r3, [pc, #36]	; (80040e8 <HAL_RCC_OscConfig+0x27c>)
 80040c2:	2200      	movs	r2, #0
 80040c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040c6:	f7fd facd 	bl	8001664 <HAL_GetTick>
 80040ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040cc:	e00e      	b.n	80040ec <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040ce:	f7fd fac9 	bl	8001664 <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d907      	bls.n	80040ec <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e15c      	b.n	800439a <HAL_RCC_OscConfig+0x52e>
 80040e0:	40023800 	.word	0x40023800
 80040e4:	42470000 	.word	0x42470000
 80040e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040ec:	4b8a      	ldr	r3, [pc, #552]	; (8004318 <HAL_RCC_OscConfig+0x4ac>)
 80040ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040f0:	f003 0302 	and.w	r3, r3, #2
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d1ea      	bne.n	80040ce <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0304 	and.w	r3, r3, #4
 8004100:	2b00      	cmp	r3, #0
 8004102:	f000 8097 	beq.w	8004234 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004106:	2300      	movs	r3, #0
 8004108:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800410a:	4b83      	ldr	r3, [pc, #524]	; (8004318 <HAL_RCC_OscConfig+0x4ac>)
 800410c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d10f      	bne.n	8004136 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004116:	2300      	movs	r3, #0
 8004118:	60bb      	str	r3, [r7, #8]
 800411a:	4b7f      	ldr	r3, [pc, #508]	; (8004318 <HAL_RCC_OscConfig+0x4ac>)
 800411c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411e:	4a7e      	ldr	r2, [pc, #504]	; (8004318 <HAL_RCC_OscConfig+0x4ac>)
 8004120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004124:	6413      	str	r3, [r2, #64]	; 0x40
 8004126:	4b7c      	ldr	r3, [pc, #496]	; (8004318 <HAL_RCC_OscConfig+0x4ac>)
 8004128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800412e:	60bb      	str	r3, [r7, #8]
 8004130:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004132:	2301      	movs	r3, #1
 8004134:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004136:	4b79      	ldr	r3, [pc, #484]	; (800431c <HAL_RCC_OscConfig+0x4b0>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800413e:	2b00      	cmp	r3, #0
 8004140:	d118      	bne.n	8004174 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004142:	4b76      	ldr	r3, [pc, #472]	; (800431c <HAL_RCC_OscConfig+0x4b0>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a75      	ldr	r2, [pc, #468]	; (800431c <HAL_RCC_OscConfig+0x4b0>)
 8004148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800414c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800414e:	f7fd fa89 	bl	8001664 <HAL_GetTick>
 8004152:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004154:	e008      	b.n	8004168 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004156:	f7fd fa85 	bl	8001664 <HAL_GetTick>
 800415a:	4602      	mov	r2, r0
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	2b02      	cmp	r3, #2
 8004162:	d901      	bls.n	8004168 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	e118      	b.n	800439a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004168:	4b6c      	ldr	r3, [pc, #432]	; (800431c <HAL_RCC_OscConfig+0x4b0>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004170:	2b00      	cmp	r3, #0
 8004172:	d0f0      	beq.n	8004156 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	2b01      	cmp	r3, #1
 800417a:	d106      	bne.n	800418a <HAL_RCC_OscConfig+0x31e>
 800417c:	4b66      	ldr	r3, [pc, #408]	; (8004318 <HAL_RCC_OscConfig+0x4ac>)
 800417e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004180:	4a65      	ldr	r2, [pc, #404]	; (8004318 <HAL_RCC_OscConfig+0x4ac>)
 8004182:	f043 0301 	orr.w	r3, r3, #1
 8004186:	6713      	str	r3, [r2, #112]	; 0x70
 8004188:	e01c      	b.n	80041c4 <HAL_RCC_OscConfig+0x358>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	2b05      	cmp	r3, #5
 8004190:	d10c      	bne.n	80041ac <HAL_RCC_OscConfig+0x340>
 8004192:	4b61      	ldr	r3, [pc, #388]	; (8004318 <HAL_RCC_OscConfig+0x4ac>)
 8004194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004196:	4a60      	ldr	r2, [pc, #384]	; (8004318 <HAL_RCC_OscConfig+0x4ac>)
 8004198:	f043 0304 	orr.w	r3, r3, #4
 800419c:	6713      	str	r3, [r2, #112]	; 0x70
 800419e:	4b5e      	ldr	r3, [pc, #376]	; (8004318 <HAL_RCC_OscConfig+0x4ac>)
 80041a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a2:	4a5d      	ldr	r2, [pc, #372]	; (8004318 <HAL_RCC_OscConfig+0x4ac>)
 80041a4:	f043 0301 	orr.w	r3, r3, #1
 80041a8:	6713      	str	r3, [r2, #112]	; 0x70
 80041aa:	e00b      	b.n	80041c4 <HAL_RCC_OscConfig+0x358>
 80041ac:	4b5a      	ldr	r3, [pc, #360]	; (8004318 <HAL_RCC_OscConfig+0x4ac>)
 80041ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041b0:	4a59      	ldr	r2, [pc, #356]	; (8004318 <HAL_RCC_OscConfig+0x4ac>)
 80041b2:	f023 0301 	bic.w	r3, r3, #1
 80041b6:	6713      	str	r3, [r2, #112]	; 0x70
 80041b8:	4b57      	ldr	r3, [pc, #348]	; (8004318 <HAL_RCC_OscConfig+0x4ac>)
 80041ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041bc:	4a56      	ldr	r2, [pc, #344]	; (8004318 <HAL_RCC_OscConfig+0x4ac>)
 80041be:	f023 0304 	bic.w	r3, r3, #4
 80041c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d015      	beq.n	80041f8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041cc:	f7fd fa4a 	bl	8001664 <HAL_GetTick>
 80041d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041d2:	e00a      	b.n	80041ea <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041d4:	f7fd fa46 	bl	8001664 <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	f241 3288 	movw	r2, #5000	; 0x1388
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d901      	bls.n	80041ea <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e0d7      	b.n	800439a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041ea:	4b4b      	ldr	r3, [pc, #300]	; (8004318 <HAL_RCC_OscConfig+0x4ac>)
 80041ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ee:	f003 0302 	and.w	r3, r3, #2
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d0ee      	beq.n	80041d4 <HAL_RCC_OscConfig+0x368>
 80041f6:	e014      	b.n	8004222 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041f8:	f7fd fa34 	bl	8001664 <HAL_GetTick>
 80041fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041fe:	e00a      	b.n	8004216 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004200:	f7fd fa30 	bl	8001664 <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	f241 3288 	movw	r2, #5000	; 0x1388
 800420e:	4293      	cmp	r3, r2
 8004210:	d901      	bls.n	8004216 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e0c1      	b.n	800439a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004216:	4b40      	ldr	r3, [pc, #256]	; (8004318 <HAL_RCC_OscConfig+0x4ac>)
 8004218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800421a:	f003 0302 	and.w	r3, r3, #2
 800421e:	2b00      	cmp	r3, #0
 8004220:	d1ee      	bne.n	8004200 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004222:	7dfb      	ldrb	r3, [r7, #23]
 8004224:	2b01      	cmp	r3, #1
 8004226:	d105      	bne.n	8004234 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004228:	4b3b      	ldr	r3, [pc, #236]	; (8004318 <HAL_RCC_OscConfig+0x4ac>)
 800422a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422c:	4a3a      	ldr	r2, [pc, #232]	; (8004318 <HAL_RCC_OscConfig+0x4ac>)
 800422e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004232:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	699b      	ldr	r3, [r3, #24]
 8004238:	2b00      	cmp	r3, #0
 800423a:	f000 80ad 	beq.w	8004398 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800423e:	4b36      	ldr	r3, [pc, #216]	; (8004318 <HAL_RCC_OscConfig+0x4ac>)
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	f003 030c 	and.w	r3, r3, #12
 8004246:	2b08      	cmp	r3, #8
 8004248:	d060      	beq.n	800430c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	699b      	ldr	r3, [r3, #24]
 800424e:	2b02      	cmp	r3, #2
 8004250:	d145      	bne.n	80042de <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004252:	4b33      	ldr	r3, [pc, #204]	; (8004320 <HAL_RCC_OscConfig+0x4b4>)
 8004254:	2200      	movs	r2, #0
 8004256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004258:	f7fd fa04 	bl	8001664 <HAL_GetTick>
 800425c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800425e:	e008      	b.n	8004272 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004260:	f7fd fa00 	bl	8001664 <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	2b02      	cmp	r3, #2
 800426c:	d901      	bls.n	8004272 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e093      	b.n	800439a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004272:	4b29      	ldr	r3, [pc, #164]	; (8004318 <HAL_RCC_OscConfig+0x4ac>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d1f0      	bne.n	8004260 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	69da      	ldr	r2, [r3, #28]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a1b      	ldr	r3, [r3, #32]
 8004286:	431a      	orrs	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428c:	019b      	lsls	r3, r3, #6
 800428e:	431a      	orrs	r2, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004294:	085b      	lsrs	r3, r3, #1
 8004296:	3b01      	subs	r3, #1
 8004298:	041b      	lsls	r3, r3, #16
 800429a:	431a      	orrs	r2, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a0:	061b      	lsls	r3, r3, #24
 80042a2:	431a      	orrs	r2, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a8:	071b      	lsls	r3, r3, #28
 80042aa:	491b      	ldr	r1, [pc, #108]	; (8004318 <HAL_RCC_OscConfig+0x4ac>)
 80042ac:	4313      	orrs	r3, r2
 80042ae:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042b0:	4b1b      	ldr	r3, [pc, #108]	; (8004320 <HAL_RCC_OscConfig+0x4b4>)
 80042b2:	2201      	movs	r2, #1
 80042b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b6:	f7fd f9d5 	bl	8001664 <HAL_GetTick>
 80042ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042bc:	e008      	b.n	80042d0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042be:	f7fd f9d1 	bl	8001664 <HAL_GetTick>
 80042c2:	4602      	mov	r2, r0
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d901      	bls.n	80042d0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80042cc:	2303      	movs	r3, #3
 80042ce:	e064      	b.n	800439a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042d0:	4b11      	ldr	r3, [pc, #68]	; (8004318 <HAL_RCC_OscConfig+0x4ac>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d0f0      	beq.n	80042be <HAL_RCC_OscConfig+0x452>
 80042dc:	e05c      	b.n	8004398 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042de:	4b10      	ldr	r3, [pc, #64]	; (8004320 <HAL_RCC_OscConfig+0x4b4>)
 80042e0:	2200      	movs	r2, #0
 80042e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042e4:	f7fd f9be 	bl	8001664 <HAL_GetTick>
 80042e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042ea:	e008      	b.n	80042fe <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042ec:	f7fd f9ba 	bl	8001664 <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d901      	bls.n	80042fe <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e04d      	b.n	800439a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042fe:	4b06      	ldr	r3, [pc, #24]	; (8004318 <HAL_RCC_OscConfig+0x4ac>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d1f0      	bne.n	80042ec <HAL_RCC_OscConfig+0x480>
 800430a:	e045      	b.n	8004398 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	699b      	ldr	r3, [r3, #24]
 8004310:	2b01      	cmp	r3, #1
 8004312:	d107      	bne.n	8004324 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e040      	b.n	800439a <HAL_RCC_OscConfig+0x52e>
 8004318:	40023800 	.word	0x40023800
 800431c:	40007000 	.word	0x40007000
 8004320:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004324:	4b1f      	ldr	r3, [pc, #124]	; (80043a4 <HAL_RCC_OscConfig+0x538>)
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	699b      	ldr	r3, [r3, #24]
 800432e:	2b01      	cmp	r3, #1
 8004330:	d030      	beq.n	8004394 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800433c:	429a      	cmp	r2, r3
 800433e:	d129      	bne.n	8004394 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800434a:	429a      	cmp	r2, r3
 800434c:	d122      	bne.n	8004394 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800434e:	68fa      	ldr	r2, [r7, #12]
 8004350:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004354:	4013      	ands	r3, r2
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800435a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800435c:	4293      	cmp	r3, r2
 800435e:	d119      	bne.n	8004394 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800436a:	085b      	lsrs	r3, r3, #1
 800436c:	3b01      	subs	r3, #1
 800436e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004370:	429a      	cmp	r2, r3
 8004372:	d10f      	bne.n	8004394 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800437e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004380:	429a      	cmp	r2, r3
 8004382:	d107      	bne.n	8004394 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004390:	429a      	cmp	r2, r3
 8004392:	d001      	beq.n	8004398 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e000      	b.n	800439a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	3718      	adds	r7, #24
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	40023800 	.word	0x40023800

080043a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d101      	bne.n	80043ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e041      	b.n	800443e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d106      	bne.n	80043d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f7fd f85c 	bl	800148c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2202      	movs	r2, #2
 80043d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	3304      	adds	r3, #4
 80043e4:	4619      	mov	r1, r3
 80043e6:	4610      	mov	r0, r2
 80043e8:	f000 f8f0 	bl	80045cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3708      	adds	r7, #8
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
	...

08004448 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b086      	sub	sp, #24
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004454:	2300      	movs	r3, #0
 8004456:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800445e:	2b01      	cmp	r3, #1
 8004460:	d101      	bne.n	8004466 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004462:	2302      	movs	r3, #2
 8004464:	e0ae      	b.n	80045c4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2201      	movs	r2, #1
 800446a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2b0c      	cmp	r3, #12
 8004472:	f200 809f 	bhi.w	80045b4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004476:	a201      	add	r2, pc, #4	; (adr r2, 800447c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800447c:	080044b1 	.word	0x080044b1
 8004480:	080045b5 	.word	0x080045b5
 8004484:	080045b5 	.word	0x080045b5
 8004488:	080045b5 	.word	0x080045b5
 800448c:	080044f1 	.word	0x080044f1
 8004490:	080045b5 	.word	0x080045b5
 8004494:	080045b5 	.word	0x080045b5
 8004498:	080045b5 	.word	0x080045b5
 800449c:	08004533 	.word	0x08004533
 80044a0:	080045b5 	.word	0x080045b5
 80044a4:	080045b5 	.word	0x080045b5
 80044a8:	080045b5 	.word	0x080045b5
 80044ac:	08004573 	.word	0x08004573
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	68b9      	ldr	r1, [r7, #8]
 80044b6:	4618      	mov	r0, r3
 80044b8:	f000 f928 	bl	800470c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	699a      	ldr	r2, [r3, #24]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f042 0208 	orr.w	r2, r2, #8
 80044ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	699a      	ldr	r2, [r3, #24]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f022 0204 	bic.w	r2, r2, #4
 80044da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	6999      	ldr	r1, [r3, #24]
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	691a      	ldr	r2, [r3, #16]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	430a      	orrs	r2, r1
 80044ec:	619a      	str	r2, [r3, #24]
      break;
 80044ee:	e064      	b.n	80045ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	68b9      	ldr	r1, [r7, #8]
 80044f6:	4618      	mov	r0, r3
 80044f8:	f000 f978 	bl	80047ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	699a      	ldr	r2, [r3, #24]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800450a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	699a      	ldr	r2, [r3, #24]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800451a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	6999      	ldr	r1, [r3, #24]
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	021a      	lsls	r2, r3, #8
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	430a      	orrs	r2, r1
 800452e:	619a      	str	r2, [r3, #24]
      break;
 8004530:	e043      	b.n	80045ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68b9      	ldr	r1, [r7, #8]
 8004538:	4618      	mov	r0, r3
 800453a:	f000 f9cd 	bl	80048d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	69da      	ldr	r2, [r3, #28]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f042 0208 	orr.w	r2, r2, #8
 800454c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	69da      	ldr	r2, [r3, #28]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f022 0204 	bic.w	r2, r2, #4
 800455c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	69d9      	ldr	r1, [r3, #28]
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	691a      	ldr	r2, [r3, #16]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	430a      	orrs	r2, r1
 800456e:	61da      	str	r2, [r3, #28]
      break;
 8004570:	e023      	b.n	80045ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	68b9      	ldr	r1, [r7, #8]
 8004578:	4618      	mov	r0, r3
 800457a:	f000 fa21 	bl	80049c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	69da      	ldr	r2, [r3, #28]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800458c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	69da      	ldr	r2, [r3, #28]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800459c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	69d9      	ldr	r1, [r3, #28]
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	691b      	ldr	r3, [r3, #16]
 80045a8:	021a      	lsls	r2, r3, #8
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	430a      	orrs	r2, r1
 80045b0:	61da      	str	r2, [r3, #28]
      break;
 80045b2:	e002      	b.n	80045ba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	75fb      	strb	r3, [r7, #23]
      break;
 80045b8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2200      	movs	r2, #0
 80045be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80045c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3718      	adds	r7, #24
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b085      	sub	sp, #20
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	4a40      	ldr	r2, [pc, #256]	; (80046e0 <TIM_Base_SetConfig+0x114>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d013      	beq.n	800460c <TIM_Base_SetConfig+0x40>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045ea:	d00f      	beq.n	800460c <TIM_Base_SetConfig+0x40>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	4a3d      	ldr	r2, [pc, #244]	; (80046e4 <TIM_Base_SetConfig+0x118>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d00b      	beq.n	800460c <TIM_Base_SetConfig+0x40>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	4a3c      	ldr	r2, [pc, #240]	; (80046e8 <TIM_Base_SetConfig+0x11c>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d007      	beq.n	800460c <TIM_Base_SetConfig+0x40>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	4a3b      	ldr	r2, [pc, #236]	; (80046ec <TIM_Base_SetConfig+0x120>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d003      	beq.n	800460c <TIM_Base_SetConfig+0x40>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4a3a      	ldr	r2, [pc, #232]	; (80046f0 <TIM_Base_SetConfig+0x124>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d108      	bne.n	800461e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004612:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	68fa      	ldr	r2, [r7, #12]
 800461a:	4313      	orrs	r3, r2
 800461c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a2f      	ldr	r2, [pc, #188]	; (80046e0 <TIM_Base_SetConfig+0x114>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d02b      	beq.n	800467e <TIM_Base_SetConfig+0xb2>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800462c:	d027      	beq.n	800467e <TIM_Base_SetConfig+0xb2>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a2c      	ldr	r2, [pc, #176]	; (80046e4 <TIM_Base_SetConfig+0x118>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d023      	beq.n	800467e <TIM_Base_SetConfig+0xb2>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a2b      	ldr	r2, [pc, #172]	; (80046e8 <TIM_Base_SetConfig+0x11c>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d01f      	beq.n	800467e <TIM_Base_SetConfig+0xb2>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a2a      	ldr	r2, [pc, #168]	; (80046ec <TIM_Base_SetConfig+0x120>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d01b      	beq.n	800467e <TIM_Base_SetConfig+0xb2>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a29      	ldr	r2, [pc, #164]	; (80046f0 <TIM_Base_SetConfig+0x124>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d017      	beq.n	800467e <TIM_Base_SetConfig+0xb2>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a28      	ldr	r2, [pc, #160]	; (80046f4 <TIM_Base_SetConfig+0x128>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d013      	beq.n	800467e <TIM_Base_SetConfig+0xb2>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a27      	ldr	r2, [pc, #156]	; (80046f8 <TIM_Base_SetConfig+0x12c>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d00f      	beq.n	800467e <TIM_Base_SetConfig+0xb2>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a26      	ldr	r2, [pc, #152]	; (80046fc <TIM_Base_SetConfig+0x130>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d00b      	beq.n	800467e <TIM_Base_SetConfig+0xb2>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a25      	ldr	r2, [pc, #148]	; (8004700 <TIM_Base_SetConfig+0x134>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d007      	beq.n	800467e <TIM_Base_SetConfig+0xb2>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4a24      	ldr	r2, [pc, #144]	; (8004704 <TIM_Base_SetConfig+0x138>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d003      	beq.n	800467e <TIM_Base_SetConfig+0xb2>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a23      	ldr	r2, [pc, #140]	; (8004708 <TIM_Base_SetConfig+0x13c>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d108      	bne.n	8004690 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004684:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	68fa      	ldr	r2, [r7, #12]
 800468c:	4313      	orrs	r3, r2
 800468e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	695b      	ldr	r3, [r3, #20]
 800469a:	4313      	orrs	r3, r2
 800469c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	68fa      	ldr	r2, [r7, #12]
 80046a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	689a      	ldr	r2, [r3, #8]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4a0a      	ldr	r2, [pc, #40]	; (80046e0 <TIM_Base_SetConfig+0x114>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d003      	beq.n	80046c4 <TIM_Base_SetConfig+0xf8>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4a0c      	ldr	r2, [pc, #48]	; (80046f0 <TIM_Base_SetConfig+0x124>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d103      	bne.n	80046cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	691a      	ldr	r2, [r3, #16]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	615a      	str	r2, [r3, #20]
}
 80046d2:	bf00      	nop
 80046d4:	3714      	adds	r7, #20
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr
 80046de:	bf00      	nop
 80046e0:	40010000 	.word	0x40010000
 80046e4:	40000400 	.word	0x40000400
 80046e8:	40000800 	.word	0x40000800
 80046ec:	40000c00 	.word	0x40000c00
 80046f0:	40010400 	.word	0x40010400
 80046f4:	40014000 	.word	0x40014000
 80046f8:	40014400 	.word	0x40014400
 80046fc:	40014800 	.word	0x40014800
 8004700:	40001800 	.word	0x40001800
 8004704:	40001c00 	.word	0x40001c00
 8004708:	40002000 	.word	0x40002000

0800470c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800470c:	b480      	push	{r7}
 800470e:	b087      	sub	sp, #28
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a1b      	ldr	r3, [r3, #32]
 800471a:	f023 0201 	bic.w	r2, r3, #1
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a1b      	ldr	r3, [r3, #32]
 8004726:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	699b      	ldr	r3, [r3, #24]
 8004732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800473a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f023 0303 	bic.w	r3, r3, #3
 8004742:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	4313      	orrs	r3, r2
 800474c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	f023 0302 	bic.w	r3, r3, #2
 8004754:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	697a      	ldr	r2, [r7, #20]
 800475c:	4313      	orrs	r3, r2
 800475e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4a20      	ldr	r2, [pc, #128]	; (80047e4 <TIM_OC1_SetConfig+0xd8>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d003      	beq.n	8004770 <TIM_OC1_SetConfig+0x64>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4a1f      	ldr	r2, [pc, #124]	; (80047e8 <TIM_OC1_SetConfig+0xdc>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d10c      	bne.n	800478a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	f023 0308 	bic.w	r3, r3, #8
 8004776:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	697a      	ldr	r2, [r7, #20]
 800477e:	4313      	orrs	r3, r2
 8004780:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	f023 0304 	bic.w	r3, r3, #4
 8004788:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4a15      	ldr	r2, [pc, #84]	; (80047e4 <TIM_OC1_SetConfig+0xd8>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d003      	beq.n	800479a <TIM_OC1_SetConfig+0x8e>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a14      	ldr	r2, [pc, #80]	; (80047e8 <TIM_OC1_SetConfig+0xdc>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d111      	bne.n	80047be <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80047a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	695b      	ldr	r3, [r3, #20]
 80047ae:	693a      	ldr	r2, [r7, #16]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	699b      	ldr	r3, [r3, #24]
 80047b8:	693a      	ldr	r2, [r7, #16]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	693a      	ldr	r2, [r7, #16]
 80047c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	68fa      	ldr	r2, [r7, #12]
 80047c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	685a      	ldr	r2, [r3, #4]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	697a      	ldr	r2, [r7, #20]
 80047d6:	621a      	str	r2, [r3, #32]
}
 80047d8:	bf00      	nop
 80047da:	371c      	adds	r7, #28
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr
 80047e4:	40010000 	.word	0x40010000
 80047e8:	40010400 	.word	0x40010400

080047ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b087      	sub	sp, #28
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a1b      	ldr	r3, [r3, #32]
 80047fa:	f023 0210 	bic.w	r2, r3, #16
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a1b      	ldr	r3, [r3, #32]
 8004806:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	699b      	ldr	r3, [r3, #24]
 8004812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800481a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004822:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	021b      	lsls	r3, r3, #8
 800482a:	68fa      	ldr	r2, [r7, #12]
 800482c:	4313      	orrs	r3, r2
 800482e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	f023 0320 	bic.w	r3, r3, #32
 8004836:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	011b      	lsls	r3, r3, #4
 800483e:	697a      	ldr	r2, [r7, #20]
 8004840:	4313      	orrs	r3, r2
 8004842:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	4a22      	ldr	r2, [pc, #136]	; (80048d0 <TIM_OC2_SetConfig+0xe4>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d003      	beq.n	8004854 <TIM_OC2_SetConfig+0x68>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	4a21      	ldr	r2, [pc, #132]	; (80048d4 <TIM_OC2_SetConfig+0xe8>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d10d      	bne.n	8004870 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800485a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	011b      	lsls	r3, r3, #4
 8004862:	697a      	ldr	r2, [r7, #20]
 8004864:	4313      	orrs	r3, r2
 8004866:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800486e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a17      	ldr	r2, [pc, #92]	; (80048d0 <TIM_OC2_SetConfig+0xe4>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d003      	beq.n	8004880 <TIM_OC2_SetConfig+0x94>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4a16      	ldr	r2, [pc, #88]	; (80048d4 <TIM_OC2_SetConfig+0xe8>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d113      	bne.n	80048a8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004886:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800488e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	695b      	ldr	r3, [r3, #20]
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	693a      	ldr	r2, [r7, #16]
 8004898:	4313      	orrs	r3, r2
 800489a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	699b      	ldr	r3, [r3, #24]
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	693a      	ldr	r2, [r7, #16]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	693a      	ldr	r2, [r7, #16]
 80048ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	68fa      	ldr	r2, [r7, #12]
 80048b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	685a      	ldr	r2, [r3, #4]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	697a      	ldr	r2, [r7, #20]
 80048c0:	621a      	str	r2, [r3, #32]
}
 80048c2:	bf00      	nop
 80048c4:	371c      	adds	r7, #28
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr
 80048ce:	bf00      	nop
 80048d0:	40010000 	.word	0x40010000
 80048d4:	40010400 	.word	0x40010400

080048d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048d8:	b480      	push	{r7}
 80048da:	b087      	sub	sp, #28
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a1b      	ldr	r3, [r3, #32]
 80048e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a1b      	ldr	r3, [r3, #32]
 80048f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	69db      	ldr	r3, [r3, #28]
 80048fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004906:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f023 0303 	bic.w	r3, r3, #3
 800490e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	68fa      	ldr	r2, [r7, #12]
 8004916:	4313      	orrs	r3, r2
 8004918:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004920:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	021b      	lsls	r3, r3, #8
 8004928:	697a      	ldr	r2, [r7, #20]
 800492a:	4313      	orrs	r3, r2
 800492c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a21      	ldr	r2, [pc, #132]	; (80049b8 <TIM_OC3_SetConfig+0xe0>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d003      	beq.n	800493e <TIM_OC3_SetConfig+0x66>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a20      	ldr	r2, [pc, #128]	; (80049bc <TIM_OC3_SetConfig+0xe4>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d10d      	bne.n	800495a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004944:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	021b      	lsls	r3, r3, #8
 800494c:	697a      	ldr	r2, [r7, #20]
 800494e:	4313      	orrs	r3, r2
 8004950:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004958:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a16      	ldr	r2, [pc, #88]	; (80049b8 <TIM_OC3_SetConfig+0xe0>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d003      	beq.n	800496a <TIM_OC3_SetConfig+0x92>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a15      	ldr	r2, [pc, #84]	; (80049bc <TIM_OC3_SetConfig+0xe4>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d113      	bne.n	8004992 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004970:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004978:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	695b      	ldr	r3, [r3, #20]
 800497e:	011b      	lsls	r3, r3, #4
 8004980:	693a      	ldr	r2, [r7, #16]
 8004982:	4313      	orrs	r3, r2
 8004984:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	699b      	ldr	r3, [r3, #24]
 800498a:	011b      	lsls	r3, r3, #4
 800498c:	693a      	ldr	r2, [r7, #16]
 800498e:	4313      	orrs	r3, r2
 8004990:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	693a      	ldr	r2, [r7, #16]
 8004996:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	68fa      	ldr	r2, [r7, #12]
 800499c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	685a      	ldr	r2, [r3, #4]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	697a      	ldr	r2, [r7, #20]
 80049aa:	621a      	str	r2, [r3, #32]
}
 80049ac:	bf00      	nop
 80049ae:	371c      	adds	r7, #28
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr
 80049b8:	40010000 	.word	0x40010000
 80049bc:	40010400 	.word	0x40010400

080049c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b087      	sub	sp, #28
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a1b      	ldr	r3, [r3, #32]
 80049ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a1b      	ldr	r3, [r3, #32]
 80049da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	69db      	ldr	r3, [r3, #28]
 80049e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	021b      	lsls	r3, r3, #8
 80049fe:	68fa      	ldr	r2, [r7, #12]
 8004a00:	4313      	orrs	r3, r2
 8004a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	031b      	lsls	r3, r3, #12
 8004a12:	693a      	ldr	r2, [r7, #16]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4a12      	ldr	r2, [pc, #72]	; (8004a64 <TIM_OC4_SetConfig+0xa4>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d003      	beq.n	8004a28 <TIM_OC4_SetConfig+0x68>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4a11      	ldr	r2, [pc, #68]	; (8004a68 <TIM_OC4_SetConfig+0xa8>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d109      	bne.n	8004a3c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	695b      	ldr	r3, [r3, #20]
 8004a34:	019b      	lsls	r3, r3, #6
 8004a36:	697a      	ldr	r2, [r7, #20]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	697a      	ldr	r2, [r7, #20]
 8004a40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	68fa      	ldr	r2, [r7, #12]
 8004a46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	685a      	ldr	r2, [r3, #4]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	693a      	ldr	r2, [r7, #16]
 8004a54:	621a      	str	r2, [r3, #32]
}
 8004a56:	bf00      	nop
 8004a58:	371c      	adds	r7, #28
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	40010000 	.word	0x40010000
 8004a68:	40010400 	.word	0x40010400

08004a6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b085      	sub	sp, #20
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d101      	bne.n	8004a84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a80:	2302      	movs	r3, #2
 8004a82:	e05a      	b.n	8004b3a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2202      	movs	r2, #2
 8004a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aaa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68fa      	ldr	r2, [r7, #12]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	68fa      	ldr	r2, [r7, #12]
 8004abc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a21      	ldr	r2, [pc, #132]	; (8004b48 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d022      	beq.n	8004b0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ad0:	d01d      	beq.n	8004b0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a1d      	ldr	r2, [pc, #116]	; (8004b4c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d018      	beq.n	8004b0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a1b      	ldr	r2, [pc, #108]	; (8004b50 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d013      	beq.n	8004b0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a1a      	ldr	r2, [pc, #104]	; (8004b54 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d00e      	beq.n	8004b0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a18      	ldr	r2, [pc, #96]	; (8004b58 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d009      	beq.n	8004b0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a17      	ldr	r2, [pc, #92]	; (8004b5c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d004      	beq.n	8004b0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a15      	ldr	r2, [pc, #84]	; (8004b60 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d10c      	bne.n	8004b28 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	68ba      	ldr	r2, [r7, #8]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68ba      	ldr	r2, [r7, #8]
 8004b26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3714      	adds	r7, #20
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr
 8004b46:	bf00      	nop
 8004b48:	40010000 	.word	0x40010000
 8004b4c:	40000400 	.word	0x40000400
 8004b50:	40000800 	.word	0x40000800
 8004b54:	40000c00 	.word	0x40000c00
 8004b58:	40010400 	.word	0x40010400
 8004b5c:	40014000 	.word	0x40014000
 8004b60:	40001800 	.word	0x40001800

08004b64 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b085      	sub	sp, #20
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d101      	bne.n	8004b80 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004b7c:	2302      	movs	r3, #2
 8004b7e:	e03d      	b.n	8004bfc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	695b      	ldr	r3, [r3, #20]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	69db      	ldr	r3, [r3, #28]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	68fa      	ldr	r2, [r7, #12]
 8004bf0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bfa:	2300      	movs	r3, #0
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3714      	adds	r7, #20
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c08:	b084      	sub	sp, #16
 8004c0a:	b580      	push	{r7, lr}
 8004c0c:	b084      	sub	sp, #16
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	6078      	str	r0, [r7, #4]
 8004c12:	f107 001c 	add.w	r0, r7, #28
 8004c16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d122      	bne.n	8004c66 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c24:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004c34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004c48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d105      	bne.n	8004c5a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f001 fbe8 	bl	8006430 <USB_CoreReset>
 8004c60:	4603      	mov	r3, r0
 8004c62:	73fb      	strb	r3, [r7, #15]
 8004c64:	e01a      	b.n	8004c9c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f001 fbdc 	bl	8006430 <USB_CoreReset>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004c7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d106      	bne.n	8004c90 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c86:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	639a      	str	r2, [r3, #56]	; 0x38
 8004c8e:	e005      	b.n	8004c9c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c94:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d10b      	bne.n	8004cba <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	f043 0206 	orr.w	r2, r3, #6
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	f043 0220 	orr.w	r2, r3, #32
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3710      	adds	r7, #16
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004cc6:	b004      	add	sp, #16
 8004cc8:	4770      	bx	lr
	...

08004ccc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b087      	sub	sp, #28
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	4613      	mov	r3, r2
 8004cd8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004cda:	79fb      	ldrb	r3, [r7, #7]
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	d165      	bne.n	8004dac <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	4a41      	ldr	r2, [pc, #260]	; (8004de8 <USB_SetTurnaroundTime+0x11c>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d906      	bls.n	8004cf6 <USB_SetTurnaroundTime+0x2a>
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	4a40      	ldr	r2, [pc, #256]	; (8004dec <USB_SetTurnaroundTime+0x120>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d202      	bcs.n	8004cf6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004cf0:	230f      	movs	r3, #15
 8004cf2:	617b      	str	r3, [r7, #20]
 8004cf4:	e062      	b.n	8004dbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	4a3c      	ldr	r2, [pc, #240]	; (8004dec <USB_SetTurnaroundTime+0x120>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d306      	bcc.n	8004d0c <USB_SetTurnaroundTime+0x40>
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	4a3b      	ldr	r2, [pc, #236]	; (8004df0 <USB_SetTurnaroundTime+0x124>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d202      	bcs.n	8004d0c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004d06:	230e      	movs	r3, #14
 8004d08:	617b      	str	r3, [r7, #20]
 8004d0a:	e057      	b.n	8004dbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	4a38      	ldr	r2, [pc, #224]	; (8004df0 <USB_SetTurnaroundTime+0x124>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d306      	bcc.n	8004d22 <USB_SetTurnaroundTime+0x56>
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	4a37      	ldr	r2, [pc, #220]	; (8004df4 <USB_SetTurnaroundTime+0x128>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d202      	bcs.n	8004d22 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004d1c:	230d      	movs	r3, #13
 8004d1e:	617b      	str	r3, [r7, #20]
 8004d20:	e04c      	b.n	8004dbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	4a33      	ldr	r2, [pc, #204]	; (8004df4 <USB_SetTurnaroundTime+0x128>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d306      	bcc.n	8004d38 <USB_SetTurnaroundTime+0x6c>
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	4a32      	ldr	r2, [pc, #200]	; (8004df8 <USB_SetTurnaroundTime+0x12c>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d802      	bhi.n	8004d38 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004d32:	230c      	movs	r3, #12
 8004d34:	617b      	str	r3, [r7, #20]
 8004d36:	e041      	b.n	8004dbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	4a2f      	ldr	r2, [pc, #188]	; (8004df8 <USB_SetTurnaroundTime+0x12c>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d906      	bls.n	8004d4e <USB_SetTurnaroundTime+0x82>
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	4a2e      	ldr	r2, [pc, #184]	; (8004dfc <USB_SetTurnaroundTime+0x130>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d802      	bhi.n	8004d4e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004d48:	230b      	movs	r3, #11
 8004d4a:	617b      	str	r3, [r7, #20]
 8004d4c:	e036      	b.n	8004dbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	4a2a      	ldr	r2, [pc, #168]	; (8004dfc <USB_SetTurnaroundTime+0x130>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d906      	bls.n	8004d64 <USB_SetTurnaroundTime+0x98>
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	4a29      	ldr	r2, [pc, #164]	; (8004e00 <USB_SetTurnaroundTime+0x134>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d802      	bhi.n	8004d64 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004d5e:	230a      	movs	r3, #10
 8004d60:	617b      	str	r3, [r7, #20]
 8004d62:	e02b      	b.n	8004dbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	4a26      	ldr	r2, [pc, #152]	; (8004e00 <USB_SetTurnaroundTime+0x134>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d906      	bls.n	8004d7a <USB_SetTurnaroundTime+0xae>
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	4a25      	ldr	r2, [pc, #148]	; (8004e04 <USB_SetTurnaroundTime+0x138>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d202      	bcs.n	8004d7a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004d74:	2309      	movs	r3, #9
 8004d76:	617b      	str	r3, [r7, #20]
 8004d78:	e020      	b.n	8004dbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	4a21      	ldr	r2, [pc, #132]	; (8004e04 <USB_SetTurnaroundTime+0x138>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d306      	bcc.n	8004d90 <USB_SetTurnaroundTime+0xc4>
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	4a20      	ldr	r2, [pc, #128]	; (8004e08 <USB_SetTurnaroundTime+0x13c>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d802      	bhi.n	8004d90 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004d8a:	2308      	movs	r3, #8
 8004d8c:	617b      	str	r3, [r7, #20]
 8004d8e:	e015      	b.n	8004dbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	4a1d      	ldr	r2, [pc, #116]	; (8004e08 <USB_SetTurnaroundTime+0x13c>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d906      	bls.n	8004da6 <USB_SetTurnaroundTime+0xda>
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	4a1c      	ldr	r2, [pc, #112]	; (8004e0c <USB_SetTurnaroundTime+0x140>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d202      	bcs.n	8004da6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004da0:	2307      	movs	r3, #7
 8004da2:	617b      	str	r3, [r7, #20]
 8004da4:	e00a      	b.n	8004dbc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004da6:	2306      	movs	r3, #6
 8004da8:	617b      	str	r3, [r7, #20]
 8004daa:	e007      	b.n	8004dbc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004dac:	79fb      	ldrb	r3, [r7, #7]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d102      	bne.n	8004db8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004db2:	2309      	movs	r3, #9
 8004db4:	617b      	str	r3, [r7, #20]
 8004db6:	e001      	b.n	8004dbc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004db8:	2309      	movs	r3, #9
 8004dba:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	68da      	ldr	r2, [r3, #12]
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	029b      	lsls	r3, r3, #10
 8004dd0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004dd4:	431a      	orrs	r2, r3
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004dda:	2300      	movs	r3, #0
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	371c      	adds	r7, #28
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr
 8004de8:	00d8acbf 	.word	0x00d8acbf
 8004dec:	00e4e1c0 	.word	0x00e4e1c0
 8004df0:	00f42400 	.word	0x00f42400
 8004df4:	01067380 	.word	0x01067380
 8004df8:	011a499f 	.word	0x011a499f
 8004dfc:	01312cff 	.word	0x01312cff
 8004e00:	014ca43f 	.word	0x014ca43f
 8004e04:	016e3600 	.word	0x016e3600
 8004e08:	01a6ab1f 	.word	0x01a6ab1f
 8004e0c:	01e84800 	.word	0x01e84800

08004e10 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b083      	sub	sp, #12
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	f043 0201 	orr.w	r2, r3, #1
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	370c      	adds	r7, #12
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr

08004e32 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e32:	b480      	push	{r7}
 8004e34:	b083      	sub	sp, #12
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	f023 0201 	bic.w	r2, r3, #1
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e46:	2300      	movs	r3, #0
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	370c      	adds	r7, #12
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr

08004e54 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	460b      	mov	r3, r1
 8004e5e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004e60:	2300      	movs	r3, #0
 8004e62:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004e70:	78fb      	ldrb	r3, [r7, #3]
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d115      	bne.n	8004ea2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004e82:	2001      	movs	r0, #1
 8004e84:	f7fc fbfa 	bl	800167c <HAL_Delay>
      ms++;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f001 fa3f 	bl	8006312 <USB_GetMode>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d01e      	beq.n	8004ed8 <USB_SetCurrentMode+0x84>
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2b31      	cmp	r3, #49	; 0x31
 8004e9e:	d9f0      	bls.n	8004e82 <USB_SetCurrentMode+0x2e>
 8004ea0:	e01a      	b.n	8004ed8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004ea2:	78fb      	ldrb	r3, [r7, #3]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d115      	bne.n	8004ed4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004eb4:	2001      	movs	r0, #1
 8004eb6:	f7fc fbe1 	bl	800167c <HAL_Delay>
      ms++;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	3301      	adds	r3, #1
 8004ebe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f001 fa26 	bl	8006312 <USB_GetMode>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d005      	beq.n	8004ed8 <USB_SetCurrentMode+0x84>
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2b31      	cmp	r3, #49	; 0x31
 8004ed0:	d9f0      	bls.n	8004eb4 <USB_SetCurrentMode+0x60>
 8004ed2:	e001      	b.n	8004ed8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e005      	b.n	8004ee4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2b32      	cmp	r3, #50	; 0x32
 8004edc:	d101      	bne.n	8004ee2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e000      	b.n	8004ee4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004ee2:	2300      	movs	r3, #0
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3710      	adds	r7, #16
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}

08004eec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004eec:	b084      	sub	sp, #16
 8004eee:	b580      	push	{r7, lr}
 8004ef0:	b086      	sub	sp, #24
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
 8004ef6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004efa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004efe:	2300      	movs	r3, #0
 8004f00:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004f06:	2300      	movs	r3, #0
 8004f08:	613b      	str	r3, [r7, #16]
 8004f0a:	e009      	b.n	8004f20 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	3340      	adds	r3, #64	; 0x40
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	4413      	add	r3, r2
 8004f16:	2200      	movs	r2, #0
 8004f18:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	3301      	adds	r3, #1
 8004f1e:	613b      	str	r3, [r7, #16]
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	2b0e      	cmp	r3, #14
 8004f24:	d9f2      	bls.n	8004f0c <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004f26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d11c      	bne.n	8004f66 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	68fa      	ldr	r2, [r7, #12]
 8004f36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f3a:	f043 0302 	orr.w	r3, r3, #2
 8004f3e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f44:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	601a      	str	r2, [r3, #0]
 8004f64:	e005      	b.n	8004f72 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f6a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004f78:	461a      	mov	r2, r3
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f84:	4619      	mov	r1, r3
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	680b      	ldr	r3, [r1, #0]
 8004f90:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d10c      	bne.n	8004fb2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d104      	bne.n	8004fa8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004f9e:	2100      	movs	r1, #0
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f000 f965 	bl	8005270 <USB_SetDevSpeed>
 8004fa6:	e008      	b.n	8004fba <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004fa8:	2101      	movs	r1, #1
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 f960 	bl	8005270 <USB_SetDevSpeed>
 8004fb0:	e003      	b.n	8004fba <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004fb2:	2103      	movs	r1, #3
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f000 f95b 	bl	8005270 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004fba:	2110      	movs	r1, #16
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f000 f8f3 	bl	80051a8 <USB_FlushTxFifo>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d001      	beq.n	8004fcc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f000 f91f 	bl	8005210 <USB_FlushRxFifo>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d001      	beq.n	8004fdc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fee:	461a      	mov	r2, r3
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005000:	2300      	movs	r3, #0
 8005002:	613b      	str	r3, [r7, #16]
 8005004:	e043      	b.n	800508e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	015a      	lsls	r2, r3, #5
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	4413      	add	r3, r2
 800500e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005018:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800501c:	d118      	bne.n	8005050 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d10a      	bne.n	800503a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	015a      	lsls	r2, r3, #5
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	4413      	add	r3, r2
 800502c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005030:	461a      	mov	r2, r3
 8005032:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005036:	6013      	str	r3, [r2, #0]
 8005038:	e013      	b.n	8005062 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	015a      	lsls	r2, r3, #5
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	4413      	add	r3, r2
 8005042:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005046:	461a      	mov	r2, r3
 8005048:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800504c:	6013      	str	r3, [r2, #0]
 800504e:	e008      	b.n	8005062 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	015a      	lsls	r2, r3, #5
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	4413      	add	r3, r2
 8005058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800505c:	461a      	mov	r2, r3
 800505e:	2300      	movs	r3, #0
 8005060:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	015a      	lsls	r2, r3, #5
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	4413      	add	r3, r2
 800506a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800506e:	461a      	mov	r2, r3
 8005070:	2300      	movs	r3, #0
 8005072:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	015a      	lsls	r2, r3, #5
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	4413      	add	r3, r2
 800507c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005080:	461a      	mov	r2, r3
 8005082:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005086:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	3301      	adds	r3, #1
 800508c:	613b      	str	r3, [r7, #16]
 800508e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005090:	693a      	ldr	r2, [r7, #16]
 8005092:	429a      	cmp	r2, r3
 8005094:	d3b7      	bcc.n	8005006 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005096:	2300      	movs	r3, #0
 8005098:	613b      	str	r3, [r7, #16]
 800509a:	e043      	b.n	8005124 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	015a      	lsls	r2, r3, #5
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	4413      	add	r3, r2
 80050a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050b2:	d118      	bne.n	80050e6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d10a      	bne.n	80050d0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	015a      	lsls	r2, r3, #5
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	4413      	add	r3, r2
 80050c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050c6:	461a      	mov	r2, r3
 80050c8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80050cc:	6013      	str	r3, [r2, #0]
 80050ce:	e013      	b.n	80050f8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	015a      	lsls	r2, r3, #5
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	4413      	add	r3, r2
 80050d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050dc:	461a      	mov	r2, r3
 80050de:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80050e2:	6013      	str	r3, [r2, #0]
 80050e4:	e008      	b.n	80050f8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	015a      	lsls	r2, r3, #5
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	4413      	add	r3, r2
 80050ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050f2:	461a      	mov	r2, r3
 80050f4:	2300      	movs	r3, #0
 80050f6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	015a      	lsls	r2, r3, #5
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	4413      	add	r3, r2
 8005100:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005104:	461a      	mov	r2, r3
 8005106:	2300      	movs	r3, #0
 8005108:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	015a      	lsls	r2, r3, #5
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	4413      	add	r3, r2
 8005112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005116:	461a      	mov	r2, r3
 8005118:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800511c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	3301      	adds	r3, #1
 8005122:	613b      	str	r3, [r7, #16]
 8005124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005126:	693a      	ldr	r2, [r7, #16]
 8005128:	429a      	cmp	r2, r3
 800512a:	d3b7      	bcc.n	800509c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	68fa      	ldr	r2, [r7, #12]
 8005136:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800513a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800513e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800514c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800514e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005150:	2b00      	cmp	r3, #0
 8005152:	d105      	bne.n	8005160 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	699b      	ldr	r3, [r3, #24]
 8005158:	f043 0210 	orr.w	r2, r3, #16
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	699a      	ldr	r2, [r3, #24]
 8005164:	4b0f      	ldr	r3, [pc, #60]	; (80051a4 <USB_DevInit+0x2b8>)
 8005166:	4313      	orrs	r3, r2
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800516c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800516e:	2b00      	cmp	r3, #0
 8005170:	d005      	beq.n	800517e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	699b      	ldr	r3, [r3, #24]
 8005176:	f043 0208 	orr.w	r2, r3, #8
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800517e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005180:	2b01      	cmp	r3, #1
 8005182:	d107      	bne.n	8005194 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	699b      	ldr	r3, [r3, #24]
 8005188:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800518c:	f043 0304 	orr.w	r3, r3, #4
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005194:	7dfb      	ldrb	r3, [r7, #23]
}
 8005196:	4618      	mov	r0, r3
 8005198:	3718      	adds	r7, #24
 800519a:	46bd      	mov	sp, r7
 800519c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80051a0:	b004      	add	sp, #16
 80051a2:	4770      	bx	lr
 80051a4:	803c3800 	.word	0x803c3800

080051a8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b085      	sub	sp, #20
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80051b2:	2300      	movs	r3, #0
 80051b4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	3301      	adds	r3, #1
 80051ba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	4a13      	ldr	r2, [pc, #76]	; (800520c <USB_FlushTxFifo+0x64>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d901      	bls.n	80051c8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80051c4:	2303      	movs	r3, #3
 80051c6:	e01b      	b.n	8005200 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	691b      	ldr	r3, [r3, #16]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	daf2      	bge.n	80051b6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80051d0:	2300      	movs	r3, #0
 80051d2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	019b      	lsls	r3, r3, #6
 80051d8:	f043 0220 	orr.w	r2, r3, #32
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	3301      	adds	r3, #1
 80051e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	4a08      	ldr	r2, [pc, #32]	; (800520c <USB_FlushTxFifo+0x64>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d901      	bls.n	80051f2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	e006      	b.n	8005200 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	691b      	ldr	r3, [r3, #16]
 80051f6:	f003 0320 	and.w	r3, r3, #32
 80051fa:	2b20      	cmp	r3, #32
 80051fc:	d0f0      	beq.n	80051e0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80051fe:	2300      	movs	r3, #0
}
 8005200:	4618      	mov	r0, r3
 8005202:	3714      	adds	r7, #20
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr
 800520c:	00030d40 	.word	0x00030d40

08005210 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005210:	b480      	push	{r7}
 8005212:	b085      	sub	sp, #20
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005218:	2300      	movs	r3, #0
 800521a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	3301      	adds	r3, #1
 8005220:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	4a11      	ldr	r2, [pc, #68]	; (800526c <USB_FlushRxFifo+0x5c>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d901      	bls.n	800522e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	e018      	b.n	8005260 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	2b00      	cmp	r3, #0
 8005234:	daf2      	bge.n	800521c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005236:	2300      	movs	r3, #0
 8005238:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2210      	movs	r2, #16
 800523e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	3301      	adds	r3, #1
 8005244:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	4a08      	ldr	r2, [pc, #32]	; (800526c <USB_FlushRxFifo+0x5c>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d901      	bls.n	8005252 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	e006      	b.n	8005260 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	f003 0310 	and.w	r3, r3, #16
 800525a:	2b10      	cmp	r3, #16
 800525c:	d0f0      	beq.n	8005240 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800525e:	2300      	movs	r3, #0
}
 8005260:	4618      	mov	r0, r3
 8005262:	3714      	adds	r7, #20
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr
 800526c:	00030d40 	.word	0x00030d40

08005270 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005270:	b480      	push	{r7}
 8005272:	b085      	sub	sp, #20
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	460b      	mov	r3, r1
 800527a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	78fb      	ldrb	r3, [r7, #3]
 800528a:	68f9      	ldr	r1, [r7, #12]
 800528c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005290:	4313      	orrs	r3, r2
 8005292:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005294:	2300      	movs	r3, #0
}
 8005296:	4618      	mov	r0, r3
 8005298:	3714      	adds	r7, #20
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr

080052a2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80052a2:	b480      	push	{r7}
 80052a4:	b087      	sub	sp, #28
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	f003 0306 	and.w	r3, r3, #6
 80052ba:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d102      	bne.n	80052c8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80052c2:	2300      	movs	r3, #0
 80052c4:	75fb      	strb	r3, [r7, #23]
 80052c6:	e00a      	b.n	80052de <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2b02      	cmp	r3, #2
 80052cc:	d002      	beq.n	80052d4 <USB_GetDevSpeed+0x32>
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2b06      	cmp	r3, #6
 80052d2:	d102      	bne.n	80052da <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80052d4:	2302      	movs	r3, #2
 80052d6:	75fb      	strb	r3, [r7, #23]
 80052d8:	e001      	b.n	80052de <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80052da:	230f      	movs	r3, #15
 80052dc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80052de:	7dfb      	ldrb	r3, [r7, #23]
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	371c      	adds	r7, #28
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b085      	sub	sp, #20
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	785b      	ldrb	r3, [r3, #1]
 8005304:	2b01      	cmp	r3, #1
 8005306:	d13a      	bne.n	800537e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800530e:	69da      	ldr	r2, [r3, #28]
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	f003 030f 	and.w	r3, r3, #15
 8005318:	2101      	movs	r1, #1
 800531a:	fa01 f303 	lsl.w	r3, r1, r3
 800531e:	b29b      	uxth	r3, r3
 8005320:	68f9      	ldr	r1, [r7, #12]
 8005322:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005326:	4313      	orrs	r3, r2
 8005328:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	015a      	lsls	r2, r3, #5
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	4413      	add	r3, r2
 8005332:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800533c:	2b00      	cmp	r3, #0
 800533e:	d155      	bne.n	80053ec <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	015a      	lsls	r2, r3, #5
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	4413      	add	r3, r2
 8005348:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	791b      	ldrb	r3, [r3, #4]
 800535a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800535c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	059b      	lsls	r3, r3, #22
 8005362:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005364:	4313      	orrs	r3, r2
 8005366:	68ba      	ldr	r2, [r7, #8]
 8005368:	0151      	lsls	r1, r2, #5
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	440a      	add	r2, r1
 800536e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005372:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005376:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800537a:	6013      	str	r3, [r2, #0]
 800537c:	e036      	b.n	80053ec <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005384:	69da      	ldr	r2, [r3, #28]
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	781b      	ldrb	r3, [r3, #0]
 800538a:	f003 030f 	and.w	r3, r3, #15
 800538e:	2101      	movs	r1, #1
 8005390:	fa01 f303 	lsl.w	r3, r1, r3
 8005394:	041b      	lsls	r3, r3, #16
 8005396:	68f9      	ldr	r1, [r7, #12]
 8005398:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800539c:	4313      	orrs	r3, r2
 800539e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	015a      	lsls	r2, r3, #5
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	4413      	add	r3, r2
 80053a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d11a      	bne.n	80053ec <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	015a      	lsls	r2, r3, #5
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	4413      	add	r3, r2
 80053be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	791b      	ldrb	r3, [r3, #4]
 80053d0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80053d2:	430b      	orrs	r3, r1
 80053d4:	4313      	orrs	r3, r2
 80053d6:	68ba      	ldr	r2, [r7, #8]
 80053d8:	0151      	lsls	r1, r2, #5
 80053da:	68fa      	ldr	r2, [r7, #12]
 80053dc:	440a      	add	r2, r1
 80053de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053ea:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80053ec:	2300      	movs	r3, #0
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3714      	adds	r7, #20
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr
	...

080053fc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b085      	sub	sp, #20
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	781b      	ldrb	r3, [r3, #0]
 800540e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	785b      	ldrb	r3, [r3, #1]
 8005414:	2b01      	cmp	r3, #1
 8005416:	d161      	bne.n	80054dc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	015a      	lsls	r2, r3, #5
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	4413      	add	r3, r2
 8005420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800542a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800542e:	d11f      	bne.n	8005470 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	015a      	lsls	r2, r3, #5
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	4413      	add	r3, r2
 8005438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68ba      	ldr	r2, [r7, #8]
 8005440:	0151      	lsls	r1, r2, #5
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	440a      	add	r2, r1
 8005446:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800544a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800544e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	015a      	lsls	r2, r3, #5
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	4413      	add	r3, r2
 8005458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	68ba      	ldr	r2, [r7, #8]
 8005460:	0151      	lsls	r1, r2, #5
 8005462:	68fa      	ldr	r2, [r7, #12]
 8005464:	440a      	add	r2, r1
 8005466:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800546a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800546e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005476:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	f003 030f 	and.w	r3, r3, #15
 8005480:	2101      	movs	r1, #1
 8005482:	fa01 f303 	lsl.w	r3, r1, r3
 8005486:	b29b      	uxth	r3, r3
 8005488:	43db      	mvns	r3, r3
 800548a:	68f9      	ldr	r1, [r7, #12]
 800548c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005490:	4013      	ands	r3, r2
 8005492:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800549a:	69da      	ldr	r2, [r3, #28]
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	f003 030f 	and.w	r3, r3, #15
 80054a4:	2101      	movs	r1, #1
 80054a6:	fa01 f303 	lsl.w	r3, r1, r3
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	43db      	mvns	r3, r3
 80054ae:	68f9      	ldr	r1, [r7, #12]
 80054b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054b4:	4013      	ands	r3, r2
 80054b6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	015a      	lsls	r2, r3, #5
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	4413      	add	r3, r2
 80054c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	0159      	lsls	r1, r3, #5
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	440b      	add	r3, r1
 80054ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054d2:	4619      	mov	r1, r3
 80054d4:	4b35      	ldr	r3, [pc, #212]	; (80055ac <USB_DeactivateEndpoint+0x1b0>)
 80054d6:	4013      	ands	r3, r2
 80054d8:	600b      	str	r3, [r1, #0]
 80054da:	e060      	b.n	800559e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	015a      	lsls	r2, r3, #5
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	4413      	add	r3, r2
 80054e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054f2:	d11f      	bne.n	8005534 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	015a      	lsls	r2, r3, #5
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	4413      	add	r3, r2
 80054fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68ba      	ldr	r2, [r7, #8]
 8005504:	0151      	lsls	r1, r2, #5
 8005506:	68fa      	ldr	r2, [r7, #12]
 8005508:	440a      	add	r2, r1
 800550a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800550e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005512:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	015a      	lsls	r2, r3, #5
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	4413      	add	r3, r2
 800551c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	68ba      	ldr	r2, [r7, #8]
 8005524:	0151      	lsls	r1, r2, #5
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	440a      	add	r2, r1
 800552a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800552e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005532:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800553a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	f003 030f 	and.w	r3, r3, #15
 8005544:	2101      	movs	r1, #1
 8005546:	fa01 f303 	lsl.w	r3, r1, r3
 800554a:	041b      	lsls	r3, r3, #16
 800554c:	43db      	mvns	r3, r3
 800554e:	68f9      	ldr	r1, [r7, #12]
 8005550:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005554:	4013      	ands	r3, r2
 8005556:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800555e:	69da      	ldr	r2, [r3, #28]
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	f003 030f 	and.w	r3, r3, #15
 8005568:	2101      	movs	r1, #1
 800556a:	fa01 f303 	lsl.w	r3, r1, r3
 800556e:	041b      	lsls	r3, r3, #16
 8005570:	43db      	mvns	r3, r3
 8005572:	68f9      	ldr	r1, [r7, #12]
 8005574:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005578:	4013      	ands	r3, r2
 800557a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	015a      	lsls	r2, r3, #5
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	4413      	add	r3, r2
 8005584:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	0159      	lsls	r1, r3, #5
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	440b      	add	r3, r1
 8005592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005596:	4619      	mov	r1, r3
 8005598:	4b05      	ldr	r3, [pc, #20]	; (80055b0 <USB_DeactivateEndpoint+0x1b4>)
 800559a:	4013      	ands	r3, r2
 800559c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800559e:	2300      	movs	r3, #0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3714      	adds	r7, #20
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr
 80055ac:	ec337800 	.word	0xec337800
 80055b0:	eff37800 	.word	0xeff37800

080055b4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b08a      	sub	sp, #40	; 0x28
 80055b8:	af02      	add	r7, sp, #8
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	60b9      	str	r1, [r7, #8]
 80055be:	4613      	mov	r3, r2
 80055c0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	785b      	ldrb	r3, [r3, #1]
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	f040 815c 	bne.w	800588e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	699b      	ldr	r3, [r3, #24]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d132      	bne.n	8005644 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80055de:	69bb      	ldr	r3, [r7, #24]
 80055e0:	015a      	lsls	r2, r3, #5
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	4413      	add	r3, r2
 80055e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055ea:	691b      	ldr	r3, [r3, #16]
 80055ec:	69ba      	ldr	r2, [r7, #24]
 80055ee:	0151      	lsls	r1, r2, #5
 80055f0:	69fa      	ldr	r2, [r7, #28]
 80055f2:	440a      	add	r2, r1
 80055f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055f8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80055fc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005600:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005602:	69bb      	ldr	r3, [r7, #24]
 8005604:	015a      	lsls	r2, r3, #5
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	4413      	add	r3, r2
 800560a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800560e:	691b      	ldr	r3, [r3, #16]
 8005610:	69ba      	ldr	r2, [r7, #24]
 8005612:	0151      	lsls	r1, r2, #5
 8005614:	69fa      	ldr	r2, [r7, #28]
 8005616:	440a      	add	r2, r1
 8005618:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800561c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005620:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005622:	69bb      	ldr	r3, [r7, #24]
 8005624:	015a      	lsls	r2, r3, #5
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	4413      	add	r3, r2
 800562a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800562e:	691b      	ldr	r3, [r3, #16]
 8005630:	69ba      	ldr	r2, [r7, #24]
 8005632:	0151      	lsls	r1, r2, #5
 8005634:	69fa      	ldr	r2, [r7, #28]
 8005636:	440a      	add	r2, r1
 8005638:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800563c:	0cdb      	lsrs	r3, r3, #19
 800563e:	04db      	lsls	r3, r3, #19
 8005640:	6113      	str	r3, [r2, #16]
 8005642:	e074      	b.n	800572e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	015a      	lsls	r2, r3, #5
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	4413      	add	r3, r2
 800564c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	69ba      	ldr	r2, [r7, #24]
 8005654:	0151      	lsls	r1, r2, #5
 8005656:	69fa      	ldr	r2, [r7, #28]
 8005658:	440a      	add	r2, r1
 800565a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800565e:	0cdb      	lsrs	r3, r3, #19
 8005660:	04db      	lsls	r3, r3, #19
 8005662:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005664:	69bb      	ldr	r3, [r7, #24]
 8005666:	015a      	lsls	r2, r3, #5
 8005668:	69fb      	ldr	r3, [r7, #28]
 800566a:	4413      	add	r3, r2
 800566c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	69ba      	ldr	r2, [r7, #24]
 8005674:	0151      	lsls	r1, r2, #5
 8005676:	69fa      	ldr	r2, [r7, #28]
 8005678:	440a      	add	r2, r1
 800567a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800567e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005682:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005686:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005688:	69bb      	ldr	r3, [r7, #24]
 800568a:	015a      	lsls	r2, r3, #5
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	4413      	add	r3, r2
 8005690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005694:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	6999      	ldr	r1, [r3, #24]
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	68db      	ldr	r3, [r3, #12]
 800569e:	440b      	add	r3, r1
 80056a0:	1e59      	subs	r1, r3, #1
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80056aa:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80056ac:	4b9d      	ldr	r3, [pc, #628]	; (8005924 <USB_EPStartXfer+0x370>)
 80056ae:	400b      	ands	r3, r1
 80056b0:	69b9      	ldr	r1, [r7, #24]
 80056b2:	0148      	lsls	r0, r1, #5
 80056b4:	69f9      	ldr	r1, [r7, #28]
 80056b6:	4401      	add	r1, r0
 80056b8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80056bc:	4313      	orrs	r3, r2
 80056be:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	015a      	lsls	r2, r3, #5
 80056c4:	69fb      	ldr	r3, [r7, #28]
 80056c6:	4413      	add	r3, r2
 80056c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056cc:	691a      	ldr	r2, [r3, #16]
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	699b      	ldr	r3, [r3, #24]
 80056d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056d6:	69b9      	ldr	r1, [r7, #24]
 80056d8:	0148      	lsls	r0, r1, #5
 80056da:	69f9      	ldr	r1, [r7, #28]
 80056dc:	4401      	add	r1, r0
 80056de:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80056e2:	4313      	orrs	r3, r2
 80056e4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	791b      	ldrb	r3, [r3, #4]
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d11f      	bne.n	800572e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	015a      	lsls	r2, r3, #5
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	4413      	add	r3, r2
 80056f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056fa:	691b      	ldr	r3, [r3, #16]
 80056fc:	69ba      	ldr	r2, [r7, #24]
 80056fe:	0151      	lsls	r1, r2, #5
 8005700:	69fa      	ldr	r2, [r7, #28]
 8005702:	440a      	add	r2, r1
 8005704:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005708:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800570c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800570e:	69bb      	ldr	r3, [r7, #24]
 8005710:	015a      	lsls	r2, r3, #5
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	4413      	add	r3, r2
 8005716:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800571a:	691b      	ldr	r3, [r3, #16]
 800571c:	69ba      	ldr	r2, [r7, #24]
 800571e:	0151      	lsls	r1, r2, #5
 8005720:	69fa      	ldr	r2, [r7, #28]
 8005722:	440a      	add	r2, r1
 8005724:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005728:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800572c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800572e:	79fb      	ldrb	r3, [r7, #7]
 8005730:	2b01      	cmp	r3, #1
 8005732:	d14b      	bne.n	80057cc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	695b      	ldr	r3, [r3, #20]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d009      	beq.n	8005750 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	015a      	lsls	r2, r3, #5
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	4413      	add	r3, r2
 8005744:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005748:	461a      	mov	r2, r3
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	695b      	ldr	r3, [r3, #20]
 800574e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	791b      	ldrb	r3, [r3, #4]
 8005754:	2b01      	cmp	r3, #1
 8005756:	d128      	bne.n	80057aa <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005758:	69fb      	ldr	r3, [r7, #28]
 800575a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005764:	2b00      	cmp	r3, #0
 8005766:	d110      	bne.n	800578a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005768:	69bb      	ldr	r3, [r7, #24]
 800576a:	015a      	lsls	r2, r3, #5
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	4413      	add	r3, r2
 8005770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	69ba      	ldr	r2, [r7, #24]
 8005778:	0151      	lsls	r1, r2, #5
 800577a:	69fa      	ldr	r2, [r7, #28]
 800577c:	440a      	add	r2, r1
 800577e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005782:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005786:	6013      	str	r3, [r2, #0]
 8005788:	e00f      	b.n	80057aa <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800578a:	69bb      	ldr	r3, [r7, #24]
 800578c:	015a      	lsls	r2, r3, #5
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	4413      	add	r3, r2
 8005792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	69ba      	ldr	r2, [r7, #24]
 800579a:	0151      	lsls	r1, r2, #5
 800579c:	69fa      	ldr	r2, [r7, #28]
 800579e:	440a      	add	r2, r1
 80057a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057a8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80057aa:	69bb      	ldr	r3, [r7, #24]
 80057ac:	015a      	lsls	r2, r3, #5
 80057ae:	69fb      	ldr	r3, [r7, #28]
 80057b0:	4413      	add	r3, r2
 80057b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	69ba      	ldr	r2, [r7, #24]
 80057ba:	0151      	lsls	r1, r2, #5
 80057bc:	69fa      	ldr	r2, [r7, #28]
 80057be:	440a      	add	r2, r1
 80057c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057c4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80057c8:	6013      	str	r3, [r2, #0]
 80057ca:	e133      	b.n	8005a34 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	015a      	lsls	r2, r3, #5
 80057d0:	69fb      	ldr	r3, [r7, #28]
 80057d2:	4413      	add	r3, r2
 80057d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	69ba      	ldr	r2, [r7, #24]
 80057dc:	0151      	lsls	r1, r2, #5
 80057de:	69fa      	ldr	r2, [r7, #28]
 80057e0:	440a      	add	r2, r1
 80057e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057e6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80057ea:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	791b      	ldrb	r3, [r3, #4]
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d015      	beq.n	8005820 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	699b      	ldr	r3, [r3, #24]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	f000 811b 	beq.w	8005a34 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80057fe:	69fb      	ldr	r3, [r7, #28]
 8005800:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005804:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	781b      	ldrb	r3, [r3, #0]
 800580a:	f003 030f 	and.w	r3, r3, #15
 800580e:	2101      	movs	r1, #1
 8005810:	fa01 f303 	lsl.w	r3, r1, r3
 8005814:	69f9      	ldr	r1, [r7, #28]
 8005816:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800581a:	4313      	orrs	r3, r2
 800581c:	634b      	str	r3, [r1, #52]	; 0x34
 800581e:	e109      	b.n	8005a34 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800582c:	2b00      	cmp	r3, #0
 800582e:	d110      	bne.n	8005852 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005830:	69bb      	ldr	r3, [r7, #24]
 8005832:	015a      	lsls	r2, r3, #5
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	4413      	add	r3, r2
 8005838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	69ba      	ldr	r2, [r7, #24]
 8005840:	0151      	lsls	r1, r2, #5
 8005842:	69fa      	ldr	r2, [r7, #28]
 8005844:	440a      	add	r2, r1
 8005846:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800584a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800584e:	6013      	str	r3, [r2, #0]
 8005850:	e00f      	b.n	8005872 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005852:	69bb      	ldr	r3, [r7, #24]
 8005854:	015a      	lsls	r2, r3, #5
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	4413      	add	r3, r2
 800585a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	69ba      	ldr	r2, [r7, #24]
 8005862:	0151      	lsls	r1, r2, #5
 8005864:	69fa      	ldr	r2, [r7, #28]
 8005866:	440a      	add	r2, r1
 8005868:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800586c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005870:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	6919      	ldr	r1, [r3, #16]
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	781a      	ldrb	r2, [r3, #0]
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	699b      	ldr	r3, [r3, #24]
 800587e:	b298      	uxth	r0, r3
 8005880:	79fb      	ldrb	r3, [r7, #7]
 8005882:	9300      	str	r3, [sp, #0]
 8005884:	4603      	mov	r3, r0
 8005886:	68f8      	ldr	r0, [r7, #12]
 8005888:	f000 fade 	bl	8005e48 <USB_WritePacket>
 800588c:	e0d2      	b.n	8005a34 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800588e:	69bb      	ldr	r3, [r7, #24]
 8005890:	015a      	lsls	r2, r3, #5
 8005892:	69fb      	ldr	r3, [r7, #28]
 8005894:	4413      	add	r3, r2
 8005896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800589a:	691b      	ldr	r3, [r3, #16]
 800589c:	69ba      	ldr	r2, [r7, #24]
 800589e:	0151      	lsls	r1, r2, #5
 80058a0:	69fa      	ldr	r2, [r7, #28]
 80058a2:	440a      	add	r2, r1
 80058a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058a8:	0cdb      	lsrs	r3, r3, #19
 80058aa:	04db      	lsls	r3, r3, #19
 80058ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	015a      	lsls	r2, r3, #5
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	4413      	add	r3, r2
 80058b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ba:	691b      	ldr	r3, [r3, #16]
 80058bc:	69ba      	ldr	r2, [r7, #24]
 80058be:	0151      	lsls	r1, r2, #5
 80058c0:	69fa      	ldr	r2, [r7, #28]
 80058c2:	440a      	add	r2, r1
 80058c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058c8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80058cc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80058d0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	699b      	ldr	r3, [r3, #24]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d126      	bne.n	8005928 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	015a      	lsls	r2, r3, #5
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	4413      	add	r3, r2
 80058e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058e6:	691a      	ldr	r2, [r3, #16]
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058f0:	69b9      	ldr	r1, [r7, #24]
 80058f2:	0148      	lsls	r0, r1, #5
 80058f4:	69f9      	ldr	r1, [r7, #28]
 80058f6:	4401      	add	r1, r0
 80058f8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80058fc:	4313      	orrs	r3, r2
 80058fe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	015a      	lsls	r2, r3, #5
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	4413      	add	r3, r2
 8005908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800590c:	691b      	ldr	r3, [r3, #16]
 800590e:	69ba      	ldr	r2, [r7, #24]
 8005910:	0151      	lsls	r1, r2, #5
 8005912:	69fa      	ldr	r2, [r7, #28]
 8005914:	440a      	add	r2, r1
 8005916:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800591a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800591e:	6113      	str	r3, [r2, #16]
 8005920:	e03a      	b.n	8005998 <USB_EPStartXfer+0x3e4>
 8005922:	bf00      	nop
 8005924:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	699a      	ldr	r2, [r3, #24]
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	4413      	add	r3, r2
 8005932:	1e5a      	subs	r2, r3, #1
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	fbb2 f3f3 	udiv	r3, r2, r3
 800593c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	8afa      	ldrh	r2, [r7, #22]
 8005944:	fb03 f202 	mul.w	r2, r3, r2
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	015a      	lsls	r2, r3, #5
 8005950:	69fb      	ldr	r3, [r7, #28]
 8005952:	4413      	add	r3, r2
 8005954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005958:	691a      	ldr	r2, [r3, #16]
 800595a:	8afb      	ldrh	r3, [r7, #22]
 800595c:	04d9      	lsls	r1, r3, #19
 800595e:	4b38      	ldr	r3, [pc, #224]	; (8005a40 <USB_EPStartXfer+0x48c>)
 8005960:	400b      	ands	r3, r1
 8005962:	69b9      	ldr	r1, [r7, #24]
 8005964:	0148      	lsls	r0, r1, #5
 8005966:	69f9      	ldr	r1, [r7, #28]
 8005968:	4401      	add	r1, r0
 800596a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800596e:	4313      	orrs	r3, r2
 8005970:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005972:	69bb      	ldr	r3, [r7, #24]
 8005974:	015a      	lsls	r2, r3, #5
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	4413      	add	r3, r2
 800597a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800597e:	691a      	ldr	r2, [r3, #16]
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	69db      	ldr	r3, [r3, #28]
 8005984:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005988:	69b9      	ldr	r1, [r7, #24]
 800598a:	0148      	lsls	r0, r1, #5
 800598c:	69f9      	ldr	r1, [r7, #28]
 800598e:	4401      	add	r1, r0
 8005990:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005994:	4313      	orrs	r3, r2
 8005996:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005998:	79fb      	ldrb	r3, [r7, #7]
 800599a:	2b01      	cmp	r3, #1
 800599c:	d10d      	bne.n	80059ba <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	691b      	ldr	r3, [r3, #16]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d009      	beq.n	80059ba <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	6919      	ldr	r1, [r3, #16]
 80059aa:	69bb      	ldr	r3, [r7, #24]
 80059ac:	015a      	lsls	r2, r3, #5
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	4413      	add	r3, r2
 80059b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059b6:	460a      	mov	r2, r1
 80059b8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	791b      	ldrb	r3, [r3, #4]
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d128      	bne.n	8005a14 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80059c2:	69fb      	ldr	r3, [r7, #28]
 80059c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d110      	bne.n	80059f4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80059d2:	69bb      	ldr	r3, [r7, #24]
 80059d4:	015a      	lsls	r2, r3, #5
 80059d6:	69fb      	ldr	r3, [r7, #28]
 80059d8:	4413      	add	r3, r2
 80059da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	69ba      	ldr	r2, [r7, #24]
 80059e2:	0151      	lsls	r1, r2, #5
 80059e4:	69fa      	ldr	r2, [r7, #28]
 80059e6:	440a      	add	r2, r1
 80059e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80059f0:	6013      	str	r3, [r2, #0]
 80059f2:	e00f      	b.n	8005a14 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80059f4:	69bb      	ldr	r3, [r7, #24]
 80059f6:	015a      	lsls	r2, r3, #5
 80059f8:	69fb      	ldr	r3, [r7, #28]
 80059fa:	4413      	add	r3, r2
 80059fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	69ba      	ldr	r2, [r7, #24]
 8005a04:	0151      	lsls	r1, r2, #5
 8005a06:	69fa      	ldr	r2, [r7, #28]
 8005a08:	440a      	add	r2, r1
 8005a0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a12:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005a14:	69bb      	ldr	r3, [r7, #24]
 8005a16:	015a      	lsls	r2, r3, #5
 8005a18:	69fb      	ldr	r3, [r7, #28]
 8005a1a:	4413      	add	r3, r2
 8005a1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	69ba      	ldr	r2, [r7, #24]
 8005a24:	0151      	lsls	r1, r2, #5
 8005a26:	69fa      	ldr	r2, [r7, #28]
 8005a28:	440a      	add	r2, r1
 8005a2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a2e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005a32:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005a34:	2300      	movs	r3, #0
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3720      	adds	r7, #32
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	1ff80000 	.word	0x1ff80000

08005a44 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b087      	sub	sp, #28
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	60f8      	str	r0, [r7, #12]
 8005a4c:	60b9      	str	r1, [r7, #8]
 8005a4e:	4613      	mov	r3, r2
 8005a50:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	781b      	ldrb	r3, [r3, #0]
 8005a5a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	785b      	ldrb	r3, [r3, #1]
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	f040 80ce 	bne.w	8005c02 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	699b      	ldr	r3, [r3, #24]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d132      	bne.n	8005ad4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	015a      	lsls	r2, r3, #5
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	4413      	add	r3, r2
 8005a76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a7a:	691b      	ldr	r3, [r3, #16]
 8005a7c:	693a      	ldr	r2, [r7, #16]
 8005a7e:	0151      	lsls	r1, r2, #5
 8005a80:	697a      	ldr	r2, [r7, #20]
 8005a82:	440a      	add	r2, r1
 8005a84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a88:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a8c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a90:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	015a      	lsls	r2, r3, #5
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	4413      	add	r3, r2
 8005a9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a9e:	691b      	ldr	r3, [r3, #16]
 8005aa0:	693a      	ldr	r2, [r7, #16]
 8005aa2:	0151      	lsls	r1, r2, #5
 8005aa4:	697a      	ldr	r2, [r7, #20]
 8005aa6:	440a      	add	r2, r1
 8005aa8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005aac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ab0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	015a      	lsls	r2, r3, #5
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	4413      	add	r3, r2
 8005aba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005abe:	691b      	ldr	r3, [r3, #16]
 8005ac0:	693a      	ldr	r2, [r7, #16]
 8005ac2:	0151      	lsls	r1, r2, #5
 8005ac4:	697a      	ldr	r2, [r7, #20]
 8005ac6:	440a      	add	r2, r1
 8005ac8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005acc:	0cdb      	lsrs	r3, r3, #19
 8005ace:	04db      	lsls	r3, r3, #19
 8005ad0:	6113      	str	r3, [r2, #16]
 8005ad2:	e04e      	b.n	8005b72 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	015a      	lsls	r2, r3, #5
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	4413      	add	r3, r2
 8005adc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	693a      	ldr	r2, [r7, #16]
 8005ae4:	0151      	lsls	r1, r2, #5
 8005ae6:	697a      	ldr	r2, [r7, #20]
 8005ae8:	440a      	add	r2, r1
 8005aea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005aee:	0cdb      	lsrs	r3, r3, #19
 8005af0:	04db      	lsls	r3, r3, #19
 8005af2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	015a      	lsls	r2, r3, #5
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	4413      	add	r3, r2
 8005afc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b00:	691b      	ldr	r3, [r3, #16]
 8005b02:	693a      	ldr	r2, [r7, #16]
 8005b04:	0151      	lsls	r1, r2, #5
 8005b06:	697a      	ldr	r2, [r7, #20]
 8005b08:	440a      	add	r2, r1
 8005b0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b0e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b12:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b16:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	699a      	ldr	r2, [r3, #24]
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	68db      	ldr	r3, [r3, #12]
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d903      	bls.n	8005b2c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	68da      	ldr	r2, [r3, #12]
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	015a      	lsls	r2, r3, #5
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	4413      	add	r3, r2
 8005b34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b38:	691b      	ldr	r3, [r3, #16]
 8005b3a:	693a      	ldr	r2, [r7, #16]
 8005b3c:	0151      	lsls	r1, r2, #5
 8005b3e:	697a      	ldr	r2, [r7, #20]
 8005b40:	440a      	add	r2, r1
 8005b42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b46:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b4a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	015a      	lsls	r2, r3, #5
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	4413      	add	r3, r2
 8005b54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b58:	691a      	ldr	r2, [r3, #16]
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	699b      	ldr	r3, [r3, #24]
 8005b5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b62:	6939      	ldr	r1, [r7, #16]
 8005b64:	0148      	lsls	r0, r1, #5
 8005b66:	6979      	ldr	r1, [r7, #20]
 8005b68:	4401      	add	r1, r0
 8005b6a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005b72:	79fb      	ldrb	r3, [r7, #7]
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d11e      	bne.n	8005bb6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	695b      	ldr	r3, [r3, #20]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d009      	beq.n	8005b94 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	015a      	lsls	r2, r3, #5
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	4413      	add	r3, r2
 8005b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	695b      	ldr	r3, [r3, #20]
 8005b92:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	015a      	lsls	r2, r3, #5
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	4413      	add	r3, r2
 8005b9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	693a      	ldr	r2, [r7, #16]
 8005ba4:	0151      	lsls	r1, r2, #5
 8005ba6:	697a      	ldr	r2, [r7, #20]
 8005ba8:	440a      	add	r2, r1
 8005baa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005bb2:	6013      	str	r3, [r2, #0]
 8005bb4:	e097      	b.n	8005ce6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	015a      	lsls	r2, r3, #5
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	4413      	add	r3, r2
 8005bbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	693a      	ldr	r2, [r7, #16]
 8005bc6:	0151      	lsls	r1, r2, #5
 8005bc8:	697a      	ldr	r2, [r7, #20]
 8005bca:	440a      	add	r2, r1
 8005bcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bd0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005bd4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	699b      	ldr	r3, [r3, #24]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	f000 8083 	beq.w	8005ce6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005be6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	f003 030f 	and.w	r3, r3, #15
 8005bf0:	2101      	movs	r1, #1
 8005bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8005bf6:	6979      	ldr	r1, [r7, #20]
 8005bf8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	634b      	str	r3, [r1, #52]	; 0x34
 8005c00:	e071      	b.n	8005ce6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	015a      	lsls	r2, r3, #5
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	4413      	add	r3, r2
 8005c0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c0e:	691b      	ldr	r3, [r3, #16]
 8005c10:	693a      	ldr	r2, [r7, #16]
 8005c12:	0151      	lsls	r1, r2, #5
 8005c14:	697a      	ldr	r2, [r7, #20]
 8005c16:	440a      	add	r2, r1
 8005c18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c1c:	0cdb      	lsrs	r3, r3, #19
 8005c1e:	04db      	lsls	r3, r3, #19
 8005c20:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	015a      	lsls	r2, r3, #5
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	4413      	add	r3, r2
 8005c2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	693a      	ldr	r2, [r7, #16]
 8005c32:	0151      	lsls	r1, r2, #5
 8005c34:	697a      	ldr	r2, [r7, #20]
 8005c36:	440a      	add	r2, r1
 8005c38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c3c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c40:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c44:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	699b      	ldr	r3, [r3, #24]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d003      	beq.n	8005c56 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	68da      	ldr	r2, [r3, #12]
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	68da      	ldr	r2, [r3, #12]
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	015a      	lsls	r2, r3, #5
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	4413      	add	r3, r2
 8005c66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c6a:	691b      	ldr	r3, [r3, #16]
 8005c6c:	693a      	ldr	r2, [r7, #16]
 8005c6e:	0151      	lsls	r1, r2, #5
 8005c70:	697a      	ldr	r2, [r7, #20]
 8005c72:	440a      	add	r2, r1
 8005c74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c78:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c7c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	015a      	lsls	r2, r3, #5
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	4413      	add	r3, r2
 8005c86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c8a:	691a      	ldr	r2, [r3, #16]
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	69db      	ldr	r3, [r3, #28]
 8005c90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c94:	6939      	ldr	r1, [r7, #16]
 8005c96:	0148      	lsls	r0, r1, #5
 8005c98:	6979      	ldr	r1, [r7, #20]
 8005c9a:	4401      	add	r1, r0
 8005c9c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005ca4:	79fb      	ldrb	r3, [r7, #7]
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d10d      	bne.n	8005cc6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	691b      	ldr	r3, [r3, #16]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d009      	beq.n	8005cc6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	6919      	ldr	r1, [r3, #16]
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	015a      	lsls	r2, r3, #5
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	4413      	add	r3, r2
 8005cbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cc2:	460a      	mov	r2, r1
 8005cc4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	015a      	lsls	r2, r3, #5
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	4413      	add	r3, r2
 8005cce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	693a      	ldr	r2, [r7, #16]
 8005cd6:	0151      	lsls	r1, r2, #5
 8005cd8:	697a      	ldr	r2, [r7, #20]
 8005cda:	440a      	add	r2, r1
 8005cdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ce0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ce4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005ce6:	2300      	movs	r3, #0
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	371c      	adds	r7, #28
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr

08005cf4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b087      	sub	sp, #28
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005d02:	2300      	movs	r3, #0
 8005d04:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	785b      	ldrb	r3, [r3, #1]
 8005d0e:	2b01      	cmp	r3, #1
 8005d10:	d14a      	bne.n	8005da8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	781b      	ldrb	r3, [r3, #0]
 8005d16:	015a      	lsls	r2, r3, #5
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d2a:	f040 8086 	bne.w	8005e3a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	015a      	lsls	r2, r3, #5
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	4413      	add	r3, r2
 8005d38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	683a      	ldr	r2, [r7, #0]
 8005d40:	7812      	ldrb	r2, [r2, #0]
 8005d42:	0151      	lsls	r1, r2, #5
 8005d44:	693a      	ldr	r2, [r7, #16]
 8005d46:	440a      	add	r2, r1
 8005d48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d4c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005d50:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	015a      	lsls	r2, r3, #5
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	4413      	add	r3, r2
 8005d5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	683a      	ldr	r2, [r7, #0]
 8005d64:	7812      	ldrb	r2, [r2, #0]
 8005d66:	0151      	lsls	r1, r2, #5
 8005d68:	693a      	ldr	r2, [r7, #16]
 8005d6a:	440a      	add	r2, r1
 8005d6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d70:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d74:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	3301      	adds	r3, #1
 8005d7a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f242 7210 	movw	r2, #10000	; 0x2710
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d902      	bls.n	8005d8c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	75fb      	strb	r3, [r7, #23]
          break;
 8005d8a:	e056      	b.n	8005e3a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	781b      	ldrb	r3, [r3, #0]
 8005d90:	015a      	lsls	r2, r3, #5
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	4413      	add	r3, r2
 8005d96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005da0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005da4:	d0e7      	beq.n	8005d76 <USB_EPStopXfer+0x82>
 8005da6:	e048      	b.n	8005e3a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	015a      	lsls	r2, r3, #5
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	4413      	add	r3, r2
 8005db2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005dbc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005dc0:	d13b      	bne.n	8005e3a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	781b      	ldrb	r3, [r3, #0]
 8005dc6:	015a      	lsls	r2, r3, #5
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	4413      	add	r3, r2
 8005dcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	683a      	ldr	r2, [r7, #0]
 8005dd4:	7812      	ldrb	r2, [r2, #0]
 8005dd6:	0151      	lsls	r1, r2, #5
 8005dd8:	693a      	ldr	r2, [r7, #16]
 8005dda:	440a      	add	r2, r1
 8005ddc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005de0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005de4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	015a      	lsls	r2, r3, #5
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	4413      	add	r3, r2
 8005df0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	683a      	ldr	r2, [r7, #0]
 8005df8:	7812      	ldrb	r2, [r2, #0]
 8005dfa:	0151      	lsls	r1, r2, #5
 8005dfc:	693a      	ldr	r2, [r7, #16]
 8005dfe:	440a      	add	r2, r1
 8005e00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e04:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e08:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	3301      	adds	r3, #1
 8005e0e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f242 7210 	movw	r2, #10000	; 0x2710
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d902      	bls.n	8005e20 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	75fb      	strb	r3, [r7, #23]
          break;
 8005e1e:	e00c      	b.n	8005e3a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	015a      	lsls	r2, r3, #5
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	4413      	add	r3, r2
 8005e2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e38:	d0e7      	beq.n	8005e0a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005e3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	371c      	adds	r7, #28
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b089      	sub	sp, #36	; 0x24
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	60b9      	str	r1, [r7, #8]
 8005e52:	4611      	mov	r1, r2
 8005e54:	461a      	mov	r2, r3
 8005e56:	460b      	mov	r3, r1
 8005e58:	71fb      	strb	r3, [r7, #7]
 8005e5a:	4613      	mov	r3, r2
 8005e5c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005e66:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d123      	bne.n	8005eb6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005e6e:	88bb      	ldrh	r3, [r7, #4]
 8005e70:	3303      	adds	r3, #3
 8005e72:	089b      	lsrs	r3, r3, #2
 8005e74:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005e76:	2300      	movs	r3, #0
 8005e78:	61bb      	str	r3, [r7, #24]
 8005e7a:	e018      	b.n	8005eae <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005e7c:	79fb      	ldrb	r3, [r7, #7]
 8005e7e:	031a      	lsls	r2, r3, #12
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	4413      	add	r3, r2
 8005e84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e88:	461a      	mov	r2, r3
 8005e8a:	69fb      	ldr	r3, [r7, #28]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	3301      	adds	r3, #1
 8005e94:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	3301      	adds	r3, #1
 8005e9a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005e9c:	69fb      	ldr	r3, [r7, #28]
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005ea2:	69fb      	ldr	r3, [r7, #28]
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005ea8:	69bb      	ldr	r3, [r7, #24]
 8005eaa:	3301      	adds	r3, #1
 8005eac:	61bb      	str	r3, [r7, #24]
 8005eae:	69ba      	ldr	r2, [r7, #24]
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d3e2      	bcc.n	8005e7c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005eb6:	2300      	movs	r3, #0
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3724      	adds	r7, #36	; 0x24
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b08b      	sub	sp, #44	; 0x2c
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	60f8      	str	r0, [r7, #12]
 8005ecc:	60b9      	str	r1, [r7, #8]
 8005ece:	4613      	mov	r3, r2
 8005ed0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005eda:	88fb      	ldrh	r3, [r7, #6]
 8005edc:	089b      	lsrs	r3, r3, #2
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005ee2:	88fb      	ldrh	r3, [r7, #6]
 8005ee4:	f003 0303 	and.w	r3, r3, #3
 8005ee8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005eea:	2300      	movs	r3, #0
 8005eec:	623b      	str	r3, [r7, #32]
 8005eee:	e014      	b.n	8005f1a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005ef0:	69bb      	ldr	r3, [r7, #24]
 8005ef2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efa:	601a      	str	r2, [r3, #0]
    pDest++;
 8005efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efe:	3301      	adds	r3, #1
 8005f00:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f04:	3301      	adds	r3, #1
 8005f06:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0a:	3301      	adds	r3, #1
 8005f0c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f10:	3301      	adds	r3, #1
 8005f12:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005f14:	6a3b      	ldr	r3, [r7, #32]
 8005f16:	3301      	adds	r3, #1
 8005f18:	623b      	str	r3, [r7, #32]
 8005f1a:	6a3a      	ldr	r2, [r7, #32]
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d3e6      	bcc.n	8005ef0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005f22:	8bfb      	ldrh	r3, [r7, #30]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d01e      	beq.n	8005f66 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005f2c:	69bb      	ldr	r3, [r7, #24]
 8005f2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f32:	461a      	mov	r2, r3
 8005f34:	f107 0310 	add.w	r3, r7, #16
 8005f38:	6812      	ldr	r2, [r2, #0]
 8005f3a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005f3c:	693a      	ldr	r2, [r7, #16]
 8005f3e:	6a3b      	ldr	r3, [r7, #32]
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	00db      	lsls	r3, r3, #3
 8005f44:	fa22 f303 	lsr.w	r3, r2, r3
 8005f48:	b2da      	uxtb	r2, r3
 8005f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4c:	701a      	strb	r2, [r3, #0]
      i++;
 8005f4e:	6a3b      	ldr	r3, [r7, #32]
 8005f50:	3301      	adds	r3, #1
 8005f52:	623b      	str	r3, [r7, #32]
      pDest++;
 8005f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f56:	3301      	adds	r3, #1
 8005f58:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005f5a:	8bfb      	ldrh	r3, [r7, #30]
 8005f5c:	3b01      	subs	r3, #1
 8005f5e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005f60:	8bfb      	ldrh	r3, [r7, #30]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d1ea      	bne.n	8005f3c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	372c      	adds	r7, #44	; 0x2c
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b085      	sub	sp, #20
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	781b      	ldrb	r3, [r3, #0]
 8005f86:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	785b      	ldrb	r3, [r3, #1]
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d12c      	bne.n	8005fea <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	015a      	lsls	r2, r3, #5
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	4413      	add	r3, r2
 8005f98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	db12      	blt.n	8005fc8 <USB_EPSetStall+0x54>
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d00f      	beq.n	8005fc8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	015a      	lsls	r2, r3, #5
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	4413      	add	r3, r2
 8005fb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	68ba      	ldr	r2, [r7, #8]
 8005fb8:	0151      	lsls	r1, r2, #5
 8005fba:	68fa      	ldr	r2, [r7, #12]
 8005fbc:	440a      	add	r2, r1
 8005fbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fc2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005fc6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	015a      	lsls	r2, r3, #5
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	4413      	add	r3, r2
 8005fd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	68ba      	ldr	r2, [r7, #8]
 8005fd8:	0151      	lsls	r1, r2, #5
 8005fda:	68fa      	ldr	r2, [r7, #12]
 8005fdc:	440a      	add	r2, r1
 8005fde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fe2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005fe6:	6013      	str	r3, [r2, #0]
 8005fe8:	e02b      	b.n	8006042 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	015a      	lsls	r2, r3, #5
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	4413      	add	r3, r2
 8005ff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	db12      	blt.n	8006022 <USB_EPSetStall+0xae>
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d00f      	beq.n	8006022 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	015a      	lsls	r2, r3, #5
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	4413      	add	r3, r2
 800600a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	68ba      	ldr	r2, [r7, #8]
 8006012:	0151      	lsls	r1, r2, #5
 8006014:	68fa      	ldr	r2, [r7, #12]
 8006016:	440a      	add	r2, r1
 8006018:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800601c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006020:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	015a      	lsls	r2, r3, #5
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	4413      	add	r3, r2
 800602a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	68ba      	ldr	r2, [r7, #8]
 8006032:	0151      	lsls	r1, r2, #5
 8006034:	68fa      	ldr	r2, [r7, #12]
 8006036:	440a      	add	r2, r1
 8006038:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800603c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006040:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006042:	2300      	movs	r3, #0
}
 8006044:	4618      	mov	r0, r3
 8006046:	3714      	adds	r7, #20
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr

08006050 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006050:	b480      	push	{r7}
 8006052:	b085      	sub	sp, #20
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	785b      	ldrb	r3, [r3, #1]
 8006068:	2b01      	cmp	r3, #1
 800606a:	d128      	bne.n	80060be <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	015a      	lsls	r2, r3, #5
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	4413      	add	r3, r2
 8006074:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	68ba      	ldr	r2, [r7, #8]
 800607c:	0151      	lsls	r1, r2, #5
 800607e:	68fa      	ldr	r2, [r7, #12]
 8006080:	440a      	add	r2, r1
 8006082:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006086:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800608a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	791b      	ldrb	r3, [r3, #4]
 8006090:	2b03      	cmp	r3, #3
 8006092:	d003      	beq.n	800609c <USB_EPClearStall+0x4c>
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	791b      	ldrb	r3, [r3, #4]
 8006098:	2b02      	cmp	r3, #2
 800609a:	d138      	bne.n	800610e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	015a      	lsls	r2, r3, #5
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	4413      	add	r3, r2
 80060a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	68ba      	ldr	r2, [r7, #8]
 80060ac:	0151      	lsls	r1, r2, #5
 80060ae:	68fa      	ldr	r2, [r7, #12]
 80060b0:	440a      	add	r2, r1
 80060b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060ba:	6013      	str	r3, [r2, #0]
 80060bc:	e027      	b.n	800610e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	015a      	lsls	r2, r3, #5
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	4413      	add	r3, r2
 80060c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	68ba      	ldr	r2, [r7, #8]
 80060ce:	0151      	lsls	r1, r2, #5
 80060d0:	68fa      	ldr	r2, [r7, #12]
 80060d2:	440a      	add	r2, r1
 80060d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060d8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80060dc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	791b      	ldrb	r3, [r3, #4]
 80060e2:	2b03      	cmp	r3, #3
 80060e4:	d003      	beq.n	80060ee <USB_EPClearStall+0x9e>
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	791b      	ldrb	r3, [r3, #4]
 80060ea:	2b02      	cmp	r3, #2
 80060ec:	d10f      	bne.n	800610e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	015a      	lsls	r2, r3, #5
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	4413      	add	r3, r2
 80060f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	68ba      	ldr	r2, [r7, #8]
 80060fe:	0151      	lsls	r1, r2, #5
 8006100:	68fa      	ldr	r2, [r7, #12]
 8006102:	440a      	add	r2, r1
 8006104:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006108:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800610c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800610e:	2300      	movs	r3, #0
}
 8006110:	4618      	mov	r0, r3
 8006112:	3714      	adds	r7, #20
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800611c:	b480      	push	{r7}
 800611e:	b085      	sub	sp, #20
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	460b      	mov	r3, r1
 8006126:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	68fa      	ldr	r2, [r7, #12]
 8006136:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800613a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800613e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	78fb      	ldrb	r3, [r7, #3]
 800614a:	011b      	lsls	r3, r3, #4
 800614c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006150:	68f9      	ldr	r1, [r7, #12]
 8006152:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006156:	4313      	orrs	r3, r2
 8006158:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800615a:	2300      	movs	r3, #0
}
 800615c:	4618      	mov	r0, r3
 800615e:	3714      	adds	r7, #20
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr

08006168 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006168:	b480      	push	{r7}
 800616a:	b085      	sub	sp, #20
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	68fa      	ldr	r2, [r7, #12]
 800617e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006182:	f023 0303 	bic.w	r3, r3, #3
 8006186:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	68fa      	ldr	r2, [r7, #12]
 8006192:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006196:	f023 0302 	bic.w	r3, r3, #2
 800619a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800619c:	2300      	movs	r3, #0
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3714      	adds	r7, #20
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr

080061aa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80061aa:	b480      	push	{r7}
 80061ac:	b085      	sub	sp, #20
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	68fa      	ldr	r2, [r7, #12]
 80061c0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80061c4:	f023 0303 	bic.w	r3, r3, #3
 80061c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	68fa      	ldr	r2, [r7, #12]
 80061d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061d8:	f043 0302 	orr.w	r3, r3, #2
 80061dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80061de:	2300      	movs	r3, #0
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3714      	adds	r7, #20
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr

080061ec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b085      	sub	sp, #20
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	695b      	ldr	r3, [r3, #20]
 80061f8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	699b      	ldr	r3, [r3, #24]
 80061fe:	68fa      	ldr	r2, [r7, #12]
 8006200:	4013      	ands	r3, r2
 8006202:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006204:	68fb      	ldr	r3, [r7, #12]
}
 8006206:	4618      	mov	r0, r3
 8006208:	3714      	adds	r7, #20
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr

08006212 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006212:	b480      	push	{r7}
 8006214:	b085      	sub	sp, #20
 8006216:	af00      	add	r7, sp, #0
 8006218:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006224:	699b      	ldr	r3, [r3, #24]
 8006226:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800622e:	69db      	ldr	r3, [r3, #28]
 8006230:	68ba      	ldr	r2, [r7, #8]
 8006232:	4013      	ands	r3, r2
 8006234:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	0c1b      	lsrs	r3, r3, #16
}
 800623a:	4618      	mov	r0, r3
 800623c:	3714      	adds	r7, #20
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr

08006246 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006246:	b480      	push	{r7}
 8006248:	b085      	sub	sp, #20
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006258:	699b      	ldr	r3, [r3, #24]
 800625a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006262:	69db      	ldr	r3, [r3, #28]
 8006264:	68ba      	ldr	r2, [r7, #8]
 8006266:	4013      	ands	r3, r2
 8006268:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	b29b      	uxth	r3, r3
}
 800626e:	4618      	mov	r0, r3
 8006270:	3714      	adds	r7, #20
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr

0800627a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800627a:	b480      	push	{r7}
 800627c:	b085      	sub	sp, #20
 800627e:	af00      	add	r7, sp, #0
 8006280:	6078      	str	r0, [r7, #4]
 8006282:	460b      	mov	r3, r1
 8006284:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800628a:	78fb      	ldrb	r3, [r7, #3]
 800628c:	015a      	lsls	r2, r3, #5
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	4413      	add	r3, r2
 8006292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062a0:	695b      	ldr	r3, [r3, #20]
 80062a2:	68ba      	ldr	r2, [r7, #8]
 80062a4:	4013      	ands	r3, r2
 80062a6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80062a8:	68bb      	ldr	r3, [r7, #8]
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3714      	adds	r7, #20
 80062ae:	46bd      	mov	sp, r7
 80062b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b4:	4770      	bx	lr

080062b6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80062b6:	b480      	push	{r7}
 80062b8:	b087      	sub	sp, #28
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	6078      	str	r0, [r7, #4]
 80062be:	460b      	mov	r3, r1
 80062c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062cc:	691b      	ldr	r3, [r3, #16]
 80062ce:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062d8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80062da:	78fb      	ldrb	r3, [r7, #3]
 80062dc:	f003 030f 	and.w	r3, r3, #15
 80062e0:	68fa      	ldr	r2, [r7, #12]
 80062e2:	fa22 f303 	lsr.w	r3, r2, r3
 80062e6:	01db      	lsls	r3, r3, #7
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	693a      	ldr	r2, [r7, #16]
 80062ec:	4313      	orrs	r3, r2
 80062ee:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80062f0:	78fb      	ldrb	r3, [r7, #3]
 80062f2:	015a      	lsls	r2, r3, #5
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	4413      	add	r3, r2
 80062f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	693a      	ldr	r2, [r7, #16]
 8006300:	4013      	ands	r3, r2
 8006302:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006304:	68bb      	ldr	r3, [r7, #8]
}
 8006306:	4618      	mov	r0, r3
 8006308:	371c      	adds	r7, #28
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr

08006312 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006312:	b480      	push	{r7}
 8006314:	b083      	sub	sp, #12
 8006316:	af00      	add	r7, sp, #0
 8006318:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	695b      	ldr	r3, [r3, #20]
 800631e:	f003 0301 	and.w	r3, r3, #1
}
 8006322:	4618      	mov	r0, r3
 8006324:	370c      	adds	r7, #12
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr

0800632e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800632e:	b480      	push	{r7}
 8006330:	b085      	sub	sp, #20
 8006332:	af00      	add	r7, sp, #0
 8006334:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	68fa      	ldr	r2, [r7, #12]
 8006344:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006348:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800634c:	f023 0307 	bic.w	r3, r3, #7
 8006350:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	68fa      	ldr	r2, [r7, #12]
 800635c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006360:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006364:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006366:	2300      	movs	r3, #0
}
 8006368:	4618      	mov	r0, r3
 800636a:	3714      	adds	r7, #20
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr

08006374 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006374:	b480      	push	{r7}
 8006376:	b087      	sub	sp, #28
 8006378:	af00      	add	r7, sp, #0
 800637a:	60f8      	str	r0, [r7, #12]
 800637c:	460b      	mov	r3, r1
 800637e:	607a      	str	r2, [r7, #4]
 8006380:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	333c      	adds	r3, #60	; 0x3c
 800638a:	3304      	adds	r3, #4
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	4a26      	ldr	r2, [pc, #152]	; (800642c <USB_EP0_OutStart+0xb8>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d90a      	bls.n	80063ae <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063a8:	d101      	bne.n	80063ae <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80063aa:	2300      	movs	r3, #0
 80063ac:	e037      	b.n	800641e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063b4:	461a      	mov	r2, r3
 80063b6:	2300      	movs	r3, #0
 80063b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	697a      	ldr	r2, [r7, #20]
 80063c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80063cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	697a      	ldr	r2, [r7, #20]
 80063d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063dc:	f043 0318 	orr.w	r3, r3, #24
 80063e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	697a      	ldr	r2, [r7, #20]
 80063ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063f0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80063f4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80063f6:	7afb      	ldrb	r3, [r7, #11]
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d10f      	bne.n	800641c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006402:	461a      	mov	r2, r3
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	697a      	ldr	r2, [r7, #20]
 8006412:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006416:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800641a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800641c:	2300      	movs	r3, #0
}
 800641e:	4618      	mov	r0, r3
 8006420:	371c      	adds	r7, #28
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr
 800642a:	bf00      	nop
 800642c:	4f54300a 	.word	0x4f54300a

08006430 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006430:	b480      	push	{r7}
 8006432:	b085      	sub	sp, #20
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006438:	2300      	movs	r3, #0
 800643a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	3301      	adds	r3, #1
 8006440:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	4a13      	ldr	r2, [pc, #76]	; (8006494 <USB_CoreReset+0x64>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d901      	bls.n	800644e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800644a:	2303      	movs	r3, #3
 800644c:	e01b      	b.n	8006486 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	691b      	ldr	r3, [r3, #16]
 8006452:	2b00      	cmp	r3, #0
 8006454:	daf2      	bge.n	800643c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006456:	2300      	movs	r3, #0
 8006458:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	691b      	ldr	r3, [r3, #16]
 800645e:	f043 0201 	orr.w	r2, r3, #1
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	3301      	adds	r3, #1
 800646a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	4a09      	ldr	r2, [pc, #36]	; (8006494 <USB_CoreReset+0x64>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d901      	bls.n	8006478 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006474:	2303      	movs	r3, #3
 8006476:	e006      	b.n	8006486 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	691b      	ldr	r3, [r3, #16]
 800647c:	f003 0301 	and.w	r3, r3, #1
 8006480:	2b01      	cmp	r3, #1
 8006482:	d0f0      	beq.n	8006466 <USB_CoreReset+0x36>

  return HAL_OK;
 8006484:	2300      	movs	r3, #0
}
 8006486:	4618      	mov	r0, r3
 8006488:	3714      	adds	r7, #20
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr
 8006492:	bf00      	nop
 8006494:	00030d40 	.word	0x00030d40

08006498 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b084      	sub	sp, #16
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	460b      	mov	r3, r1
 80064a2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80064a4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80064a8:	f002 fd46 	bl	8008f38 <USBD_static_malloc>
 80064ac:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d109      	bne.n	80064c8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	32b0      	adds	r2, #176	; 0xb0
 80064be:	2100      	movs	r1, #0
 80064c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80064c4:	2302      	movs	r3, #2
 80064c6:	e0d4      	b.n	8006672 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80064c8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80064cc:	2100      	movs	r1, #0
 80064ce:	68f8      	ldr	r0, [r7, #12]
 80064d0:	f002 fda4 	bl	800901c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	32b0      	adds	r2, #176	; 0xb0
 80064de:	68f9      	ldr	r1, [r7, #12]
 80064e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	32b0      	adds	r2, #176	; 0xb0
 80064ee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	7c1b      	ldrb	r3, [r3, #16]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d138      	bne.n	8006572 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006500:	4b5e      	ldr	r3, [pc, #376]	; (800667c <USBD_CDC_Init+0x1e4>)
 8006502:	7819      	ldrb	r1, [r3, #0]
 8006504:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006508:	2202      	movs	r2, #2
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f002 fba3 	bl	8008c56 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006510:	4b5a      	ldr	r3, [pc, #360]	; (800667c <USBD_CDC_Init+0x1e4>)
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	f003 020f 	and.w	r2, r3, #15
 8006518:	6879      	ldr	r1, [r7, #4]
 800651a:	4613      	mov	r3, r2
 800651c:	009b      	lsls	r3, r3, #2
 800651e:	4413      	add	r3, r2
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	440b      	add	r3, r1
 8006524:	3324      	adds	r3, #36	; 0x24
 8006526:	2201      	movs	r2, #1
 8006528:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800652a:	4b55      	ldr	r3, [pc, #340]	; (8006680 <USBD_CDC_Init+0x1e8>)
 800652c:	7819      	ldrb	r1, [r3, #0]
 800652e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006532:	2202      	movs	r2, #2
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f002 fb8e 	bl	8008c56 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800653a:	4b51      	ldr	r3, [pc, #324]	; (8006680 <USBD_CDC_Init+0x1e8>)
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	f003 020f 	and.w	r2, r3, #15
 8006542:	6879      	ldr	r1, [r7, #4]
 8006544:	4613      	mov	r3, r2
 8006546:	009b      	lsls	r3, r3, #2
 8006548:	4413      	add	r3, r2
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	440b      	add	r3, r1
 800654e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006552:	2201      	movs	r2, #1
 8006554:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006556:	4b4b      	ldr	r3, [pc, #300]	; (8006684 <USBD_CDC_Init+0x1ec>)
 8006558:	781b      	ldrb	r3, [r3, #0]
 800655a:	f003 020f 	and.w	r2, r3, #15
 800655e:	6879      	ldr	r1, [r7, #4]
 8006560:	4613      	mov	r3, r2
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	4413      	add	r3, r2
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	440b      	add	r3, r1
 800656a:	3326      	adds	r3, #38	; 0x26
 800656c:	2210      	movs	r2, #16
 800656e:	801a      	strh	r2, [r3, #0]
 8006570:	e035      	b.n	80065de <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006572:	4b42      	ldr	r3, [pc, #264]	; (800667c <USBD_CDC_Init+0x1e4>)
 8006574:	7819      	ldrb	r1, [r3, #0]
 8006576:	2340      	movs	r3, #64	; 0x40
 8006578:	2202      	movs	r2, #2
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f002 fb6b 	bl	8008c56 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006580:	4b3e      	ldr	r3, [pc, #248]	; (800667c <USBD_CDC_Init+0x1e4>)
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	f003 020f 	and.w	r2, r3, #15
 8006588:	6879      	ldr	r1, [r7, #4]
 800658a:	4613      	mov	r3, r2
 800658c:	009b      	lsls	r3, r3, #2
 800658e:	4413      	add	r3, r2
 8006590:	009b      	lsls	r3, r3, #2
 8006592:	440b      	add	r3, r1
 8006594:	3324      	adds	r3, #36	; 0x24
 8006596:	2201      	movs	r2, #1
 8006598:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800659a:	4b39      	ldr	r3, [pc, #228]	; (8006680 <USBD_CDC_Init+0x1e8>)
 800659c:	7819      	ldrb	r1, [r3, #0]
 800659e:	2340      	movs	r3, #64	; 0x40
 80065a0:	2202      	movs	r2, #2
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f002 fb57 	bl	8008c56 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80065a8:	4b35      	ldr	r3, [pc, #212]	; (8006680 <USBD_CDC_Init+0x1e8>)
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	f003 020f 	and.w	r2, r3, #15
 80065b0:	6879      	ldr	r1, [r7, #4]
 80065b2:	4613      	mov	r3, r2
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	4413      	add	r3, r2
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	440b      	add	r3, r1
 80065bc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80065c0:	2201      	movs	r2, #1
 80065c2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80065c4:	4b2f      	ldr	r3, [pc, #188]	; (8006684 <USBD_CDC_Init+0x1ec>)
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	f003 020f 	and.w	r2, r3, #15
 80065cc:	6879      	ldr	r1, [r7, #4]
 80065ce:	4613      	mov	r3, r2
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	4413      	add	r3, r2
 80065d4:	009b      	lsls	r3, r3, #2
 80065d6:	440b      	add	r3, r1
 80065d8:	3326      	adds	r3, #38	; 0x26
 80065da:	2210      	movs	r2, #16
 80065dc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80065de:	4b29      	ldr	r3, [pc, #164]	; (8006684 <USBD_CDC_Init+0x1ec>)
 80065e0:	7819      	ldrb	r1, [r3, #0]
 80065e2:	2308      	movs	r3, #8
 80065e4:	2203      	movs	r2, #3
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f002 fb35 	bl	8008c56 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80065ec:	4b25      	ldr	r3, [pc, #148]	; (8006684 <USBD_CDC_Init+0x1ec>)
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	f003 020f 	and.w	r2, r3, #15
 80065f4:	6879      	ldr	r1, [r7, #4]
 80065f6:	4613      	mov	r3, r2
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	4413      	add	r3, r2
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	440b      	add	r3, r1
 8006600:	3324      	adds	r3, #36	; 0x24
 8006602:	2201      	movs	r2, #1
 8006604:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2200      	movs	r2, #0
 800660a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006614:	687a      	ldr	r2, [r7, #4]
 8006616:	33b0      	adds	r3, #176	; 0xb0
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	4413      	add	r3, r2
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2200      	movs	r2, #0
 8006626:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2200      	movs	r2, #0
 800662e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006638:	2b00      	cmp	r3, #0
 800663a:	d101      	bne.n	8006640 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800663c:	2302      	movs	r3, #2
 800663e:	e018      	b.n	8006672 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	7c1b      	ldrb	r3, [r3, #16]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d10a      	bne.n	800665e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006648:	4b0d      	ldr	r3, [pc, #52]	; (8006680 <USBD_CDC_Init+0x1e8>)
 800664a:	7819      	ldrb	r1, [r3, #0]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006652:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f002 fbec 	bl	8008e34 <USBD_LL_PrepareReceive>
 800665c:	e008      	b.n	8006670 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800665e:	4b08      	ldr	r3, [pc, #32]	; (8006680 <USBD_CDC_Init+0x1e8>)
 8006660:	7819      	ldrb	r1, [r3, #0]
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006668:	2340      	movs	r3, #64	; 0x40
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f002 fbe2 	bl	8008e34 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006670:	2300      	movs	r3, #0
}
 8006672:	4618      	mov	r0, r3
 8006674:	3710      	adds	r7, #16
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}
 800667a:	bf00      	nop
 800667c:	20000097 	.word	0x20000097
 8006680:	20000098 	.word	0x20000098
 8006684:	20000099 	.word	0x20000099

08006688 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b082      	sub	sp, #8
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	460b      	mov	r3, r1
 8006692:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006694:	4b3a      	ldr	r3, [pc, #232]	; (8006780 <USBD_CDC_DeInit+0xf8>)
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	4619      	mov	r1, r3
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f002 fb01 	bl	8008ca2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80066a0:	4b37      	ldr	r3, [pc, #220]	; (8006780 <USBD_CDC_DeInit+0xf8>)
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	f003 020f 	and.w	r2, r3, #15
 80066a8:	6879      	ldr	r1, [r7, #4]
 80066aa:	4613      	mov	r3, r2
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	4413      	add	r3, r2
 80066b0:	009b      	lsls	r3, r3, #2
 80066b2:	440b      	add	r3, r1
 80066b4:	3324      	adds	r3, #36	; 0x24
 80066b6:	2200      	movs	r2, #0
 80066b8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80066ba:	4b32      	ldr	r3, [pc, #200]	; (8006784 <USBD_CDC_DeInit+0xfc>)
 80066bc:	781b      	ldrb	r3, [r3, #0]
 80066be:	4619      	mov	r1, r3
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f002 faee 	bl	8008ca2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80066c6:	4b2f      	ldr	r3, [pc, #188]	; (8006784 <USBD_CDC_DeInit+0xfc>)
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	f003 020f 	and.w	r2, r3, #15
 80066ce:	6879      	ldr	r1, [r7, #4]
 80066d0:	4613      	mov	r3, r2
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	4413      	add	r3, r2
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	440b      	add	r3, r1
 80066da:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80066de:	2200      	movs	r2, #0
 80066e0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80066e2:	4b29      	ldr	r3, [pc, #164]	; (8006788 <USBD_CDC_DeInit+0x100>)
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	4619      	mov	r1, r3
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f002 fada 	bl	8008ca2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80066ee:	4b26      	ldr	r3, [pc, #152]	; (8006788 <USBD_CDC_DeInit+0x100>)
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	f003 020f 	and.w	r2, r3, #15
 80066f6:	6879      	ldr	r1, [r7, #4]
 80066f8:	4613      	mov	r3, r2
 80066fa:	009b      	lsls	r3, r3, #2
 80066fc:	4413      	add	r3, r2
 80066fe:	009b      	lsls	r3, r3, #2
 8006700:	440b      	add	r3, r1
 8006702:	3324      	adds	r3, #36	; 0x24
 8006704:	2200      	movs	r2, #0
 8006706:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006708:	4b1f      	ldr	r3, [pc, #124]	; (8006788 <USBD_CDC_DeInit+0x100>)
 800670a:	781b      	ldrb	r3, [r3, #0]
 800670c:	f003 020f 	and.w	r2, r3, #15
 8006710:	6879      	ldr	r1, [r7, #4]
 8006712:	4613      	mov	r3, r2
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	4413      	add	r3, r2
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	440b      	add	r3, r1
 800671c:	3326      	adds	r3, #38	; 0x26
 800671e:	2200      	movs	r2, #0
 8006720:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	32b0      	adds	r2, #176	; 0xb0
 800672c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d01f      	beq.n	8006774 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	33b0      	adds	r3, #176	; 0xb0
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	4413      	add	r3, r2
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	32b0      	adds	r2, #176	; 0xb0
 8006752:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006756:	4618      	mov	r0, r3
 8006758:	f002 fbfc 	bl	8008f54 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	32b0      	adds	r2, #176	; 0xb0
 8006766:	2100      	movs	r1, #0
 8006768:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2200      	movs	r2, #0
 8006770:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006774:	2300      	movs	r3, #0
}
 8006776:	4618      	mov	r0, r3
 8006778:	3708      	adds	r7, #8
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
 800677e:	bf00      	nop
 8006780:	20000097 	.word	0x20000097
 8006784:	20000098 	.word	0x20000098
 8006788:	20000099 	.word	0x20000099

0800678c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b086      	sub	sp, #24
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	32b0      	adds	r2, #176	; 0xb0
 80067a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067a4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80067a6:	2300      	movs	r3, #0
 80067a8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80067aa:	2300      	movs	r3, #0
 80067ac:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80067ae:	2300      	movs	r3, #0
 80067b0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d101      	bne.n	80067bc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80067b8:	2303      	movs	r3, #3
 80067ba:	e0bf      	b.n	800693c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	781b      	ldrb	r3, [r3, #0]
 80067c0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d050      	beq.n	800686a <USBD_CDC_Setup+0xde>
 80067c8:	2b20      	cmp	r3, #32
 80067ca:	f040 80af 	bne.w	800692c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	88db      	ldrh	r3, [r3, #6]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d03a      	beq.n	800684c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	b25b      	sxtb	r3, r3
 80067dc:	2b00      	cmp	r3, #0
 80067de:	da1b      	bge.n	8006818 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	33b0      	adds	r3, #176	; 0xb0
 80067ea:	009b      	lsls	r3, r3, #2
 80067ec:	4413      	add	r3, r2
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	683a      	ldr	r2, [r7, #0]
 80067f4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80067f6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80067f8:	683a      	ldr	r2, [r7, #0]
 80067fa:	88d2      	ldrh	r2, [r2, #6]
 80067fc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	88db      	ldrh	r3, [r3, #6]
 8006802:	2b07      	cmp	r3, #7
 8006804:	bf28      	it	cs
 8006806:	2307      	movcs	r3, #7
 8006808:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	89fa      	ldrh	r2, [r7, #14]
 800680e:	4619      	mov	r1, r3
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f001 fdb3 	bl	800837c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006816:	e090      	b.n	800693a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	785a      	ldrb	r2, [r3, #1]
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	88db      	ldrh	r3, [r3, #6]
 8006826:	2b3f      	cmp	r3, #63	; 0x3f
 8006828:	d803      	bhi.n	8006832 <USBD_CDC_Setup+0xa6>
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	88db      	ldrh	r3, [r3, #6]
 800682e:	b2da      	uxtb	r2, r3
 8006830:	e000      	b.n	8006834 <USBD_CDC_Setup+0xa8>
 8006832:	2240      	movs	r2, #64	; 0x40
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800683a:	6939      	ldr	r1, [r7, #16]
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006842:	461a      	mov	r2, r3
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f001 fdc5 	bl	80083d4 <USBD_CtlPrepareRx>
      break;
 800684a:	e076      	b.n	800693a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006852:	687a      	ldr	r2, [r7, #4]
 8006854:	33b0      	adds	r3, #176	; 0xb0
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	4413      	add	r3, r2
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	683a      	ldr	r2, [r7, #0]
 8006860:	7850      	ldrb	r0, [r2, #1]
 8006862:	2200      	movs	r2, #0
 8006864:	6839      	ldr	r1, [r7, #0]
 8006866:	4798      	blx	r3
      break;
 8006868:	e067      	b.n	800693a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	785b      	ldrb	r3, [r3, #1]
 800686e:	2b0b      	cmp	r3, #11
 8006870:	d851      	bhi.n	8006916 <USBD_CDC_Setup+0x18a>
 8006872:	a201      	add	r2, pc, #4	; (adr r2, 8006878 <USBD_CDC_Setup+0xec>)
 8006874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006878:	080068a9 	.word	0x080068a9
 800687c:	08006925 	.word	0x08006925
 8006880:	08006917 	.word	0x08006917
 8006884:	08006917 	.word	0x08006917
 8006888:	08006917 	.word	0x08006917
 800688c:	08006917 	.word	0x08006917
 8006890:	08006917 	.word	0x08006917
 8006894:	08006917 	.word	0x08006917
 8006898:	08006917 	.word	0x08006917
 800689c:	08006917 	.word	0x08006917
 80068a0:	080068d3 	.word	0x080068d3
 80068a4:	080068fd 	.word	0x080068fd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068ae:	b2db      	uxtb	r3, r3
 80068b0:	2b03      	cmp	r3, #3
 80068b2:	d107      	bne.n	80068c4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80068b4:	f107 030a 	add.w	r3, r7, #10
 80068b8:	2202      	movs	r2, #2
 80068ba:	4619      	mov	r1, r3
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f001 fd5d 	bl	800837c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80068c2:	e032      	b.n	800692a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80068c4:	6839      	ldr	r1, [r7, #0]
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f001 fce7 	bl	800829a <USBD_CtlError>
            ret = USBD_FAIL;
 80068cc:	2303      	movs	r3, #3
 80068ce:	75fb      	strb	r3, [r7, #23]
          break;
 80068d0:	e02b      	b.n	800692a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	2b03      	cmp	r3, #3
 80068dc:	d107      	bne.n	80068ee <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80068de:	f107 030d 	add.w	r3, r7, #13
 80068e2:	2201      	movs	r2, #1
 80068e4:	4619      	mov	r1, r3
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f001 fd48 	bl	800837c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80068ec:	e01d      	b.n	800692a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80068ee:	6839      	ldr	r1, [r7, #0]
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f001 fcd2 	bl	800829a <USBD_CtlError>
            ret = USBD_FAIL;
 80068f6:	2303      	movs	r3, #3
 80068f8:	75fb      	strb	r3, [r7, #23]
          break;
 80068fa:	e016      	b.n	800692a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006902:	b2db      	uxtb	r3, r3
 8006904:	2b03      	cmp	r3, #3
 8006906:	d00f      	beq.n	8006928 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006908:	6839      	ldr	r1, [r7, #0]
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f001 fcc5 	bl	800829a <USBD_CtlError>
            ret = USBD_FAIL;
 8006910:	2303      	movs	r3, #3
 8006912:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006914:	e008      	b.n	8006928 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006916:	6839      	ldr	r1, [r7, #0]
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f001 fcbe 	bl	800829a <USBD_CtlError>
          ret = USBD_FAIL;
 800691e:	2303      	movs	r3, #3
 8006920:	75fb      	strb	r3, [r7, #23]
          break;
 8006922:	e002      	b.n	800692a <USBD_CDC_Setup+0x19e>
          break;
 8006924:	bf00      	nop
 8006926:	e008      	b.n	800693a <USBD_CDC_Setup+0x1ae>
          break;
 8006928:	bf00      	nop
      }
      break;
 800692a:	e006      	b.n	800693a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800692c:	6839      	ldr	r1, [r7, #0]
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f001 fcb3 	bl	800829a <USBD_CtlError>
      ret = USBD_FAIL;
 8006934:	2303      	movs	r3, #3
 8006936:	75fb      	strb	r3, [r7, #23]
      break;
 8006938:	bf00      	nop
  }

  return (uint8_t)ret;
 800693a:	7dfb      	ldrb	r3, [r7, #23]
}
 800693c:	4618      	mov	r0, r3
 800693e:	3718      	adds	r7, #24
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}

08006944 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	460b      	mov	r3, r1
 800694e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006956:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	32b0      	adds	r2, #176	; 0xb0
 8006962:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d101      	bne.n	800696e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800696a:	2303      	movs	r3, #3
 800696c:	e065      	b.n	8006a3a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	32b0      	adds	r2, #176	; 0xb0
 8006978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800697c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800697e:	78fb      	ldrb	r3, [r7, #3]
 8006980:	f003 020f 	and.w	r2, r3, #15
 8006984:	6879      	ldr	r1, [r7, #4]
 8006986:	4613      	mov	r3, r2
 8006988:	009b      	lsls	r3, r3, #2
 800698a:	4413      	add	r3, r2
 800698c:	009b      	lsls	r3, r3, #2
 800698e:	440b      	add	r3, r1
 8006990:	3318      	adds	r3, #24
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d02f      	beq.n	80069f8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006998:	78fb      	ldrb	r3, [r7, #3]
 800699a:	f003 020f 	and.w	r2, r3, #15
 800699e:	6879      	ldr	r1, [r7, #4]
 80069a0:	4613      	mov	r3, r2
 80069a2:	009b      	lsls	r3, r3, #2
 80069a4:	4413      	add	r3, r2
 80069a6:	009b      	lsls	r3, r3, #2
 80069a8:	440b      	add	r3, r1
 80069aa:	3318      	adds	r3, #24
 80069ac:	681a      	ldr	r2, [r3, #0]
 80069ae:	78fb      	ldrb	r3, [r7, #3]
 80069b0:	f003 010f 	and.w	r1, r3, #15
 80069b4:	68f8      	ldr	r0, [r7, #12]
 80069b6:	460b      	mov	r3, r1
 80069b8:	00db      	lsls	r3, r3, #3
 80069ba:	440b      	add	r3, r1
 80069bc:	009b      	lsls	r3, r3, #2
 80069be:	4403      	add	r3, r0
 80069c0:	3348      	adds	r3, #72	; 0x48
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	fbb2 f1f3 	udiv	r1, r2, r3
 80069c8:	fb01 f303 	mul.w	r3, r1, r3
 80069cc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d112      	bne.n	80069f8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80069d2:	78fb      	ldrb	r3, [r7, #3]
 80069d4:	f003 020f 	and.w	r2, r3, #15
 80069d8:	6879      	ldr	r1, [r7, #4]
 80069da:	4613      	mov	r3, r2
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	4413      	add	r3, r2
 80069e0:	009b      	lsls	r3, r3, #2
 80069e2:	440b      	add	r3, r1
 80069e4:	3318      	adds	r3, #24
 80069e6:	2200      	movs	r2, #0
 80069e8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80069ea:	78f9      	ldrb	r1, [r7, #3]
 80069ec:	2300      	movs	r3, #0
 80069ee:	2200      	movs	r2, #0
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f002 f9fe 	bl	8008df2 <USBD_LL_Transmit>
 80069f6:	e01f      	b.n	8006a38 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	2200      	movs	r2, #0
 80069fc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006a06:	687a      	ldr	r2, [r7, #4]
 8006a08:	33b0      	adds	r3, #176	; 0xb0
 8006a0a:	009b      	lsls	r3, r3, #2
 8006a0c:	4413      	add	r3, r2
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	691b      	ldr	r3, [r3, #16]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d010      	beq.n	8006a38 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006a1c:	687a      	ldr	r2, [r7, #4]
 8006a1e:	33b0      	adds	r3, #176	; 0xb0
 8006a20:	009b      	lsls	r3, r3, #2
 8006a22:	4413      	add	r3, r2
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	691b      	ldr	r3, [r3, #16]
 8006a28:	68ba      	ldr	r2, [r7, #8]
 8006a2a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006a2e:	68ba      	ldr	r2, [r7, #8]
 8006a30:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006a34:	78fa      	ldrb	r2, [r7, #3]
 8006a36:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006a38:	2300      	movs	r3, #0
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3710      	adds	r7, #16
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}

08006a42 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006a42:	b580      	push	{r7, lr}
 8006a44:	b084      	sub	sp, #16
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	6078      	str	r0, [r7, #4]
 8006a4a:	460b      	mov	r3, r1
 8006a4c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	32b0      	adds	r2, #176	; 0xb0
 8006a58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a5c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	32b0      	adds	r2, #176	; 0xb0
 8006a68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d101      	bne.n	8006a74 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006a70:	2303      	movs	r3, #3
 8006a72:	e01a      	b.n	8006aaa <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006a74:	78fb      	ldrb	r3, [r7, #3]
 8006a76:	4619      	mov	r1, r3
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f002 f9fc 	bl	8008e76 <USBD_LL_GetRxDataSize>
 8006a7e:	4602      	mov	r2, r0
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	33b0      	adds	r3, #176	; 0xb0
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	4413      	add	r3, r2
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	68db      	ldr	r3, [r3, #12]
 8006a98:	68fa      	ldr	r2, [r7, #12]
 8006a9a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006a9e:	68fa      	ldr	r2, [r7, #12]
 8006aa0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006aa4:	4611      	mov	r1, r2
 8006aa6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006aa8:	2300      	movs	r3, #0
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3710      	adds	r7, #16
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}

08006ab2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006ab2:	b580      	push	{r7, lr}
 8006ab4:	b084      	sub	sp, #16
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	32b0      	adds	r2, #176	; 0xb0
 8006ac4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ac8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d101      	bne.n	8006ad4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006ad0:	2303      	movs	r3, #3
 8006ad2:	e025      	b.n	8006b20 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	33b0      	adds	r3, #176	; 0xb0
 8006ade:	009b      	lsls	r3, r3, #2
 8006ae0:	4413      	add	r3, r2
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d01a      	beq.n	8006b1e <USBD_CDC_EP0_RxReady+0x6c>
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006aee:	2bff      	cmp	r3, #255	; 0xff
 8006af0:	d015      	beq.n	8006b1e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	33b0      	adds	r3, #176	; 0xb0
 8006afc:	009b      	lsls	r3, r3, #2
 8006afe:	4413      	add	r3, r2
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	68fa      	ldr	r2, [r7, #12]
 8006b06:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006b0a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006b0c:	68fa      	ldr	r2, [r7, #12]
 8006b0e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006b12:	b292      	uxth	r2, r2
 8006b14:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	22ff      	movs	r2, #255	; 0xff
 8006b1a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006b1e:	2300      	movs	r3, #0
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3710      	adds	r7, #16
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b086      	sub	sp, #24
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006b30:	2182      	movs	r1, #130	; 0x82
 8006b32:	4818      	ldr	r0, [pc, #96]	; (8006b94 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006b34:	f000 fd4f 	bl	80075d6 <USBD_GetEpDesc>
 8006b38:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006b3a:	2101      	movs	r1, #1
 8006b3c:	4815      	ldr	r0, [pc, #84]	; (8006b94 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006b3e:	f000 fd4a 	bl	80075d6 <USBD_GetEpDesc>
 8006b42:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006b44:	2181      	movs	r1, #129	; 0x81
 8006b46:	4813      	ldr	r0, [pc, #76]	; (8006b94 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006b48:	f000 fd45 	bl	80075d6 <USBD_GetEpDesc>
 8006b4c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d002      	beq.n	8006b5a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	2210      	movs	r2, #16
 8006b58:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d006      	beq.n	8006b6e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	2200      	movs	r2, #0
 8006b64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b68:	711a      	strb	r2, [r3, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d006      	beq.n	8006b82 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2200      	movs	r2, #0
 8006b78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b7c:	711a      	strb	r2, [r3, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2243      	movs	r2, #67	; 0x43
 8006b86:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006b88:	4b02      	ldr	r3, [pc, #8]	; (8006b94 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3718      	adds	r7, #24
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop
 8006b94:	20000054 	.word	0x20000054

08006b98 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b086      	sub	sp, #24
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006ba0:	2182      	movs	r1, #130	; 0x82
 8006ba2:	4818      	ldr	r0, [pc, #96]	; (8006c04 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006ba4:	f000 fd17 	bl	80075d6 <USBD_GetEpDesc>
 8006ba8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006baa:	2101      	movs	r1, #1
 8006bac:	4815      	ldr	r0, [pc, #84]	; (8006c04 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006bae:	f000 fd12 	bl	80075d6 <USBD_GetEpDesc>
 8006bb2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006bb4:	2181      	movs	r1, #129	; 0x81
 8006bb6:	4813      	ldr	r0, [pc, #76]	; (8006c04 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006bb8:	f000 fd0d 	bl	80075d6 <USBD_GetEpDesc>
 8006bbc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d002      	beq.n	8006bca <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	2210      	movs	r2, #16
 8006bc8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d006      	beq.n	8006bde <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	711a      	strb	r2, [r3, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f042 0202 	orr.w	r2, r2, #2
 8006bdc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d006      	beq.n	8006bf2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2200      	movs	r2, #0
 8006be8:	711a      	strb	r2, [r3, #4]
 8006bea:	2200      	movs	r2, #0
 8006bec:	f042 0202 	orr.w	r2, r2, #2
 8006bf0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2243      	movs	r2, #67	; 0x43
 8006bf6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006bf8:	4b02      	ldr	r3, [pc, #8]	; (8006c04 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3718      	adds	r7, #24
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop
 8006c04:	20000054 	.word	0x20000054

08006c08 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b086      	sub	sp, #24
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006c10:	2182      	movs	r1, #130	; 0x82
 8006c12:	4818      	ldr	r0, [pc, #96]	; (8006c74 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006c14:	f000 fcdf 	bl	80075d6 <USBD_GetEpDesc>
 8006c18:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006c1a:	2101      	movs	r1, #1
 8006c1c:	4815      	ldr	r0, [pc, #84]	; (8006c74 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006c1e:	f000 fcda 	bl	80075d6 <USBD_GetEpDesc>
 8006c22:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006c24:	2181      	movs	r1, #129	; 0x81
 8006c26:	4813      	ldr	r0, [pc, #76]	; (8006c74 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006c28:	f000 fcd5 	bl	80075d6 <USBD_GetEpDesc>
 8006c2c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d002      	beq.n	8006c3a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	2210      	movs	r2, #16
 8006c38:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d006      	beq.n	8006c4e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	2200      	movs	r2, #0
 8006c44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c48:	711a      	strb	r2, [r3, #4]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d006      	beq.n	8006c62 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2200      	movs	r2, #0
 8006c58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c5c:	711a      	strb	r2, [r3, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2243      	movs	r2, #67	; 0x43
 8006c66:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006c68:	4b02      	ldr	r3, [pc, #8]	; (8006c74 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3718      	adds	r7, #24
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}
 8006c72:	bf00      	nop
 8006c74:	20000054 	.word	0x20000054

08006c78 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b083      	sub	sp, #12
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	220a      	movs	r2, #10
 8006c84:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006c86:	4b03      	ldr	r3, [pc, #12]	; (8006c94 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	370c      	adds	r7, #12
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr
 8006c94:	20000010 	.word	0x20000010

08006c98 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b083      	sub	sp, #12
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d101      	bne.n	8006cac <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006ca8:	2303      	movs	r3, #3
 8006caa:	e009      	b.n	8006cc0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	33b0      	adds	r3, #176	; 0xb0
 8006cb6:	009b      	lsls	r3, r3, #2
 8006cb8:	4413      	add	r3, r2
 8006cba:	683a      	ldr	r2, [r7, #0]
 8006cbc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006cbe:	2300      	movs	r3, #0
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	370c      	adds	r7, #12
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr

08006ccc <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b087      	sub	sp, #28
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	60f8      	str	r0, [r7, #12]
 8006cd4:	60b9      	str	r1, [r7, #8]
 8006cd6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	32b0      	adds	r2, #176	; 0xb0
 8006ce2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ce6:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d101      	bne.n	8006cf2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006cee:	2303      	movs	r3, #3
 8006cf0:	e008      	b.n	8006d04 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	68ba      	ldr	r2, [r7, #8]
 8006cf6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006d02:	2300      	movs	r3, #0
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	371c      	adds	r7, #28
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr

08006d10 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b085      	sub	sp, #20
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	32b0      	adds	r2, #176	; 0xb0
 8006d24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d28:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d101      	bne.n	8006d34 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006d30:	2303      	movs	r3, #3
 8006d32:	e004      	b.n	8006d3e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	683a      	ldr	r2, [r7, #0]
 8006d38:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006d3c:	2300      	movs	r3, #0
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3714      	adds	r7, #20
 8006d42:	46bd      	mov	sp, r7
 8006d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d48:	4770      	bx	lr
	...

08006d4c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b084      	sub	sp, #16
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	32b0      	adds	r2, #176	; 0xb0
 8006d5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d62:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006d64:	2301      	movs	r3, #1
 8006d66:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	32b0      	adds	r2, #176	; 0xb0
 8006d72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d101      	bne.n	8006d7e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006d7a:	2303      	movs	r3, #3
 8006d7c:	e025      	b.n	8006dca <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d11f      	bne.n	8006dc8 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006d90:	4b10      	ldr	r3, [pc, #64]	; (8006dd4 <USBD_CDC_TransmitPacket+0x88>)
 8006d92:	781b      	ldrb	r3, [r3, #0]
 8006d94:	f003 020f 	and.w	r2, r3, #15
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	4613      	mov	r3, r2
 8006da2:	009b      	lsls	r3, r3, #2
 8006da4:	4413      	add	r3, r2
 8006da6:	009b      	lsls	r3, r3, #2
 8006da8:	4403      	add	r3, r0
 8006daa:	3318      	adds	r3, #24
 8006dac:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006dae:	4b09      	ldr	r3, [pc, #36]	; (8006dd4 <USBD_CDC_TransmitPacket+0x88>)
 8006db0:	7819      	ldrb	r1, [r3, #0]
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f002 f817 	bl	8008df2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3710      	adds	r7, #16
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}
 8006dd2:	bf00      	nop
 8006dd4:	20000097 	.word	0x20000097

08006dd8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	32b0      	adds	r2, #176	; 0xb0
 8006dea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dee:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	32b0      	adds	r2, #176	; 0xb0
 8006dfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d101      	bne.n	8006e06 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006e02:	2303      	movs	r3, #3
 8006e04:	e018      	b.n	8006e38 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	7c1b      	ldrb	r3, [r3, #16]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d10a      	bne.n	8006e24 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006e0e:	4b0c      	ldr	r3, [pc, #48]	; (8006e40 <USBD_CDC_ReceivePacket+0x68>)
 8006e10:	7819      	ldrb	r1, [r3, #0]
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006e18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f002 f809 	bl	8008e34 <USBD_LL_PrepareReceive>
 8006e22:	e008      	b.n	8006e36 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006e24:	4b06      	ldr	r3, [pc, #24]	; (8006e40 <USBD_CDC_ReceivePacket+0x68>)
 8006e26:	7819      	ldrb	r1, [r3, #0]
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006e2e:	2340      	movs	r3, #64	; 0x40
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f001 ffff 	bl	8008e34 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006e36:	2300      	movs	r3, #0
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3710      	adds	r7, #16
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}
 8006e40:	20000098 	.word	0x20000098

08006e44 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b086      	sub	sp, #24
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	60f8      	str	r0, [r7, #12]
 8006e4c:	60b9      	str	r1, [r7, #8]
 8006e4e:	4613      	mov	r3, r2
 8006e50:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d101      	bne.n	8006e5c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006e58:	2303      	movs	r3, #3
 8006e5a:	e01f      	b.n	8006e9c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2200      	movs	r2, #0
 8006e68:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d003      	beq.n	8006e82 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	68ba      	ldr	r2, [r7, #8]
 8006e7e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2201      	movs	r2, #1
 8006e86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	79fa      	ldrb	r2, [r7, #7]
 8006e8e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006e90:	68f8      	ldr	r0, [r7, #12]
 8006e92:	f001 fe79 	bl	8008b88 <USBD_LL_Init>
 8006e96:	4603      	mov	r3, r0
 8006e98:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006e9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3718      	adds	r7, #24
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b084      	sub	sp, #16
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d101      	bne.n	8006ebc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006eb8:	2303      	movs	r3, #3
 8006eba:	e025      	b.n	8006f08 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	683a      	ldr	r2, [r7, #0]
 8006ec0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	32ae      	adds	r2, #174	; 0xae
 8006ece:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d00f      	beq.n	8006ef8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	32ae      	adds	r2, #174	; 0xae
 8006ee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee8:	f107 020e 	add.w	r2, r7, #14
 8006eec:	4610      	mov	r0, r2
 8006eee:	4798      	blx	r3
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006efe:	1c5a      	adds	r2, r3, #1
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006f06:	2300      	movs	r3, #0
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3710      	adds	r7, #16
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}

08006f10 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b082      	sub	sp, #8
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f001 fe81 	bl	8008c20 <USBD_LL_Start>
 8006f1e:	4603      	mov	r3, r0
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3708      	adds	r7, #8
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}

08006f28 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b083      	sub	sp, #12
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006f30:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	370c      	adds	r7, #12
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr

08006f3e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f3e:	b580      	push	{r7, lr}
 8006f40:	b084      	sub	sp, #16
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	6078      	str	r0, [r7, #4]
 8006f46:	460b      	mov	r3, r1
 8006f48:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d009      	beq.n	8006f6c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	78fa      	ldrb	r2, [r7, #3]
 8006f62:	4611      	mov	r1, r2
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	4798      	blx	r3
 8006f68:	4603      	mov	r3, r0
 8006f6a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3710      	adds	r7, #16
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}

08006f76 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f76:	b580      	push	{r7, lr}
 8006f78:	b084      	sub	sp, #16
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	6078      	str	r0, [r7, #4]
 8006f7e:	460b      	mov	r3, r1
 8006f80:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f82:	2300      	movs	r3, #0
 8006f84:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	78fa      	ldrb	r2, [r7, #3]
 8006f90:	4611      	mov	r1, r2
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	4798      	blx	r3
 8006f96:	4603      	mov	r3, r0
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d001      	beq.n	8006fa0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006f9c:	2303      	movs	r3, #3
 8006f9e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3710      	adds	r7, #16
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}

08006faa <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006faa:	b580      	push	{r7, lr}
 8006fac:	b084      	sub	sp, #16
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	6078      	str	r0, [r7, #4]
 8006fb2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006fba:	6839      	ldr	r1, [r7, #0]
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f001 f932 	bl	8008226 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006fd0:	461a      	mov	r2, r3
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006fde:	f003 031f 	and.w	r3, r3, #31
 8006fe2:	2b02      	cmp	r3, #2
 8006fe4:	d01a      	beq.n	800701c <USBD_LL_SetupStage+0x72>
 8006fe6:	2b02      	cmp	r3, #2
 8006fe8:	d822      	bhi.n	8007030 <USBD_LL_SetupStage+0x86>
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d002      	beq.n	8006ff4 <USBD_LL_SetupStage+0x4a>
 8006fee:	2b01      	cmp	r3, #1
 8006ff0:	d00a      	beq.n	8007008 <USBD_LL_SetupStage+0x5e>
 8006ff2:	e01d      	b.n	8007030 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006ffa:	4619      	mov	r1, r3
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f000 fb5f 	bl	80076c0 <USBD_StdDevReq>
 8007002:	4603      	mov	r3, r0
 8007004:	73fb      	strb	r3, [r7, #15]
      break;
 8007006:	e020      	b.n	800704a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800700e:	4619      	mov	r1, r3
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f000 fbc7 	bl	80077a4 <USBD_StdItfReq>
 8007016:	4603      	mov	r3, r0
 8007018:	73fb      	strb	r3, [r7, #15]
      break;
 800701a:	e016      	b.n	800704a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007022:	4619      	mov	r1, r3
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f000 fc29 	bl	800787c <USBD_StdEPReq>
 800702a:	4603      	mov	r3, r0
 800702c:	73fb      	strb	r3, [r7, #15]
      break;
 800702e:	e00c      	b.n	800704a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007036:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800703a:	b2db      	uxtb	r3, r3
 800703c:	4619      	mov	r1, r3
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f001 fe4e 	bl	8008ce0 <USBD_LL_StallEP>
 8007044:	4603      	mov	r3, r0
 8007046:	73fb      	strb	r3, [r7, #15]
      break;
 8007048:	bf00      	nop
  }

  return ret;
 800704a:	7bfb      	ldrb	r3, [r7, #15]
}
 800704c:	4618      	mov	r0, r3
 800704e:	3710      	adds	r7, #16
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}

08007054 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b086      	sub	sp, #24
 8007058:	af00      	add	r7, sp, #0
 800705a:	60f8      	str	r0, [r7, #12]
 800705c:	460b      	mov	r3, r1
 800705e:	607a      	str	r2, [r7, #4]
 8007060:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007062:	2300      	movs	r3, #0
 8007064:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007066:	7afb      	ldrb	r3, [r7, #11]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d16e      	bne.n	800714a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007072:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800707a:	2b03      	cmp	r3, #3
 800707c:	f040 8098 	bne.w	80071b0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	689a      	ldr	r2, [r3, #8]
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	68db      	ldr	r3, [r3, #12]
 8007088:	429a      	cmp	r2, r3
 800708a:	d913      	bls.n	80070b4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	689a      	ldr	r2, [r3, #8]
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	68db      	ldr	r3, [r3, #12]
 8007094:	1ad2      	subs	r2, r2, r3
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	68da      	ldr	r2, [r3, #12]
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	4293      	cmp	r3, r2
 80070a4:	bf28      	it	cs
 80070a6:	4613      	movcs	r3, r2
 80070a8:	461a      	mov	r2, r3
 80070aa:	6879      	ldr	r1, [r7, #4]
 80070ac:	68f8      	ldr	r0, [r7, #12]
 80070ae:	f001 f9ae 	bl	800840e <USBD_CtlContinueRx>
 80070b2:	e07d      	b.n	80071b0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80070ba:	f003 031f 	and.w	r3, r3, #31
 80070be:	2b02      	cmp	r3, #2
 80070c0:	d014      	beq.n	80070ec <USBD_LL_DataOutStage+0x98>
 80070c2:	2b02      	cmp	r3, #2
 80070c4:	d81d      	bhi.n	8007102 <USBD_LL_DataOutStage+0xae>
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d002      	beq.n	80070d0 <USBD_LL_DataOutStage+0x7c>
 80070ca:	2b01      	cmp	r3, #1
 80070cc:	d003      	beq.n	80070d6 <USBD_LL_DataOutStage+0x82>
 80070ce:	e018      	b.n	8007102 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80070d0:	2300      	movs	r3, #0
 80070d2:	75bb      	strb	r3, [r7, #22]
            break;
 80070d4:	e018      	b.n	8007108 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80070dc:	b2db      	uxtb	r3, r3
 80070de:	4619      	mov	r1, r3
 80070e0:	68f8      	ldr	r0, [r7, #12]
 80070e2:	f000 fa5e 	bl	80075a2 <USBD_CoreFindIF>
 80070e6:	4603      	mov	r3, r0
 80070e8:	75bb      	strb	r3, [r7, #22]
            break;
 80070ea:	e00d      	b.n	8007108 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80070f2:	b2db      	uxtb	r3, r3
 80070f4:	4619      	mov	r1, r3
 80070f6:	68f8      	ldr	r0, [r7, #12]
 80070f8:	f000 fa60 	bl	80075bc <USBD_CoreFindEP>
 80070fc:	4603      	mov	r3, r0
 80070fe:	75bb      	strb	r3, [r7, #22]
            break;
 8007100:	e002      	b.n	8007108 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007102:	2300      	movs	r3, #0
 8007104:	75bb      	strb	r3, [r7, #22]
            break;
 8007106:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007108:	7dbb      	ldrb	r3, [r7, #22]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d119      	bne.n	8007142 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007114:	b2db      	uxtb	r3, r3
 8007116:	2b03      	cmp	r3, #3
 8007118:	d113      	bne.n	8007142 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800711a:	7dba      	ldrb	r2, [r7, #22]
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	32ae      	adds	r2, #174	; 0xae
 8007120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007124:	691b      	ldr	r3, [r3, #16]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d00b      	beq.n	8007142 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800712a:	7dba      	ldrb	r2, [r7, #22]
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007132:	7dba      	ldrb	r2, [r7, #22]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	32ae      	adds	r2, #174	; 0xae
 8007138:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800713c:	691b      	ldr	r3, [r3, #16]
 800713e:	68f8      	ldr	r0, [r7, #12]
 8007140:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007142:	68f8      	ldr	r0, [r7, #12]
 8007144:	f001 f974 	bl	8008430 <USBD_CtlSendStatus>
 8007148:	e032      	b.n	80071b0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800714a:	7afb      	ldrb	r3, [r7, #11]
 800714c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007150:	b2db      	uxtb	r3, r3
 8007152:	4619      	mov	r1, r3
 8007154:	68f8      	ldr	r0, [r7, #12]
 8007156:	f000 fa31 	bl	80075bc <USBD_CoreFindEP>
 800715a:	4603      	mov	r3, r0
 800715c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800715e:	7dbb      	ldrb	r3, [r7, #22]
 8007160:	2bff      	cmp	r3, #255	; 0xff
 8007162:	d025      	beq.n	80071b0 <USBD_LL_DataOutStage+0x15c>
 8007164:	7dbb      	ldrb	r3, [r7, #22]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d122      	bne.n	80071b0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007170:	b2db      	uxtb	r3, r3
 8007172:	2b03      	cmp	r3, #3
 8007174:	d117      	bne.n	80071a6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007176:	7dba      	ldrb	r2, [r7, #22]
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	32ae      	adds	r2, #174	; 0xae
 800717c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007180:	699b      	ldr	r3, [r3, #24]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d00f      	beq.n	80071a6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007186:	7dba      	ldrb	r2, [r7, #22]
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800718e:	7dba      	ldrb	r2, [r7, #22]
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	32ae      	adds	r2, #174	; 0xae
 8007194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007198:	699b      	ldr	r3, [r3, #24]
 800719a:	7afa      	ldrb	r2, [r7, #11]
 800719c:	4611      	mov	r1, r2
 800719e:	68f8      	ldr	r0, [r7, #12]
 80071a0:	4798      	blx	r3
 80071a2:	4603      	mov	r3, r0
 80071a4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80071a6:	7dfb      	ldrb	r3, [r7, #23]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d001      	beq.n	80071b0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80071ac:	7dfb      	ldrb	r3, [r7, #23]
 80071ae:	e000      	b.n	80071b2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80071b0:	2300      	movs	r3, #0
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3718      	adds	r7, #24
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}

080071ba <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80071ba:	b580      	push	{r7, lr}
 80071bc:	b086      	sub	sp, #24
 80071be:	af00      	add	r7, sp, #0
 80071c0:	60f8      	str	r0, [r7, #12]
 80071c2:	460b      	mov	r3, r1
 80071c4:	607a      	str	r2, [r7, #4]
 80071c6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80071c8:	7afb      	ldrb	r3, [r7, #11]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d16f      	bne.n	80072ae <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	3314      	adds	r3, #20
 80071d2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80071da:	2b02      	cmp	r3, #2
 80071dc:	d15a      	bne.n	8007294 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	689a      	ldr	r2, [r3, #8]
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	68db      	ldr	r3, [r3, #12]
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d914      	bls.n	8007214 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	689a      	ldr	r2, [r3, #8]
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	68db      	ldr	r3, [r3, #12]
 80071f2:	1ad2      	subs	r2, r2, r3
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	689b      	ldr	r3, [r3, #8]
 80071fc:	461a      	mov	r2, r3
 80071fe:	6879      	ldr	r1, [r7, #4]
 8007200:	68f8      	ldr	r0, [r7, #12]
 8007202:	f001 f8d6 	bl	80083b2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007206:	2300      	movs	r3, #0
 8007208:	2200      	movs	r2, #0
 800720a:	2100      	movs	r1, #0
 800720c:	68f8      	ldr	r0, [r7, #12]
 800720e:	f001 fe11 	bl	8008e34 <USBD_LL_PrepareReceive>
 8007212:	e03f      	b.n	8007294 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	68da      	ldr	r2, [r3, #12]
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	429a      	cmp	r2, r3
 800721e:	d11c      	bne.n	800725a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	685a      	ldr	r2, [r3, #4]
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007228:	429a      	cmp	r2, r3
 800722a:	d316      	bcc.n	800725a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	685a      	ldr	r2, [r3, #4]
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007236:	429a      	cmp	r2, r3
 8007238:	d20f      	bcs.n	800725a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800723a:	2200      	movs	r2, #0
 800723c:	2100      	movs	r1, #0
 800723e:	68f8      	ldr	r0, [r7, #12]
 8007240:	f001 f8b7 	bl	80083b2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2200      	movs	r2, #0
 8007248:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800724c:	2300      	movs	r3, #0
 800724e:	2200      	movs	r2, #0
 8007250:	2100      	movs	r1, #0
 8007252:	68f8      	ldr	r0, [r7, #12]
 8007254:	f001 fdee 	bl	8008e34 <USBD_LL_PrepareReceive>
 8007258:	e01c      	b.n	8007294 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007260:	b2db      	uxtb	r3, r3
 8007262:	2b03      	cmp	r3, #3
 8007264:	d10f      	bne.n	8007286 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800726c:	68db      	ldr	r3, [r3, #12]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d009      	beq.n	8007286 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2200      	movs	r2, #0
 8007276:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007280:	68db      	ldr	r3, [r3, #12]
 8007282:	68f8      	ldr	r0, [r7, #12]
 8007284:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007286:	2180      	movs	r1, #128	; 0x80
 8007288:	68f8      	ldr	r0, [r7, #12]
 800728a:	f001 fd29 	bl	8008ce0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800728e:	68f8      	ldr	r0, [r7, #12]
 8007290:	f001 f8e1 	bl	8008456 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800729a:	2b00      	cmp	r3, #0
 800729c:	d03a      	beq.n	8007314 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800729e:	68f8      	ldr	r0, [r7, #12]
 80072a0:	f7ff fe42 	bl	8006f28 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2200      	movs	r2, #0
 80072a8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80072ac:	e032      	b.n	8007314 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80072ae:	7afb      	ldrb	r3, [r7, #11]
 80072b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80072b4:	b2db      	uxtb	r3, r3
 80072b6:	4619      	mov	r1, r3
 80072b8:	68f8      	ldr	r0, [r7, #12]
 80072ba:	f000 f97f 	bl	80075bc <USBD_CoreFindEP>
 80072be:	4603      	mov	r3, r0
 80072c0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80072c2:	7dfb      	ldrb	r3, [r7, #23]
 80072c4:	2bff      	cmp	r3, #255	; 0xff
 80072c6:	d025      	beq.n	8007314 <USBD_LL_DataInStage+0x15a>
 80072c8:	7dfb      	ldrb	r3, [r7, #23]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d122      	bne.n	8007314 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072d4:	b2db      	uxtb	r3, r3
 80072d6:	2b03      	cmp	r3, #3
 80072d8:	d11c      	bne.n	8007314 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80072da:	7dfa      	ldrb	r2, [r7, #23]
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	32ae      	adds	r2, #174	; 0xae
 80072e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072e4:	695b      	ldr	r3, [r3, #20]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d014      	beq.n	8007314 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80072ea:	7dfa      	ldrb	r2, [r7, #23]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80072f2:	7dfa      	ldrb	r2, [r7, #23]
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	32ae      	adds	r2, #174	; 0xae
 80072f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072fc:	695b      	ldr	r3, [r3, #20]
 80072fe:	7afa      	ldrb	r2, [r7, #11]
 8007300:	4611      	mov	r1, r2
 8007302:	68f8      	ldr	r0, [r7, #12]
 8007304:	4798      	blx	r3
 8007306:	4603      	mov	r3, r0
 8007308:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800730a:	7dbb      	ldrb	r3, [r7, #22]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d001      	beq.n	8007314 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007310:	7dbb      	ldrb	r3, [r7, #22]
 8007312:	e000      	b.n	8007316 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007314:	2300      	movs	r3, #0
}
 8007316:	4618      	mov	r0, r3
 8007318:	3718      	adds	r7, #24
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}

0800731e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800731e:	b580      	push	{r7, lr}
 8007320:	b084      	sub	sp, #16
 8007322:	af00      	add	r7, sp, #0
 8007324:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007326:	2300      	movs	r3, #0
 8007328:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2201      	movs	r2, #1
 800732e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2200      	movs	r2, #0
 8007336:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2200      	movs	r2, #0
 800733e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2200      	movs	r2, #0
 8007344:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2200      	movs	r2, #0
 800734c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007356:	2b00      	cmp	r3, #0
 8007358:	d014      	beq.n	8007384 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d00e      	beq.n	8007384 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	687a      	ldr	r2, [r7, #4]
 8007370:	6852      	ldr	r2, [r2, #4]
 8007372:	b2d2      	uxtb	r2, r2
 8007374:	4611      	mov	r1, r2
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	4798      	blx	r3
 800737a:	4603      	mov	r3, r0
 800737c:	2b00      	cmp	r3, #0
 800737e:	d001      	beq.n	8007384 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007380:	2303      	movs	r3, #3
 8007382:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007384:	2340      	movs	r3, #64	; 0x40
 8007386:	2200      	movs	r2, #0
 8007388:	2100      	movs	r1, #0
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f001 fc63 	bl	8008c56 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2201      	movs	r2, #1
 8007394:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2240      	movs	r2, #64	; 0x40
 800739c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80073a0:	2340      	movs	r3, #64	; 0x40
 80073a2:	2200      	movs	r2, #0
 80073a4:	2180      	movs	r1, #128	; 0x80
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f001 fc55 	bl	8008c56 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2201      	movs	r2, #1
 80073b0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2240      	movs	r2, #64	; 0x40
 80073b6:	621a      	str	r2, [r3, #32]

  return ret;
 80073b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3710      	adds	r7, #16
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}

080073c2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80073c2:	b480      	push	{r7}
 80073c4:	b083      	sub	sp, #12
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	6078      	str	r0, [r7, #4]
 80073ca:	460b      	mov	r3, r1
 80073cc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	78fa      	ldrb	r2, [r7, #3]
 80073d2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80073d4:	2300      	movs	r3, #0
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	370c      	adds	r7, #12
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr

080073e2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80073e2:	b480      	push	{r7}
 80073e4:	b083      	sub	sp, #12
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073f0:	b2da      	uxtb	r2, r3
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2204      	movs	r2, #4
 80073fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007400:	2300      	movs	r3, #0
}
 8007402:	4618      	mov	r0, r3
 8007404:	370c      	adds	r7, #12
 8007406:	46bd      	mov	sp, r7
 8007408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740c:	4770      	bx	lr

0800740e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800740e:	b480      	push	{r7}
 8007410:	b083      	sub	sp, #12
 8007412:	af00      	add	r7, sp, #0
 8007414:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800741c:	b2db      	uxtb	r3, r3
 800741e:	2b04      	cmp	r3, #4
 8007420:	d106      	bne.n	8007430 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007428:	b2da      	uxtb	r2, r3
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007430:	2300      	movs	r3, #0
}
 8007432:	4618      	mov	r0, r3
 8007434:	370c      	adds	r7, #12
 8007436:	46bd      	mov	sp, r7
 8007438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743c:	4770      	bx	lr

0800743e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800743e:	b580      	push	{r7, lr}
 8007440:	b082      	sub	sp, #8
 8007442:	af00      	add	r7, sp, #0
 8007444:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800744c:	b2db      	uxtb	r3, r3
 800744e:	2b03      	cmp	r3, #3
 8007450:	d110      	bne.n	8007474 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007458:	2b00      	cmp	r3, #0
 800745a:	d00b      	beq.n	8007474 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007462:	69db      	ldr	r3, [r3, #28]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d005      	beq.n	8007474 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800746e:	69db      	ldr	r3, [r3, #28]
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007474:	2300      	movs	r3, #0
}
 8007476:	4618      	mov	r0, r3
 8007478:	3708      	adds	r7, #8
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}

0800747e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800747e:	b580      	push	{r7, lr}
 8007480:	b082      	sub	sp, #8
 8007482:	af00      	add	r7, sp, #0
 8007484:	6078      	str	r0, [r7, #4]
 8007486:	460b      	mov	r3, r1
 8007488:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	32ae      	adds	r2, #174	; 0xae
 8007494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d101      	bne.n	80074a0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800749c:	2303      	movs	r3, #3
 800749e:	e01c      	b.n	80074da <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	2b03      	cmp	r3, #3
 80074aa:	d115      	bne.n	80074d8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	32ae      	adds	r2, #174	; 0xae
 80074b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074ba:	6a1b      	ldr	r3, [r3, #32]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d00b      	beq.n	80074d8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	32ae      	adds	r2, #174	; 0xae
 80074ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074ce:	6a1b      	ldr	r3, [r3, #32]
 80074d0:	78fa      	ldrb	r2, [r7, #3]
 80074d2:	4611      	mov	r1, r2
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80074d8:	2300      	movs	r3, #0
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3708      	adds	r7, #8
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}

080074e2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80074e2:	b580      	push	{r7, lr}
 80074e4:	b082      	sub	sp, #8
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	6078      	str	r0, [r7, #4]
 80074ea:	460b      	mov	r3, r1
 80074ec:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	32ae      	adds	r2, #174	; 0xae
 80074f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d101      	bne.n	8007504 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007500:	2303      	movs	r3, #3
 8007502:	e01c      	b.n	800753e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800750a:	b2db      	uxtb	r3, r3
 800750c:	2b03      	cmp	r3, #3
 800750e:	d115      	bne.n	800753c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	32ae      	adds	r2, #174	; 0xae
 800751a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800751e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007520:	2b00      	cmp	r3, #0
 8007522:	d00b      	beq.n	800753c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	32ae      	adds	r2, #174	; 0xae
 800752e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007534:	78fa      	ldrb	r2, [r7, #3]
 8007536:	4611      	mov	r1, r2
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800753c:	2300      	movs	r3, #0
}
 800753e:	4618      	mov	r0, r3
 8007540:	3708      	adds	r7, #8
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}

08007546 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007546:	b480      	push	{r7}
 8007548:	b083      	sub	sp, #12
 800754a:	af00      	add	r7, sp, #0
 800754c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800754e:	2300      	movs	r3, #0
}
 8007550:	4618      	mov	r0, r3
 8007552:	370c      	adds	r7, #12
 8007554:	46bd      	mov	sp, r7
 8007556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755a:	4770      	bx	lr

0800755c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b084      	sub	sp, #16
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007564:	2300      	movs	r3, #0
 8007566:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2201      	movs	r2, #1
 800756c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007576:	2b00      	cmp	r3, #0
 8007578:	d00e      	beq.n	8007598 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	687a      	ldr	r2, [r7, #4]
 8007584:	6852      	ldr	r2, [r2, #4]
 8007586:	b2d2      	uxtb	r2, r2
 8007588:	4611      	mov	r1, r2
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	4798      	blx	r3
 800758e:	4603      	mov	r3, r0
 8007590:	2b00      	cmp	r3, #0
 8007592:	d001      	beq.n	8007598 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007594:	2303      	movs	r3, #3
 8007596:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007598:	7bfb      	ldrb	r3, [r7, #15]
}
 800759a:	4618      	mov	r0, r3
 800759c:	3710      	adds	r7, #16
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}

080075a2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80075a2:	b480      	push	{r7}
 80075a4:	b083      	sub	sp, #12
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	6078      	str	r0, [r7, #4]
 80075aa:	460b      	mov	r3, r1
 80075ac:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80075ae:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	370c      	adds	r7, #12
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr

080075bc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80075bc:	b480      	push	{r7}
 80075be:	b083      	sub	sp, #12
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
 80075c4:	460b      	mov	r3, r1
 80075c6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80075c8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	370c      	adds	r7, #12
 80075ce:	46bd      	mov	sp, r7
 80075d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d4:	4770      	bx	lr

080075d6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80075d6:	b580      	push	{r7, lr}
 80075d8:	b086      	sub	sp, #24
 80075da:	af00      	add	r7, sp, #0
 80075dc:	6078      	str	r0, [r7, #4]
 80075de:	460b      	mov	r3, r1
 80075e0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80075ea:	2300      	movs	r3, #0
 80075ec:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	885b      	ldrh	r3, [r3, #2]
 80075f2:	b29a      	uxth	r2, r3
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	781b      	ldrb	r3, [r3, #0]
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	429a      	cmp	r2, r3
 80075fc:	d920      	bls.n	8007640 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	781b      	ldrb	r3, [r3, #0]
 8007602:	b29b      	uxth	r3, r3
 8007604:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007606:	e013      	b.n	8007630 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007608:	f107 030a 	add.w	r3, r7, #10
 800760c:	4619      	mov	r1, r3
 800760e:	6978      	ldr	r0, [r7, #20]
 8007610:	f000 f81b 	bl	800764a <USBD_GetNextDesc>
 8007614:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	785b      	ldrb	r3, [r3, #1]
 800761a:	2b05      	cmp	r3, #5
 800761c:	d108      	bne.n	8007630 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	789b      	ldrb	r3, [r3, #2]
 8007626:	78fa      	ldrb	r2, [r7, #3]
 8007628:	429a      	cmp	r2, r3
 800762a:	d008      	beq.n	800763e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800762c:	2300      	movs	r3, #0
 800762e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	885b      	ldrh	r3, [r3, #2]
 8007634:	b29a      	uxth	r2, r3
 8007636:	897b      	ldrh	r3, [r7, #10]
 8007638:	429a      	cmp	r2, r3
 800763a:	d8e5      	bhi.n	8007608 <USBD_GetEpDesc+0x32>
 800763c:	e000      	b.n	8007640 <USBD_GetEpDesc+0x6a>
          break;
 800763e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007640:	693b      	ldr	r3, [r7, #16]
}
 8007642:	4618      	mov	r0, r3
 8007644:	3718      	adds	r7, #24
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}

0800764a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800764a:	b480      	push	{r7}
 800764c:	b085      	sub	sp, #20
 800764e:	af00      	add	r7, sp, #0
 8007650:	6078      	str	r0, [r7, #4]
 8007652:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	881a      	ldrh	r2, [r3, #0]
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	781b      	ldrb	r3, [r3, #0]
 8007660:	b29b      	uxth	r3, r3
 8007662:	4413      	add	r3, r2
 8007664:	b29a      	uxth	r2, r3
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	781b      	ldrb	r3, [r3, #0]
 800766e:	461a      	mov	r2, r3
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	4413      	add	r3, r2
 8007674:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007676:	68fb      	ldr	r3, [r7, #12]
}
 8007678:	4618      	mov	r0, r3
 800767a:	3714      	adds	r7, #20
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr

08007684 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007684:	b480      	push	{r7}
 8007686:	b087      	sub	sp, #28
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	781b      	ldrb	r3, [r3, #0]
 8007694:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	3301      	adds	r3, #1
 800769a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	781b      	ldrb	r3, [r3, #0]
 80076a0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80076a2:	8a3b      	ldrh	r3, [r7, #16]
 80076a4:	021b      	lsls	r3, r3, #8
 80076a6:	b21a      	sxth	r2, r3
 80076a8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80076ac:	4313      	orrs	r3, r2
 80076ae:	b21b      	sxth	r3, r3
 80076b0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80076b2:	89fb      	ldrh	r3, [r7, #14]
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	371c      	adds	r7, #28
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr

080076c0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b084      	sub	sp, #16
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80076ca:	2300      	movs	r3, #0
 80076cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80076d6:	2b40      	cmp	r3, #64	; 0x40
 80076d8:	d005      	beq.n	80076e6 <USBD_StdDevReq+0x26>
 80076da:	2b40      	cmp	r3, #64	; 0x40
 80076dc:	d857      	bhi.n	800778e <USBD_StdDevReq+0xce>
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d00f      	beq.n	8007702 <USBD_StdDevReq+0x42>
 80076e2:	2b20      	cmp	r3, #32
 80076e4:	d153      	bne.n	800778e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	32ae      	adds	r2, #174	; 0xae
 80076f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076f4:	689b      	ldr	r3, [r3, #8]
 80076f6:	6839      	ldr	r1, [r7, #0]
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	4798      	blx	r3
 80076fc:	4603      	mov	r3, r0
 80076fe:	73fb      	strb	r3, [r7, #15]
      break;
 8007700:	e04a      	b.n	8007798 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	785b      	ldrb	r3, [r3, #1]
 8007706:	2b09      	cmp	r3, #9
 8007708:	d83b      	bhi.n	8007782 <USBD_StdDevReq+0xc2>
 800770a:	a201      	add	r2, pc, #4	; (adr r2, 8007710 <USBD_StdDevReq+0x50>)
 800770c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007710:	08007765 	.word	0x08007765
 8007714:	08007779 	.word	0x08007779
 8007718:	08007783 	.word	0x08007783
 800771c:	0800776f 	.word	0x0800776f
 8007720:	08007783 	.word	0x08007783
 8007724:	08007743 	.word	0x08007743
 8007728:	08007739 	.word	0x08007739
 800772c:	08007783 	.word	0x08007783
 8007730:	0800775b 	.word	0x0800775b
 8007734:	0800774d 	.word	0x0800774d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007738:	6839      	ldr	r1, [r7, #0]
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 fa3c 	bl	8007bb8 <USBD_GetDescriptor>
          break;
 8007740:	e024      	b.n	800778c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007742:	6839      	ldr	r1, [r7, #0]
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 fbcb 	bl	8007ee0 <USBD_SetAddress>
          break;
 800774a:	e01f      	b.n	800778c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800774c:	6839      	ldr	r1, [r7, #0]
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f000 fc0a 	bl	8007f68 <USBD_SetConfig>
 8007754:	4603      	mov	r3, r0
 8007756:	73fb      	strb	r3, [r7, #15]
          break;
 8007758:	e018      	b.n	800778c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800775a:	6839      	ldr	r1, [r7, #0]
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f000 fcad 	bl	80080bc <USBD_GetConfig>
          break;
 8007762:	e013      	b.n	800778c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007764:	6839      	ldr	r1, [r7, #0]
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 fcde 	bl	8008128 <USBD_GetStatus>
          break;
 800776c:	e00e      	b.n	800778c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800776e:	6839      	ldr	r1, [r7, #0]
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f000 fd0d 	bl	8008190 <USBD_SetFeature>
          break;
 8007776:	e009      	b.n	800778c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007778:	6839      	ldr	r1, [r7, #0]
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 fd31 	bl	80081e2 <USBD_ClrFeature>
          break;
 8007780:	e004      	b.n	800778c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007782:	6839      	ldr	r1, [r7, #0]
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f000 fd88 	bl	800829a <USBD_CtlError>
          break;
 800778a:	bf00      	nop
      }
      break;
 800778c:	e004      	b.n	8007798 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800778e:	6839      	ldr	r1, [r7, #0]
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f000 fd82 	bl	800829a <USBD_CtlError>
      break;
 8007796:	bf00      	nop
  }

  return ret;
 8007798:	7bfb      	ldrb	r3, [r7, #15]
}
 800779a:	4618      	mov	r0, r3
 800779c:	3710      	adds	r7, #16
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}
 80077a2:	bf00      	nop

080077a4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b084      	sub	sp, #16
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80077ae:	2300      	movs	r3, #0
 80077b0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	781b      	ldrb	r3, [r3, #0]
 80077b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077ba:	2b40      	cmp	r3, #64	; 0x40
 80077bc:	d005      	beq.n	80077ca <USBD_StdItfReq+0x26>
 80077be:	2b40      	cmp	r3, #64	; 0x40
 80077c0:	d852      	bhi.n	8007868 <USBD_StdItfReq+0xc4>
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d001      	beq.n	80077ca <USBD_StdItfReq+0x26>
 80077c6:	2b20      	cmp	r3, #32
 80077c8:	d14e      	bne.n	8007868 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	3b01      	subs	r3, #1
 80077d4:	2b02      	cmp	r3, #2
 80077d6:	d840      	bhi.n	800785a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	889b      	ldrh	r3, [r3, #4]
 80077dc:	b2db      	uxtb	r3, r3
 80077de:	2b01      	cmp	r3, #1
 80077e0:	d836      	bhi.n	8007850 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	889b      	ldrh	r3, [r3, #4]
 80077e6:	b2db      	uxtb	r3, r3
 80077e8:	4619      	mov	r1, r3
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f7ff fed9 	bl	80075a2 <USBD_CoreFindIF>
 80077f0:	4603      	mov	r3, r0
 80077f2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80077f4:	7bbb      	ldrb	r3, [r7, #14]
 80077f6:	2bff      	cmp	r3, #255	; 0xff
 80077f8:	d01d      	beq.n	8007836 <USBD_StdItfReq+0x92>
 80077fa:	7bbb      	ldrb	r3, [r7, #14]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d11a      	bne.n	8007836 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007800:	7bba      	ldrb	r2, [r7, #14]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	32ae      	adds	r2, #174	; 0xae
 8007806:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800780a:	689b      	ldr	r3, [r3, #8]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d00f      	beq.n	8007830 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007810:	7bba      	ldrb	r2, [r7, #14]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007818:	7bba      	ldrb	r2, [r7, #14]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	32ae      	adds	r2, #174	; 0xae
 800781e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007822:	689b      	ldr	r3, [r3, #8]
 8007824:	6839      	ldr	r1, [r7, #0]
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	4798      	blx	r3
 800782a:	4603      	mov	r3, r0
 800782c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800782e:	e004      	b.n	800783a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007830:	2303      	movs	r3, #3
 8007832:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007834:	e001      	b.n	800783a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007836:	2303      	movs	r3, #3
 8007838:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	88db      	ldrh	r3, [r3, #6]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d110      	bne.n	8007864 <USBD_StdItfReq+0xc0>
 8007842:	7bfb      	ldrb	r3, [r7, #15]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d10d      	bne.n	8007864 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f000 fdf1 	bl	8008430 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800784e:	e009      	b.n	8007864 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007850:	6839      	ldr	r1, [r7, #0]
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f000 fd21 	bl	800829a <USBD_CtlError>
          break;
 8007858:	e004      	b.n	8007864 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800785a:	6839      	ldr	r1, [r7, #0]
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f000 fd1c 	bl	800829a <USBD_CtlError>
          break;
 8007862:	e000      	b.n	8007866 <USBD_StdItfReq+0xc2>
          break;
 8007864:	bf00      	nop
      }
      break;
 8007866:	e004      	b.n	8007872 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007868:	6839      	ldr	r1, [r7, #0]
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f000 fd15 	bl	800829a <USBD_CtlError>
      break;
 8007870:	bf00      	nop
  }

  return ret;
 8007872:	7bfb      	ldrb	r3, [r7, #15]
}
 8007874:	4618      	mov	r0, r3
 8007876:	3710      	adds	r7, #16
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}

0800787c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b084      	sub	sp, #16
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007886:	2300      	movs	r3, #0
 8007888:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	889b      	ldrh	r3, [r3, #4]
 800788e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007898:	2b40      	cmp	r3, #64	; 0x40
 800789a:	d007      	beq.n	80078ac <USBD_StdEPReq+0x30>
 800789c:	2b40      	cmp	r3, #64	; 0x40
 800789e:	f200 817f 	bhi.w	8007ba0 <USBD_StdEPReq+0x324>
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d02a      	beq.n	80078fc <USBD_StdEPReq+0x80>
 80078a6:	2b20      	cmp	r3, #32
 80078a8:	f040 817a 	bne.w	8007ba0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80078ac:	7bbb      	ldrb	r3, [r7, #14]
 80078ae:	4619      	mov	r1, r3
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f7ff fe83 	bl	80075bc <USBD_CoreFindEP>
 80078b6:	4603      	mov	r3, r0
 80078b8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80078ba:	7b7b      	ldrb	r3, [r7, #13]
 80078bc:	2bff      	cmp	r3, #255	; 0xff
 80078be:	f000 8174 	beq.w	8007baa <USBD_StdEPReq+0x32e>
 80078c2:	7b7b      	ldrb	r3, [r7, #13]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	f040 8170 	bne.w	8007baa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80078ca:	7b7a      	ldrb	r2, [r7, #13]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80078d2:	7b7a      	ldrb	r2, [r7, #13]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	32ae      	adds	r2, #174	; 0xae
 80078d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078dc:	689b      	ldr	r3, [r3, #8]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	f000 8163 	beq.w	8007baa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80078e4:	7b7a      	ldrb	r2, [r7, #13]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	32ae      	adds	r2, #174	; 0xae
 80078ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078ee:	689b      	ldr	r3, [r3, #8]
 80078f0:	6839      	ldr	r1, [r7, #0]
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	4798      	blx	r3
 80078f6:	4603      	mov	r3, r0
 80078f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80078fa:	e156      	b.n	8007baa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	785b      	ldrb	r3, [r3, #1]
 8007900:	2b03      	cmp	r3, #3
 8007902:	d008      	beq.n	8007916 <USBD_StdEPReq+0x9a>
 8007904:	2b03      	cmp	r3, #3
 8007906:	f300 8145 	bgt.w	8007b94 <USBD_StdEPReq+0x318>
 800790a:	2b00      	cmp	r3, #0
 800790c:	f000 809b 	beq.w	8007a46 <USBD_StdEPReq+0x1ca>
 8007910:	2b01      	cmp	r3, #1
 8007912:	d03c      	beq.n	800798e <USBD_StdEPReq+0x112>
 8007914:	e13e      	b.n	8007b94 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800791c:	b2db      	uxtb	r3, r3
 800791e:	2b02      	cmp	r3, #2
 8007920:	d002      	beq.n	8007928 <USBD_StdEPReq+0xac>
 8007922:	2b03      	cmp	r3, #3
 8007924:	d016      	beq.n	8007954 <USBD_StdEPReq+0xd8>
 8007926:	e02c      	b.n	8007982 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007928:	7bbb      	ldrb	r3, [r7, #14]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d00d      	beq.n	800794a <USBD_StdEPReq+0xce>
 800792e:	7bbb      	ldrb	r3, [r7, #14]
 8007930:	2b80      	cmp	r3, #128	; 0x80
 8007932:	d00a      	beq.n	800794a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007934:	7bbb      	ldrb	r3, [r7, #14]
 8007936:	4619      	mov	r1, r3
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f001 f9d1 	bl	8008ce0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800793e:	2180      	movs	r1, #128	; 0x80
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f001 f9cd 	bl	8008ce0 <USBD_LL_StallEP>
 8007946:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007948:	e020      	b.n	800798c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800794a:	6839      	ldr	r1, [r7, #0]
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f000 fca4 	bl	800829a <USBD_CtlError>
              break;
 8007952:	e01b      	b.n	800798c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	885b      	ldrh	r3, [r3, #2]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d10e      	bne.n	800797a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800795c:	7bbb      	ldrb	r3, [r7, #14]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d00b      	beq.n	800797a <USBD_StdEPReq+0xfe>
 8007962:	7bbb      	ldrb	r3, [r7, #14]
 8007964:	2b80      	cmp	r3, #128	; 0x80
 8007966:	d008      	beq.n	800797a <USBD_StdEPReq+0xfe>
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	88db      	ldrh	r3, [r3, #6]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d104      	bne.n	800797a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007970:	7bbb      	ldrb	r3, [r7, #14]
 8007972:	4619      	mov	r1, r3
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f001 f9b3 	bl	8008ce0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 fd58 	bl	8008430 <USBD_CtlSendStatus>

              break;
 8007980:	e004      	b.n	800798c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007982:	6839      	ldr	r1, [r7, #0]
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f000 fc88 	bl	800829a <USBD_CtlError>
              break;
 800798a:	bf00      	nop
          }
          break;
 800798c:	e107      	b.n	8007b9e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007994:	b2db      	uxtb	r3, r3
 8007996:	2b02      	cmp	r3, #2
 8007998:	d002      	beq.n	80079a0 <USBD_StdEPReq+0x124>
 800799a:	2b03      	cmp	r3, #3
 800799c:	d016      	beq.n	80079cc <USBD_StdEPReq+0x150>
 800799e:	e04b      	b.n	8007a38 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80079a0:	7bbb      	ldrb	r3, [r7, #14]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d00d      	beq.n	80079c2 <USBD_StdEPReq+0x146>
 80079a6:	7bbb      	ldrb	r3, [r7, #14]
 80079a8:	2b80      	cmp	r3, #128	; 0x80
 80079aa:	d00a      	beq.n	80079c2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80079ac:	7bbb      	ldrb	r3, [r7, #14]
 80079ae:	4619      	mov	r1, r3
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f001 f995 	bl	8008ce0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80079b6:	2180      	movs	r1, #128	; 0x80
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f001 f991 	bl	8008ce0 <USBD_LL_StallEP>
 80079be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80079c0:	e040      	b.n	8007a44 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80079c2:	6839      	ldr	r1, [r7, #0]
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f000 fc68 	bl	800829a <USBD_CtlError>
              break;
 80079ca:	e03b      	b.n	8007a44 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	885b      	ldrh	r3, [r3, #2]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d136      	bne.n	8007a42 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80079d4:	7bbb      	ldrb	r3, [r7, #14]
 80079d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d004      	beq.n	80079e8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80079de:	7bbb      	ldrb	r3, [r7, #14]
 80079e0:	4619      	mov	r1, r3
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f001 f99b 	bl	8008d1e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f000 fd21 	bl	8008430 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80079ee:	7bbb      	ldrb	r3, [r7, #14]
 80079f0:	4619      	mov	r1, r3
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f7ff fde2 	bl	80075bc <USBD_CoreFindEP>
 80079f8:	4603      	mov	r3, r0
 80079fa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80079fc:	7b7b      	ldrb	r3, [r7, #13]
 80079fe:	2bff      	cmp	r3, #255	; 0xff
 8007a00:	d01f      	beq.n	8007a42 <USBD_StdEPReq+0x1c6>
 8007a02:	7b7b      	ldrb	r3, [r7, #13]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d11c      	bne.n	8007a42 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007a08:	7b7a      	ldrb	r2, [r7, #13]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007a10:	7b7a      	ldrb	r2, [r7, #13]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	32ae      	adds	r2, #174	; 0xae
 8007a16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a1a:	689b      	ldr	r3, [r3, #8]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d010      	beq.n	8007a42 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007a20:	7b7a      	ldrb	r2, [r7, #13]
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	32ae      	adds	r2, #174	; 0xae
 8007a26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a2a:	689b      	ldr	r3, [r3, #8]
 8007a2c:	6839      	ldr	r1, [r7, #0]
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	4798      	blx	r3
 8007a32:	4603      	mov	r3, r0
 8007a34:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007a36:	e004      	b.n	8007a42 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007a38:	6839      	ldr	r1, [r7, #0]
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 fc2d 	bl	800829a <USBD_CtlError>
              break;
 8007a40:	e000      	b.n	8007a44 <USBD_StdEPReq+0x1c8>
              break;
 8007a42:	bf00      	nop
          }
          break;
 8007a44:	e0ab      	b.n	8007b9e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	2b02      	cmp	r3, #2
 8007a50:	d002      	beq.n	8007a58 <USBD_StdEPReq+0x1dc>
 8007a52:	2b03      	cmp	r3, #3
 8007a54:	d032      	beq.n	8007abc <USBD_StdEPReq+0x240>
 8007a56:	e097      	b.n	8007b88 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a58:	7bbb      	ldrb	r3, [r7, #14]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d007      	beq.n	8007a6e <USBD_StdEPReq+0x1f2>
 8007a5e:	7bbb      	ldrb	r3, [r7, #14]
 8007a60:	2b80      	cmp	r3, #128	; 0x80
 8007a62:	d004      	beq.n	8007a6e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007a64:	6839      	ldr	r1, [r7, #0]
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f000 fc17 	bl	800829a <USBD_CtlError>
                break;
 8007a6c:	e091      	b.n	8007b92 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a6e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	da0b      	bge.n	8007a8e <USBD_StdEPReq+0x212>
 8007a76:	7bbb      	ldrb	r3, [r7, #14]
 8007a78:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a7c:	4613      	mov	r3, r2
 8007a7e:	009b      	lsls	r3, r3, #2
 8007a80:	4413      	add	r3, r2
 8007a82:	009b      	lsls	r3, r3, #2
 8007a84:	3310      	adds	r3, #16
 8007a86:	687a      	ldr	r2, [r7, #4]
 8007a88:	4413      	add	r3, r2
 8007a8a:	3304      	adds	r3, #4
 8007a8c:	e00b      	b.n	8007aa6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007a8e:	7bbb      	ldrb	r3, [r7, #14]
 8007a90:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a94:	4613      	mov	r3, r2
 8007a96:	009b      	lsls	r3, r3, #2
 8007a98:	4413      	add	r3, r2
 8007a9a:	009b      	lsls	r3, r3, #2
 8007a9c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007aa0:	687a      	ldr	r2, [r7, #4]
 8007aa2:	4413      	add	r3, r2
 8007aa4:	3304      	adds	r3, #4
 8007aa6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	2202      	movs	r2, #2
 8007ab2:	4619      	mov	r1, r3
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f000 fc61 	bl	800837c <USBD_CtlSendData>
              break;
 8007aba:	e06a      	b.n	8007b92 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007abc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	da11      	bge.n	8007ae8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007ac4:	7bbb      	ldrb	r3, [r7, #14]
 8007ac6:	f003 020f 	and.w	r2, r3, #15
 8007aca:	6879      	ldr	r1, [r7, #4]
 8007acc:	4613      	mov	r3, r2
 8007ace:	009b      	lsls	r3, r3, #2
 8007ad0:	4413      	add	r3, r2
 8007ad2:	009b      	lsls	r3, r3, #2
 8007ad4:	440b      	add	r3, r1
 8007ad6:	3324      	adds	r3, #36	; 0x24
 8007ad8:	881b      	ldrh	r3, [r3, #0]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d117      	bne.n	8007b0e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007ade:	6839      	ldr	r1, [r7, #0]
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 fbda 	bl	800829a <USBD_CtlError>
                  break;
 8007ae6:	e054      	b.n	8007b92 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007ae8:	7bbb      	ldrb	r3, [r7, #14]
 8007aea:	f003 020f 	and.w	r2, r3, #15
 8007aee:	6879      	ldr	r1, [r7, #4]
 8007af0:	4613      	mov	r3, r2
 8007af2:	009b      	lsls	r3, r3, #2
 8007af4:	4413      	add	r3, r2
 8007af6:	009b      	lsls	r3, r3, #2
 8007af8:	440b      	add	r3, r1
 8007afa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007afe:	881b      	ldrh	r3, [r3, #0]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d104      	bne.n	8007b0e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007b04:	6839      	ldr	r1, [r7, #0]
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f000 fbc7 	bl	800829a <USBD_CtlError>
                  break;
 8007b0c:	e041      	b.n	8007b92 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b0e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	da0b      	bge.n	8007b2e <USBD_StdEPReq+0x2b2>
 8007b16:	7bbb      	ldrb	r3, [r7, #14]
 8007b18:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007b1c:	4613      	mov	r3, r2
 8007b1e:	009b      	lsls	r3, r3, #2
 8007b20:	4413      	add	r3, r2
 8007b22:	009b      	lsls	r3, r3, #2
 8007b24:	3310      	adds	r3, #16
 8007b26:	687a      	ldr	r2, [r7, #4]
 8007b28:	4413      	add	r3, r2
 8007b2a:	3304      	adds	r3, #4
 8007b2c:	e00b      	b.n	8007b46 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007b2e:	7bbb      	ldrb	r3, [r7, #14]
 8007b30:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b34:	4613      	mov	r3, r2
 8007b36:	009b      	lsls	r3, r3, #2
 8007b38:	4413      	add	r3, r2
 8007b3a:	009b      	lsls	r3, r3, #2
 8007b3c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007b40:	687a      	ldr	r2, [r7, #4]
 8007b42:	4413      	add	r3, r2
 8007b44:	3304      	adds	r3, #4
 8007b46:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007b48:	7bbb      	ldrb	r3, [r7, #14]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d002      	beq.n	8007b54 <USBD_StdEPReq+0x2d8>
 8007b4e:	7bbb      	ldrb	r3, [r7, #14]
 8007b50:	2b80      	cmp	r3, #128	; 0x80
 8007b52:	d103      	bne.n	8007b5c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	2200      	movs	r2, #0
 8007b58:	601a      	str	r2, [r3, #0]
 8007b5a:	e00e      	b.n	8007b7a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007b5c:	7bbb      	ldrb	r3, [r7, #14]
 8007b5e:	4619      	mov	r1, r3
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f001 f8fb 	bl	8008d5c <USBD_LL_IsStallEP>
 8007b66:	4603      	mov	r3, r0
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d003      	beq.n	8007b74 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	2201      	movs	r2, #1
 8007b70:	601a      	str	r2, [r3, #0]
 8007b72:	e002      	b.n	8007b7a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	2200      	movs	r2, #0
 8007b78:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	2202      	movs	r2, #2
 8007b7e:	4619      	mov	r1, r3
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f000 fbfb 	bl	800837c <USBD_CtlSendData>
              break;
 8007b86:	e004      	b.n	8007b92 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007b88:	6839      	ldr	r1, [r7, #0]
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f000 fb85 	bl	800829a <USBD_CtlError>
              break;
 8007b90:	bf00      	nop
          }
          break;
 8007b92:	e004      	b.n	8007b9e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007b94:	6839      	ldr	r1, [r7, #0]
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 fb7f 	bl	800829a <USBD_CtlError>
          break;
 8007b9c:	bf00      	nop
      }
      break;
 8007b9e:	e005      	b.n	8007bac <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007ba0:	6839      	ldr	r1, [r7, #0]
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f000 fb79 	bl	800829a <USBD_CtlError>
      break;
 8007ba8:	e000      	b.n	8007bac <USBD_StdEPReq+0x330>
      break;
 8007baa:	bf00      	nop
  }

  return ret;
 8007bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3710      	adds	r7, #16
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}
	...

08007bb8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b084      	sub	sp, #16
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	885b      	ldrh	r3, [r3, #2]
 8007bd2:	0a1b      	lsrs	r3, r3, #8
 8007bd4:	b29b      	uxth	r3, r3
 8007bd6:	3b01      	subs	r3, #1
 8007bd8:	2b0e      	cmp	r3, #14
 8007bda:	f200 8152 	bhi.w	8007e82 <USBD_GetDescriptor+0x2ca>
 8007bde:	a201      	add	r2, pc, #4	; (adr r2, 8007be4 <USBD_GetDescriptor+0x2c>)
 8007be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007be4:	08007c55 	.word	0x08007c55
 8007be8:	08007c6d 	.word	0x08007c6d
 8007bec:	08007cad 	.word	0x08007cad
 8007bf0:	08007e83 	.word	0x08007e83
 8007bf4:	08007e83 	.word	0x08007e83
 8007bf8:	08007e23 	.word	0x08007e23
 8007bfc:	08007e4f 	.word	0x08007e4f
 8007c00:	08007e83 	.word	0x08007e83
 8007c04:	08007e83 	.word	0x08007e83
 8007c08:	08007e83 	.word	0x08007e83
 8007c0c:	08007e83 	.word	0x08007e83
 8007c10:	08007e83 	.word	0x08007e83
 8007c14:	08007e83 	.word	0x08007e83
 8007c18:	08007e83 	.word	0x08007e83
 8007c1c:	08007c21 	.word	0x08007c21
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c26:	69db      	ldr	r3, [r3, #28]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d00b      	beq.n	8007c44 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c32:	69db      	ldr	r3, [r3, #28]
 8007c34:	687a      	ldr	r2, [r7, #4]
 8007c36:	7c12      	ldrb	r2, [r2, #16]
 8007c38:	f107 0108 	add.w	r1, r7, #8
 8007c3c:	4610      	mov	r0, r2
 8007c3e:	4798      	blx	r3
 8007c40:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c42:	e126      	b.n	8007e92 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007c44:	6839      	ldr	r1, [r7, #0]
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f000 fb27 	bl	800829a <USBD_CtlError>
        err++;
 8007c4c:	7afb      	ldrb	r3, [r7, #11]
 8007c4e:	3301      	adds	r3, #1
 8007c50:	72fb      	strb	r3, [r7, #11]
      break;
 8007c52:	e11e      	b.n	8007e92 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	687a      	ldr	r2, [r7, #4]
 8007c5e:	7c12      	ldrb	r2, [r2, #16]
 8007c60:	f107 0108 	add.w	r1, r7, #8
 8007c64:	4610      	mov	r0, r2
 8007c66:	4798      	blx	r3
 8007c68:	60f8      	str	r0, [r7, #12]
      break;
 8007c6a:	e112      	b.n	8007e92 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	7c1b      	ldrb	r3, [r3, #16]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d10d      	bne.n	8007c90 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c7c:	f107 0208 	add.w	r2, r7, #8
 8007c80:	4610      	mov	r0, r2
 8007c82:	4798      	blx	r3
 8007c84:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	3301      	adds	r3, #1
 8007c8a:	2202      	movs	r2, #2
 8007c8c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007c8e:	e100      	b.n	8007e92 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c98:	f107 0208 	add.w	r2, r7, #8
 8007c9c:	4610      	mov	r0, r2
 8007c9e:	4798      	blx	r3
 8007ca0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	3301      	adds	r3, #1
 8007ca6:	2202      	movs	r2, #2
 8007ca8:	701a      	strb	r2, [r3, #0]
      break;
 8007caa:	e0f2      	b.n	8007e92 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	885b      	ldrh	r3, [r3, #2]
 8007cb0:	b2db      	uxtb	r3, r3
 8007cb2:	2b05      	cmp	r3, #5
 8007cb4:	f200 80ac 	bhi.w	8007e10 <USBD_GetDescriptor+0x258>
 8007cb8:	a201      	add	r2, pc, #4	; (adr r2, 8007cc0 <USBD_GetDescriptor+0x108>)
 8007cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cbe:	bf00      	nop
 8007cc0:	08007cd9 	.word	0x08007cd9
 8007cc4:	08007d0d 	.word	0x08007d0d
 8007cc8:	08007d41 	.word	0x08007d41
 8007ccc:	08007d75 	.word	0x08007d75
 8007cd0:	08007da9 	.word	0x08007da9
 8007cd4:	08007ddd 	.word	0x08007ddd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cde:	685b      	ldr	r3, [r3, #4]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d00b      	beq.n	8007cfc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cea:	685b      	ldr	r3, [r3, #4]
 8007cec:	687a      	ldr	r2, [r7, #4]
 8007cee:	7c12      	ldrb	r2, [r2, #16]
 8007cf0:	f107 0108 	add.w	r1, r7, #8
 8007cf4:	4610      	mov	r0, r2
 8007cf6:	4798      	blx	r3
 8007cf8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cfa:	e091      	b.n	8007e20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007cfc:	6839      	ldr	r1, [r7, #0]
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f000 facb 	bl	800829a <USBD_CtlError>
            err++;
 8007d04:	7afb      	ldrb	r3, [r7, #11]
 8007d06:	3301      	adds	r3, #1
 8007d08:	72fb      	strb	r3, [r7, #11]
          break;
 8007d0a:	e089      	b.n	8007e20 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d12:	689b      	ldr	r3, [r3, #8]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d00b      	beq.n	8007d30 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d1e:	689b      	ldr	r3, [r3, #8]
 8007d20:	687a      	ldr	r2, [r7, #4]
 8007d22:	7c12      	ldrb	r2, [r2, #16]
 8007d24:	f107 0108 	add.w	r1, r7, #8
 8007d28:	4610      	mov	r0, r2
 8007d2a:	4798      	blx	r3
 8007d2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d2e:	e077      	b.n	8007e20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007d30:	6839      	ldr	r1, [r7, #0]
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f000 fab1 	bl	800829a <USBD_CtlError>
            err++;
 8007d38:	7afb      	ldrb	r3, [r7, #11]
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	72fb      	strb	r3, [r7, #11]
          break;
 8007d3e:	e06f      	b.n	8007e20 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d46:	68db      	ldr	r3, [r3, #12]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d00b      	beq.n	8007d64 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d52:	68db      	ldr	r3, [r3, #12]
 8007d54:	687a      	ldr	r2, [r7, #4]
 8007d56:	7c12      	ldrb	r2, [r2, #16]
 8007d58:	f107 0108 	add.w	r1, r7, #8
 8007d5c:	4610      	mov	r0, r2
 8007d5e:	4798      	blx	r3
 8007d60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d62:	e05d      	b.n	8007e20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007d64:	6839      	ldr	r1, [r7, #0]
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f000 fa97 	bl	800829a <USBD_CtlError>
            err++;
 8007d6c:	7afb      	ldrb	r3, [r7, #11]
 8007d6e:	3301      	adds	r3, #1
 8007d70:	72fb      	strb	r3, [r7, #11]
          break;
 8007d72:	e055      	b.n	8007e20 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d7a:	691b      	ldr	r3, [r3, #16]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d00b      	beq.n	8007d98 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d86:	691b      	ldr	r3, [r3, #16]
 8007d88:	687a      	ldr	r2, [r7, #4]
 8007d8a:	7c12      	ldrb	r2, [r2, #16]
 8007d8c:	f107 0108 	add.w	r1, r7, #8
 8007d90:	4610      	mov	r0, r2
 8007d92:	4798      	blx	r3
 8007d94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d96:	e043      	b.n	8007e20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007d98:	6839      	ldr	r1, [r7, #0]
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f000 fa7d 	bl	800829a <USBD_CtlError>
            err++;
 8007da0:	7afb      	ldrb	r3, [r7, #11]
 8007da2:	3301      	adds	r3, #1
 8007da4:	72fb      	strb	r3, [r7, #11]
          break;
 8007da6:	e03b      	b.n	8007e20 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dae:	695b      	ldr	r3, [r3, #20]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d00b      	beq.n	8007dcc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dba:	695b      	ldr	r3, [r3, #20]
 8007dbc:	687a      	ldr	r2, [r7, #4]
 8007dbe:	7c12      	ldrb	r2, [r2, #16]
 8007dc0:	f107 0108 	add.w	r1, r7, #8
 8007dc4:	4610      	mov	r0, r2
 8007dc6:	4798      	blx	r3
 8007dc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007dca:	e029      	b.n	8007e20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007dcc:	6839      	ldr	r1, [r7, #0]
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f000 fa63 	bl	800829a <USBD_CtlError>
            err++;
 8007dd4:	7afb      	ldrb	r3, [r7, #11]
 8007dd6:	3301      	adds	r3, #1
 8007dd8:	72fb      	strb	r3, [r7, #11]
          break;
 8007dda:	e021      	b.n	8007e20 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007de2:	699b      	ldr	r3, [r3, #24]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d00b      	beq.n	8007e00 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dee:	699b      	ldr	r3, [r3, #24]
 8007df0:	687a      	ldr	r2, [r7, #4]
 8007df2:	7c12      	ldrb	r2, [r2, #16]
 8007df4:	f107 0108 	add.w	r1, r7, #8
 8007df8:	4610      	mov	r0, r2
 8007dfa:	4798      	blx	r3
 8007dfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007dfe:	e00f      	b.n	8007e20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007e00:	6839      	ldr	r1, [r7, #0]
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f000 fa49 	bl	800829a <USBD_CtlError>
            err++;
 8007e08:	7afb      	ldrb	r3, [r7, #11]
 8007e0a:	3301      	adds	r3, #1
 8007e0c:	72fb      	strb	r3, [r7, #11]
          break;
 8007e0e:	e007      	b.n	8007e20 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007e10:	6839      	ldr	r1, [r7, #0]
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f000 fa41 	bl	800829a <USBD_CtlError>
          err++;
 8007e18:	7afb      	ldrb	r3, [r7, #11]
 8007e1a:	3301      	adds	r3, #1
 8007e1c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007e1e:	bf00      	nop
      }
      break;
 8007e20:	e037      	b.n	8007e92 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	7c1b      	ldrb	r3, [r3, #16]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d109      	bne.n	8007e3e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e32:	f107 0208 	add.w	r2, r7, #8
 8007e36:	4610      	mov	r0, r2
 8007e38:	4798      	blx	r3
 8007e3a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007e3c:	e029      	b.n	8007e92 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007e3e:	6839      	ldr	r1, [r7, #0]
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f000 fa2a 	bl	800829a <USBD_CtlError>
        err++;
 8007e46:	7afb      	ldrb	r3, [r7, #11]
 8007e48:	3301      	adds	r3, #1
 8007e4a:	72fb      	strb	r3, [r7, #11]
      break;
 8007e4c:	e021      	b.n	8007e92 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	7c1b      	ldrb	r3, [r3, #16]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d10d      	bne.n	8007e72 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e5e:	f107 0208 	add.w	r2, r7, #8
 8007e62:	4610      	mov	r0, r2
 8007e64:	4798      	blx	r3
 8007e66:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	3301      	adds	r3, #1
 8007e6c:	2207      	movs	r2, #7
 8007e6e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007e70:	e00f      	b.n	8007e92 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007e72:	6839      	ldr	r1, [r7, #0]
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f000 fa10 	bl	800829a <USBD_CtlError>
        err++;
 8007e7a:	7afb      	ldrb	r3, [r7, #11]
 8007e7c:	3301      	adds	r3, #1
 8007e7e:	72fb      	strb	r3, [r7, #11]
      break;
 8007e80:	e007      	b.n	8007e92 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8007e82:	6839      	ldr	r1, [r7, #0]
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f000 fa08 	bl	800829a <USBD_CtlError>
      err++;
 8007e8a:	7afb      	ldrb	r3, [r7, #11]
 8007e8c:	3301      	adds	r3, #1
 8007e8e:	72fb      	strb	r3, [r7, #11]
      break;
 8007e90:	bf00      	nop
  }

  if (err != 0U)
 8007e92:	7afb      	ldrb	r3, [r7, #11]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d11e      	bne.n	8007ed6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	88db      	ldrh	r3, [r3, #6]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d016      	beq.n	8007ece <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8007ea0:	893b      	ldrh	r3, [r7, #8]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d00e      	beq.n	8007ec4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	88da      	ldrh	r2, [r3, #6]
 8007eaa:	893b      	ldrh	r3, [r7, #8]
 8007eac:	4293      	cmp	r3, r2
 8007eae:	bf28      	it	cs
 8007eb0:	4613      	movcs	r3, r2
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007eb6:	893b      	ldrh	r3, [r7, #8]
 8007eb8:	461a      	mov	r2, r3
 8007eba:	68f9      	ldr	r1, [r7, #12]
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f000 fa5d 	bl	800837c <USBD_CtlSendData>
 8007ec2:	e009      	b.n	8007ed8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007ec4:	6839      	ldr	r1, [r7, #0]
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f000 f9e7 	bl	800829a <USBD_CtlError>
 8007ecc:	e004      	b.n	8007ed8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f000 faae 	bl	8008430 <USBD_CtlSendStatus>
 8007ed4:	e000      	b.n	8007ed8 <USBD_GetDescriptor+0x320>
    return;
 8007ed6:	bf00      	nop
  }
}
 8007ed8:	3710      	adds	r7, #16
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}
 8007ede:	bf00      	nop

08007ee0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b084      	sub	sp, #16
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	889b      	ldrh	r3, [r3, #4]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d131      	bne.n	8007f56 <USBD_SetAddress+0x76>
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	88db      	ldrh	r3, [r3, #6]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d12d      	bne.n	8007f56 <USBD_SetAddress+0x76>
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	885b      	ldrh	r3, [r3, #2]
 8007efe:	2b7f      	cmp	r3, #127	; 0x7f
 8007f00:	d829      	bhi.n	8007f56 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	885b      	ldrh	r3, [r3, #2]
 8007f06:	b2db      	uxtb	r3, r3
 8007f08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f0c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f14:	b2db      	uxtb	r3, r3
 8007f16:	2b03      	cmp	r3, #3
 8007f18:	d104      	bne.n	8007f24 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007f1a:	6839      	ldr	r1, [r7, #0]
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f000 f9bc 	bl	800829a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f22:	e01d      	b.n	8007f60 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	7bfa      	ldrb	r2, [r7, #15]
 8007f28:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007f2c:	7bfb      	ldrb	r3, [r7, #15]
 8007f2e:	4619      	mov	r1, r3
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f000 ff3f 	bl	8008db4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f000 fa7a 	bl	8008430 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007f3c:	7bfb      	ldrb	r3, [r7, #15]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d004      	beq.n	8007f4c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2202      	movs	r2, #2
 8007f46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f4a:	e009      	b.n	8007f60 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f54:	e004      	b.n	8007f60 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007f56:	6839      	ldr	r1, [r7, #0]
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f000 f99e 	bl	800829a <USBD_CtlError>
  }
}
 8007f5e:	bf00      	nop
 8007f60:	bf00      	nop
 8007f62:	3710      	adds	r7, #16
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}

08007f68 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b084      	sub	sp, #16
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f72:	2300      	movs	r3, #0
 8007f74:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	885b      	ldrh	r3, [r3, #2]
 8007f7a:	b2da      	uxtb	r2, r3
 8007f7c:	4b4e      	ldr	r3, [pc, #312]	; (80080b8 <USBD_SetConfig+0x150>)
 8007f7e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007f80:	4b4d      	ldr	r3, [pc, #308]	; (80080b8 <USBD_SetConfig+0x150>)
 8007f82:	781b      	ldrb	r3, [r3, #0]
 8007f84:	2b01      	cmp	r3, #1
 8007f86:	d905      	bls.n	8007f94 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007f88:	6839      	ldr	r1, [r7, #0]
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f000 f985 	bl	800829a <USBD_CtlError>
    return USBD_FAIL;
 8007f90:	2303      	movs	r3, #3
 8007f92:	e08c      	b.n	80080ae <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f9a:	b2db      	uxtb	r3, r3
 8007f9c:	2b02      	cmp	r3, #2
 8007f9e:	d002      	beq.n	8007fa6 <USBD_SetConfig+0x3e>
 8007fa0:	2b03      	cmp	r3, #3
 8007fa2:	d029      	beq.n	8007ff8 <USBD_SetConfig+0x90>
 8007fa4:	e075      	b.n	8008092 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007fa6:	4b44      	ldr	r3, [pc, #272]	; (80080b8 <USBD_SetConfig+0x150>)
 8007fa8:	781b      	ldrb	r3, [r3, #0]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d020      	beq.n	8007ff0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007fae:	4b42      	ldr	r3, [pc, #264]	; (80080b8 <USBD_SetConfig+0x150>)
 8007fb0:	781b      	ldrb	r3, [r3, #0]
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007fb8:	4b3f      	ldr	r3, [pc, #252]	; (80080b8 <USBD_SetConfig+0x150>)
 8007fba:	781b      	ldrb	r3, [r3, #0]
 8007fbc:	4619      	mov	r1, r3
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f7fe ffbd 	bl	8006f3e <USBD_SetClassConfig>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007fc8:	7bfb      	ldrb	r3, [r7, #15]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d008      	beq.n	8007fe0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007fce:	6839      	ldr	r1, [r7, #0]
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f000 f962 	bl	800829a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2202      	movs	r2, #2
 8007fda:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007fde:	e065      	b.n	80080ac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f000 fa25 	bl	8008430 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2203      	movs	r2, #3
 8007fea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007fee:	e05d      	b.n	80080ac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f000 fa1d 	bl	8008430 <USBD_CtlSendStatus>
      break;
 8007ff6:	e059      	b.n	80080ac <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007ff8:	4b2f      	ldr	r3, [pc, #188]	; (80080b8 <USBD_SetConfig+0x150>)
 8007ffa:	781b      	ldrb	r3, [r3, #0]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d112      	bne.n	8008026 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2202      	movs	r2, #2
 8008004:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008008:	4b2b      	ldr	r3, [pc, #172]	; (80080b8 <USBD_SetConfig+0x150>)
 800800a:	781b      	ldrb	r3, [r3, #0]
 800800c:	461a      	mov	r2, r3
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008012:	4b29      	ldr	r3, [pc, #164]	; (80080b8 <USBD_SetConfig+0x150>)
 8008014:	781b      	ldrb	r3, [r3, #0]
 8008016:	4619      	mov	r1, r3
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f7fe ffac 	bl	8006f76 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f000 fa06 	bl	8008430 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008024:	e042      	b.n	80080ac <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008026:	4b24      	ldr	r3, [pc, #144]	; (80080b8 <USBD_SetConfig+0x150>)
 8008028:	781b      	ldrb	r3, [r3, #0]
 800802a:	461a      	mov	r2, r3
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	429a      	cmp	r2, r3
 8008032:	d02a      	beq.n	800808a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	685b      	ldr	r3, [r3, #4]
 8008038:	b2db      	uxtb	r3, r3
 800803a:	4619      	mov	r1, r3
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f7fe ff9a 	bl	8006f76 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008042:	4b1d      	ldr	r3, [pc, #116]	; (80080b8 <USBD_SetConfig+0x150>)
 8008044:	781b      	ldrb	r3, [r3, #0]
 8008046:	461a      	mov	r2, r3
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800804c:	4b1a      	ldr	r3, [pc, #104]	; (80080b8 <USBD_SetConfig+0x150>)
 800804e:	781b      	ldrb	r3, [r3, #0]
 8008050:	4619      	mov	r1, r3
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f7fe ff73 	bl	8006f3e <USBD_SetClassConfig>
 8008058:	4603      	mov	r3, r0
 800805a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800805c:	7bfb      	ldrb	r3, [r7, #15]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d00f      	beq.n	8008082 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008062:	6839      	ldr	r1, [r7, #0]
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f000 f918 	bl	800829a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	685b      	ldr	r3, [r3, #4]
 800806e:	b2db      	uxtb	r3, r3
 8008070:	4619      	mov	r1, r3
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f7fe ff7f 	bl	8006f76 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2202      	movs	r2, #2
 800807c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008080:	e014      	b.n	80080ac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f000 f9d4 	bl	8008430 <USBD_CtlSendStatus>
      break;
 8008088:	e010      	b.n	80080ac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f000 f9d0 	bl	8008430 <USBD_CtlSendStatus>
      break;
 8008090:	e00c      	b.n	80080ac <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008092:	6839      	ldr	r1, [r7, #0]
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f000 f900 	bl	800829a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800809a:	4b07      	ldr	r3, [pc, #28]	; (80080b8 <USBD_SetConfig+0x150>)
 800809c:	781b      	ldrb	r3, [r3, #0]
 800809e:	4619      	mov	r1, r3
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f7fe ff68 	bl	8006f76 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80080a6:	2303      	movs	r3, #3
 80080a8:	73fb      	strb	r3, [r7, #15]
      break;
 80080aa:	bf00      	nop
  }

  return ret;
 80080ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3710      	adds	r7, #16
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}
 80080b6:	bf00      	nop
 80080b8:	20000358 	.word	0x20000358

080080bc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b082      	sub	sp, #8
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
 80080c4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	88db      	ldrh	r3, [r3, #6]
 80080ca:	2b01      	cmp	r3, #1
 80080cc:	d004      	beq.n	80080d8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80080ce:	6839      	ldr	r1, [r7, #0]
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f000 f8e2 	bl	800829a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80080d6:	e023      	b.n	8008120 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080de:	b2db      	uxtb	r3, r3
 80080e0:	2b02      	cmp	r3, #2
 80080e2:	dc02      	bgt.n	80080ea <USBD_GetConfig+0x2e>
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	dc03      	bgt.n	80080f0 <USBD_GetConfig+0x34>
 80080e8:	e015      	b.n	8008116 <USBD_GetConfig+0x5a>
 80080ea:	2b03      	cmp	r3, #3
 80080ec:	d00b      	beq.n	8008106 <USBD_GetConfig+0x4a>
 80080ee:	e012      	b.n	8008116 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2200      	movs	r2, #0
 80080f4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	3308      	adds	r3, #8
 80080fa:	2201      	movs	r2, #1
 80080fc:	4619      	mov	r1, r3
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f000 f93c 	bl	800837c <USBD_CtlSendData>
        break;
 8008104:	e00c      	b.n	8008120 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	3304      	adds	r3, #4
 800810a:	2201      	movs	r2, #1
 800810c:	4619      	mov	r1, r3
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f000 f934 	bl	800837c <USBD_CtlSendData>
        break;
 8008114:	e004      	b.n	8008120 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008116:	6839      	ldr	r1, [r7, #0]
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f000 f8be 	bl	800829a <USBD_CtlError>
        break;
 800811e:	bf00      	nop
}
 8008120:	bf00      	nop
 8008122:	3708      	adds	r7, #8
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}

08008128 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b082      	sub	sp, #8
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008138:	b2db      	uxtb	r3, r3
 800813a:	3b01      	subs	r3, #1
 800813c:	2b02      	cmp	r3, #2
 800813e:	d81e      	bhi.n	800817e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	88db      	ldrh	r3, [r3, #6]
 8008144:	2b02      	cmp	r3, #2
 8008146:	d004      	beq.n	8008152 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008148:	6839      	ldr	r1, [r7, #0]
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f000 f8a5 	bl	800829a <USBD_CtlError>
        break;
 8008150:	e01a      	b.n	8008188 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2201      	movs	r2, #1
 8008156:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800815e:	2b00      	cmp	r3, #0
 8008160:	d005      	beq.n	800816e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	68db      	ldr	r3, [r3, #12]
 8008166:	f043 0202 	orr.w	r2, r3, #2
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	330c      	adds	r3, #12
 8008172:	2202      	movs	r2, #2
 8008174:	4619      	mov	r1, r3
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 f900 	bl	800837c <USBD_CtlSendData>
      break;
 800817c:	e004      	b.n	8008188 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800817e:	6839      	ldr	r1, [r7, #0]
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f000 f88a 	bl	800829a <USBD_CtlError>
      break;
 8008186:	bf00      	nop
  }
}
 8008188:	bf00      	nop
 800818a:	3708      	adds	r7, #8
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}

08008190 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b082      	sub	sp, #8
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	885b      	ldrh	r3, [r3, #2]
 800819e:	2b01      	cmp	r3, #1
 80081a0:	d107      	bne.n	80081b2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2201      	movs	r2, #1
 80081a6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f000 f940 	bl	8008430 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80081b0:	e013      	b.n	80081da <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	885b      	ldrh	r3, [r3, #2]
 80081b6:	2b02      	cmp	r3, #2
 80081b8:	d10b      	bne.n	80081d2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	889b      	ldrh	r3, [r3, #4]
 80081be:	0a1b      	lsrs	r3, r3, #8
 80081c0:	b29b      	uxth	r3, r3
 80081c2:	b2da      	uxtb	r2, r3
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 f930 	bl	8008430 <USBD_CtlSendStatus>
}
 80081d0:	e003      	b.n	80081da <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80081d2:	6839      	ldr	r1, [r7, #0]
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f000 f860 	bl	800829a <USBD_CtlError>
}
 80081da:	bf00      	nop
 80081dc:	3708      	adds	r7, #8
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}

080081e2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081e2:	b580      	push	{r7, lr}
 80081e4:	b082      	sub	sp, #8
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	6078      	str	r0, [r7, #4]
 80081ea:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081f2:	b2db      	uxtb	r3, r3
 80081f4:	3b01      	subs	r3, #1
 80081f6:	2b02      	cmp	r3, #2
 80081f8:	d80b      	bhi.n	8008212 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	885b      	ldrh	r3, [r3, #2]
 80081fe:	2b01      	cmp	r3, #1
 8008200:	d10c      	bne.n	800821c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2200      	movs	r2, #0
 8008206:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f000 f910 	bl	8008430 <USBD_CtlSendStatus>
      }
      break;
 8008210:	e004      	b.n	800821c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008212:	6839      	ldr	r1, [r7, #0]
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f000 f840 	bl	800829a <USBD_CtlError>
      break;
 800821a:	e000      	b.n	800821e <USBD_ClrFeature+0x3c>
      break;
 800821c:	bf00      	nop
  }
}
 800821e:	bf00      	nop
 8008220:	3708      	adds	r7, #8
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}

08008226 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008226:	b580      	push	{r7, lr}
 8008228:	b084      	sub	sp, #16
 800822a:	af00      	add	r7, sp, #0
 800822c:	6078      	str	r0, [r7, #4]
 800822e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	781a      	ldrb	r2, [r3, #0]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	3301      	adds	r3, #1
 8008240:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	781a      	ldrb	r2, [r3, #0]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	3301      	adds	r3, #1
 800824e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008250:	68f8      	ldr	r0, [r7, #12]
 8008252:	f7ff fa17 	bl	8007684 <SWAPBYTE>
 8008256:	4603      	mov	r3, r0
 8008258:	461a      	mov	r2, r3
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	3301      	adds	r3, #1
 8008262:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	3301      	adds	r3, #1
 8008268:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800826a:	68f8      	ldr	r0, [r7, #12]
 800826c:	f7ff fa0a 	bl	8007684 <SWAPBYTE>
 8008270:	4603      	mov	r3, r0
 8008272:	461a      	mov	r2, r3
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	3301      	adds	r3, #1
 800827c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	3301      	adds	r3, #1
 8008282:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008284:	68f8      	ldr	r0, [r7, #12]
 8008286:	f7ff f9fd 	bl	8007684 <SWAPBYTE>
 800828a:	4603      	mov	r3, r0
 800828c:	461a      	mov	r2, r3
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	80da      	strh	r2, [r3, #6]
}
 8008292:	bf00      	nop
 8008294:	3710      	adds	r7, #16
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}

0800829a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800829a:	b580      	push	{r7, lr}
 800829c:	b082      	sub	sp, #8
 800829e:	af00      	add	r7, sp, #0
 80082a0:	6078      	str	r0, [r7, #4]
 80082a2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80082a4:	2180      	movs	r1, #128	; 0x80
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f000 fd1a 	bl	8008ce0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80082ac:	2100      	movs	r1, #0
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f000 fd16 	bl	8008ce0 <USBD_LL_StallEP>
}
 80082b4:	bf00      	nop
 80082b6:	3708      	adds	r7, #8
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}

080082bc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b086      	sub	sp, #24
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	60f8      	str	r0, [r7, #12]
 80082c4:	60b9      	str	r1, [r7, #8]
 80082c6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80082c8:	2300      	movs	r3, #0
 80082ca:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d036      	beq.n	8008340 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80082d6:	6938      	ldr	r0, [r7, #16]
 80082d8:	f000 f836 	bl	8008348 <USBD_GetLen>
 80082dc:	4603      	mov	r3, r0
 80082de:	3301      	adds	r3, #1
 80082e0:	b29b      	uxth	r3, r3
 80082e2:	005b      	lsls	r3, r3, #1
 80082e4:	b29a      	uxth	r2, r3
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80082ea:	7dfb      	ldrb	r3, [r7, #23]
 80082ec:	68ba      	ldr	r2, [r7, #8]
 80082ee:	4413      	add	r3, r2
 80082f0:	687a      	ldr	r2, [r7, #4]
 80082f2:	7812      	ldrb	r2, [r2, #0]
 80082f4:	701a      	strb	r2, [r3, #0]
  idx++;
 80082f6:	7dfb      	ldrb	r3, [r7, #23]
 80082f8:	3301      	adds	r3, #1
 80082fa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80082fc:	7dfb      	ldrb	r3, [r7, #23]
 80082fe:	68ba      	ldr	r2, [r7, #8]
 8008300:	4413      	add	r3, r2
 8008302:	2203      	movs	r2, #3
 8008304:	701a      	strb	r2, [r3, #0]
  idx++;
 8008306:	7dfb      	ldrb	r3, [r7, #23]
 8008308:	3301      	adds	r3, #1
 800830a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800830c:	e013      	b.n	8008336 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800830e:	7dfb      	ldrb	r3, [r7, #23]
 8008310:	68ba      	ldr	r2, [r7, #8]
 8008312:	4413      	add	r3, r2
 8008314:	693a      	ldr	r2, [r7, #16]
 8008316:	7812      	ldrb	r2, [r2, #0]
 8008318:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800831a:	693b      	ldr	r3, [r7, #16]
 800831c:	3301      	adds	r3, #1
 800831e:	613b      	str	r3, [r7, #16]
    idx++;
 8008320:	7dfb      	ldrb	r3, [r7, #23]
 8008322:	3301      	adds	r3, #1
 8008324:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008326:	7dfb      	ldrb	r3, [r7, #23]
 8008328:	68ba      	ldr	r2, [r7, #8]
 800832a:	4413      	add	r3, r2
 800832c:	2200      	movs	r2, #0
 800832e:	701a      	strb	r2, [r3, #0]
    idx++;
 8008330:	7dfb      	ldrb	r3, [r7, #23]
 8008332:	3301      	adds	r3, #1
 8008334:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	781b      	ldrb	r3, [r3, #0]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d1e7      	bne.n	800830e <USBD_GetString+0x52>
 800833e:	e000      	b.n	8008342 <USBD_GetString+0x86>
    return;
 8008340:	bf00      	nop
  }
}
 8008342:	3718      	adds	r7, #24
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}

08008348 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008348:	b480      	push	{r7}
 800834a:	b085      	sub	sp, #20
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008350:	2300      	movs	r3, #0
 8008352:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008358:	e005      	b.n	8008366 <USBD_GetLen+0x1e>
  {
    len++;
 800835a:	7bfb      	ldrb	r3, [r7, #15]
 800835c:	3301      	adds	r3, #1
 800835e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	3301      	adds	r3, #1
 8008364:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	781b      	ldrb	r3, [r3, #0]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d1f5      	bne.n	800835a <USBD_GetLen+0x12>
  }

  return len;
 800836e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008370:	4618      	mov	r0, r3
 8008372:	3714      	adds	r7, #20
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr

0800837c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b084      	sub	sp, #16
 8008380:	af00      	add	r7, sp, #0
 8008382:	60f8      	str	r0, [r7, #12]
 8008384:	60b9      	str	r1, [r7, #8]
 8008386:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	2202      	movs	r2, #2
 800838c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	687a      	ldr	r2, [r7, #4]
 8008394:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	687a      	ldr	r2, [r7, #4]
 800839a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	68ba      	ldr	r2, [r7, #8]
 80083a0:	2100      	movs	r1, #0
 80083a2:	68f8      	ldr	r0, [r7, #12]
 80083a4:	f000 fd25 	bl	8008df2 <USBD_LL_Transmit>

  return USBD_OK;
 80083a8:	2300      	movs	r3, #0
}
 80083aa:	4618      	mov	r0, r3
 80083ac:	3710      	adds	r7, #16
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}

080083b2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80083b2:	b580      	push	{r7, lr}
 80083b4:	b084      	sub	sp, #16
 80083b6:	af00      	add	r7, sp, #0
 80083b8:	60f8      	str	r0, [r7, #12]
 80083ba:	60b9      	str	r1, [r7, #8]
 80083bc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	68ba      	ldr	r2, [r7, #8]
 80083c2:	2100      	movs	r1, #0
 80083c4:	68f8      	ldr	r0, [r7, #12]
 80083c6:	f000 fd14 	bl	8008df2 <USBD_LL_Transmit>

  return USBD_OK;
 80083ca:	2300      	movs	r3, #0
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3710      	adds	r7, #16
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}

080083d4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b084      	sub	sp, #16
 80083d8:	af00      	add	r7, sp, #0
 80083da:	60f8      	str	r0, [r7, #12]
 80083dc:	60b9      	str	r1, [r7, #8]
 80083de:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	2203      	movs	r2, #3
 80083e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	687a      	ldr	r2, [r7, #4]
 80083ec:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	687a      	ldr	r2, [r7, #4]
 80083f4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	68ba      	ldr	r2, [r7, #8]
 80083fc:	2100      	movs	r1, #0
 80083fe:	68f8      	ldr	r0, [r7, #12]
 8008400:	f000 fd18 	bl	8008e34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008404:	2300      	movs	r3, #0
}
 8008406:	4618      	mov	r0, r3
 8008408:	3710      	adds	r7, #16
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}

0800840e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800840e:	b580      	push	{r7, lr}
 8008410:	b084      	sub	sp, #16
 8008412:	af00      	add	r7, sp, #0
 8008414:	60f8      	str	r0, [r7, #12]
 8008416:	60b9      	str	r1, [r7, #8]
 8008418:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	68ba      	ldr	r2, [r7, #8]
 800841e:	2100      	movs	r1, #0
 8008420:	68f8      	ldr	r0, [r7, #12]
 8008422:	f000 fd07 	bl	8008e34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008426:	2300      	movs	r3, #0
}
 8008428:	4618      	mov	r0, r3
 800842a:	3710      	adds	r7, #16
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}

08008430 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b082      	sub	sp, #8
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2204      	movs	r2, #4
 800843c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008440:	2300      	movs	r3, #0
 8008442:	2200      	movs	r2, #0
 8008444:	2100      	movs	r1, #0
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f000 fcd3 	bl	8008df2 <USBD_LL_Transmit>

  return USBD_OK;
 800844c:	2300      	movs	r3, #0
}
 800844e:	4618      	mov	r0, r3
 8008450:	3708      	adds	r7, #8
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}

08008456 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008456:	b580      	push	{r7, lr}
 8008458:	b082      	sub	sp, #8
 800845a:	af00      	add	r7, sp, #0
 800845c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2205      	movs	r2, #5
 8008462:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008466:	2300      	movs	r3, #0
 8008468:	2200      	movs	r2, #0
 800846a:	2100      	movs	r1, #0
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f000 fce1 	bl	8008e34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008472:	2300      	movs	r3, #0
}
 8008474:	4618      	mov	r0, r3
 8008476:	3708      	adds	r7, #8
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}

0800847c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008480:	2200      	movs	r2, #0
 8008482:	4912      	ldr	r1, [pc, #72]	; (80084cc <MX_USB_DEVICE_Init+0x50>)
 8008484:	4812      	ldr	r0, [pc, #72]	; (80084d0 <MX_USB_DEVICE_Init+0x54>)
 8008486:	f7fe fcdd 	bl	8006e44 <USBD_Init>
 800848a:	4603      	mov	r3, r0
 800848c:	2b00      	cmp	r3, #0
 800848e:	d001      	beq.n	8008494 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008490:	f7f8 fe3e 	bl	8001110 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008494:	490f      	ldr	r1, [pc, #60]	; (80084d4 <MX_USB_DEVICE_Init+0x58>)
 8008496:	480e      	ldr	r0, [pc, #56]	; (80084d0 <MX_USB_DEVICE_Init+0x54>)
 8008498:	f7fe fd04 	bl	8006ea4 <USBD_RegisterClass>
 800849c:	4603      	mov	r3, r0
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d001      	beq.n	80084a6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80084a2:	f7f8 fe35 	bl	8001110 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80084a6:	490c      	ldr	r1, [pc, #48]	; (80084d8 <MX_USB_DEVICE_Init+0x5c>)
 80084a8:	4809      	ldr	r0, [pc, #36]	; (80084d0 <MX_USB_DEVICE_Init+0x54>)
 80084aa:	f7fe fbf5 	bl	8006c98 <USBD_CDC_RegisterInterface>
 80084ae:	4603      	mov	r3, r0
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d001      	beq.n	80084b8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80084b4:	f7f8 fe2c 	bl	8001110 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80084b8:	4805      	ldr	r0, [pc, #20]	; (80084d0 <MX_USB_DEVICE_Init+0x54>)
 80084ba:	f7fe fd29 	bl	8006f10 <USBD_Start>
 80084be:	4603      	mov	r3, r0
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d001      	beq.n	80084c8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80084c4:	f7f8 fe24 	bl	8001110 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80084c8:	bf00      	nop
 80084ca:	bd80      	pop	{r7, pc}
 80084cc:	200000b0 	.word	0x200000b0
 80084d0:	2000035c 	.word	0x2000035c
 80084d4:	2000001c 	.word	0x2000001c
 80084d8:	2000009c 	.word	0x2000009c

080084dc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80084e0:	2200      	movs	r2, #0
 80084e2:	4905      	ldr	r1, [pc, #20]	; (80084f8 <CDC_Init_FS+0x1c>)
 80084e4:	4805      	ldr	r0, [pc, #20]	; (80084fc <CDC_Init_FS+0x20>)
 80084e6:	f7fe fbf1 	bl	8006ccc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80084ea:	4905      	ldr	r1, [pc, #20]	; (8008500 <CDC_Init_FS+0x24>)
 80084ec:	4803      	ldr	r0, [pc, #12]	; (80084fc <CDC_Init_FS+0x20>)
 80084ee:	f7fe fc0f 	bl	8006d10 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80084f2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	bd80      	pop	{r7, pc}
 80084f8:	20000e38 	.word	0x20000e38
 80084fc:	2000035c 	.word	0x2000035c
 8008500:	20000638 	.word	0x20000638

08008504 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008504:	b480      	push	{r7}
 8008506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008508:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800850a:	4618      	mov	r0, r3
 800850c:	46bd      	mov	sp, r7
 800850e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008512:	4770      	bx	lr

08008514 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008514:	b480      	push	{r7}
 8008516:	b083      	sub	sp, #12
 8008518:	af00      	add	r7, sp, #0
 800851a:	4603      	mov	r3, r0
 800851c:	6039      	str	r1, [r7, #0]
 800851e:	71fb      	strb	r3, [r7, #7]
 8008520:	4613      	mov	r3, r2
 8008522:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008524:	79fb      	ldrb	r3, [r7, #7]
 8008526:	2b23      	cmp	r3, #35	; 0x23
 8008528:	d84a      	bhi.n	80085c0 <CDC_Control_FS+0xac>
 800852a:	a201      	add	r2, pc, #4	; (adr r2, 8008530 <CDC_Control_FS+0x1c>)
 800852c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008530:	080085c1 	.word	0x080085c1
 8008534:	080085c1 	.word	0x080085c1
 8008538:	080085c1 	.word	0x080085c1
 800853c:	080085c1 	.word	0x080085c1
 8008540:	080085c1 	.word	0x080085c1
 8008544:	080085c1 	.word	0x080085c1
 8008548:	080085c1 	.word	0x080085c1
 800854c:	080085c1 	.word	0x080085c1
 8008550:	080085c1 	.word	0x080085c1
 8008554:	080085c1 	.word	0x080085c1
 8008558:	080085c1 	.word	0x080085c1
 800855c:	080085c1 	.word	0x080085c1
 8008560:	080085c1 	.word	0x080085c1
 8008564:	080085c1 	.word	0x080085c1
 8008568:	080085c1 	.word	0x080085c1
 800856c:	080085c1 	.word	0x080085c1
 8008570:	080085c1 	.word	0x080085c1
 8008574:	080085c1 	.word	0x080085c1
 8008578:	080085c1 	.word	0x080085c1
 800857c:	080085c1 	.word	0x080085c1
 8008580:	080085c1 	.word	0x080085c1
 8008584:	080085c1 	.word	0x080085c1
 8008588:	080085c1 	.word	0x080085c1
 800858c:	080085c1 	.word	0x080085c1
 8008590:	080085c1 	.word	0x080085c1
 8008594:	080085c1 	.word	0x080085c1
 8008598:	080085c1 	.word	0x080085c1
 800859c:	080085c1 	.word	0x080085c1
 80085a0:	080085c1 	.word	0x080085c1
 80085a4:	080085c1 	.word	0x080085c1
 80085a8:	080085c1 	.word	0x080085c1
 80085ac:	080085c1 	.word	0x080085c1
 80085b0:	080085c1 	.word	0x080085c1
 80085b4:	080085c1 	.word	0x080085c1
 80085b8:	080085c1 	.word	0x080085c1
 80085bc:	080085c1 	.word	0x080085c1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80085c0:	bf00      	nop
  }

  return (USBD_OK);
 80085c2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	370c      	adds	r7, #12
 80085c8:	46bd      	mov	sp, r7
 80085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ce:	4770      	bx	lr

080085d0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b082      	sub	sp, #8
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
 80085d8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80085da:	6879      	ldr	r1, [r7, #4]
 80085dc:	480b      	ldr	r0, [pc, #44]	; (800860c <CDC_Receive_FS+0x3c>)
 80085de:	f7fe fb97 	bl	8006d10 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80085e2:	480a      	ldr	r0, [pc, #40]	; (800860c <CDC_Receive_FS+0x3c>)
 80085e4:	f7fe fbf8 	bl	8006dd8 <USBD_CDC_ReceivePacket>
//uint8_t l=(uint8_t)*Len;
//memcpy(&data,Buf,l)  ;
data=Buf[0];
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	781a      	ldrb	r2, [r3, #0]
 80085ec:	4b08      	ldr	r3, [pc, #32]	; (8008610 <CDC_Receive_FS+0x40>)
 80085ee:	701a      	strb	r2, [r3, #0]
data1=Buf[1];
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	3301      	adds	r3, #1
 80085f4:	781a      	ldrb	r2, [r3, #0]
 80085f6:	4b07      	ldr	r3, [pc, #28]	; (8008614 <CDC_Receive_FS+0x44>)
 80085f8:	701a      	strb	r2, [r3, #0]

flag=1;
 80085fa:	4b07      	ldr	r3, [pc, #28]	; (8008618 <CDC_Receive_FS+0x48>)
 80085fc:	2201      	movs	r2, #1
 80085fe:	601a      	str	r2, [r3, #0]
  return (USBD_OK);
 8008600:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008602:	4618      	mov	r0, r3
 8008604:	3708      	adds	r7, #8
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}
 800860a:	bf00      	nop
 800860c:	2000035c 	.word	0x2000035c
 8008610:	20000300 	.word	0x20000300
 8008614:	20000301 	.word	0x20000301
 8008618:	20000304 	.word	0x20000304

0800861c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b084      	sub	sp, #16
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
 8008624:	460b      	mov	r3, r1
 8008626:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008628:	2300      	movs	r3, #0
 800862a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800862c:	4b0d      	ldr	r3, [pc, #52]	; (8008664 <CDC_Transmit_FS+0x48>)
 800862e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008632:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800863a:	2b00      	cmp	r3, #0
 800863c:	d001      	beq.n	8008642 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800863e:	2301      	movs	r3, #1
 8008640:	e00b      	b.n	800865a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008642:	887b      	ldrh	r3, [r7, #2]
 8008644:	461a      	mov	r2, r3
 8008646:	6879      	ldr	r1, [r7, #4]
 8008648:	4806      	ldr	r0, [pc, #24]	; (8008664 <CDC_Transmit_FS+0x48>)
 800864a:	f7fe fb3f 	bl	8006ccc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800864e:	4805      	ldr	r0, [pc, #20]	; (8008664 <CDC_Transmit_FS+0x48>)
 8008650:	f7fe fb7c 	bl	8006d4c <USBD_CDC_TransmitPacket>
 8008654:	4603      	mov	r3, r0
 8008656:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008658:	7bfb      	ldrb	r3, [r7, #15]
}
 800865a:	4618      	mov	r0, r3
 800865c:	3710      	adds	r7, #16
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}
 8008662:	bf00      	nop
 8008664:	2000035c 	.word	0x2000035c

08008668 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008668:	b480      	push	{r7}
 800866a:	b087      	sub	sp, #28
 800866c:	af00      	add	r7, sp, #0
 800866e:	60f8      	str	r0, [r7, #12]
 8008670:	60b9      	str	r1, [r7, #8]
 8008672:	4613      	mov	r3, r2
 8008674:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008676:	2300      	movs	r3, #0
 8008678:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800867a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800867e:	4618      	mov	r0, r3
 8008680:	371c      	adds	r7, #28
 8008682:	46bd      	mov	sp, r7
 8008684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008688:	4770      	bx	lr
	...

0800868c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800868c:	b480      	push	{r7}
 800868e:	b083      	sub	sp, #12
 8008690:	af00      	add	r7, sp, #0
 8008692:	4603      	mov	r3, r0
 8008694:	6039      	str	r1, [r7, #0]
 8008696:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	2212      	movs	r2, #18
 800869c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800869e:	4b03      	ldr	r3, [pc, #12]	; (80086ac <USBD_FS_DeviceDescriptor+0x20>)
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	370c      	adds	r7, #12
 80086a4:	46bd      	mov	sp, r7
 80086a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086aa:	4770      	bx	lr
 80086ac:	200000d0 	.word	0x200000d0

080086b0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b083      	sub	sp, #12
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	4603      	mov	r3, r0
 80086b8:	6039      	str	r1, [r7, #0]
 80086ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	2204      	movs	r2, #4
 80086c0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80086c2:	4b03      	ldr	r3, [pc, #12]	; (80086d0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80086c4:	4618      	mov	r0, r3
 80086c6:	370c      	adds	r7, #12
 80086c8:	46bd      	mov	sp, r7
 80086ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ce:	4770      	bx	lr
 80086d0:	200000f0 	.word	0x200000f0

080086d4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b082      	sub	sp, #8
 80086d8:	af00      	add	r7, sp, #0
 80086da:	4603      	mov	r3, r0
 80086dc:	6039      	str	r1, [r7, #0]
 80086de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80086e0:	79fb      	ldrb	r3, [r7, #7]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d105      	bne.n	80086f2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80086e6:	683a      	ldr	r2, [r7, #0]
 80086e8:	4907      	ldr	r1, [pc, #28]	; (8008708 <USBD_FS_ProductStrDescriptor+0x34>)
 80086ea:	4808      	ldr	r0, [pc, #32]	; (800870c <USBD_FS_ProductStrDescriptor+0x38>)
 80086ec:	f7ff fde6 	bl	80082bc <USBD_GetString>
 80086f0:	e004      	b.n	80086fc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80086f2:	683a      	ldr	r2, [r7, #0]
 80086f4:	4904      	ldr	r1, [pc, #16]	; (8008708 <USBD_FS_ProductStrDescriptor+0x34>)
 80086f6:	4805      	ldr	r0, [pc, #20]	; (800870c <USBD_FS_ProductStrDescriptor+0x38>)
 80086f8:	f7ff fde0 	bl	80082bc <USBD_GetString>
  }
  return USBD_StrDesc;
 80086fc:	4b02      	ldr	r3, [pc, #8]	; (8008708 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3708      	adds	r7, #8
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}
 8008706:	bf00      	nop
 8008708:	20001638 	.word	0x20001638
 800870c:	0800bdc4 	.word	0x0800bdc4

08008710 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b082      	sub	sp, #8
 8008714:	af00      	add	r7, sp, #0
 8008716:	4603      	mov	r3, r0
 8008718:	6039      	str	r1, [r7, #0]
 800871a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800871c:	683a      	ldr	r2, [r7, #0]
 800871e:	4904      	ldr	r1, [pc, #16]	; (8008730 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008720:	4804      	ldr	r0, [pc, #16]	; (8008734 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008722:	f7ff fdcb 	bl	80082bc <USBD_GetString>
  return USBD_StrDesc;
 8008726:	4b02      	ldr	r3, [pc, #8]	; (8008730 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008728:	4618      	mov	r0, r3
 800872a:	3708      	adds	r7, #8
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}
 8008730:	20001638 	.word	0x20001638
 8008734:	0800bddc 	.word	0x0800bddc

08008738 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b082      	sub	sp, #8
 800873c:	af00      	add	r7, sp, #0
 800873e:	4603      	mov	r3, r0
 8008740:	6039      	str	r1, [r7, #0]
 8008742:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	221a      	movs	r2, #26
 8008748:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800874a:	f000 f855 	bl	80087f8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800874e:	4b02      	ldr	r3, [pc, #8]	; (8008758 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008750:	4618      	mov	r0, r3
 8008752:	3708      	adds	r7, #8
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}
 8008758:	200000f4 	.word	0x200000f4

0800875c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b082      	sub	sp, #8
 8008760:	af00      	add	r7, sp, #0
 8008762:	4603      	mov	r3, r0
 8008764:	6039      	str	r1, [r7, #0]
 8008766:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008768:	79fb      	ldrb	r3, [r7, #7]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d105      	bne.n	800877a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800876e:	683a      	ldr	r2, [r7, #0]
 8008770:	4907      	ldr	r1, [pc, #28]	; (8008790 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008772:	4808      	ldr	r0, [pc, #32]	; (8008794 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008774:	f7ff fda2 	bl	80082bc <USBD_GetString>
 8008778:	e004      	b.n	8008784 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800877a:	683a      	ldr	r2, [r7, #0]
 800877c:	4904      	ldr	r1, [pc, #16]	; (8008790 <USBD_FS_ConfigStrDescriptor+0x34>)
 800877e:	4805      	ldr	r0, [pc, #20]	; (8008794 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008780:	f7ff fd9c 	bl	80082bc <USBD_GetString>
  }
  return USBD_StrDesc;
 8008784:	4b02      	ldr	r3, [pc, #8]	; (8008790 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008786:	4618      	mov	r0, r3
 8008788:	3708      	adds	r7, #8
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}
 800878e:	bf00      	nop
 8008790:	20001638 	.word	0x20001638
 8008794:	0800bdf0 	.word	0x0800bdf0

08008798 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b082      	sub	sp, #8
 800879c:	af00      	add	r7, sp, #0
 800879e:	4603      	mov	r3, r0
 80087a0:	6039      	str	r1, [r7, #0]
 80087a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80087a4:	79fb      	ldrb	r3, [r7, #7]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d105      	bne.n	80087b6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80087aa:	683a      	ldr	r2, [r7, #0]
 80087ac:	4907      	ldr	r1, [pc, #28]	; (80087cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80087ae:	4808      	ldr	r0, [pc, #32]	; (80087d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80087b0:	f7ff fd84 	bl	80082bc <USBD_GetString>
 80087b4:	e004      	b.n	80087c0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80087b6:	683a      	ldr	r2, [r7, #0]
 80087b8:	4904      	ldr	r1, [pc, #16]	; (80087cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80087ba:	4805      	ldr	r0, [pc, #20]	; (80087d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80087bc:	f7ff fd7e 	bl	80082bc <USBD_GetString>
  }
  return USBD_StrDesc;
 80087c0:	4b02      	ldr	r3, [pc, #8]	; (80087cc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3708      	adds	r7, #8
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}
 80087ca:	bf00      	nop
 80087cc:	20001638 	.word	0x20001638
 80087d0:	0800bdfc 	.word	0x0800bdfc

080087d4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b083      	sub	sp, #12
 80087d8:	af00      	add	r7, sp, #0
 80087da:	4603      	mov	r3, r0
 80087dc:	6039      	str	r1, [r7, #0]
 80087de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	220c      	movs	r2, #12
 80087e4:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80087e6:	4b03      	ldr	r3, [pc, #12]	; (80087f4 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	370c      	adds	r7, #12
 80087ec:	46bd      	mov	sp, r7
 80087ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f2:	4770      	bx	lr
 80087f4:	200000e4 	.word	0x200000e4

080087f8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b084      	sub	sp, #16
 80087fc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80087fe:	4b0f      	ldr	r3, [pc, #60]	; (800883c <Get_SerialNum+0x44>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008804:	4b0e      	ldr	r3, [pc, #56]	; (8008840 <Get_SerialNum+0x48>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800880a:	4b0e      	ldr	r3, [pc, #56]	; (8008844 <Get_SerialNum+0x4c>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008810:	68fa      	ldr	r2, [r7, #12]
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	4413      	add	r3, r2
 8008816:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d009      	beq.n	8008832 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800881e:	2208      	movs	r2, #8
 8008820:	4909      	ldr	r1, [pc, #36]	; (8008848 <Get_SerialNum+0x50>)
 8008822:	68f8      	ldr	r0, [r7, #12]
 8008824:	f000 f814 	bl	8008850 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008828:	2204      	movs	r2, #4
 800882a:	4908      	ldr	r1, [pc, #32]	; (800884c <Get_SerialNum+0x54>)
 800882c:	68b8      	ldr	r0, [r7, #8]
 800882e:	f000 f80f 	bl	8008850 <IntToUnicode>
  }
}
 8008832:	bf00      	nop
 8008834:	3710      	adds	r7, #16
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}
 800883a:	bf00      	nop
 800883c:	1fff7a10 	.word	0x1fff7a10
 8008840:	1fff7a14 	.word	0x1fff7a14
 8008844:	1fff7a18 	.word	0x1fff7a18
 8008848:	200000f6 	.word	0x200000f6
 800884c:	20000106 	.word	0x20000106

08008850 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008850:	b480      	push	{r7}
 8008852:	b087      	sub	sp, #28
 8008854:	af00      	add	r7, sp, #0
 8008856:	60f8      	str	r0, [r7, #12]
 8008858:	60b9      	str	r1, [r7, #8]
 800885a:	4613      	mov	r3, r2
 800885c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800885e:	2300      	movs	r3, #0
 8008860:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008862:	2300      	movs	r3, #0
 8008864:	75fb      	strb	r3, [r7, #23]
 8008866:	e027      	b.n	80088b8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	0f1b      	lsrs	r3, r3, #28
 800886c:	2b09      	cmp	r3, #9
 800886e:	d80b      	bhi.n	8008888 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	0f1b      	lsrs	r3, r3, #28
 8008874:	b2da      	uxtb	r2, r3
 8008876:	7dfb      	ldrb	r3, [r7, #23]
 8008878:	005b      	lsls	r3, r3, #1
 800887a:	4619      	mov	r1, r3
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	440b      	add	r3, r1
 8008880:	3230      	adds	r2, #48	; 0x30
 8008882:	b2d2      	uxtb	r2, r2
 8008884:	701a      	strb	r2, [r3, #0]
 8008886:	e00a      	b.n	800889e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	0f1b      	lsrs	r3, r3, #28
 800888c:	b2da      	uxtb	r2, r3
 800888e:	7dfb      	ldrb	r3, [r7, #23]
 8008890:	005b      	lsls	r3, r3, #1
 8008892:	4619      	mov	r1, r3
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	440b      	add	r3, r1
 8008898:	3237      	adds	r2, #55	; 0x37
 800889a:	b2d2      	uxtb	r2, r2
 800889c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	011b      	lsls	r3, r3, #4
 80088a2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80088a4:	7dfb      	ldrb	r3, [r7, #23]
 80088a6:	005b      	lsls	r3, r3, #1
 80088a8:	3301      	adds	r3, #1
 80088aa:	68ba      	ldr	r2, [r7, #8]
 80088ac:	4413      	add	r3, r2
 80088ae:	2200      	movs	r2, #0
 80088b0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80088b2:	7dfb      	ldrb	r3, [r7, #23]
 80088b4:	3301      	adds	r3, #1
 80088b6:	75fb      	strb	r3, [r7, #23]
 80088b8:	7dfa      	ldrb	r2, [r7, #23]
 80088ba:	79fb      	ldrb	r3, [r7, #7]
 80088bc:	429a      	cmp	r2, r3
 80088be:	d3d3      	bcc.n	8008868 <IntToUnicode+0x18>
  }
}
 80088c0:	bf00      	nop
 80088c2:	bf00      	nop
 80088c4:	371c      	adds	r7, #28
 80088c6:	46bd      	mov	sp, r7
 80088c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088cc:	4770      	bx	lr
	...

080088d0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b0a0      	sub	sp, #128	; 0x80
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80088d8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80088dc:	2200      	movs	r2, #0
 80088de:	601a      	str	r2, [r3, #0]
 80088e0:	605a      	str	r2, [r3, #4]
 80088e2:	609a      	str	r2, [r3, #8]
 80088e4:	60da      	str	r2, [r3, #12]
 80088e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80088e8:	f107 0310 	add.w	r3, r7, #16
 80088ec:	225c      	movs	r2, #92	; 0x5c
 80088ee:	2100      	movs	r1, #0
 80088f0:	4618      	mov	r0, r3
 80088f2:	f000 fb93 	bl	800901c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80088fe:	d149      	bne.n	8008994 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8008900:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008904:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8008906:	2300      	movs	r3, #0
 8008908:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800890a:	f107 0310 	add.w	r3, r7, #16
 800890e:	4618      	mov	r0, r3
 8008910:	f7fa fd52 	bl	80033b8 <HAL_RCCEx_PeriphCLKConfig>
 8008914:	4603      	mov	r3, r0
 8008916:	2b00      	cmp	r3, #0
 8008918:	d001      	beq.n	800891e <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800891a:	f7f8 fbf9 	bl	8001110 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800891e:	2300      	movs	r3, #0
 8008920:	60fb      	str	r3, [r7, #12]
 8008922:	4b1e      	ldr	r3, [pc, #120]	; (800899c <HAL_PCD_MspInit+0xcc>)
 8008924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008926:	4a1d      	ldr	r2, [pc, #116]	; (800899c <HAL_PCD_MspInit+0xcc>)
 8008928:	f043 0301 	orr.w	r3, r3, #1
 800892c:	6313      	str	r3, [r2, #48]	; 0x30
 800892e:	4b1b      	ldr	r3, [pc, #108]	; (800899c <HAL_PCD_MspInit+0xcc>)
 8008930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008932:	f003 0301 	and.w	r3, r3, #1
 8008936:	60fb      	str	r3, [r7, #12]
 8008938:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800893a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800893e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008940:	2302      	movs	r3, #2
 8008942:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008944:	2300      	movs	r3, #0
 8008946:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008948:	2303      	movs	r3, #3
 800894a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800894c:	230a      	movs	r3, #10
 800894e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008950:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8008954:	4619      	mov	r1, r3
 8008956:	4812      	ldr	r0, [pc, #72]	; (80089a0 <HAL_PCD_MspInit+0xd0>)
 8008958:	f7f8 ffc6 	bl	80018e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800895c:	4b0f      	ldr	r3, [pc, #60]	; (800899c <HAL_PCD_MspInit+0xcc>)
 800895e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008960:	4a0e      	ldr	r2, [pc, #56]	; (800899c <HAL_PCD_MspInit+0xcc>)
 8008962:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008966:	6353      	str	r3, [r2, #52]	; 0x34
 8008968:	2300      	movs	r3, #0
 800896a:	60bb      	str	r3, [r7, #8]
 800896c:	4b0b      	ldr	r3, [pc, #44]	; (800899c <HAL_PCD_MspInit+0xcc>)
 800896e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008970:	4a0a      	ldr	r2, [pc, #40]	; (800899c <HAL_PCD_MspInit+0xcc>)
 8008972:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008976:	6453      	str	r3, [r2, #68]	; 0x44
 8008978:	4b08      	ldr	r3, [pc, #32]	; (800899c <HAL_PCD_MspInit+0xcc>)
 800897a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800897c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008980:	60bb      	str	r3, [r7, #8]
 8008982:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008984:	2200      	movs	r2, #0
 8008986:	2100      	movs	r1, #0
 8008988:	2043      	movs	r0, #67	; 0x43
 800898a:	f7f8 ff76 	bl	800187a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800898e:	2043      	movs	r0, #67	; 0x43
 8008990:	f7f8 ff8f 	bl	80018b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008994:	bf00      	nop
 8008996:	3780      	adds	r7, #128	; 0x80
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}
 800899c:	40023800 	.word	0x40023800
 80089a0:	40020000 	.word	0x40020000

080089a4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b082      	sub	sp, #8
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80089b8:	4619      	mov	r1, r3
 80089ba:	4610      	mov	r0, r2
 80089bc:	f7fe faf5 	bl	8006faa <USBD_LL_SetupStage>
}
 80089c0:	bf00      	nop
 80089c2:	3708      	adds	r7, #8
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}

080089c8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b082      	sub	sp, #8
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
 80089d0:	460b      	mov	r3, r1
 80089d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80089da:	78fa      	ldrb	r2, [r7, #3]
 80089dc:	6879      	ldr	r1, [r7, #4]
 80089de:	4613      	mov	r3, r2
 80089e0:	00db      	lsls	r3, r3, #3
 80089e2:	4413      	add	r3, r2
 80089e4:	009b      	lsls	r3, r3, #2
 80089e6:	440b      	add	r3, r1
 80089e8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80089ec:	681a      	ldr	r2, [r3, #0]
 80089ee:	78fb      	ldrb	r3, [r7, #3]
 80089f0:	4619      	mov	r1, r3
 80089f2:	f7fe fb2f 	bl	8007054 <USBD_LL_DataOutStage>
}
 80089f6:	bf00      	nop
 80089f8:	3708      	adds	r7, #8
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}

080089fe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089fe:	b580      	push	{r7, lr}
 8008a00:	b082      	sub	sp, #8
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	6078      	str	r0, [r7, #4]
 8008a06:	460b      	mov	r3, r1
 8008a08:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008a10:	78fa      	ldrb	r2, [r7, #3]
 8008a12:	6879      	ldr	r1, [r7, #4]
 8008a14:	4613      	mov	r3, r2
 8008a16:	00db      	lsls	r3, r3, #3
 8008a18:	4413      	add	r3, r2
 8008a1a:	009b      	lsls	r3, r3, #2
 8008a1c:	440b      	add	r3, r1
 8008a1e:	334c      	adds	r3, #76	; 0x4c
 8008a20:	681a      	ldr	r2, [r3, #0]
 8008a22:	78fb      	ldrb	r3, [r7, #3]
 8008a24:	4619      	mov	r1, r3
 8008a26:	f7fe fbc8 	bl	80071ba <USBD_LL_DataInStage>
}
 8008a2a:	bf00      	nop
 8008a2c:	3708      	adds	r7, #8
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}

08008a32 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a32:	b580      	push	{r7, lr}
 8008a34:	b082      	sub	sp, #8
 8008a36:	af00      	add	r7, sp, #0
 8008a38:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008a40:	4618      	mov	r0, r3
 8008a42:	f7fe fcfc 	bl	800743e <USBD_LL_SOF>
}
 8008a46:	bf00      	nop
 8008a48:	3708      	adds	r7, #8
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}

08008a4e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a4e:	b580      	push	{r7, lr}
 8008a50:	b084      	sub	sp, #16
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008a56:	2301      	movs	r3, #1
 8008a58:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	68db      	ldr	r3, [r3, #12]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d102      	bne.n	8008a68 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008a62:	2300      	movs	r3, #0
 8008a64:	73fb      	strb	r3, [r7, #15]
 8008a66:	e008      	b.n	8008a7a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	68db      	ldr	r3, [r3, #12]
 8008a6c:	2b02      	cmp	r3, #2
 8008a6e:	d102      	bne.n	8008a76 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008a70:	2301      	movs	r3, #1
 8008a72:	73fb      	strb	r3, [r7, #15]
 8008a74:	e001      	b.n	8008a7a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008a76:	f7f8 fb4b 	bl	8001110 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008a80:	7bfa      	ldrb	r2, [r7, #15]
 8008a82:	4611      	mov	r1, r2
 8008a84:	4618      	mov	r0, r3
 8008a86:	f7fe fc9c 	bl	80073c2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008a90:	4618      	mov	r0, r3
 8008a92:	f7fe fc44 	bl	800731e <USBD_LL_Reset>
}
 8008a96:	bf00      	nop
 8008a98:	3710      	adds	r7, #16
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}
	...

08008aa0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b082      	sub	sp, #8
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f7fe fc97 	bl	80073e2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	687a      	ldr	r2, [r7, #4]
 8008ac0:	6812      	ldr	r2, [r2, #0]
 8008ac2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008ac6:	f043 0301 	orr.w	r3, r3, #1
 8008aca:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6a1b      	ldr	r3, [r3, #32]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d005      	beq.n	8008ae0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008ad4:	4b04      	ldr	r3, [pc, #16]	; (8008ae8 <HAL_PCD_SuspendCallback+0x48>)
 8008ad6:	691b      	ldr	r3, [r3, #16]
 8008ad8:	4a03      	ldr	r2, [pc, #12]	; (8008ae8 <HAL_PCD_SuspendCallback+0x48>)
 8008ada:	f043 0306 	orr.w	r3, r3, #6
 8008ade:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008ae0:	bf00      	nop
 8008ae2:	3708      	adds	r7, #8
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}
 8008ae8:	e000ed00 	.word	0xe000ed00

08008aec <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b082      	sub	sp, #8
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008afa:	4618      	mov	r0, r3
 8008afc:	f7fe fc87 	bl	800740e <USBD_LL_Resume>
}
 8008b00:	bf00      	nop
 8008b02:	3708      	adds	r7, #8
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}

08008b08 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b082      	sub	sp, #8
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
 8008b10:	460b      	mov	r3, r1
 8008b12:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b1a:	78fa      	ldrb	r2, [r7, #3]
 8008b1c:	4611      	mov	r1, r2
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f7fe fcdf 	bl	80074e2 <USBD_LL_IsoOUTIncomplete>
}
 8008b24:	bf00      	nop
 8008b26:	3708      	adds	r7, #8
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}

08008b2c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b082      	sub	sp, #8
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
 8008b34:	460b      	mov	r3, r1
 8008b36:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b3e:	78fa      	ldrb	r2, [r7, #3]
 8008b40:	4611      	mov	r1, r2
 8008b42:	4618      	mov	r0, r3
 8008b44:	f7fe fc9b 	bl	800747e <USBD_LL_IsoINIncomplete>
}
 8008b48:	bf00      	nop
 8008b4a:	3708      	adds	r7, #8
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}

08008b50 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b082      	sub	sp, #8
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f7fe fcf1 	bl	8007546 <USBD_LL_DevConnected>
}
 8008b64:	bf00      	nop
 8008b66:	3708      	adds	r7, #8
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}

08008b6c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b082      	sub	sp, #8
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f7fe fcee 	bl	800755c <USBD_LL_DevDisconnected>
}
 8008b80:	bf00      	nop
 8008b82:	3708      	adds	r7, #8
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}

08008b88 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b082      	sub	sp, #8
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	781b      	ldrb	r3, [r3, #0]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d13c      	bne.n	8008c12 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008b98:	4a20      	ldr	r2, [pc, #128]	; (8008c1c <USBD_LL_Init+0x94>)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	4a1e      	ldr	r2, [pc, #120]	; (8008c1c <USBD_LL_Init+0x94>)
 8008ba4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008ba8:	4b1c      	ldr	r3, [pc, #112]	; (8008c1c <USBD_LL_Init+0x94>)
 8008baa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008bae:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8008bb0:	4b1a      	ldr	r3, [pc, #104]	; (8008c1c <USBD_LL_Init+0x94>)
 8008bb2:	2206      	movs	r2, #6
 8008bb4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008bb6:	4b19      	ldr	r3, [pc, #100]	; (8008c1c <USBD_LL_Init+0x94>)
 8008bb8:	2202      	movs	r2, #2
 8008bba:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008bbc:	4b17      	ldr	r3, [pc, #92]	; (8008c1c <USBD_LL_Init+0x94>)
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008bc2:	4b16      	ldr	r3, [pc, #88]	; (8008c1c <USBD_LL_Init+0x94>)
 8008bc4:	2202      	movs	r2, #2
 8008bc6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008bc8:	4b14      	ldr	r3, [pc, #80]	; (8008c1c <USBD_LL_Init+0x94>)
 8008bca:	2200      	movs	r2, #0
 8008bcc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008bce:	4b13      	ldr	r3, [pc, #76]	; (8008c1c <USBD_LL_Init+0x94>)
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008bd4:	4b11      	ldr	r3, [pc, #68]	; (8008c1c <USBD_LL_Init+0x94>)
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008bda:	4b10      	ldr	r3, [pc, #64]	; (8008c1c <USBD_LL_Init+0x94>)
 8008bdc:	2200      	movs	r2, #0
 8008bde:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008be0:	4b0e      	ldr	r3, [pc, #56]	; (8008c1c <USBD_LL_Init+0x94>)
 8008be2:	2200      	movs	r2, #0
 8008be4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008be6:	480d      	ldr	r0, [pc, #52]	; (8008c1c <USBD_LL_Init+0x94>)
 8008be8:	f7f9 f82b 	bl	8001c42 <HAL_PCD_Init>
 8008bec:	4603      	mov	r3, r0
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d001      	beq.n	8008bf6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008bf2:	f7f8 fa8d 	bl	8001110 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008bf6:	2180      	movs	r1, #128	; 0x80
 8008bf8:	4808      	ldr	r0, [pc, #32]	; (8008c1c <USBD_LL_Init+0x94>)
 8008bfa:	f7fa fab6 	bl	800316a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008bfe:	2240      	movs	r2, #64	; 0x40
 8008c00:	2100      	movs	r1, #0
 8008c02:	4806      	ldr	r0, [pc, #24]	; (8008c1c <USBD_LL_Init+0x94>)
 8008c04:	f7fa fa6a 	bl	80030dc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008c08:	2280      	movs	r2, #128	; 0x80
 8008c0a:	2101      	movs	r1, #1
 8008c0c:	4803      	ldr	r0, [pc, #12]	; (8008c1c <USBD_LL_Init+0x94>)
 8008c0e:	f7fa fa65 	bl	80030dc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008c12:	2300      	movs	r3, #0
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3708      	adds	r7, #8
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}
 8008c1c:	20001838 	.word	0x20001838

08008c20 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b084      	sub	sp, #16
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c28:	2300      	movs	r3, #0
 8008c2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008c36:	4618      	mov	r0, r3
 8008c38:	f7f9 f927 	bl	8001e8a <HAL_PCD_Start>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c40:	7bfb      	ldrb	r3, [r7, #15]
 8008c42:	4618      	mov	r0, r3
 8008c44:	f000 f990 	bl	8008f68 <USBD_Get_USB_Status>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3710      	adds	r7, #16
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}

08008c56 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008c56:	b580      	push	{r7, lr}
 8008c58:	b084      	sub	sp, #16
 8008c5a:	af00      	add	r7, sp, #0
 8008c5c:	6078      	str	r0, [r7, #4]
 8008c5e:	4608      	mov	r0, r1
 8008c60:	4611      	mov	r1, r2
 8008c62:	461a      	mov	r2, r3
 8008c64:	4603      	mov	r3, r0
 8008c66:	70fb      	strb	r3, [r7, #3]
 8008c68:	460b      	mov	r3, r1
 8008c6a:	70bb      	strb	r3, [r7, #2]
 8008c6c:	4613      	mov	r3, r2
 8008c6e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c70:	2300      	movs	r3, #0
 8008c72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c74:	2300      	movs	r3, #0
 8008c76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008c7e:	78bb      	ldrb	r3, [r7, #2]
 8008c80:	883a      	ldrh	r2, [r7, #0]
 8008c82:	78f9      	ldrb	r1, [r7, #3]
 8008c84:	f7f9 fe25 	bl	80028d2 <HAL_PCD_EP_Open>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c8c:	7bfb      	ldrb	r3, [r7, #15]
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f000 f96a 	bl	8008f68 <USBD_Get_USB_Status>
 8008c94:	4603      	mov	r3, r0
 8008c96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c98:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3710      	adds	r7, #16
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}

08008ca2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ca2:	b580      	push	{r7, lr}
 8008ca4:	b084      	sub	sp, #16
 8008ca6:	af00      	add	r7, sp, #0
 8008ca8:	6078      	str	r0, [r7, #4]
 8008caa:	460b      	mov	r3, r1
 8008cac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008cbc:	78fa      	ldrb	r2, [r7, #3]
 8008cbe:	4611      	mov	r1, r2
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f7f9 fe6e 	bl	80029a2 <HAL_PCD_EP_Close>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cca:	7bfb      	ldrb	r3, [r7, #15]
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f000 f94b 	bl	8008f68 <USBD_Get_USB_Status>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cd6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	3710      	adds	r7, #16
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd80      	pop	{r7, pc}

08008ce0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b084      	sub	sp, #16
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
 8008ce8:	460b      	mov	r3, r1
 8008cea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cec:	2300      	movs	r3, #0
 8008cee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008cfa:	78fa      	ldrb	r2, [r7, #3]
 8008cfc:	4611      	mov	r1, r2
 8008cfe:	4618      	mov	r0, r3
 8008d00:	f7f9 ff46 	bl	8002b90 <HAL_PCD_EP_SetStall>
 8008d04:	4603      	mov	r3, r0
 8008d06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d08:	7bfb      	ldrb	r3, [r7, #15]
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f000 f92c 	bl	8008f68 <USBD_Get_USB_Status>
 8008d10:	4603      	mov	r3, r0
 8008d12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d14:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	3710      	adds	r7, #16
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}

08008d1e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d1e:	b580      	push	{r7, lr}
 8008d20:	b084      	sub	sp, #16
 8008d22:	af00      	add	r7, sp, #0
 8008d24:	6078      	str	r0, [r7, #4]
 8008d26:	460b      	mov	r3, r1
 8008d28:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d2e:	2300      	movs	r3, #0
 8008d30:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d38:	78fa      	ldrb	r2, [r7, #3]
 8008d3a:	4611      	mov	r1, r2
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	f7f9 ff8b 	bl	8002c58 <HAL_PCD_EP_ClrStall>
 8008d42:	4603      	mov	r3, r0
 8008d44:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d46:	7bfb      	ldrb	r3, [r7, #15]
 8008d48:	4618      	mov	r0, r3
 8008d4a:	f000 f90d 	bl	8008f68 <USBD_Get_USB_Status>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d52:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	3710      	adds	r7, #16
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}

08008d5c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b085      	sub	sp, #20
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
 8008d64:	460b      	mov	r3, r1
 8008d66:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d6e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008d70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	da0b      	bge.n	8008d90 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008d78:	78fb      	ldrb	r3, [r7, #3]
 8008d7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008d7e:	68f9      	ldr	r1, [r7, #12]
 8008d80:	4613      	mov	r3, r2
 8008d82:	00db      	lsls	r3, r3, #3
 8008d84:	4413      	add	r3, r2
 8008d86:	009b      	lsls	r3, r3, #2
 8008d88:	440b      	add	r3, r1
 8008d8a:	333e      	adds	r3, #62	; 0x3e
 8008d8c:	781b      	ldrb	r3, [r3, #0]
 8008d8e:	e00b      	b.n	8008da8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008d90:	78fb      	ldrb	r3, [r7, #3]
 8008d92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008d96:	68f9      	ldr	r1, [r7, #12]
 8008d98:	4613      	mov	r3, r2
 8008d9a:	00db      	lsls	r3, r3, #3
 8008d9c:	4413      	add	r3, r2
 8008d9e:	009b      	lsls	r3, r3, #2
 8008da0:	440b      	add	r3, r1
 8008da2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008da6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	3714      	adds	r7, #20
 8008dac:	46bd      	mov	sp, r7
 8008dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db2:	4770      	bx	lr

08008db4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b084      	sub	sp, #16
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
 8008dbc:	460b      	mov	r3, r1
 8008dbe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008dce:	78fa      	ldrb	r2, [r7, #3]
 8008dd0:	4611      	mov	r1, r2
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f7f9 fd58 	bl	8002888 <HAL_PCD_SetAddress>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ddc:	7bfb      	ldrb	r3, [r7, #15]
 8008dde:	4618      	mov	r0, r3
 8008de0:	f000 f8c2 	bl	8008f68 <USBD_Get_USB_Status>
 8008de4:	4603      	mov	r3, r0
 8008de6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008de8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008dea:	4618      	mov	r0, r3
 8008dec:	3710      	adds	r7, #16
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}

08008df2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008df2:	b580      	push	{r7, lr}
 8008df4:	b086      	sub	sp, #24
 8008df6:	af00      	add	r7, sp, #0
 8008df8:	60f8      	str	r0, [r7, #12]
 8008dfa:	607a      	str	r2, [r7, #4]
 8008dfc:	603b      	str	r3, [r7, #0]
 8008dfe:	460b      	mov	r3, r1
 8008e00:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e02:	2300      	movs	r3, #0
 8008e04:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e06:	2300      	movs	r3, #0
 8008e08:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008e10:	7af9      	ldrb	r1, [r7, #11]
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	687a      	ldr	r2, [r7, #4]
 8008e16:	f7f9 fe71 	bl	8002afc <HAL_PCD_EP_Transmit>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e1e:	7dfb      	ldrb	r3, [r7, #23]
 8008e20:	4618      	mov	r0, r3
 8008e22:	f000 f8a1 	bl	8008f68 <USBD_Get_USB_Status>
 8008e26:	4603      	mov	r3, r0
 8008e28:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008e2a:	7dbb      	ldrb	r3, [r7, #22]
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3718      	adds	r7, #24
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}

08008e34 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b086      	sub	sp, #24
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	60f8      	str	r0, [r7, #12]
 8008e3c:	607a      	str	r2, [r7, #4]
 8008e3e:	603b      	str	r3, [r7, #0]
 8008e40:	460b      	mov	r3, r1
 8008e42:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e44:	2300      	movs	r3, #0
 8008e46:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008e52:	7af9      	ldrb	r1, [r7, #11]
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	687a      	ldr	r2, [r7, #4]
 8008e58:	f7f9 fded 	bl	8002a36 <HAL_PCD_EP_Receive>
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e60:	7dfb      	ldrb	r3, [r7, #23]
 8008e62:	4618      	mov	r0, r3
 8008e64:	f000 f880 	bl	8008f68 <USBD_Get_USB_Status>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008e6c:	7dbb      	ldrb	r3, [r7, #22]
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3718      	adds	r7, #24
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}

08008e76 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e76:	b580      	push	{r7, lr}
 8008e78:	b082      	sub	sp, #8
 8008e7a:	af00      	add	r7, sp, #0
 8008e7c:	6078      	str	r0, [r7, #4]
 8008e7e:	460b      	mov	r3, r1
 8008e80:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008e88:	78fa      	ldrb	r2, [r7, #3]
 8008e8a:	4611      	mov	r1, r2
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	f7f9 fe1d 	bl	8002acc <HAL_PCD_EP_GetRxCount>
 8008e92:	4603      	mov	r3, r0
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	3708      	adds	r7, #8
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}

08008e9c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b082      	sub	sp, #8
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	460b      	mov	r3, r1
 8008ea6:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8008ea8:	78fb      	ldrb	r3, [r7, #3]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d002      	beq.n	8008eb4 <HAL_PCDEx_LPM_Callback+0x18>
 8008eae:	2b01      	cmp	r3, #1
 8008eb0:	d01f      	beq.n	8008ef2 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8008eb2:	e03b      	b.n	8008f2c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6a1b      	ldr	r3, [r3, #32]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d007      	beq.n	8008ecc <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8008ebc:	f7f8 f8bc 	bl	8001038 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008ec0:	4b1c      	ldr	r3, [pc, #112]	; (8008f34 <HAL_PCDEx_LPM_Callback+0x98>)
 8008ec2:	691b      	ldr	r3, [r3, #16]
 8008ec4:	4a1b      	ldr	r2, [pc, #108]	; (8008f34 <HAL_PCDEx_LPM_Callback+0x98>)
 8008ec6:	f023 0306 	bic.w	r3, r3, #6
 8008eca:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	687a      	ldr	r2, [r7, #4]
 8008ed8:	6812      	ldr	r2, [r2, #0]
 8008eda:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008ede:	f023 0301 	bic.w	r3, r3, #1
 8008ee2:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008eea:	4618      	mov	r0, r3
 8008eec:	f7fe fa8f 	bl	800740e <USBD_LL_Resume>
    break;
 8008ef0:	e01c      	b.n	8008f2c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	687a      	ldr	r2, [r7, #4]
 8008efe:	6812      	ldr	r2, [r2, #0]
 8008f00:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008f04:	f043 0301 	orr.w	r3, r3, #1
 8008f08:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008f10:	4618      	mov	r0, r3
 8008f12:	f7fe fa66 	bl	80073e2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6a1b      	ldr	r3, [r3, #32]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d005      	beq.n	8008f2a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008f1e:	4b05      	ldr	r3, [pc, #20]	; (8008f34 <HAL_PCDEx_LPM_Callback+0x98>)
 8008f20:	691b      	ldr	r3, [r3, #16]
 8008f22:	4a04      	ldr	r2, [pc, #16]	; (8008f34 <HAL_PCDEx_LPM_Callback+0x98>)
 8008f24:	f043 0306 	orr.w	r3, r3, #6
 8008f28:	6113      	str	r3, [r2, #16]
    break;
 8008f2a:	bf00      	nop
}
 8008f2c:	bf00      	nop
 8008f2e:	3708      	adds	r7, #8
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}
 8008f34:	e000ed00 	.word	0xe000ed00

08008f38 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b083      	sub	sp, #12
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008f40:	4b03      	ldr	r3, [pc, #12]	; (8008f50 <USBD_static_malloc+0x18>)
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	370c      	adds	r7, #12
 8008f46:	46bd      	mov	sp, r7
 8008f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4c:	4770      	bx	lr
 8008f4e:	bf00      	nop
 8008f50:	20001d44 	.word	0x20001d44

08008f54 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008f54:	b480      	push	{r7}
 8008f56:	b083      	sub	sp, #12
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]

}
 8008f5c:	bf00      	nop
 8008f5e:	370c      	adds	r7, #12
 8008f60:	46bd      	mov	sp, r7
 8008f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f66:	4770      	bx	lr

08008f68 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b085      	sub	sp, #20
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	4603      	mov	r3, r0
 8008f70:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f72:	2300      	movs	r3, #0
 8008f74:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008f76:	79fb      	ldrb	r3, [r7, #7]
 8008f78:	2b03      	cmp	r3, #3
 8008f7a:	d817      	bhi.n	8008fac <USBD_Get_USB_Status+0x44>
 8008f7c:	a201      	add	r2, pc, #4	; (adr r2, 8008f84 <USBD_Get_USB_Status+0x1c>)
 8008f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f82:	bf00      	nop
 8008f84:	08008f95 	.word	0x08008f95
 8008f88:	08008f9b 	.word	0x08008f9b
 8008f8c:	08008fa1 	.word	0x08008fa1
 8008f90:	08008fa7 	.word	0x08008fa7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008f94:	2300      	movs	r3, #0
 8008f96:	73fb      	strb	r3, [r7, #15]
    break;
 8008f98:	e00b      	b.n	8008fb2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008f9a:	2303      	movs	r3, #3
 8008f9c:	73fb      	strb	r3, [r7, #15]
    break;
 8008f9e:	e008      	b.n	8008fb2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008fa0:	2301      	movs	r3, #1
 8008fa2:	73fb      	strb	r3, [r7, #15]
    break;
 8008fa4:	e005      	b.n	8008fb2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008fa6:	2303      	movs	r3, #3
 8008fa8:	73fb      	strb	r3, [r7, #15]
    break;
 8008faa:	e002      	b.n	8008fb2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008fac:	2303      	movs	r3, #3
 8008fae:	73fb      	strb	r3, [r7, #15]
    break;
 8008fb0:	bf00      	nop
  }
  return usb_status;
 8008fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	3714      	adds	r7, #20
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbe:	4770      	bx	lr

08008fc0 <atof>:
 8008fc0:	2100      	movs	r1, #0
 8008fc2:	f000 be57 	b.w	8009c74 <strtod>
	...

08008fc8 <__errno>:
 8008fc8:	4b01      	ldr	r3, [pc, #4]	; (8008fd0 <__errno+0x8>)
 8008fca:	6818      	ldr	r0, [r3, #0]
 8008fcc:	4770      	bx	lr
 8008fce:	bf00      	nop
 8008fd0:	20000110 	.word	0x20000110

08008fd4 <__libc_init_array>:
 8008fd4:	b570      	push	{r4, r5, r6, lr}
 8008fd6:	4d0d      	ldr	r5, [pc, #52]	; (800900c <__libc_init_array+0x38>)
 8008fd8:	4c0d      	ldr	r4, [pc, #52]	; (8009010 <__libc_init_array+0x3c>)
 8008fda:	1b64      	subs	r4, r4, r5
 8008fdc:	10a4      	asrs	r4, r4, #2
 8008fde:	2600      	movs	r6, #0
 8008fe0:	42a6      	cmp	r6, r4
 8008fe2:	d109      	bne.n	8008ff8 <__libc_init_array+0x24>
 8008fe4:	4d0b      	ldr	r5, [pc, #44]	; (8009014 <__libc_init_array+0x40>)
 8008fe6:	4c0c      	ldr	r4, [pc, #48]	; (8009018 <__libc_init_array+0x44>)
 8008fe8:	f002 fede 	bl	800bda8 <_init>
 8008fec:	1b64      	subs	r4, r4, r5
 8008fee:	10a4      	asrs	r4, r4, #2
 8008ff0:	2600      	movs	r6, #0
 8008ff2:	42a6      	cmp	r6, r4
 8008ff4:	d105      	bne.n	8009002 <__libc_init_array+0x2e>
 8008ff6:	bd70      	pop	{r4, r5, r6, pc}
 8008ff8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ffc:	4798      	blx	r3
 8008ffe:	3601      	adds	r6, #1
 8009000:	e7ee      	b.n	8008fe0 <__libc_init_array+0xc>
 8009002:	f855 3b04 	ldr.w	r3, [r5], #4
 8009006:	4798      	blx	r3
 8009008:	3601      	adds	r6, #1
 800900a:	e7f2      	b.n	8008ff2 <__libc_init_array+0x1e>
 800900c:	0800c254 	.word	0x0800c254
 8009010:	0800c254 	.word	0x0800c254
 8009014:	0800c254 	.word	0x0800c254
 8009018:	0800c258 	.word	0x0800c258

0800901c <memset>:
 800901c:	4402      	add	r2, r0
 800901e:	4603      	mov	r3, r0
 8009020:	4293      	cmp	r3, r2
 8009022:	d100      	bne.n	8009026 <memset+0xa>
 8009024:	4770      	bx	lr
 8009026:	f803 1b01 	strb.w	r1, [r3], #1
 800902a:	e7f9      	b.n	8009020 <memset+0x4>

0800902c <sulp>:
 800902c:	b570      	push	{r4, r5, r6, lr}
 800902e:	4604      	mov	r4, r0
 8009030:	460d      	mov	r5, r1
 8009032:	ec45 4b10 	vmov	d0, r4, r5
 8009036:	4616      	mov	r6, r2
 8009038:	f001 fd2a 	bl	800aa90 <__ulp>
 800903c:	ec51 0b10 	vmov	r0, r1, d0
 8009040:	b17e      	cbz	r6, 8009062 <sulp+0x36>
 8009042:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009046:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800904a:	2b00      	cmp	r3, #0
 800904c:	dd09      	ble.n	8009062 <sulp+0x36>
 800904e:	051b      	lsls	r3, r3, #20
 8009050:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009054:	2400      	movs	r4, #0
 8009056:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800905a:	4622      	mov	r2, r4
 800905c:	462b      	mov	r3, r5
 800905e:	f7f7 faeb 	bl	8000638 <__aeabi_dmul>
 8009062:	bd70      	pop	{r4, r5, r6, pc}
 8009064:	0000      	movs	r0, r0
	...

08009068 <_strtod_l>:
 8009068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800906c:	ed2d 8b02 	vpush	{d8}
 8009070:	b09d      	sub	sp, #116	; 0x74
 8009072:	461f      	mov	r7, r3
 8009074:	2300      	movs	r3, #0
 8009076:	9318      	str	r3, [sp, #96]	; 0x60
 8009078:	4ba2      	ldr	r3, [pc, #648]	; (8009304 <_strtod_l+0x29c>)
 800907a:	9213      	str	r2, [sp, #76]	; 0x4c
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	9305      	str	r3, [sp, #20]
 8009080:	4604      	mov	r4, r0
 8009082:	4618      	mov	r0, r3
 8009084:	4688      	mov	r8, r1
 8009086:	f7f7 f8c3 	bl	8000210 <strlen>
 800908a:	f04f 0a00 	mov.w	sl, #0
 800908e:	4605      	mov	r5, r0
 8009090:	f04f 0b00 	mov.w	fp, #0
 8009094:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009098:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800909a:	781a      	ldrb	r2, [r3, #0]
 800909c:	2a2b      	cmp	r2, #43	; 0x2b
 800909e:	d04e      	beq.n	800913e <_strtod_l+0xd6>
 80090a0:	d83b      	bhi.n	800911a <_strtod_l+0xb2>
 80090a2:	2a0d      	cmp	r2, #13
 80090a4:	d834      	bhi.n	8009110 <_strtod_l+0xa8>
 80090a6:	2a08      	cmp	r2, #8
 80090a8:	d834      	bhi.n	8009114 <_strtod_l+0xac>
 80090aa:	2a00      	cmp	r2, #0
 80090ac:	d03e      	beq.n	800912c <_strtod_l+0xc4>
 80090ae:	2300      	movs	r3, #0
 80090b0:	930a      	str	r3, [sp, #40]	; 0x28
 80090b2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80090b4:	7833      	ldrb	r3, [r6, #0]
 80090b6:	2b30      	cmp	r3, #48	; 0x30
 80090b8:	f040 80b0 	bne.w	800921c <_strtod_l+0x1b4>
 80090bc:	7873      	ldrb	r3, [r6, #1]
 80090be:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80090c2:	2b58      	cmp	r3, #88	; 0x58
 80090c4:	d168      	bne.n	8009198 <_strtod_l+0x130>
 80090c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090c8:	9301      	str	r3, [sp, #4]
 80090ca:	ab18      	add	r3, sp, #96	; 0x60
 80090cc:	9702      	str	r7, [sp, #8]
 80090ce:	9300      	str	r3, [sp, #0]
 80090d0:	4a8d      	ldr	r2, [pc, #564]	; (8009308 <_strtod_l+0x2a0>)
 80090d2:	ab19      	add	r3, sp, #100	; 0x64
 80090d4:	a917      	add	r1, sp, #92	; 0x5c
 80090d6:	4620      	mov	r0, r4
 80090d8:	f000 fe40 	bl	8009d5c <__gethex>
 80090dc:	f010 0707 	ands.w	r7, r0, #7
 80090e0:	4605      	mov	r5, r0
 80090e2:	d005      	beq.n	80090f0 <_strtod_l+0x88>
 80090e4:	2f06      	cmp	r7, #6
 80090e6:	d12c      	bne.n	8009142 <_strtod_l+0xda>
 80090e8:	3601      	adds	r6, #1
 80090ea:	2300      	movs	r3, #0
 80090ec:	9617      	str	r6, [sp, #92]	; 0x5c
 80090ee:	930a      	str	r3, [sp, #40]	; 0x28
 80090f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	f040 8590 	bne.w	8009c18 <_strtod_l+0xbb0>
 80090f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090fa:	b1eb      	cbz	r3, 8009138 <_strtod_l+0xd0>
 80090fc:	4652      	mov	r2, sl
 80090fe:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009102:	ec43 2b10 	vmov	d0, r2, r3
 8009106:	b01d      	add	sp, #116	; 0x74
 8009108:	ecbd 8b02 	vpop	{d8}
 800910c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009110:	2a20      	cmp	r2, #32
 8009112:	d1cc      	bne.n	80090ae <_strtod_l+0x46>
 8009114:	3301      	adds	r3, #1
 8009116:	9317      	str	r3, [sp, #92]	; 0x5c
 8009118:	e7be      	b.n	8009098 <_strtod_l+0x30>
 800911a:	2a2d      	cmp	r2, #45	; 0x2d
 800911c:	d1c7      	bne.n	80090ae <_strtod_l+0x46>
 800911e:	2201      	movs	r2, #1
 8009120:	920a      	str	r2, [sp, #40]	; 0x28
 8009122:	1c5a      	adds	r2, r3, #1
 8009124:	9217      	str	r2, [sp, #92]	; 0x5c
 8009126:	785b      	ldrb	r3, [r3, #1]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d1c2      	bne.n	80090b2 <_strtod_l+0x4a>
 800912c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800912e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009132:	2b00      	cmp	r3, #0
 8009134:	f040 856e 	bne.w	8009c14 <_strtod_l+0xbac>
 8009138:	4652      	mov	r2, sl
 800913a:	465b      	mov	r3, fp
 800913c:	e7e1      	b.n	8009102 <_strtod_l+0x9a>
 800913e:	2200      	movs	r2, #0
 8009140:	e7ee      	b.n	8009120 <_strtod_l+0xb8>
 8009142:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009144:	b13a      	cbz	r2, 8009156 <_strtod_l+0xee>
 8009146:	2135      	movs	r1, #53	; 0x35
 8009148:	a81a      	add	r0, sp, #104	; 0x68
 800914a:	f001 fdac 	bl	800aca6 <__copybits>
 800914e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009150:	4620      	mov	r0, r4
 8009152:	f001 f96b 	bl	800a42c <_Bfree>
 8009156:	3f01      	subs	r7, #1
 8009158:	2f04      	cmp	r7, #4
 800915a:	d806      	bhi.n	800916a <_strtod_l+0x102>
 800915c:	e8df f007 	tbb	[pc, r7]
 8009160:	1714030a 	.word	0x1714030a
 8009164:	0a          	.byte	0x0a
 8009165:	00          	.byte	0x00
 8009166:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800916a:	0728      	lsls	r0, r5, #28
 800916c:	d5c0      	bpl.n	80090f0 <_strtod_l+0x88>
 800916e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8009172:	e7bd      	b.n	80090f0 <_strtod_l+0x88>
 8009174:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8009178:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800917a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800917e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009182:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009186:	e7f0      	b.n	800916a <_strtod_l+0x102>
 8009188:	f8df b180 	ldr.w	fp, [pc, #384]	; 800930c <_strtod_l+0x2a4>
 800918c:	e7ed      	b.n	800916a <_strtod_l+0x102>
 800918e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8009192:	f04f 3aff 	mov.w	sl, #4294967295
 8009196:	e7e8      	b.n	800916a <_strtod_l+0x102>
 8009198:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800919a:	1c5a      	adds	r2, r3, #1
 800919c:	9217      	str	r2, [sp, #92]	; 0x5c
 800919e:	785b      	ldrb	r3, [r3, #1]
 80091a0:	2b30      	cmp	r3, #48	; 0x30
 80091a2:	d0f9      	beq.n	8009198 <_strtod_l+0x130>
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d0a3      	beq.n	80090f0 <_strtod_l+0x88>
 80091a8:	2301      	movs	r3, #1
 80091aa:	f04f 0900 	mov.w	r9, #0
 80091ae:	9304      	str	r3, [sp, #16]
 80091b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80091b2:	9308      	str	r3, [sp, #32]
 80091b4:	f8cd 901c 	str.w	r9, [sp, #28]
 80091b8:	464f      	mov	r7, r9
 80091ba:	220a      	movs	r2, #10
 80091bc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80091be:	7806      	ldrb	r6, [r0, #0]
 80091c0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80091c4:	b2d9      	uxtb	r1, r3
 80091c6:	2909      	cmp	r1, #9
 80091c8:	d92a      	bls.n	8009220 <_strtod_l+0x1b8>
 80091ca:	9905      	ldr	r1, [sp, #20]
 80091cc:	462a      	mov	r2, r5
 80091ce:	f001 fe73 	bl	800aeb8 <strncmp>
 80091d2:	b398      	cbz	r0, 800923c <_strtod_l+0x1d4>
 80091d4:	2000      	movs	r0, #0
 80091d6:	4632      	mov	r2, r6
 80091d8:	463d      	mov	r5, r7
 80091da:	9005      	str	r0, [sp, #20]
 80091dc:	4603      	mov	r3, r0
 80091de:	2a65      	cmp	r2, #101	; 0x65
 80091e0:	d001      	beq.n	80091e6 <_strtod_l+0x17e>
 80091e2:	2a45      	cmp	r2, #69	; 0x45
 80091e4:	d118      	bne.n	8009218 <_strtod_l+0x1b0>
 80091e6:	b91d      	cbnz	r5, 80091f0 <_strtod_l+0x188>
 80091e8:	9a04      	ldr	r2, [sp, #16]
 80091ea:	4302      	orrs	r2, r0
 80091ec:	d09e      	beq.n	800912c <_strtod_l+0xc4>
 80091ee:	2500      	movs	r5, #0
 80091f0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80091f4:	f108 0201 	add.w	r2, r8, #1
 80091f8:	9217      	str	r2, [sp, #92]	; 0x5c
 80091fa:	f898 2001 	ldrb.w	r2, [r8, #1]
 80091fe:	2a2b      	cmp	r2, #43	; 0x2b
 8009200:	d075      	beq.n	80092ee <_strtod_l+0x286>
 8009202:	2a2d      	cmp	r2, #45	; 0x2d
 8009204:	d07b      	beq.n	80092fe <_strtod_l+0x296>
 8009206:	f04f 0c00 	mov.w	ip, #0
 800920a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800920e:	2909      	cmp	r1, #9
 8009210:	f240 8082 	bls.w	8009318 <_strtod_l+0x2b0>
 8009214:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009218:	2600      	movs	r6, #0
 800921a:	e09d      	b.n	8009358 <_strtod_l+0x2f0>
 800921c:	2300      	movs	r3, #0
 800921e:	e7c4      	b.n	80091aa <_strtod_l+0x142>
 8009220:	2f08      	cmp	r7, #8
 8009222:	bfd8      	it	le
 8009224:	9907      	ldrle	r1, [sp, #28]
 8009226:	f100 0001 	add.w	r0, r0, #1
 800922a:	bfda      	itte	le
 800922c:	fb02 3301 	mlale	r3, r2, r1, r3
 8009230:	9307      	strle	r3, [sp, #28]
 8009232:	fb02 3909 	mlagt	r9, r2, r9, r3
 8009236:	3701      	adds	r7, #1
 8009238:	9017      	str	r0, [sp, #92]	; 0x5c
 800923a:	e7bf      	b.n	80091bc <_strtod_l+0x154>
 800923c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800923e:	195a      	adds	r2, r3, r5
 8009240:	9217      	str	r2, [sp, #92]	; 0x5c
 8009242:	5d5a      	ldrb	r2, [r3, r5]
 8009244:	2f00      	cmp	r7, #0
 8009246:	d037      	beq.n	80092b8 <_strtod_l+0x250>
 8009248:	9005      	str	r0, [sp, #20]
 800924a:	463d      	mov	r5, r7
 800924c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009250:	2b09      	cmp	r3, #9
 8009252:	d912      	bls.n	800927a <_strtod_l+0x212>
 8009254:	2301      	movs	r3, #1
 8009256:	e7c2      	b.n	80091de <_strtod_l+0x176>
 8009258:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800925a:	1c5a      	adds	r2, r3, #1
 800925c:	9217      	str	r2, [sp, #92]	; 0x5c
 800925e:	785a      	ldrb	r2, [r3, #1]
 8009260:	3001      	adds	r0, #1
 8009262:	2a30      	cmp	r2, #48	; 0x30
 8009264:	d0f8      	beq.n	8009258 <_strtod_l+0x1f0>
 8009266:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800926a:	2b08      	cmp	r3, #8
 800926c:	f200 84d9 	bhi.w	8009c22 <_strtod_l+0xbba>
 8009270:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009272:	9005      	str	r0, [sp, #20]
 8009274:	2000      	movs	r0, #0
 8009276:	9308      	str	r3, [sp, #32]
 8009278:	4605      	mov	r5, r0
 800927a:	3a30      	subs	r2, #48	; 0x30
 800927c:	f100 0301 	add.w	r3, r0, #1
 8009280:	d014      	beq.n	80092ac <_strtod_l+0x244>
 8009282:	9905      	ldr	r1, [sp, #20]
 8009284:	4419      	add	r1, r3
 8009286:	9105      	str	r1, [sp, #20]
 8009288:	462b      	mov	r3, r5
 800928a:	eb00 0e05 	add.w	lr, r0, r5
 800928e:	210a      	movs	r1, #10
 8009290:	4573      	cmp	r3, lr
 8009292:	d113      	bne.n	80092bc <_strtod_l+0x254>
 8009294:	182b      	adds	r3, r5, r0
 8009296:	2b08      	cmp	r3, #8
 8009298:	f105 0501 	add.w	r5, r5, #1
 800929c:	4405      	add	r5, r0
 800929e:	dc1c      	bgt.n	80092da <_strtod_l+0x272>
 80092a0:	9907      	ldr	r1, [sp, #28]
 80092a2:	230a      	movs	r3, #10
 80092a4:	fb03 2301 	mla	r3, r3, r1, r2
 80092a8:	9307      	str	r3, [sp, #28]
 80092aa:	2300      	movs	r3, #0
 80092ac:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80092ae:	1c51      	adds	r1, r2, #1
 80092b0:	9117      	str	r1, [sp, #92]	; 0x5c
 80092b2:	7852      	ldrb	r2, [r2, #1]
 80092b4:	4618      	mov	r0, r3
 80092b6:	e7c9      	b.n	800924c <_strtod_l+0x1e4>
 80092b8:	4638      	mov	r0, r7
 80092ba:	e7d2      	b.n	8009262 <_strtod_l+0x1fa>
 80092bc:	2b08      	cmp	r3, #8
 80092be:	dc04      	bgt.n	80092ca <_strtod_l+0x262>
 80092c0:	9e07      	ldr	r6, [sp, #28]
 80092c2:	434e      	muls	r6, r1
 80092c4:	9607      	str	r6, [sp, #28]
 80092c6:	3301      	adds	r3, #1
 80092c8:	e7e2      	b.n	8009290 <_strtod_l+0x228>
 80092ca:	f103 0c01 	add.w	ip, r3, #1
 80092ce:	f1bc 0f10 	cmp.w	ip, #16
 80092d2:	bfd8      	it	le
 80092d4:	fb01 f909 	mulle.w	r9, r1, r9
 80092d8:	e7f5      	b.n	80092c6 <_strtod_l+0x25e>
 80092da:	2d10      	cmp	r5, #16
 80092dc:	bfdc      	itt	le
 80092de:	230a      	movle	r3, #10
 80092e0:	fb03 2909 	mlale	r9, r3, r9, r2
 80092e4:	e7e1      	b.n	80092aa <_strtod_l+0x242>
 80092e6:	2300      	movs	r3, #0
 80092e8:	9305      	str	r3, [sp, #20]
 80092ea:	2301      	movs	r3, #1
 80092ec:	e77c      	b.n	80091e8 <_strtod_l+0x180>
 80092ee:	f04f 0c00 	mov.w	ip, #0
 80092f2:	f108 0202 	add.w	r2, r8, #2
 80092f6:	9217      	str	r2, [sp, #92]	; 0x5c
 80092f8:	f898 2002 	ldrb.w	r2, [r8, #2]
 80092fc:	e785      	b.n	800920a <_strtod_l+0x1a2>
 80092fe:	f04f 0c01 	mov.w	ip, #1
 8009302:	e7f6      	b.n	80092f2 <_strtod_l+0x28a>
 8009304:	0800bef8 	.word	0x0800bef8
 8009308:	0800be2c 	.word	0x0800be2c
 800930c:	7ff00000 	.word	0x7ff00000
 8009310:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009312:	1c51      	adds	r1, r2, #1
 8009314:	9117      	str	r1, [sp, #92]	; 0x5c
 8009316:	7852      	ldrb	r2, [r2, #1]
 8009318:	2a30      	cmp	r2, #48	; 0x30
 800931a:	d0f9      	beq.n	8009310 <_strtod_l+0x2a8>
 800931c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009320:	2908      	cmp	r1, #8
 8009322:	f63f af79 	bhi.w	8009218 <_strtod_l+0x1b0>
 8009326:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800932a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800932c:	9206      	str	r2, [sp, #24]
 800932e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009330:	1c51      	adds	r1, r2, #1
 8009332:	9117      	str	r1, [sp, #92]	; 0x5c
 8009334:	7852      	ldrb	r2, [r2, #1]
 8009336:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800933a:	2e09      	cmp	r6, #9
 800933c:	d937      	bls.n	80093ae <_strtod_l+0x346>
 800933e:	9e06      	ldr	r6, [sp, #24]
 8009340:	1b89      	subs	r1, r1, r6
 8009342:	2908      	cmp	r1, #8
 8009344:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009348:	dc02      	bgt.n	8009350 <_strtod_l+0x2e8>
 800934a:	4576      	cmp	r6, lr
 800934c:	bfa8      	it	ge
 800934e:	4676      	movge	r6, lr
 8009350:	f1bc 0f00 	cmp.w	ip, #0
 8009354:	d000      	beq.n	8009358 <_strtod_l+0x2f0>
 8009356:	4276      	negs	r6, r6
 8009358:	2d00      	cmp	r5, #0
 800935a:	d14d      	bne.n	80093f8 <_strtod_l+0x390>
 800935c:	9904      	ldr	r1, [sp, #16]
 800935e:	4301      	orrs	r1, r0
 8009360:	f47f aec6 	bne.w	80090f0 <_strtod_l+0x88>
 8009364:	2b00      	cmp	r3, #0
 8009366:	f47f aee1 	bne.w	800912c <_strtod_l+0xc4>
 800936a:	2a69      	cmp	r2, #105	; 0x69
 800936c:	d027      	beq.n	80093be <_strtod_l+0x356>
 800936e:	dc24      	bgt.n	80093ba <_strtod_l+0x352>
 8009370:	2a49      	cmp	r2, #73	; 0x49
 8009372:	d024      	beq.n	80093be <_strtod_l+0x356>
 8009374:	2a4e      	cmp	r2, #78	; 0x4e
 8009376:	f47f aed9 	bne.w	800912c <_strtod_l+0xc4>
 800937a:	499f      	ldr	r1, [pc, #636]	; (80095f8 <_strtod_l+0x590>)
 800937c:	a817      	add	r0, sp, #92	; 0x5c
 800937e:	f000 ff45 	bl	800a20c <__match>
 8009382:	2800      	cmp	r0, #0
 8009384:	f43f aed2 	beq.w	800912c <_strtod_l+0xc4>
 8009388:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800938a:	781b      	ldrb	r3, [r3, #0]
 800938c:	2b28      	cmp	r3, #40	; 0x28
 800938e:	d12d      	bne.n	80093ec <_strtod_l+0x384>
 8009390:	499a      	ldr	r1, [pc, #616]	; (80095fc <_strtod_l+0x594>)
 8009392:	aa1a      	add	r2, sp, #104	; 0x68
 8009394:	a817      	add	r0, sp, #92	; 0x5c
 8009396:	f000 ff4d 	bl	800a234 <__hexnan>
 800939a:	2805      	cmp	r0, #5
 800939c:	d126      	bne.n	80093ec <_strtod_l+0x384>
 800939e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80093a0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80093a4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80093a8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80093ac:	e6a0      	b.n	80090f0 <_strtod_l+0x88>
 80093ae:	210a      	movs	r1, #10
 80093b0:	fb01 2e0e 	mla	lr, r1, lr, r2
 80093b4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80093b8:	e7b9      	b.n	800932e <_strtod_l+0x2c6>
 80093ba:	2a6e      	cmp	r2, #110	; 0x6e
 80093bc:	e7db      	b.n	8009376 <_strtod_l+0x30e>
 80093be:	4990      	ldr	r1, [pc, #576]	; (8009600 <_strtod_l+0x598>)
 80093c0:	a817      	add	r0, sp, #92	; 0x5c
 80093c2:	f000 ff23 	bl	800a20c <__match>
 80093c6:	2800      	cmp	r0, #0
 80093c8:	f43f aeb0 	beq.w	800912c <_strtod_l+0xc4>
 80093cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80093ce:	498d      	ldr	r1, [pc, #564]	; (8009604 <_strtod_l+0x59c>)
 80093d0:	3b01      	subs	r3, #1
 80093d2:	a817      	add	r0, sp, #92	; 0x5c
 80093d4:	9317      	str	r3, [sp, #92]	; 0x5c
 80093d6:	f000 ff19 	bl	800a20c <__match>
 80093da:	b910      	cbnz	r0, 80093e2 <_strtod_l+0x37a>
 80093dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80093de:	3301      	adds	r3, #1
 80093e0:	9317      	str	r3, [sp, #92]	; 0x5c
 80093e2:	f8df b230 	ldr.w	fp, [pc, #560]	; 8009614 <_strtod_l+0x5ac>
 80093e6:	f04f 0a00 	mov.w	sl, #0
 80093ea:	e681      	b.n	80090f0 <_strtod_l+0x88>
 80093ec:	4886      	ldr	r0, [pc, #536]	; (8009608 <_strtod_l+0x5a0>)
 80093ee:	f001 fd4b 	bl	800ae88 <nan>
 80093f2:	ec5b ab10 	vmov	sl, fp, d0
 80093f6:	e67b      	b.n	80090f0 <_strtod_l+0x88>
 80093f8:	9b05      	ldr	r3, [sp, #20]
 80093fa:	9807      	ldr	r0, [sp, #28]
 80093fc:	1af3      	subs	r3, r6, r3
 80093fe:	2f00      	cmp	r7, #0
 8009400:	bf08      	it	eq
 8009402:	462f      	moveq	r7, r5
 8009404:	2d10      	cmp	r5, #16
 8009406:	9306      	str	r3, [sp, #24]
 8009408:	46a8      	mov	r8, r5
 800940a:	bfa8      	it	ge
 800940c:	f04f 0810 	movge.w	r8, #16
 8009410:	f7f7 f898 	bl	8000544 <__aeabi_ui2d>
 8009414:	2d09      	cmp	r5, #9
 8009416:	4682      	mov	sl, r0
 8009418:	468b      	mov	fp, r1
 800941a:	dd13      	ble.n	8009444 <_strtod_l+0x3dc>
 800941c:	4b7b      	ldr	r3, [pc, #492]	; (800960c <_strtod_l+0x5a4>)
 800941e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009422:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009426:	f7f7 f907 	bl	8000638 <__aeabi_dmul>
 800942a:	4682      	mov	sl, r0
 800942c:	4648      	mov	r0, r9
 800942e:	468b      	mov	fp, r1
 8009430:	f7f7 f888 	bl	8000544 <__aeabi_ui2d>
 8009434:	4602      	mov	r2, r0
 8009436:	460b      	mov	r3, r1
 8009438:	4650      	mov	r0, sl
 800943a:	4659      	mov	r1, fp
 800943c:	f7f6 ff46 	bl	80002cc <__adddf3>
 8009440:	4682      	mov	sl, r0
 8009442:	468b      	mov	fp, r1
 8009444:	2d0f      	cmp	r5, #15
 8009446:	dc38      	bgt.n	80094ba <_strtod_l+0x452>
 8009448:	9b06      	ldr	r3, [sp, #24]
 800944a:	2b00      	cmp	r3, #0
 800944c:	f43f ae50 	beq.w	80090f0 <_strtod_l+0x88>
 8009450:	dd24      	ble.n	800949c <_strtod_l+0x434>
 8009452:	2b16      	cmp	r3, #22
 8009454:	dc0b      	bgt.n	800946e <_strtod_l+0x406>
 8009456:	496d      	ldr	r1, [pc, #436]	; (800960c <_strtod_l+0x5a4>)
 8009458:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800945c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009460:	4652      	mov	r2, sl
 8009462:	465b      	mov	r3, fp
 8009464:	f7f7 f8e8 	bl	8000638 <__aeabi_dmul>
 8009468:	4682      	mov	sl, r0
 800946a:	468b      	mov	fp, r1
 800946c:	e640      	b.n	80090f0 <_strtod_l+0x88>
 800946e:	9a06      	ldr	r2, [sp, #24]
 8009470:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8009474:	4293      	cmp	r3, r2
 8009476:	db20      	blt.n	80094ba <_strtod_l+0x452>
 8009478:	4c64      	ldr	r4, [pc, #400]	; (800960c <_strtod_l+0x5a4>)
 800947a:	f1c5 050f 	rsb	r5, r5, #15
 800947e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009482:	4652      	mov	r2, sl
 8009484:	465b      	mov	r3, fp
 8009486:	e9d1 0100 	ldrd	r0, r1, [r1]
 800948a:	f7f7 f8d5 	bl	8000638 <__aeabi_dmul>
 800948e:	9b06      	ldr	r3, [sp, #24]
 8009490:	1b5d      	subs	r5, r3, r5
 8009492:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009496:	e9d4 2300 	ldrd	r2, r3, [r4]
 800949a:	e7e3      	b.n	8009464 <_strtod_l+0x3fc>
 800949c:	9b06      	ldr	r3, [sp, #24]
 800949e:	3316      	adds	r3, #22
 80094a0:	db0b      	blt.n	80094ba <_strtod_l+0x452>
 80094a2:	9b05      	ldr	r3, [sp, #20]
 80094a4:	1b9e      	subs	r6, r3, r6
 80094a6:	4b59      	ldr	r3, [pc, #356]	; (800960c <_strtod_l+0x5a4>)
 80094a8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80094ac:	e9d6 2300 	ldrd	r2, r3, [r6]
 80094b0:	4650      	mov	r0, sl
 80094b2:	4659      	mov	r1, fp
 80094b4:	f7f7 f9ea 	bl	800088c <__aeabi_ddiv>
 80094b8:	e7d6      	b.n	8009468 <_strtod_l+0x400>
 80094ba:	9b06      	ldr	r3, [sp, #24]
 80094bc:	eba5 0808 	sub.w	r8, r5, r8
 80094c0:	4498      	add	r8, r3
 80094c2:	f1b8 0f00 	cmp.w	r8, #0
 80094c6:	dd74      	ble.n	80095b2 <_strtod_l+0x54a>
 80094c8:	f018 030f 	ands.w	r3, r8, #15
 80094cc:	d00a      	beq.n	80094e4 <_strtod_l+0x47c>
 80094ce:	494f      	ldr	r1, [pc, #316]	; (800960c <_strtod_l+0x5a4>)
 80094d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80094d4:	4652      	mov	r2, sl
 80094d6:	465b      	mov	r3, fp
 80094d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80094dc:	f7f7 f8ac 	bl	8000638 <__aeabi_dmul>
 80094e0:	4682      	mov	sl, r0
 80094e2:	468b      	mov	fp, r1
 80094e4:	f038 080f 	bics.w	r8, r8, #15
 80094e8:	d04f      	beq.n	800958a <_strtod_l+0x522>
 80094ea:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80094ee:	dd22      	ble.n	8009536 <_strtod_l+0x4ce>
 80094f0:	2500      	movs	r5, #0
 80094f2:	462e      	mov	r6, r5
 80094f4:	9507      	str	r5, [sp, #28]
 80094f6:	9505      	str	r5, [sp, #20]
 80094f8:	2322      	movs	r3, #34	; 0x22
 80094fa:	f8df b118 	ldr.w	fp, [pc, #280]	; 8009614 <_strtod_l+0x5ac>
 80094fe:	6023      	str	r3, [r4, #0]
 8009500:	f04f 0a00 	mov.w	sl, #0
 8009504:	9b07      	ldr	r3, [sp, #28]
 8009506:	2b00      	cmp	r3, #0
 8009508:	f43f adf2 	beq.w	80090f0 <_strtod_l+0x88>
 800950c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800950e:	4620      	mov	r0, r4
 8009510:	f000 ff8c 	bl	800a42c <_Bfree>
 8009514:	9905      	ldr	r1, [sp, #20]
 8009516:	4620      	mov	r0, r4
 8009518:	f000 ff88 	bl	800a42c <_Bfree>
 800951c:	4631      	mov	r1, r6
 800951e:	4620      	mov	r0, r4
 8009520:	f000 ff84 	bl	800a42c <_Bfree>
 8009524:	9907      	ldr	r1, [sp, #28]
 8009526:	4620      	mov	r0, r4
 8009528:	f000 ff80 	bl	800a42c <_Bfree>
 800952c:	4629      	mov	r1, r5
 800952e:	4620      	mov	r0, r4
 8009530:	f000 ff7c 	bl	800a42c <_Bfree>
 8009534:	e5dc      	b.n	80090f0 <_strtod_l+0x88>
 8009536:	4b36      	ldr	r3, [pc, #216]	; (8009610 <_strtod_l+0x5a8>)
 8009538:	9304      	str	r3, [sp, #16]
 800953a:	2300      	movs	r3, #0
 800953c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009540:	4650      	mov	r0, sl
 8009542:	4659      	mov	r1, fp
 8009544:	4699      	mov	r9, r3
 8009546:	f1b8 0f01 	cmp.w	r8, #1
 800954a:	dc21      	bgt.n	8009590 <_strtod_l+0x528>
 800954c:	b10b      	cbz	r3, 8009552 <_strtod_l+0x4ea>
 800954e:	4682      	mov	sl, r0
 8009550:	468b      	mov	fp, r1
 8009552:	4b2f      	ldr	r3, [pc, #188]	; (8009610 <_strtod_l+0x5a8>)
 8009554:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009558:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800955c:	4652      	mov	r2, sl
 800955e:	465b      	mov	r3, fp
 8009560:	e9d9 0100 	ldrd	r0, r1, [r9]
 8009564:	f7f7 f868 	bl	8000638 <__aeabi_dmul>
 8009568:	4b2a      	ldr	r3, [pc, #168]	; (8009614 <_strtod_l+0x5ac>)
 800956a:	460a      	mov	r2, r1
 800956c:	400b      	ands	r3, r1
 800956e:	492a      	ldr	r1, [pc, #168]	; (8009618 <_strtod_l+0x5b0>)
 8009570:	428b      	cmp	r3, r1
 8009572:	4682      	mov	sl, r0
 8009574:	d8bc      	bhi.n	80094f0 <_strtod_l+0x488>
 8009576:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800957a:	428b      	cmp	r3, r1
 800957c:	bf86      	itte	hi
 800957e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800961c <_strtod_l+0x5b4>
 8009582:	f04f 3aff 	movhi.w	sl, #4294967295
 8009586:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800958a:	2300      	movs	r3, #0
 800958c:	9304      	str	r3, [sp, #16]
 800958e:	e084      	b.n	800969a <_strtod_l+0x632>
 8009590:	f018 0f01 	tst.w	r8, #1
 8009594:	d005      	beq.n	80095a2 <_strtod_l+0x53a>
 8009596:	9b04      	ldr	r3, [sp, #16]
 8009598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800959c:	f7f7 f84c 	bl	8000638 <__aeabi_dmul>
 80095a0:	2301      	movs	r3, #1
 80095a2:	9a04      	ldr	r2, [sp, #16]
 80095a4:	3208      	adds	r2, #8
 80095a6:	f109 0901 	add.w	r9, r9, #1
 80095aa:	ea4f 0868 	mov.w	r8, r8, asr #1
 80095ae:	9204      	str	r2, [sp, #16]
 80095b0:	e7c9      	b.n	8009546 <_strtod_l+0x4de>
 80095b2:	d0ea      	beq.n	800958a <_strtod_l+0x522>
 80095b4:	f1c8 0800 	rsb	r8, r8, #0
 80095b8:	f018 020f 	ands.w	r2, r8, #15
 80095bc:	d00a      	beq.n	80095d4 <_strtod_l+0x56c>
 80095be:	4b13      	ldr	r3, [pc, #76]	; (800960c <_strtod_l+0x5a4>)
 80095c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80095c4:	4650      	mov	r0, sl
 80095c6:	4659      	mov	r1, fp
 80095c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095cc:	f7f7 f95e 	bl	800088c <__aeabi_ddiv>
 80095d0:	4682      	mov	sl, r0
 80095d2:	468b      	mov	fp, r1
 80095d4:	ea5f 1828 	movs.w	r8, r8, asr #4
 80095d8:	d0d7      	beq.n	800958a <_strtod_l+0x522>
 80095da:	f1b8 0f1f 	cmp.w	r8, #31
 80095de:	dd1f      	ble.n	8009620 <_strtod_l+0x5b8>
 80095e0:	2500      	movs	r5, #0
 80095e2:	462e      	mov	r6, r5
 80095e4:	9507      	str	r5, [sp, #28]
 80095e6:	9505      	str	r5, [sp, #20]
 80095e8:	2322      	movs	r3, #34	; 0x22
 80095ea:	f04f 0a00 	mov.w	sl, #0
 80095ee:	f04f 0b00 	mov.w	fp, #0
 80095f2:	6023      	str	r3, [r4, #0]
 80095f4:	e786      	b.n	8009504 <_strtod_l+0x49c>
 80095f6:	bf00      	nop
 80095f8:	0800be29 	.word	0x0800be29
 80095fc:	0800be40 	.word	0x0800be40
 8009600:	0800be20 	.word	0x0800be20
 8009604:	0800be23 	.word	0x0800be23
 8009608:	0800c0b7 	.word	0x0800c0b7
 800960c:	0800bfa8 	.word	0x0800bfa8
 8009610:	0800bf80 	.word	0x0800bf80
 8009614:	7ff00000 	.word	0x7ff00000
 8009618:	7ca00000 	.word	0x7ca00000
 800961c:	7fefffff 	.word	0x7fefffff
 8009620:	f018 0310 	ands.w	r3, r8, #16
 8009624:	bf18      	it	ne
 8009626:	236a      	movne	r3, #106	; 0x6a
 8009628:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80099d8 <_strtod_l+0x970>
 800962c:	9304      	str	r3, [sp, #16]
 800962e:	4650      	mov	r0, sl
 8009630:	4659      	mov	r1, fp
 8009632:	2300      	movs	r3, #0
 8009634:	f018 0f01 	tst.w	r8, #1
 8009638:	d004      	beq.n	8009644 <_strtod_l+0x5dc>
 800963a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800963e:	f7f6 fffb 	bl	8000638 <__aeabi_dmul>
 8009642:	2301      	movs	r3, #1
 8009644:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009648:	f109 0908 	add.w	r9, r9, #8
 800964c:	d1f2      	bne.n	8009634 <_strtod_l+0x5cc>
 800964e:	b10b      	cbz	r3, 8009654 <_strtod_l+0x5ec>
 8009650:	4682      	mov	sl, r0
 8009652:	468b      	mov	fp, r1
 8009654:	9b04      	ldr	r3, [sp, #16]
 8009656:	b1c3      	cbz	r3, 800968a <_strtod_l+0x622>
 8009658:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800965c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009660:	2b00      	cmp	r3, #0
 8009662:	4659      	mov	r1, fp
 8009664:	dd11      	ble.n	800968a <_strtod_l+0x622>
 8009666:	2b1f      	cmp	r3, #31
 8009668:	f340 8124 	ble.w	80098b4 <_strtod_l+0x84c>
 800966c:	2b34      	cmp	r3, #52	; 0x34
 800966e:	bfde      	ittt	le
 8009670:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009674:	f04f 33ff 	movle.w	r3, #4294967295
 8009678:	fa03 f202 	lslle.w	r2, r3, r2
 800967c:	f04f 0a00 	mov.w	sl, #0
 8009680:	bfcc      	ite	gt
 8009682:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009686:	ea02 0b01 	andle.w	fp, r2, r1
 800968a:	2200      	movs	r2, #0
 800968c:	2300      	movs	r3, #0
 800968e:	4650      	mov	r0, sl
 8009690:	4659      	mov	r1, fp
 8009692:	f7f7 fa39 	bl	8000b08 <__aeabi_dcmpeq>
 8009696:	2800      	cmp	r0, #0
 8009698:	d1a2      	bne.n	80095e0 <_strtod_l+0x578>
 800969a:	9b07      	ldr	r3, [sp, #28]
 800969c:	9300      	str	r3, [sp, #0]
 800969e:	9908      	ldr	r1, [sp, #32]
 80096a0:	462b      	mov	r3, r5
 80096a2:	463a      	mov	r2, r7
 80096a4:	4620      	mov	r0, r4
 80096a6:	f000 ff29 	bl	800a4fc <__s2b>
 80096aa:	9007      	str	r0, [sp, #28]
 80096ac:	2800      	cmp	r0, #0
 80096ae:	f43f af1f 	beq.w	80094f0 <_strtod_l+0x488>
 80096b2:	9b05      	ldr	r3, [sp, #20]
 80096b4:	1b9e      	subs	r6, r3, r6
 80096b6:	9b06      	ldr	r3, [sp, #24]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	bfb4      	ite	lt
 80096bc:	4633      	movlt	r3, r6
 80096be:	2300      	movge	r3, #0
 80096c0:	930c      	str	r3, [sp, #48]	; 0x30
 80096c2:	9b06      	ldr	r3, [sp, #24]
 80096c4:	2500      	movs	r5, #0
 80096c6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80096ca:	9312      	str	r3, [sp, #72]	; 0x48
 80096cc:	462e      	mov	r6, r5
 80096ce:	9b07      	ldr	r3, [sp, #28]
 80096d0:	4620      	mov	r0, r4
 80096d2:	6859      	ldr	r1, [r3, #4]
 80096d4:	f000 fe6a 	bl	800a3ac <_Balloc>
 80096d8:	9005      	str	r0, [sp, #20]
 80096da:	2800      	cmp	r0, #0
 80096dc:	f43f af0c 	beq.w	80094f8 <_strtod_l+0x490>
 80096e0:	9b07      	ldr	r3, [sp, #28]
 80096e2:	691a      	ldr	r2, [r3, #16]
 80096e4:	3202      	adds	r2, #2
 80096e6:	f103 010c 	add.w	r1, r3, #12
 80096ea:	0092      	lsls	r2, r2, #2
 80096ec:	300c      	adds	r0, #12
 80096ee:	f000 fe4f 	bl	800a390 <memcpy>
 80096f2:	ec4b ab10 	vmov	d0, sl, fp
 80096f6:	aa1a      	add	r2, sp, #104	; 0x68
 80096f8:	a919      	add	r1, sp, #100	; 0x64
 80096fa:	4620      	mov	r0, r4
 80096fc:	f001 fa44 	bl	800ab88 <__d2b>
 8009700:	ec4b ab18 	vmov	d8, sl, fp
 8009704:	9018      	str	r0, [sp, #96]	; 0x60
 8009706:	2800      	cmp	r0, #0
 8009708:	f43f aef6 	beq.w	80094f8 <_strtod_l+0x490>
 800970c:	2101      	movs	r1, #1
 800970e:	4620      	mov	r0, r4
 8009710:	f000 ff8e 	bl	800a630 <__i2b>
 8009714:	4606      	mov	r6, r0
 8009716:	2800      	cmp	r0, #0
 8009718:	f43f aeee 	beq.w	80094f8 <_strtod_l+0x490>
 800971c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800971e:	9904      	ldr	r1, [sp, #16]
 8009720:	2b00      	cmp	r3, #0
 8009722:	bfab      	itete	ge
 8009724:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8009726:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8009728:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800972a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800972e:	bfac      	ite	ge
 8009730:	eb03 0902 	addge.w	r9, r3, r2
 8009734:	1ad7      	sublt	r7, r2, r3
 8009736:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009738:	eba3 0801 	sub.w	r8, r3, r1
 800973c:	4490      	add	r8, r2
 800973e:	4ba1      	ldr	r3, [pc, #644]	; (80099c4 <_strtod_l+0x95c>)
 8009740:	f108 38ff 	add.w	r8, r8, #4294967295
 8009744:	4598      	cmp	r8, r3
 8009746:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800974a:	f280 80c7 	bge.w	80098dc <_strtod_l+0x874>
 800974e:	eba3 0308 	sub.w	r3, r3, r8
 8009752:	2b1f      	cmp	r3, #31
 8009754:	eba2 0203 	sub.w	r2, r2, r3
 8009758:	f04f 0101 	mov.w	r1, #1
 800975c:	f300 80b1 	bgt.w	80098c2 <_strtod_l+0x85a>
 8009760:	fa01 f303 	lsl.w	r3, r1, r3
 8009764:	930d      	str	r3, [sp, #52]	; 0x34
 8009766:	2300      	movs	r3, #0
 8009768:	9308      	str	r3, [sp, #32]
 800976a:	eb09 0802 	add.w	r8, r9, r2
 800976e:	9b04      	ldr	r3, [sp, #16]
 8009770:	45c1      	cmp	r9, r8
 8009772:	4417      	add	r7, r2
 8009774:	441f      	add	r7, r3
 8009776:	464b      	mov	r3, r9
 8009778:	bfa8      	it	ge
 800977a:	4643      	movge	r3, r8
 800977c:	42bb      	cmp	r3, r7
 800977e:	bfa8      	it	ge
 8009780:	463b      	movge	r3, r7
 8009782:	2b00      	cmp	r3, #0
 8009784:	bfc2      	ittt	gt
 8009786:	eba8 0803 	subgt.w	r8, r8, r3
 800978a:	1aff      	subgt	r7, r7, r3
 800978c:	eba9 0903 	subgt.w	r9, r9, r3
 8009790:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009792:	2b00      	cmp	r3, #0
 8009794:	dd17      	ble.n	80097c6 <_strtod_l+0x75e>
 8009796:	4631      	mov	r1, r6
 8009798:	461a      	mov	r2, r3
 800979a:	4620      	mov	r0, r4
 800979c:	f001 f808 	bl	800a7b0 <__pow5mult>
 80097a0:	4606      	mov	r6, r0
 80097a2:	2800      	cmp	r0, #0
 80097a4:	f43f aea8 	beq.w	80094f8 <_strtod_l+0x490>
 80097a8:	4601      	mov	r1, r0
 80097aa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80097ac:	4620      	mov	r0, r4
 80097ae:	f000 ff55 	bl	800a65c <__multiply>
 80097b2:	900b      	str	r0, [sp, #44]	; 0x2c
 80097b4:	2800      	cmp	r0, #0
 80097b6:	f43f ae9f 	beq.w	80094f8 <_strtod_l+0x490>
 80097ba:	9918      	ldr	r1, [sp, #96]	; 0x60
 80097bc:	4620      	mov	r0, r4
 80097be:	f000 fe35 	bl	800a42c <_Bfree>
 80097c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80097c4:	9318      	str	r3, [sp, #96]	; 0x60
 80097c6:	f1b8 0f00 	cmp.w	r8, #0
 80097ca:	f300 808c 	bgt.w	80098e6 <_strtod_l+0x87e>
 80097ce:	9b06      	ldr	r3, [sp, #24]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	dd08      	ble.n	80097e6 <_strtod_l+0x77e>
 80097d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80097d6:	9905      	ldr	r1, [sp, #20]
 80097d8:	4620      	mov	r0, r4
 80097da:	f000 ffe9 	bl	800a7b0 <__pow5mult>
 80097de:	9005      	str	r0, [sp, #20]
 80097e0:	2800      	cmp	r0, #0
 80097e2:	f43f ae89 	beq.w	80094f8 <_strtod_l+0x490>
 80097e6:	2f00      	cmp	r7, #0
 80097e8:	dd08      	ble.n	80097fc <_strtod_l+0x794>
 80097ea:	9905      	ldr	r1, [sp, #20]
 80097ec:	463a      	mov	r2, r7
 80097ee:	4620      	mov	r0, r4
 80097f0:	f001 f838 	bl	800a864 <__lshift>
 80097f4:	9005      	str	r0, [sp, #20]
 80097f6:	2800      	cmp	r0, #0
 80097f8:	f43f ae7e 	beq.w	80094f8 <_strtod_l+0x490>
 80097fc:	f1b9 0f00 	cmp.w	r9, #0
 8009800:	dd08      	ble.n	8009814 <_strtod_l+0x7ac>
 8009802:	4631      	mov	r1, r6
 8009804:	464a      	mov	r2, r9
 8009806:	4620      	mov	r0, r4
 8009808:	f001 f82c 	bl	800a864 <__lshift>
 800980c:	4606      	mov	r6, r0
 800980e:	2800      	cmp	r0, #0
 8009810:	f43f ae72 	beq.w	80094f8 <_strtod_l+0x490>
 8009814:	9a05      	ldr	r2, [sp, #20]
 8009816:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009818:	4620      	mov	r0, r4
 800981a:	f001 f8af 	bl	800a97c <__mdiff>
 800981e:	4605      	mov	r5, r0
 8009820:	2800      	cmp	r0, #0
 8009822:	f43f ae69 	beq.w	80094f8 <_strtod_l+0x490>
 8009826:	68c3      	ldr	r3, [r0, #12]
 8009828:	930b      	str	r3, [sp, #44]	; 0x2c
 800982a:	2300      	movs	r3, #0
 800982c:	60c3      	str	r3, [r0, #12]
 800982e:	4631      	mov	r1, r6
 8009830:	f001 f888 	bl	800a944 <__mcmp>
 8009834:	2800      	cmp	r0, #0
 8009836:	da60      	bge.n	80098fa <_strtod_l+0x892>
 8009838:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800983a:	ea53 030a 	orrs.w	r3, r3, sl
 800983e:	f040 8082 	bne.w	8009946 <_strtod_l+0x8de>
 8009842:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009846:	2b00      	cmp	r3, #0
 8009848:	d17d      	bne.n	8009946 <_strtod_l+0x8de>
 800984a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800984e:	0d1b      	lsrs	r3, r3, #20
 8009850:	051b      	lsls	r3, r3, #20
 8009852:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009856:	d976      	bls.n	8009946 <_strtod_l+0x8de>
 8009858:	696b      	ldr	r3, [r5, #20]
 800985a:	b913      	cbnz	r3, 8009862 <_strtod_l+0x7fa>
 800985c:	692b      	ldr	r3, [r5, #16]
 800985e:	2b01      	cmp	r3, #1
 8009860:	dd71      	ble.n	8009946 <_strtod_l+0x8de>
 8009862:	4629      	mov	r1, r5
 8009864:	2201      	movs	r2, #1
 8009866:	4620      	mov	r0, r4
 8009868:	f000 fffc 	bl	800a864 <__lshift>
 800986c:	4631      	mov	r1, r6
 800986e:	4605      	mov	r5, r0
 8009870:	f001 f868 	bl	800a944 <__mcmp>
 8009874:	2800      	cmp	r0, #0
 8009876:	dd66      	ble.n	8009946 <_strtod_l+0x8de>
 8009878:	9904      	ldr	r1, [sp, #16]
 800987a:	4a53      	ldr	r2, [pc, #332]	; (80099c8 <_strtod_l+0x960>)
 800987c:	465b      	mov	r3, fp
 800987e:	2900      	cmp	r1, #0
 8009880:	f000 8081 	beq.w	8009986 <_strtod_l+0x91e>
 8009884:	ea02 010b 	and.w	r1, r2, fp
 8009888:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800988c:	dc7b      	bgt.n	8009986 <_strtod_l+0x91e>
 800988e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009892:	f77f aea9 	ble.w	80095e8 <_strtod_l+0x580>
 8009896:	4b4d      	ldr	r3, [pc, #308]	; (80099cc <_strtod_l+0x964>)
 8009898:	4650      	mov	r0, sl
 800989a:	4659      	mov	r1, fp
 800989c:	2200      	movs	r2, #0
 800989e:	f7f6 fecb 	bl	8000638 <__aeabi_dmul>
 80098a2:	460b      	mov	r3, r1
 80098a4:	4303      	orrs	r3, r0
 80098a6:	bf08      	it	eq
 80098a8:	2322      	moveq	r3, #34	; 0x22
 80098aa:	4682      	mov	sl, r0
 80098ac:	468b      	mov	fp, r1
 80098ae:	bf08      	it	eq
 80098b0:	6023      	streq	r3, [r4, #0]
 80098b2:	e62b      	b.n	800950c <_strtod_l+0x4a4>
 80098b4:	f04f 32ff 	mov.w	r2, #4294967295
 80098b8:	fa02 f303 	lsl.w	r3, r2, r3
 80098bc:	ea03 0a0a 	and.w	sl, r3, sl
 80098c0:	e6e3      	b.n	800968a <_strtod_l+0x622>
 80098c2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80098c6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80098ca:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80098ce:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80098d2:	fa01 f308 	lsl.w	r3, r1, r8
 80098d6:	9308      	str	r3, [sp, #32]
 80098d8:	910d      	str	r1, [sp, #52]	; 0x34
 80098da:	e746      	b.n	800976a <_strtod_l+0x702>
 80098dc:	2300      	movs	r3, #0
 80098de:	9308      	str	r3, [sp, #32]
 80098e0:	2301      	movs	r3, #1
 80098e2:	930d      	str	r3, [sp, #52]	; 0x34
 80098e4:	e741      	b.n	800976a <_strtod_l+0x702>
 80098e6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80098e8:	4642      	mov	r2, r8
 80098ea:	4620      	mov	r0, r4
 80098ec:	f000 ffba 	bl	800a864 <__lshift>
 80098f0:	9018      	str	r0, [sp, #96]	; 0x60
 80098f2:	2800      	cmp	r0, #0
 80098f4:	f47f af6b 	bne.w	80097ce <_strtod_l+0x766>
 80098f8:	e5fe      	b.n	80094f8 <_strtod_l+0x490>
 80098fa:	465f      	mov	r7, fp
 80098fc:	d16e      	bne.n	80099dc <_strtod_l+0x974>
 80098fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009900:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009904:	b342      	cbz	r2, 8009958 <_strtod_l+0x8f0>
 8009906:	4a32      	ldr	r2, [pc, #200]	; (80099d0 <_strtod_l+0x968>)
 8009908:	4293      	cmp	r3, r2
 800990a:	d128      	bne.n	800995e <_strtod_l+0x8f6>
 800990c:	9b04      	ldr	r3, [sp, #16]
 800990e:	4651      	mov	r1, sl
 8009910:	b1eb      	cbz	r3, 800994e <_strtod_l+0x8e6>
 8009912:	4b2d      	ldr	r3, [pc, #180]	; (80099c8 <_strtod_l+0x960>)
 8009914:	403b      	ands	r3, r7
 8009916:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800991a:	f04f 32ff 	mov.w	r2, #4294967295
 800991e:	d819      	bhi.n	8009954 <_strtod_l+0x8ec>
 8009920:	0d1b      	lsrs	r3, r3, #20
 8009922:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009926:	fa02 f303 	lsl.w	r3, r2, r3
 800992a:	4299      	cmp	r1, r3
 800992c:	d117      	bne.n	800995e <_strtod_l+0x8f6>
 800992e:	4b29      	ldr	r3, [pc, #164]	; (80099d4 <_strtod_l+0x96c>)
 8009930:	429f      	cmp	r7, r3
 8009932:	d102      	bne.n	800993a <_strtod_l+0x8d2>
 8009934:	3101      	adds	r1, #1
 8009936:	f43f addf 	beq.w	80094f8 <_strtod_l+0x490>
 800993a:	4b23      	ldr	r3, [pc, #140]	; (80099c8 <_strtod_l+0x960>)
 800993c:	403b      	ands	r3, r7
 800993e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009942:	f04f 0a00 	mov.w	sl, #0
 8009946:	9b04      	ldr	r3, [sp, #16]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d1a4      	bne.n	8009896 <_strtod_l+0x82e>
 800994c:	e5de      	b.n	800950c <_strtod_l+0x4a4>
 800994e:	f04f 33ff 	mov.w	r3, #4294967295
 8009952:	e7ea      	b.n	800992a <_strtod_l+0x8c2>
 8009954:	4613      	mov	r3, r2
 8009956:	e7e8      	b.n	800992a <_strtod_l+0x8c2>
 8009958:	ea53 030a 	orrs.w	r3, r3, sl
 800995c:	d08c      	beq.n	8009878 <_strtod_l+0x810>
 800995e:	9b08      	ldr	r3, [sp, #32]
 8009960:	b1db      	cbz	r3, 800999a <_strtod_l+0x932>
 8009962:	423b      	tst	r3, r7
 8009964:	d0ef      	beq.n	8009946 <_strtod_l+0x8de>
 8009966:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009968:	9a04      	ldr	r2, [sp, #16]
 800996a:	4650      	mov	r0, sl
 800996c:	4659      	mov	r1, fp
 800996e:	b1c3      	cbz	r3, 80099a2 <_strtod_l+0x93a>
 8009970:	f7ff fb5c 	bl	800902c <sulp>
 8009974:	4602      	mov	r2, r0
 8009976:	460b      	mov	r3, r1
 8009978:	ec51 0b18 	vmov	r0, r1, d8
 800997c:	f7f6 fca6 	bl	80002cc <__adddf3>
 8009980:	4682      	mov	sl, r0
 8009982:	468b      	mov	fp, r1
 8009984:	e7df      	b.n	8009946 <_strtod_l+0x8de>
 8009986:	4013      	ands	r3, r2
 8009988:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800998c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009990:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009994:	f04f 3aff 	mov.w	sl, #4294967295
 8009998:	e7d5      	b.n	8009946 <_strtod_l+0x8de>
 800999a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800999c:	ea13 0f0a 	tst.w	r3, sl
 80099a0:	e7e0      	b.n	8009964 <_strtod_l+0x8fc>
 80099a2:	f7ff fb43 	bl	800902c <sulp>
 80099a6:	4602      	mov	r2, r0
 80099a8:	460b      	mov	r3, r1
 80099aa:	ec51 0b18 	vmov	r0, r1, d8
 80099ae:	f7f6 fc8b 	bl	80002c8 <__aeabi_dsub>
 80099b2:	2200      	movs	r2, #0
 80099b4:	2300      	movs	r3, #0
 80099b6:	4682      	mov	sl, r0
 80099b8:	468b      	mov	fp, r1
 80099ba:	f7f7 f8a5 	bl	8000b08 <__aeabi_dcmpeq>
 80099be:	2800      	cmp	r0, #0
 80099c0:	d0c1      	beq.n	8009946 <_strtod_l+0x8de>
 80099c2:	e611      	b.n	80095e8 <_strtod_l+0x580>
 80099c4:	fffffc02 	.word	0xfffffc02
 80099c8:	7ff00000 	.word	0x7ff00000
 80099cc:	39500000 	.word	0x39500000
 80099d0:	000fffff 	.word	0x000fffff
 80099d4:	7fefffff 	.word	0x7fefffff
 80099d8:	0800be58 	.word	0x0800be58
 80099dc:	4631      	mov	r1, r6
 80099de:	4628      	mov	r0, r5
 80099e0:	f001 f92e 	bl	800ac40 <__ratio>
 80099e4:	ec59 8b10 	vmov	r8, r9, d0
 80099e8:	ee10 0a10 	vmov	r0, s0
 80099ec:	2200      	movs	r2, #0
 80099ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80099f2:	4649      	mov	r1, r9
 80099f4:	f7f7 f89c 	bl	8000b30 <__aeabi_dcmple>
 80099f8:	2800      	cmp	r0, #0
 80099fa:	d07a      	beq.n	8009af2 <_strtod_l+0xa8a>
 80099fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d04a      	beq.n	8009a98 <_strtod_l+0xa30>
 8009a02:	4b95      	ldr	r3, [pc, #596]	; (8009c58 <_strtod_l+0xbf0>)
 8009a04:	2200      	movs	r2, #0
 8009a06:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009a0a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009c58 <_strtod_l+0xbf0>
 8009a0e:	f04f 0800 	mov.w	r8, #0
 8009a12:	4b92      	ldr	r3, [pc, #584]	; (8009c5c <_strtod_l+0xbf4>)
 8009a14:	403b      	ands	r3, r7
 8009a16:	930d      	str	r3, [sp, #52]	; 0x34
 8009a18:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009a1a:	4b91      	ldr	r3, [pc, #580]	; (8009c60 <_strtod_l+0xbf8>)
 8009a1c:	429a      	cmp	r2, r3
 8009a1e:	f040 80b0 	bne.w	8009b82 <_strtod_l+0xb1a>
 8009a22:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009a26:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8009a2a:	ec4b ab10 	vmov	d0, sl, fp
 8009a2e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009a32:	f001 f82d 	bl	800aa90 <__ulp>
 8009a36:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009a3a:	ec53 2b10 	vmov	r2, r3, d0
 8009a3e:	f7f6 fdfb 	bl	8000638 <__aeabi_dmul>
 8009a42:	4652      	mov	r2, sl
 8009a44:	465b      	mov	r3, fp
 8009a46:	f7f6 fc41 	bl	80002cc <__adddf3>
 8009a4a:	460b      	mov	r3, r1
 8009a4c:	4983      	ldr	r1, [pc, #524]	; (8009c5c <_strtod_l+0xbf4>)
 8009a4e:	4a85      	ldr	r2, [pc, #532]	; (8009c64 <_strtod_l+0xbfc>)
 8009a50:	4019      	ands	r1, r3
 8009a52:	4291      	cmp	r1, r2
 8009a54:	4682      	mov	sl, r0
 8009a56:	d960      	bls.n	8009b1a <_strtod_l+0xab2>
 8009a58:	ee18 3a90 	vmov	r3, s17
 8009a5c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009a60:	4293      	cmp	r3, r2
 8009a62:	d104      	bne.n	8009a6e <_strtod_l+0xa06>
 8009a64:	ee18 3a10 	vmov	r3, s16
 8009a68:	3301      	adds	r3, #1
 8009a6a:	f43f ad45 	beq.w	80094f8 <_strtod_l+0x490>
 8009a6e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8009c70 <_strtod_l+0xc08>
 8009a72:	f04f 3aff 	mov.w	sl, #4294967295
 8009a76:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009a78:	4620      	mov	r0, r4
 8009a7a:	f000 fcd7 	bl	800a42c <_Bfree>
 8009a7e:	9905      	ldr	r1, [sp, #20]
 8009a80:	4620      	mov	r0, r4
 8009a82:	f000 fcd3 	bl	800a42c <_Bfree>
 8009a86:	4631      	mov	r1, r6
 8009a88:	4620      	mov	r0, r4
 8009a8a:	f000 fccf 	bl	800a42c <_Bfree>
 8009a8e:	4629      	mov	r1, r5
 8009a90:	4620      	mov	r0, r4
 8009a92:	f000 fccb 	bl	800a42c <_Bfree>
 8009a96:	e61a      	b.n	80096ce <_strtod_l+0x666>
 8009a98:	f1ba 0f00 	cmp.w	sl, #0
 8009a9c:	d11b      	bne.n	8009ad6 <_strtod_l+0xa6e>
 8009a9e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009aa2:	b9f3      	cbnz	r3, 8009ae2 <_strtod_l+0xa7a>
 8009aa4:	4b6c      	ldr	r3, [pc, #432]	; (8009c58 <_strtod_l+0xbf0>)
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	4640      	mov	r0, r8
 8009aaa:	4649      	mov	r1, r9
 8009aac:	f7f7 f836 	bl	8000b1c <__aeabi_dcmplt>
 8009ab0:	b9d0      	cbnz	r0, 8009ae8 <_strtod_l+0xa80>
 8009ab2:	4640      	mov	r0, r8
 8009ab4:	4649      	mov	r1, r9
 8009ab6:	4b6c      	ldr	r3, [pc, #432]	; (8009c68 <_strtod_l+0xc00>)
 8009ab8:	2200      	movs	r2, #0
 8009aba:	f7f6 fdbd 	bl	8000638 <__aeabi_dmul>
 8009abe:	4680      	mov	r8, r0
 8009ac0:	4689      	mov	r9, r1
 8009ac2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009ac6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8009aca:	9315      	str	r3, [sp, #84]	; 0x54
 8009acc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009ad0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009ad4:	e79d      	b.n	8009a12 <_strtod_l+0x9aa>
 8009ad6:	f1ba 0f01 	cmp.w	sl, #1
 8009ada:	d102      	bne.n	8009ae2 <_strtod_l+0xa7a>
 8009adc:	2f00      	cmp	r7, #0
 8009ade:	f43f ad83 	beq.w	80095e8 <_strtod_l+0x580>
 8009ae2:	4b62      	ldr	r3, [pc, #392]	; (8009c6c <_strtod_l+0xc04>)
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	e78e      	b.n	8009a06 <_strtod_l+0x99e>
 8009ae8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8009c68 <_strtod_l+0xc00>
 8009aec:	f04f 0800 	mov.w	r8, #0
 8009af0:	e7e7      	b.n	8009ac2 <_strtod_l+0xa5a>
 8009af2:	4b5d      	ldr	r3, [pc, #372]	; (8009c68 <_strtod_l+0xc00>)
 8009af4:	4640      	mov	r0, r8
 8009af6:	4649      	mov	r1, r9
 8009af8:	2200      	movs	r2, #0
 8009afa:	f7f6 fd9d 	bl	8000638 <__aeabi_dmul>
 8009afe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b00:	4680      	mov	r8, r0
 8009b02:	4689      	mov	r9, r1
 8009b04:	b933      	cbnz	r3, 8009b14 <_strtod_l+0xaac>
 8009b06:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009b0a:	900e      	str	r0, [sp, #56]	; 0x38
 8009b0c:	930f      	str	r3, [sp, #60]	; 0x3c
 8009b0e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009b12:	e7dd      	b.n	8009ad0 <_strtod_l+0xa68>
 8009b14:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8009b18:	e7f9      	b.n	8009b0e <_strtod_l+0xaa6>
 8009b1a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009b1e:	9b04      	ldr	r3, [sp, #16]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d1a8      	bne.n	8009a76 <_strtod_l+0xa0e>
 8009b24:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009b28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009b2a:	0d1b      	lsrs	r3, r3, #20
 8009b2c:	051b      	lsls	r3, r3, #20
 8009b2e:	429a      	cmp	r2, r3
 8009b30:	d1a1      	bne.n	8009a76 <_strtod_l+0xa0e>
 8009b32:	4640      	mov	r0, r8
 8009b34:	4649      	mov	r1, r9
 8009b36:	f7f7 f851 	bl	8000bdc <__aeabi_d2lz>
 8009b3a:	f7f6 fd4f 	bl	80005dc <__aeabi_l2d>
 8009b3e:	4602      	mov	r2, r0
 8009b40:	460b      	mov	r3, r1
 8009b42:	4640      	mov	r0, r8
 8009b44:	4649      	mov	r1, r9
 8009b46:	f7f6 fbbf 	bl	80002c8 <__aeabi_dsub>
 8009b4a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009b4c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009b50:	ea43 030a 	orr.w	r3, r3, sl
 8009b54:	4313      	orrs	r3, r2
 8009b56:	4680      	mov	r8, r0
 8009b58:	4689      	mov	r9, r1
 8009b5a:	d055      	beq.n	8009c08 <_strtod_l+0xba0>
 8009b5c:	a336      	add	r3, pc, #216	; (adr r3, 8009c38 <_strtod_l+0xbd0>)
 8009b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b62:	f7f6 ffdb 	bl	8000b1c <__aeabi_dcmplt>
 8009b66:	2800      	cmp	r0, #0
 8009b68:	f47f acd0 	bne.w	800950c <_strtod_l+0x4a4>
 8009b6c:	a334      	add	r3, pc, #208	; (adr r3, 8009c40 <_strtod_l+0xbd8>)
 8009b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b72:	4640      	mov	r0, r8
 8009b74:	4649      	mov	r1, r9
 8009b76:	f7f6 ffef 	bl	8000b58 <__aeabi_dcmpgt>
 8009b7a:	2800      	cmp	r0, #0
 8009b7c:	f43f af7b 	beq.w	8009a76 <_strtod_l+0xa0e>
 8009b80:	e4c4      	b.n	800950c <_strtod_l+0x4a4>
 8009b82:	9b04      	ldr	r3, [sp, #16]
 8009b84:	b333      	cbz	r3, 8009bd4 <_strtod_l+0xb6c>
 8009b86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b88:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009b8c:	d822      	bhi.n	8009bd4 <_strtod_l+0xb6c>
 8009b8e:	a32e      	add	r3, pc, #184	; (adr r3, 8009c48 <_strtod_l+0xbe0>)
 8009b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b94:	4640      	mov	r0, r8
 8009b96:	4649      	mov	r1, r9
 8009b98:	f7f6 ffca 	bl	8000b30 <__aeabi_dcmple>
 8009b9c:	b1a0      	cbz	r0, 8009bc8 <_strtod_l+0xb60>
 8009b9e:	4649      	mov	r1, r9
 8009ba0:	4640      	mov	r0, r8
 8009ba2:	f7f6 ffe3 	bl	8000b6c <__aeabi_d2uiz>
 8009ba6:	2801      	cmp	r0, #1
 8009ba8:	bf38      	it	cc
 8009baa:	2001      	movcc	r0, #1
 8009bac:	f7f6 fcca 	bl	8000544 <__aeabi_ui2d>
 8009bb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009bb2:	4680      	mov	r8, r0
 8009bb4:	4689      	mov	r9, r1
 8009bb6:	bb23      	cbnz	r3, 8009c02 <_strtod_l+0xb9a>
 8009bb8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009bbc:	9010      	str	r0, [sp, #64]	; 0x40
 8009bbe:	9311      	str	r3, [sp, #68]	; 0x44
 8009bc0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009bc4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009bc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009bcc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009bd0:	1a9b      	subs	r3, r3, r2
 8009bd2:	9309      	str	r3, [sp, #36]	; 0x24
 8009bd4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009bd8:	eeb0 0a48 	vmov.f32	s0, s16
 8009bdc:	eef0 0a68 	vmov.f32	s1, s17
 8009be0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009be4:	f000 ff54 	bl	800aa90 <__ulp>
 8009be8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009bec:	ec53 2b10 	vmov	r2, r3, d0
 8009bf0:	f7f6 fd22 	bl	8000638 <__aeabi_dmul>
 8009bf4:	ec53 2b18 	vmov	r2, r3, d8
 8009bf8:	f7f6 fb68 	bl	80002cc <__adddf3>
 8009bfc:	4682      	mov	sl, r0
 8009bfe:	468b      	mov	fp, r1
 8009c00:	e78d      	b.n	8009b1e <_strtod_l+0xab6>
 8009c02:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8009c06:	e7db      	b.n	8009bc0 <_strtod_l+0xb58>
 8009c08:	a311      	add	r3, pc, #68	; (adr r3, 8009c50 <_strtod_l+0xbe8>)
 8009c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c0e:	f7f6 ff85 	bl	8000b1c <__aeabi_dcmplt>
 8009c12:	e7b2      	b.n	8009b7a <_strtod_l+0xb12>
 8009c14:	2300      	movs	r3, #0
 8009c16:	930a      	str	r3, [sp, #40]	; 0x28
 8009c18:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009c1a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009c1c:	6013      	str	r3, [r2, #0]
 8009c1e:	f7ff ba6b 	b.w	80090f8 <_strtod_l+0x90>
 8009c22:	2a65      	cmp	r2, #101	; 0x65
 8009c24:	f43f ab5f 	beq.w	80092e6 <_strtod_l+0x27e>
 8009c28:	2a45      	cmp	r2, #69	; 0x45
 8009c2a:	f43f ab5c 	beq.w	80092e6 <_strtod_l+0x27e>
 8009c2e:	2301      	movs	r3, #1
 8009c30:	f7ff bb94 	b.w	800935c <_strtod_l+0x2f4>
 8009c34:	f3af 8000 	nop.w
 8009c38:	94a03595 	.word	0x94a03595
 8009c3c:	3fdfffff 	.word	0x3fdfffff
 8009c40:	35afe535 	.word	0x35afe535
 8009c44:	3fe00000 	.word	0x3fe00000
 8009c48:	ffc00000 	.word	0xffc00000
 8009c4c:	41dfffff 	.word	0x41dfffff
 8009c50:	94a03595 	.word	0x94a03595
 8009c54:	3fcfffff 	.word	0x3fcfffff
 8009c58:	3ff00000 	.word	0x3ff00000
 8009c5c:	7ff00000 	.word	0x7ff00000
 8009c60:	7fe00000 	.word	0x7fe00000
 8009c64:	7c9fffff 	.word	0x7c9fffff
 8009c68:	3fe00000 	.word	0x3fe00000
 8009c6c:	bff00000 	.word	0xbff00000
 8009c70:	7fefffff 	.word	0x7fefffff

08009c74 <strtod>:
 8009c74:	460a      	mov	r2, r1
 8009c76:	4601      	mov	r1, r0
 8009c78:	4802      	ldr	r0, [pc, #8]	; (8009c84 <strtod+0x10>)
 8009c7a:	4b03      	ldr	r3, [pc, #12]	; (8009c88 <strtod+0x14>)
 8009c7c:	6800      	ldr	r0, [r0, #0]
 8009c7e:	f7ff b9f3 	b.w	8009068 <_strtod_l>
 8009c82:	bf00      	nop
 8009c84:	20000110 	.word	0x20000110
 8009c88:	20000178 	.word	0x20000178

08009c8c <rshift>:
 8009c8c:	6903      	ldr	r3, [r0, #16]
 8009c8e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009c92:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009c96:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009c9a:	f100 0414 	add.w	r4, r0, #20
 8009c9e:	dd45      	ble.n	8009d2c <rshift+0xa0>
 8009ca0:	f011 011f 	ands.w	r1, r1, #31
 8009ca4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009ca8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009cac:	d10c      	bne.n	8009cc8 <rshift+0x3c>
 8009cae:	f100 0710 	add.w	r7, r0, #16
 8009cb2:	4629      	mov	r1, r5
 8009cb4:	42b1      	cmp	r1, r6
 8009cb6:	d334      	bcc.n	8009d22 <rshift+0x96>
 8009cb8:	1a9b      	subs	r3, r3, r2
 8009cba:	009b      	lsls	r3, r3, #2
 8009cbc:	1eea      	subs	r2, r5, #3
 8009cbe:	4296      	cmp	r6, r2
 8009cc0:	bf38      	it	cc
 8009cc2:	2300      	movcc	r3, #0
 8009cc4:	4423      	add	r3, r4
 8009cc6:	e015      	b.n	8009cf4 <rshift+0x68>
 8009cc8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009ccc:	f1c1 0820 	rsb	r8, r1, #32
 8009cd0:	40cf      	lsrs	r7, r1
 8009cd2:	f105 0e04 	add.w	lr, r5, #4
 8009cd6:	46a1      	mov	r9, r4
 8009cd8:	4576      	cmp	r6, lr
 8009cda:	46f4      	mov	ip, lr
 8009cdc:	d815      	bhi.n	8009d0a <rshift+0x7e>
 8009cde:	1a9a      	subs	r2, r3, r2
 8009ce0:	0092      	lsls	r2, r2, #2
 8009ce2:	3a04      	subs	r2, #4
 8009ce4:	3501      	adds	r5, #1
 8009ce6:	42ae      	cmp	r6, r5
 8009ce8:	bf38      	it	cc
 8009cea:	2200      	movcc	r2, #0
 8009cec:	18a3      	adds	r3, r4, r2
 8009cee:	50a7      	str	r7, [r4, r2]
 8009cf0:	b107      	cbz	r7, 8009cf4 <rshift+0x68>
 8009cf2:	3304      	adds	r3, #4
 8009cf4:	1b1a      	subs	r2, r3, r4
 8009cf6:	42a3      	cmp	r3, r4
 8009cf8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009cfc:	bf08      	it	eq
 8009cfe:	2300      	moveq	r3, #0
 8009d00:	6102      	str	r2, [r0, #16]
 8009d02:	bf08      	it	eq
 8009d04:	6143      	streq	r3, [r0, #20]
 8009d06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d0a:	f8dc c000 	ldr.w	ip, [ip]
 8009d0e:	fa0c fc08 	lsl.w	ip, ip, r8
 8009d12:	ea4c 0707 	orr.w	r7, ip, r7
 8009d16:	f849 7b04 	str.w	r7, [r9], #4
 8009d1a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009d1e:	40cf      	lsrs	r7, r1
 8009d20:	e7da      	b.n	8009cd8 <rshift+0x4c>
 8009d22:	f851 cb04 	ldr.w	ip, [r1], #4
 8009d26:	f847 cf04 	str.w	ip, [r7, #4]!
 8009d2a:	e7c3      	b.n	8009cb4 <rshift+0x28>
 8009d2c:	4623      	mov	r3, r4
 8009d2e:	e7e1      	b.n	8009cf4 <rshift+0x68>

08009d30 <__hexdig_fun>:
 8009d30:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009d34:	2b09      	cmp	r3, #9
 8009d36:	d802      	bhi.n	8009d3e <__hexdig_fun+0xe>
 8009d38:	3820      	subs	r0, #32
 8009d3a:	b2c0      	uxtb	r0, r0
 8009d3c:	4770      	bx	lr
 8009d3e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009d42:	2b05      	cmp	r3, #5
 8009d44:	d801      	bhi.n	8009d4a <__hexdig_fun+0x1a>
 8009d46:	3847      	subs	r0, #71	; 0x47
 8009d48:	e7f7      	b.n	8009d3a <__hexdig_fun+0xa>
 8009d4a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009d4e:	2b05      	cmp	r3, #5
 8009d50:	d801      	bhi.n	8009d56 <__hexdig_fun+0x26>
 8009d52:	3827      	subs	r0, #39	; 0x27
 8009d54:	e7f1      	b.n	8009d3a <__hexdig_fun+0xa>
 8009d56:	2000      	movs	r0, #0
 8009d58:	4770      	bx	lr
	...

08009d5c <__gethex>:
 8009d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d60:	ed2d 8b02 	vpush	{d8}
 8009d64:	b089      	sub	sp, #36	; 0x24
 8009d66:	ee08 0a10 	vmov	s16, r0
 8009d6a:	9304      	str	r3, [sp, #16]
 8009d6c:	4bb4      	ldr	r3, [pc, #720]	; (800a040 <__gethex+0x2e4>)
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	9301      	str	r3, [sp, #4]
 8009d72:	4618      	mov	r0, r3
 8009d74:	468b      	mov	fp, r1
 8009d76:	4690      	mov	r8, r2
 8009d78:	f7f6 fa4a 	bl	8000210 <strlen>
 8009d7c:	9b01      	ldr	r3, [sp, #4]
 8009d7e:	f8db 2000 	ldr.w	r2, [fp]
 8009d82:	4403      	add	r3, r0
 8009d84:	4682      	mov	sl, r0
 8009d86:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009d8a:	9305      	str	r3, [sp, #20]
 8009d8c:	1c93      	adds	r3, r2, #2
 8009d8e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009d92:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009d96:	32fe      	adds	r2, #254	; 0xfe
 8009d98:	18d1      	adds	r1, r2, r3
 8009d9a:	461f      	mov	r7, r3
 8009d9c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009da0:	9100      	str	r1, [sp, #0]
 8009da2:	2830      	cmp	r0, #48	; 0x30
 8009da4:	d0f8      	beq.n	8009d98 <__gethex+0x3c>
 8009da6:	f7ff ffc3 	bl	8009d30 <__hexdig_fun>
 8009daa:	4604      	mov	r4, r0
 8009dac:	2800      	cmp	r0, #0
 8009dae:	d13a      	bne.n	8009e26 <__gethex+0xca>
 8009db0:	9901      	ldr	r1, [sp, #4]
 8009db2:	4652      	mov	r2, sl
 8009db4:	4638      	mov	r0, r7
 8009db6:	f001 f87f 	bl	800aeb8 <strncmp>
 8009dba:	4605      	mov	r5, r0
 8009dbc:	2800      	cmp	r0, #0
 8009dbe:	d168      	bne.n	8009e92 <__gethex+0x136>
 8009dc0:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009dc4:	eb07 060a 	add.w	r6, r7, sl
 8009dc8:	f7ff ffb2 	bl	8009d30 <__hexdig_fun>
 8009dcc:	2800      	cmp	r0, #0
 8009dce:	d062      	beq.n	8009e96 <__gethex+0x13a>
 8009dd0:	4633      	mov	r3, r6
 8009dd2:	7818      	ldrb	r0, [r3, #0]
 8009dd4:	2830      	cmp	r0, #48	; 0x30
 8009dd6:	461f      	mov	r7, r3
 8009dd8:	f103 0301 	add.w	r3, r3, #1
 8009ddc:	d0f9      	beq.n	8009dd2 <__gethex+0x76>
 8009dde:	f7ff ffa7 	bl	8009d30 <__hexdig_fun>
 8009de2:	2301      	movs	r3, #1
 8009de4:	fab0 f480 	clz	r4, r0
 8009de8:	0964      	lsrs	r4, r4, #5
 8009dea:	4635      	mov	r5, r6
 8009dec:	9300      	str	r3, [sp, #0]
 8009dee:	463a      	mov	r2, r7
 8009df0:	4616      	mov	r6, r2
 8009df2:	3201      	adds	r2, #1
 8009df4:	7830      	ldrb	r0, [r6, #0]
 8009df6:	f7ff ff9b 	bl	8009d30 <__hexdig_fun>
 8009dfa:	2800      	cmp	r0, #0
 8009dfc:	d1f8      	bne.n	8009df0 <__gethex+0x94>
 8009dfe:	9901      	ldr	r1, [sp, #4]
 8009e00:	4652      	mov	r2, sl
 8009e02:	4630      	mov	r0, r6
 8009e04:	f001 f858 	bl	800aeb8 <strncmp>
 8009e08:	b980      	cbnz	r0, 8009e2c <__gethex+0xd0>
 8009e0a:	b94d      	cbnz	r5, 8009e20 <__gethex+0xc4>
 8009e0c:	eb06 050a 	add.w	r5, r6, sl
 8009e10:	462a      	mov	r2, r5
 8009e12:	4616      	mov	r6, r2
 8009e14:	3201      	adds	r2, #1
 8009e16:	7830      	ldrb	r0, [r6, #0]
 8009e18:	f7ff ff8a 	bl	8009d30 <__hexdig_fun>
 8009e1c:	2800      	cmp	r0, #0
 8009e1e:	d1f8      	bne.n	8009e12 <__gethex+0xb6>
 8009e20:	1bad      	subs	r5, r5, r6
 8009e22:	00ad      	lsls	r5, r5, #2
 8009e24:	e004      	b.n	8009e30 <__gethex+0xd4>
 8009e26:	2400      	movs	r4, #0
 8009e28:	4625      	mov	r5, r4
 8009e2a:	e7e0      	b.n	8009dee <__gethex+0x92>
 8009e2c:	2d00      	cmp	r5, #0
 8009e2e:	d1f7      	bne.n	8009e20 <__gethex+0xc4>
 8009e30:	7833      	ldrb	r3, [r6, #0]
 8009e32:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009e36:	2b50      	cmp	r3, #80	; 0x50
 8009e38:	d13b      	bne.n	8009eb2 <__gethex+0x156>
 8009e3a:	7873      	ldrb	r3, [r6, #1]
 8009e3c:	2b2b      	cmp	r3, #43	; 0x2b
 8009e3e:	d02c      	beq.n	8009e9a <__gethex+0x13e>
 8009e40:	2b2d      	cmp	r3, #45	; 0x2d
 8009e42:	d02e      	beq.n	8009ea2 <__gethex+0x146>
 8009e44:	1c71      	adds	r1, r6, #1
 8009e46:	f04f 0900 	mov.w	r9, #0
 8009e4a:	7808      	ldrb	r0, [r1, #0]
 8009e4c:	f7ff ff70 	bl	8009d30 <__hexdig_fun>
 8009e50:	1e43      	subs	r3, r0, #1
 8009e52:	b2db      	uxtb	r3, r3
 8009e54:	2b18      	cmp	r3, #24
 8009e56:	d82c      	bhi.n	8009eb2 <__gethex+0x156>
 8009e58:	f1a0 0210 	sub.w	r2, r0, #16
 8009e5c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009e60:	f7ff ff66 	bl	8009d30 <__hexdig_fun>
 8009e64:	1e43      	subs	r3, r0, #1
 8009e66:	b2db      	uxtb	r3, r3
 8009e68:	2b18      	cmp	r3, #24
 8009e6a:	d91d      	bls.n	8009ea8 <__gethex+0x14c>
 8009e6c:	f1b9 0f00 	cmp.w	r9, #0
 8009e70:	d000      	beq.n	8009e74 <__gethex+0x118>
 8009e72:	4252      	negs	r2, r2
 8009e74:	4415      	add	r5, r2
 8009e76:	f8cb 1000 	str.w	r1, [fp]
 8009e7a:	b1e4      	cbz	r4, 8009eb6 <__gethex+0x15a>
 8009e7c:	9b00      	ldr	r3, [sp, #0]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	bf14      	ite	ne
 8009e82:	2700      	movne	r7, #0
 8009e84:	2706      	moveq	r7, #6
 8009e86:	4638      	mov	r0, r7
 8009e88:	b009      	add	sp, #36	; 0x24
 8009e8a:	ecbd 8b02 	vpop	{d8}
 8009e8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e92:	463e      	mov	r6, r7
 8009e94:	4625      	mov	r5, r4
 8009e96:	2401      	movs	r4, #1
 8009e98:	e7ca      	b.n	8009e30 <__gethex+0xd4>
 8009e9a:	f04f 0900 	mov.w	r9, #0
 8009e9e:	1cb1      	adds	r1, r6, #2
 8009ea0:	e7d3      	b.n	8009e4a <__gethex+0xee>
 8009ea2:	f04f 0901 	mov.w	r9, #1
 8009ea6:	e7fa      	b.n	8009e9e <__gethex+0x142>
 8009ea8:	230a      	movs	r3, #10
 8009eaa:	fb03 0202 	mla	r2, r3, r2, r0
 8009eae:	3a10      	subs	r2, #16
 8009eb0:	e7d4      	b.n	8009e5c <__gethex+0x100>
 8009eb2:	4631      	mov	r1, r6
 8009eb4:	e7df      	b.n	8009e76 <__gethex+0x11a>
 8009eb6:	1bf3      	subs	r3, r6, r7
 8009eb8:	3b01      	subs	r3, #1
 8009eba:	4621      	mov	r1, r4
 8009ebc:	2b07      	cmp	r3, #7
 8009ebe:	dc0b      	bgt.n	8009ed8 <__gethex+0x17c>
 8009ec0:	ee18 0a10 	vmov	r0, s16
 8009ec4:	f000 fa72 	bl	800a3ac <_Balloc>
 8009ec8:	4604      	mov	r4, r0
 8009eca:	b940      	cbnz	r0, 8009ede <__gethex+0x182>
 8009ecc:	4b5d      	ldr	r3, [pc, #372]	; (800a044 <__gethex+0x2e8>)
 8009ece:	4602      	mov	r2, r0
 8009ed0:	21de      	movs	r1, #222	; 0xde
 8009ed2:	485d      	ldr	r0, [pc, #372]	; (800a048 <__gethex+0x2ec>)
 8009ed4:	f001 f812 	bl	800aefc <__assert_func>
 8009ed8:	3101      	adds	r1, #1
 8009eda:	105b      	asrs	r3, r3, #1
 8009edc:	e7ee      	b.n	8009ebc <__gethex+0x160>
 8009ede:	f100 0914 	add.w	r9, r0, #20
 8009ee2:	f04f 0b00 	mov.w	fp, #0
 8009ee6:	f1ca 0301 	rsb	r3, sl, #1
 8009eea:	f8cd 9008 	str.w	r9, [sp, #8]
 8009eee:	f8cd b000 	str.w	fp, [sp]
 8009ef2:	9306      	str	r3, [sp, #24]
 8009ef4:	42b7      	cmp	r7, r6
 8009ef6:	d340      	bcc.n	8009f7a <__gethex+0x21e>
 8009ef8:	9802      	ldr	r0, [sp, #8]
 8009efa:	9b00      	ldr	r3, [sp, #0]
 8009efc:	f840 3b04 	str.w	r3, [r0], #4
 8009f00:	eba0 0009 	sub.w	r0, r0, r9
 8009f04:	1080      	asrs	r0, r0, #2
 8009f06:	0146      	lsls	r6, r0, #5
 8009f08:	6120      	str	r0, [r4, #16]
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	f000 fb40 	bl	800a590 <__hi0bits>
 8009f10:	1a30      	subs	r0, r6, r0
 8009f12:	f8d8 6000 	ldr.w	r6, [r8]
 8009f16:	42b0      	cmp	r0, r6
 8009f18:	dd63      	ble.n	8009fe2 <__gethex+0x286>
 8009f1a:	1b87      	subs	r7, r0, r6
 8009f1c:	4639      	mov	r1, r7
 8009f1e:	4620      	mov	r0, r4
 8009f20:	f000 fee4 	bl	800acec <__any_on>
 8009f24:	4682      	mov	sl, r0
 8009f26:	b1a8      	cbz	r0, 8009f54 <__gethex+0x1f8>
 8009f28:	1e7b      	subs	r3, r7, #1
 8009f2a:	1159      	asrs	r1, r3, #5
 8009f2c:	f003 021f 	and.w	r2, r3, #31
 8009f30:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009f34:	f04f 0a01 	mov.w	sl, #1
 8009f38:	fa0a f202 	lsl.w	r2, sl, r2
 8009f3c:	420a      	tst	r2, r1
 8009f3e:	d009      	beq.n	8009f54 <__gethex+0x1f8>
 8009f40:	4553      	cmp	r3, sl
 8009f42:	dd05      	ble.n	8009f50 <__gethex+0x1f4>
 8009f44:	1eb9      	subs	r1, r7, #2
 8009f46:	4620      	mov	r0, r4
 8009f48:	f000 fed0 	bl	800acec <__any_on>
 8009f4c:	2800      	cmp	r0, #0
 8009f4e:	d145      	bne.n	8009fdc <__gethex+0x280>
 8009f50:	f04f 0a02 	mov.w	sl, #2
 8009f54:	4639      	mov	r1, r7
 8009f56:	4620      	mov	r0, r4
 8009f58:	f7ff fe98 	bl	8009c8c <rshift>
 8009f5c:	443d      	add	r5, r7
 8009f5e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009f62:	42ab      	cmp	r3, r5
 8009f64:	da4c      	bge.n	800a000 <__gethex+0x2a4>
 8009f66:	ee18 0a10 	vmov	r0, s16
 8009f6a:	4621      	mov	r1, r4
 8009f6c:	f000 fa5e 	bl	800a42c <_Bfree>
 8009f70:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009f72:	2300      	movs	r3, #0
 8009f74:	6013      	str	r3, [r2, #0]
 8009f76:	27a3      	movs	r7, #163	; 0xa3
 8009f78:	e785      	b.n	8009e86 <__gethex+0x12a>
 8009f7a:	1e73      	subs	r3, r6, #1
 8009f7c:	9a05      	ldr	r2, [sp, #20]
 8009f7e:	9303      	str	r3, [sp, #12]
 8009f80:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009f84:	4293      	cmp	r3, r2
 8009f86:	d019      	beq.n	8009fbc <__gethex+0x260>
 8009f88:	f1bb 0f20 	cmp.w	fp, #32
 8009f8c:	d107      	bne.n	8009f9e <__gethex+0x242>
 8009f8e:	9b02      	ldr	r3, [sp, #8]
 8009f90:	9a00      	ldr	r2, [sp, #0]
 8009f92:	f843 2b04 	str.w	r2, [r3], #4
 8009f96:	9302      	str	r3, [sp, #8]
 8009f98:	2300      	movs	r3, #0
 8009f9a:	9300      	str	r3, [sp, #0]
 8009f9c:	469b      	mov	fp, r3
 8009f9e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009fa2:	f7ff fec5 	bl	8009d30 <__hexdig_fun>
 8009fa6:	9b00      	ldr	r3, [sp, #0]
 8009fa8:	f000 000f 	and.w	r0, r0, #15
 8009fac:	fa00 f00b 	lsl.w	r0, r0, fp
 8009fb0:	4303      	orrs	r3, r0
 8009fb2:	9300      	str	r3, [sp, #0]
 8009fb4:	f10b 0b04 	add.w	fp, fp, #4
 8009fb8:	9b03      	ldr	r3, [sp, #12]
 8009fba:	e00d      	b.n	8009fd8 <__gethex+0x27c>
 8009fbc:	9b03      	ldr	r3, [sp, #12]
 8009fbe:	9a06      	ldr	r2, [sp, #24]
 8009fc0:	4413      	add	r3, r2
 8009fc2:	42bb      	cmp	r3, r7
 8009fc4:	d3e0      	bcc.n	8009f88 <__gethex+0x22c>
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	9901      	ldr	r1, [sp, #4]
 8009fca:	9307      	str	r3, [sp, #28]
 8009fcc:	4652      	mov	r2, sl
 8009fce:	f000 ff73 	bl	800aeb8 <strncmp>
 8009fd2:	9b07      	ldr	r3, [sp, #28]
 8009fd4:	2800      	cmp	r0, #0
 8009fd6:	d1d7      	bne.n	8009f88 <__gethex+0x22c>
 8009fd8:	461e      	mov	r6, r3
 8009fda:	e78b      	b.n	8009ef4 <__gethex+0x198>
 8009fdc:	f04f 0a03 	mov.w	sl, #3
 8009fe0:	e7b8      	b.n	8009f54 <__gethex+0x1f8>
 8009fe2:	da0a      	bge.n	8009ffa <__gethex+0x29e>
 8009fe4:	1a37      	subs	r7, r6, r0
 8009fe6:	4621      	mov	r1, r4
 8009fe8:	ee18 0a10 	vmov	r0, s16
 8009fec:	463a      	mov	r2, r7
 8009fee:	f000 fc39 	bl	800a864 <__lshift>
 8009ff2:	1bed      	subs	r5, r5, r7
 8009ff4:	4604      	mov	r4, r0
 8009ff6:	f100 0914 	add.w	r9, r0, #20
 8009ffa:	f04f 0a00 	mov.w	sl, #0
 8009ffe:	e7ae      	b.n	8009f5e <__gethex+0x202>
 800a000:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a004:	42a8      	cmp	r0, r5
 800a006:	dd72      	ble.n	800a0ee <__gethex+0x392>
 800a008:	1b45      	subs	r5, r0, r5
 800a00a:	42ae      	cmp	r6, r5
 800a00c:	dc36      	bgt.n	800a07c <__gethex+0x320>
 800a00e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a012:	2b02      	cmp	r3, #2
 800a014:	d02a      	beq.n	800a06c <__gethex+0x310>
 800a016:	2b03      	cmp	r3, #3
 800a018:	d02c      	beq.n	800a074 <__gethex+0x318>
 800a01a:	2b01      	cmp	r3, #1
 800a01c:	d11c      	bne.n	800a058 <__gethex+0x2fc>
 800a01e:	42ae      	cmp	r6, r5
 800a020:	d11a      	bne.n	800a058 <__gethex+0x2fc>
 800a022:	2e01      	cmp	r6, #1
 800a024:	d112      	bne.n	800a04c <__gethex+0x2f0>
 800a026:	9a04      	ldr	r2, [sp, #16]
 800a028:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a02c:	6013      	str	r3, [r2, #0]
 800a02e:	2301      	movs	r3, #1
 800a030:	6123      	str	r3, [r4, #16]
 800a032:	f8c9 3000 	str.w	r3, [r9]
 800a036:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a038:	2762      	movs	r7, #98	; 0x62
 800a03a:	601c      	str	r4, [r3, #0]
 800a03c:	e723      	b.n	8009e86 <__gethex+0x12a>
 800a03e:	bf00      	nop
 800a040:	0800bef8 	.word	0x0800bef8
 800a044:	0800be80 	.word	0x0800be80
 800a048:	0800be91 	.word	0x0800be91
 800a04c:	1e71      	subs	r1, r6, #1
 800a04e:	4620      	mov	r0, r4
 800a050:	f000 fe4c 	bl	800acec <__any_on>
 800a054:	2800      	cmp	r0, #0
 800a056:	d1e6      	bne.n	800a026 <__gethex+0x2ca>
 800a058:	ee18 0a10 	vmov	r0, s16
 800a05c:	4621      	mov	r1, r4
 800a05e:	f000 f9e5 	bl	800a42c <_Bfree>
 800a062:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a064:	2300      	movs	r3, #0
 800a066:	6013      	str	r3, [r2, #0]
 800a068:	2750      	movs	r7, #80	; 0x50
 800a06a:	e70c      	b.n	8009e86 <__gethex+0x12a>
 800a06c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d1f2      	bne.n	800a058 <__gethex+0x2fc>
 800a072:	e7d8      	b.n	800a026 <__gethex+0x2ca>
 800a074:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a076:	2b00      	cmp	r3, #0
 800a078:	d1d5      	bne.n	800a026 <__gethex+0x2ca>
 800a07a:	e7ed      	b.n	800a058 <__gethex+0x2fc>
 800a07c:	1e6f      	subs	r7, r5, #1
 800a07e:	f1ba 0f00 	cmp.w	sl, #0
 800a082:	d131      	bne.n	800a0e8 <__gethex+0x38c>
 800a084:	b127      	cbz	r7, 800a090 <__gethex+0x334>
 800a086:	4639      	mov	r1, r7
 800a088:	4620      	mov	r0, r4
 800a08a:	f000 fe2f 	bl	800acec <__any_on>
 800a08e:	4682      	mov	sl, r0
 800a090:	117b      	asrs	r3, r7, #5
 800a092:	2101      	movs	r1, #1
 800a094:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a098:	f007 071f 	and.w	r7, r7, #31
 800a09c:	fa01 f707 	lsl.w	r7, r1, r7
 800a0a0:	421f      	tst	r7, r3
 800a0a2:	4629      	mov	r1, r5
 800a0a4:	4620      	mov	r0, r4
 800a0a6:	bf18      	it	ne
 800a0a8:	f04a 0a02 	orrne.w	sl, sl, #2
 800a0ac:	1b76      	subs	r6, r6, r5
 800a0ae:	f7ff fded 	bl	8009c8c <rshift>
 800a0b2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a0b6:	2702      	movs	r7, #2
 800a0b8:	f1ba 0f00 	cmp.w	sl, #0
 800a0bc:	d048      	beq.n	800a150 <__gethex+0x3f4>
 800a0be:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a0c2:	2b02      	cmp	r3, #2
 800a0c4:	d015      	beq.n	800a0f2 <__gethex+0x396>
 800a0c6:	2b03      	cmp	r3, #3
 800a0c8:	d017      	beq.n	800a0fa <__gethex+0x39e>
 800a0ca:	2b01      	cmp	r3, #1
 800a0cc:	d109      	bne.n	800a0e2 <__gethex+0x386>
 800a0ce:	f01a 0f02 	tst.w	sl, #2
 800a0d2:	d006      	beq.n	800a0e2 <__gethex+0x386>
 800a0d4:	f8d9 0000 	ldr.w	r0, [r9]
 800a0d8:	ea4a 0a00 	orr.w	sl, sl, r0
 800a0dc:	f01a 0f01 	tst.w	sl, #1
 800a0e0:	d10e      	bne.n	800a100 <__gethex+0x3a4>
 800a0e2:	f047 0710 	orr.w	r7, r7, #16
 800a0e6:	e033      	b.n	800a150 <__gethex+0x3f4>
 800a0e8:	f04f 0a01 	mov.w	sl, #1
 800a0ec:	e7d0      	b.n	800a090 <__gethex+0x334>
 800a0ee:	2701      	movs	r7, #1
 800a0f0:	e7e2      	b.n	800a0b8 <__gethex+0x35c>
 800a0f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a0f4:	f1c3 0301 	rsb	r3, r3, #1
 800a0f8:	9315      	str	r3, [sp, #84]	; 0x54
 800a0fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d0f0      	beq.n	800a0e2 <__gethex+0x386>
 800a100:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a104:	f104 0314 	add.w	r3, r4, #20
 800a108:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a10c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a110:	f04f 0c00 	mov.w	ip, #0
 800a114:	4618      	mov	r0, r3
 800a116:	f853 2b04 	ldr.w	r2, [r3], #4
 800a11a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a11e:	d01c      	beq.n	800a15a <__gethex+0x3fe>
 800a120:	3201      	adds	r2, #1
 800a122:	6002      	str	r2, [r0, #0]
 800a124:	2f02      	cmp	r7, #2
 800a126:	f104 0314 	add.w	r3, r4, #20
 800a12a:	d13f      	bne.n	800a1ac <__gethex+0x450>
 800a12c:	f8d8 2000 	ldr.w	r2, [r8]
 800a130:	3a01      	subs	r2, #1
 800a132:	42b2      	cmp	r2, r6
 800a134:	d10a      	bne.n	800a14c <__gethex+0x3f0>
 800a136:	1171      	asrs	r1, r6, #5
 800a138:	2201      	movs	r2, #1
 800a13a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a13e:	f006 061f 	and.w	r6, r6, #31
 800a142:	fa02 f606 	lsl.w	r6, r2, r6
 800a146:	421e      	tst	r6, r3
 800a148:	bf18      	it	ne
 800a14a:	4617      	movne	r7, r2
 800a14c:	f047 0720 	orr.w	r7, r7, #32
 800a150:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a152:	601c      	str	r4, [r3, #0]
 800a154:	9b04      	ldr	r3, [sp, #16]
 800a156:	601d      	str	r5, [r3, #0]
 800a158:	e695      	b.n	8009e86 <__gethex+0x12a>
 800a15a:	4299      	cmp	r1, r3
 800a15c:	f843 cc04 	str.w	ip, [r3, #-4]
 800a160:	d8d8      	bhi.n	800a114 <__gethex+0x3b8>
 800a162:	68a3      	ldr	r3, [r4, #8]
 800a164:	459b      	cmp	fp, r3
 800a166:	db19      	blt.n	800a19c <__gethex+0x440>
 800a168:	6861      	ldr	r1, [r4, #4]
 800a16a:	ee18 0a10 	vmov	r0, s16
 800a16e:	3101      	adds	r1, #1
 800a170:	f000 f91c 	bl	800a3ac <_Balloc>
 800a174:	4681      	mov	r9, r0
 800a176:	b918      	cbnz	r0, 800a180 <__gethex+0x424>
 800a178:	4b1a      	ldr	r3, [pc, #104]	; (800a1e4 <__gethex+0x488>)
 800a17a:	4602      	mov	r2, r0
 800a17c:	2184      	movs	r1, #132	; 0x84
 800a17e:	e6a8      	b.n	8009ed2 <__gethex+0x176>
 800a180:	6922      	ldr	r2, [r4, #16]
 800a182:	3202      	adds	r2, #2
 800a184:	f104 010c 	add.w	r1, r4, #12
 800a188:	0092      	lsls	r2, r2, #2
 800a18a:	300c      	adds	r0, #12
 800a18c:	f000 f900 	bl	800a390 <memcpy>
 800a190:	4621      	mov	r1, r4
 800a192:	ee18 0a10 	vmov	r0, s16
 800a196:	f000 f949 	bl	800a42c <_Bfree>
 800a19a:	464c      	mov	r4, r9
 800a19c:	6923      	ldr	r3, [r4, #16]
 800a19e:	1c5a      	adds	r2, r3, #1
 800a1a0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a1a4:	6122      	str	r2, [r4, #16]
 800a1a6:	2201      	movs	r2, #1
 800a1a8:	615a      	str	r2, [r3, #20]
 800a1aa:	e7bb      	b.n	800a124 <__gethex+0x3c8>
 800a1ac:	6922      	ldr	r2, [r4, #16]
 800a1ae:	455a      	cmp	r2, fp
 800a1b0:	dd0b      	ble.n	800a1ca <__gethex+0x46e>
 800a1b2:	2101      	movs	r1, #1
 800a1b4:	4620      	mov	r0, r4
 800a1b6:	f7ff fd69 	bl	8009c8c <rshift>
 800a1ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a1be:	3501      	adds	r5, #1
 800a1c0:	42ab      	cmp	r3, r5
 800a1c2:	f6ff aed0 	blt.w	8009f66 <__gethex+0x20a>
 800a1c6:	2701      	movs	r7, #1
 800a1c8:	e7c0      	b.n	800a14c <__gethex+0x3f0>
 800a1ca:	f016 061f 	ands.w	r6, r6, #31
 800a1ce:	d0fa      	beq.n	800a1c6 <__gethex+0x46a>
 800a1d0:	4453      	add	r3, sl
 800a1d2:	f1c6 0620 	rsb	r6, r6, #32
 800a1d6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a1da:	f000 f9d9 	bl	800a590 <__hi0bits>
 800a1de:	42b0      	cmp	r0, r6
 800a1e0:	dbe7      	blt.n	800a1b2 <__gethex+0x456>
 800a1e2:	e7f0      	b.n	800a1c6 <__gethex+0x46a>
 800a1e4:	0800be80 	.word	0x0800be80

0800a1e8 <L_shift>:
 800a1e8:	f1c2 0208 	rsb	r2, r2, #8
 800a1ec:	0092      	lsls	r2, r2, #2
 800a1ee:	b570      	push	{r4, r5, r6, lr}
 800a1f0:	f1c2 0620 	rsb	r6, r2, #32
 800a1f4:	6843      	ldr	r3, [r0, #4]
 800a1f6:	6804      	ldr	r4, [r0, #0]
 800a1f8:	fa03 f506 	lsl.w	r5, r3, r6
 800a1fc:	432c      	orrs	r4, r5
 800a1fe:	40d3      	lsrs	r3, r2
 800a200:	6004      	str	r4, [r0, #0]
 800a202:	f840 3f04 	str.w	r3, [r0, #4]!
 800a206:	4288      	cmp	r0, r1
 800a208:	d3f4      	bcc.n	800a1f4 <L_shift+0xc>
 800a20a:	bd70      	pop	{r4, r5, r6, pc}

0800a20c <__match>:
 800a20c:	b530      	push	{r4, r5, lr}
 800a20e:	6803      	ldr	r3, [r0, #0]
 800a210:	3301      	adds	r3, #1
 800a212:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a216:	b914      	cbnz	r4, 800a21e <__match+0x12>
 800a218:	6003      	str	r3, [r0, #0]
 800a21a:	2001      	movs	r0, #1
 800a21c:	bd30      	pop	{r4, r5, pc}
 800a21e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a222:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a226:	2d19      	cmp	r5, #25
 800a228:	bf98      	it	ls
 800a22a:	3220      	addls	r2, #32
 800a22c:	42a2      	cmp	r2, r4
 800a22e:	d0f0      	beq.n	800a212 <__match+0x6>
 800a230:	2000      	movs	r0, #0
 800a232:	e7f3      	b.n	800a21c <__match+0x10>

0800a234 <__hexnan>:
 800a234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a238:	680b      	ldr	r3, [r1, #0]
 800a23a:	115e      	asrs	r6, r3, #5
 800a23c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a240:	f013 031f 	ands.w	r3, r3, #31
 800a244:	b087      	sub	sp, #28
 800a246:	bf18      	it	ne
 800a248:	3604      	addne	r6, #4
 800a24a:	2500      	movs	r5, #0
 800a24c:	1f37      	subs	r7, r6, #4
 800a24e:	4690      	mov	r8, r2
 800a250:	6802      	ldr	r2, [r0, #0]
 800a252:	9301      	str	r3, [sp, #4]
 800a254:	4682      	mov	sl, r0
 800a256:	f846 5c04 	str.w	r5, [r6, #-4]
 800a25a:	46b9      	mov	r9, r7
 800a25c:	463c      	mov	r4, r7
 800a25e:	9502      	str	r5, [sp, #8]
 800a260:	46ab      	mov	fp, r5
 800a262:	7851      	ldrb	r1, [r2, #1]
 800a264:	1c53      	adds	r3, r2, #1
 800a266:	9303      	str	r3, [sp, #12]
 800a268:	b341      	cbz	r1, 800a2bc <__hexnan+0x88>
 800a26a:	4608      	mov	r0, r1
 800a26c:	9205      	str	r2, [sp, #20]
 800a26e:	9104      	str	r1, [sp, #16]
 800a270:	f7ff fd5e 	bl	8009d30 <__hexdig_fun>
 800a274:	2800      	cmp	r0, #0
 800a276:	d14f      	bne.n	800a318 <__hexnan+0xe4>
 800a278:	9904      	ldr	r1, [sp, #16]
 800a27a:	9a05      	ldr	r2, [sp, #20]
 800a27c:	2920      	cmp	r1, #32
 800a27e:	d818      	bhi.n	800a2b2 <__hexnan+0x7e>
 800a280:	9b02      	ldr	r3, [sp, #8]
 800a282:	459b      	cmp	fp, r3
 800a284:	dd13      	ble.n	800a2ae <__hexnan+0x7a>
 800a286:	454c      	cmp	r4, r9
 800a288:	d206      	bcs.n	800a298 <__hexnan+0x64>
 800a28a:	2d07      	cmp	r5, #7
 800a28c:	dc04      	bgt.n	800a298 <__hexnan+0x64>
 800a28e:	462a      	mov	r2, r5
 800a290:	4649      	mov	r1, r9
 800a292:	4620      	mov	r0, r4
 800a294:	f7ff ffa8 	bl	800a1e8 <L_shift>
 800a298:	4544      	cmp	r4, r8
 800a29a:	d950      	bls.n	800a33e <__hexnan+0x10a>
 800a29c:	2300      	movs	r3, #0
 800a29e:	f1a4 0904 	sub.w	r9, r4, #4
 800a2a2:	f844 3c04 	str.w	r3, [r4, #-4]
 800a2a6:	f8cd b008 	str.w	fp, [sp, #8]
 800a2aa:	464c      	mov	r4, r9
 800a2ac:	461d      	mov	r5, r3
 800a2ae:	9a03      	ldr	r2, [sp, #12]
 800a2b0:	e7d7      	b.n	800a262 <__hexnan+0x2e>
 800a2b2:	2929      	cmp	r1, #41	; 0x29
 800a2b4:	d156      	bne.n	800a364 <__hexnan+0x130>
 800a2b6:	3202      	adds	r2, #2
 800a2b8:	f8ca 2000 	str.w	r2, [sl]
 800a2bc:	f1bb 0f00 	cmp.w	fp, #0
 800a2c0:	d050      	beq.n	800a364 <__hexnan+0x130>
 800a2c2:	454c      	cmp	r4, r9
 800a2c4:	d206      	bcs.n	800a2d4 <__hexnan+0xa0>
 800a2c6:	2d07      	cmp	r5, #7
 800a2c8:	dc04      	bgt.n	800a2d4 <__hexnan+0xa0>
 800a2ca:	462a      	mov	r2, r5
 800a2cc:	4649      	mov	r1, r9
 800a2ce:	4620      	mov	r0, r4
 800a2d0:	f7ff ff8a 	bl	800a1e8 <L_shift>
 800a2d4:	4544      	cmp	r4, r8
 800a2d6:	d934      	bls.n	800a342 <__hexnan+0x10e>
 800a2d8:	f1a8 0204 	sub.w	r2, r8, #4
 800a2dc:	4623      	mov	r3, r4
 800a2de:	f853 1b04 	ldr.w	r1, [r3], #4
 800a2e2:	f842 1f04 	str.w	r1, [r2, #4]!
 800a2e6:	429f      	cmp	r7, r3
 800a2e8:	d2f9      	bcs.n	800a2de <__hexnan+0xaa>
 800a2ea:	1b3b      	subs	r3, r7, r4
 800a2ec:	f023 0303 	bic.w	r3, r3, #3
 800a2f0:	3304      	adds	r3, #4
 800a2f2:	3401      	adds	r4, #1
 800a2f4:	3e03      	subs	r6, #3
 800a2f6:	42b4      	cmp	r4, r6
 800a2f8:	bf88      	it	hi
 800a2fa:	2304      	movhi	r3, #4
 800a2fc:	4443      	add	r3, r8
 800a2fe:	2200      	movs	r2, #0
 800a300:	f843 2b04 	str.w	r2, [r3], #4
 800a304:	429f      	cmp	r7, r3
 800a306:	d2fb      	bcs.n	800a300 <__hexnan+0xcc>
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	b91b      	cbnz	r3, 800a314 <__hexnan+0xe0>
 800a30c:	4547      	cmp	r7, r8
 800a30e:	d127      	bne.n	800a360 <__hexnan+0x12c>
 800a310:	2301      	movs	r3, #1
 800a312:	603b      	str	r3, [r7, #0]
 800a314:	2005      	movs	r0, #5
 800a316:	e026      	b.n	800a366 <__hexnan+0x132>
 800a318:	3501      	adds	r5, #1
 800a31a:	2d08      	cmp	r5, #8
 800a31c:	f10b 0b01 	add.w	fp, fp, #1
 800a320:	dd06      	ble.n	800a330 <__hexnan+0xfc>
 800a322:	4544      	cmp	r4, r8
 800a324:	d9c3      	bls.n	800a2ae <__hexnan+0x7a>
 800a326:	2300      	movs	r3, #0
 800a328:	f844 3c04 	str.w	r3, [r4, #-4]
 800a32c:	2501      	movs	r5, #1
 800a32e:	3c04      	subs	r4, #4
 800a330:	6822      	ldr	r2, [r4, #0]
 800a332:	f000 000f 	and.w	r0, r0, #15
 800a336:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a33a:	6022      	str	r2, [r4, #0]
 800a33c:	e7b7      	b.n	800a2ae <__hexnan+0x7a>
 800a33e:	2508      	movs	r5, #8
 800a340:	e7b5      	b.n	800a2ae <__hexnan+0x7a>
 800a342:	9b01      	ldr	r3, [sp, #4]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d0df      	beq.n	800a308 <__hexnan+0xd4>
 800a348:	f04f 32ff 	mov.w	r2, #4294967295
 800a34c:	f1c3 0320 	rsb	r3, r3, #32
 800a350:	fa22 f303 	lsr.w	r3, r2, r3
 800a354:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a358:	401a      	ands	r2, r3
 800a35a:	f846 2c04 	str.w	r2, [r6, #-4]
 800a35e:	e7d3      	b.n	800a308 <__hexnan+0xd4>
 800a360:	3f04      	subs	r7, #4
 800a362:	e7d1      	b.n	800a308 <__hexnan+0xd4>
 800a364:	2004      	movs	r0, #4
 800a366:	b007      	add	sp, #28
 800a368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a36c <__ascii_mbtowc>:
 800a36c:	b082      	sub	sp, #8
 800a36e:	b901      	cbnz	r1, 800a372 <__ascii_mbtowc+0x6>
 800a370:	a901      	add	r1, sp, #4
 800a372:	b142      	cbz	r2, 800a386 <__ascii_mbtowc+0x1a>
 800a374:	b14b      	cbz	r3, 800a38a <__ascii_mbtowc+0x1e>
 800a376:	7813      	ldrb	r3, [r2, #0]
 800a378:	600b      	str	r3, [r1, #0]
 800a37a:	7812      	ldrb	r2, [r2, #0]
 800a37c:	1e10      	subs	r0, r2, #0
 800a37e:	bf18      	it	ne
 800a380:	2001      	movne	r0, #1
 800a382:	b002      	add	sp, #8
 800a384:	4770      	bx	lr
 800a386:	4610      	mov	r0, r2
 800a388:	e7fb      	b.n	800a382 <__ascii_mbtowc+0x16>
 800a38a:	f06f 0001 	mvn.w	r0, #1
 800a38e:	e7f8      	b.n	800a382 <__ascii_mbtowc+0x16>

0800a390 <memcpy>:
 800a390:	440a      	add	r2, r1
 800a392:	4291      	cmp	r1, r2
 800a394:	f100 33ff 	add.w	r3, r0, #4294967295
 800a398:	d100      	bne.n	800a39c <memcpy+0xc>
 800a39a:	4770      	bx	lr
 800a39c:	b510      	push	{r4, lr}
 800a39e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a3a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a3a6:	4291      	cmp	r1, r2
 800a3a8:	d1f9      	bne.n	800a39e <memcpy+0xe>
 800a3aa:	bd10      	pop	{r4, pc}

0800a3ac <_Balloc>:
 800a3ac:	b570      	push	{r4, r5, r6, lr}
 800a3ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a3b0:	4604      	mov	r4, r0
 800a3b2:	460d      	mov	r5, r1
 800a3b4:	b976      	cbnz	r6, 800a3d4 <_Balloc+0x28>
 800a3b6:	2010      	movs	r0, #16
 800a3b8:	f000 fdd0 	bl	800af5c <malloc>
 800a3bc:	4602      	mov	r2, r0
 800a3be:	6260      	str	r0, [r4, #36]	; 0x24
 800a3c0:	b920      	cbnz	r0, 800a3cc <_Balloc+0x20>
 800a3c2:	4b18      	ldr	r3, [pc, #96]	; (800a424 <_Balloc+0x78>)
 800a3c4:	4818      	ldr	r0, [pc, #96]	; (800a428 <_Balloc+0x7c>)
 800a3c6:	2166      	movs	r1, #102	; 0x66
 800a3c8:	f000 fd98 	bl	800aefc <__assert_func>
 800a3cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a3d0:	6006      	str	r6, [r0, #0]
 800a3d2:	60c6      	str	r6, [r0, #12]
 800a3d4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a3d6:	68f3      	ldr	r3, [r6, #12]
 800a3d8:	b183      	cbz	r3, 800a3fc <_Balloc+0x50>
 800a3da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a3dc:	68db      	ldr	r3, [r3, #12]
 800a3de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a3e2:	b9b8      	cbnz	r0, 800a414 <_Balloc+0x68>
 800a3e4:	2101      	movs	r1, #1
 800a3e6:	fa01 f605 	lsl.w	r6, r1, r5
 800a3ea:	1d72      	adds	r2, r6, #5
 800a3ec:	0092      	lsls	r2, r2, #2
 800a3ee:	4620      	mov	r0, r4
 800a3f0:	f000 fc9d 	bl	800ad2e <_calloc_r>
 800a3f4:	b160      	cbz	r0, 800a410 <_Balloc+0x64>
 800a3f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a3fa:	e00e      	b.n	800a41a <_Balloc+0x6e>
 800a3fc:	2221      	movs	r2, #33	; 0x21
 800a3fe:	2104      	movs	r1, #4
 800a400:	4620      	mov	r0, r4
 800a402:	f000 fc94 	bl	800ad2e <_calloc_r>
 800a406:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a408:	60f0      	str	r0, [r6, #12]
 800a40a:	68db      	ldr	r3, [r3, #12]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d1e4      	bne.n	800a3da <_Balloc+0x2e>
 800a410:	2000      	movs	r0, #0
 800a412:	bd70      	pop	{r4, r5, r6, pc}
 800a414:	6802      	ldr	r2, [r0, #0]
 800a416:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a41a:	2300      	movs	r3, #0
 800a41c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a420:	e7f7      	b.n	800a412 <_Balloc+0x66>
 800a422:	bf00      	nop
 800a424:	0800bf0c 	.word	0x0800bf0c
 800a428:	0800bf23 	.word	0x0800bf23

0800a42c <_Bfree>:
 800a42c:	b570      	push	{r4, r5, r6, lr}
 800a42e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a430:	4605      	mov	r5, r0
 800a432:	460c      	mov	r4, r1
 800a434:	b976      	cbnz	r6, 800a454 <_Bfree+0x28>
 800a436:	2010      	movs	r0, #16
 800a438:	f000 fd90 	bl	800af5c <malloc>
 800a43c:	4602      	mov	r2, r0
 800a43e:	6268      	str	r0, [r5, #36]	; 0x24
 800a440:	b920      	cbnz	r0, 800a44c <_Bfree+0x20>
 800a442:	4b09      	ldr	r3, [pc, #36]	; (800a468 <_Bfree+0x3c>)
 800a444:	4809      	ldr	r0, [pc, #36]	; (800a46c <_Bfree+0x40>)
 800a446:	218a      	movs	r1, #138	; 0x8a
 800a448:	f000 fd58 	bl	800aefc <__assert_func>
 800a44c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a450:	6006      	str	r6, [r0, #0]
 800a452:	60c6      	str	r6, [r0, #12]
 800a454:	b13c      	cbz	r4, 800a466 <_Bfree+0x3a>
 800a456:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a458:	6862      	ldr	r2, [r4, #4]
 800a45a:	68db      	ldr	r3, [r3, #12]
 800a45c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a460:	6021      	str	r1, [r4, #0]
 800a462:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a466:	bd70      	pop	{r4, r5, r6, pc}
 800a468:	0800bf0c 	.word	0x0800bf0c
 800a46c:	0800bf23 	.word	0x0800bf23

0800a470 <__multadd>:
 800a470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a474:	690d      	ldr	r5, [r1, #16]
 800a476:	4607      	mov	r7, r0
 800a478:	460c      	mov	r4, r1
 800a47a:	461e      	mov	r6, r3
 800a47c:	f101 0c14 	add.w	ip, r1, #20
 800a480:	2000      	movs	r0, #0
 800a482:	f8dc 3000 	ldr.w	r3, [ip]
 800a486:	b299      	uxth	r1, r3
 800a488:	fb02 6101 	mla	r1, r2, r1, r6
 800a48c:	0c1e      	lsrs	r6, r3, #16
 800a48e:	0c0b      	lsrs	r3, r1, #16
 800a490:	fb02 3306 	mla	r3, r2, r6, r3
 800a494:	b289      	uxth	r1, r1
 800a496:	3001      	adds	r0, #1
 800a498:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a49c:	4285      	cmp	r5, r0
 800a49e:	f84c 1b04 	str.w	r1, [ip], #4
 800a4a2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a4a6:	dcec      	bgt.n	800a482 <__multadd+0x12>
 800a4a8:	b30e      	cbz	r6, 800a4ee <__multadd+0x7e>
 800a4aa:	68a3      	ldr	r3, [r4, #8]
 800a4ac:	42ab      	cmp	r3, r5
 800a4ae:	dc19      	bgt.n	800a4e4 <__multadd+0x74>
 800a4b0:	6861      	ldr	r1, [r4, #4]
 800a4b2:	4638      	mov	r0, r7
 800a4b4:	3101      	adds	r1, #1
 800a4b6:	f7ff ff79 	bl	800a3ac <_Balloc>
 800a4ba:	4680      	mov	r8, r0
 800a4bc:	b928      	cbnz	r0, 800a4ca <__multadd+0x5a>
 800a4be:	4602      	mov	r2, r0
 800a4c0:	4b0c      	ldr	r3, [pc, #48]	; (800a4f4 <__multadd+0x84>)
 800a4c2:	480d      	ldr	r0, [pc, #52]	; (800a4f8 <__multadd+0x88>)
 800a4c4:	21b5      	movs	r1, #181	; 0xb5
 800a4c6:	f000 fd19 	bl	800aefc <__assert_func>
 800a4ca:	6922      	ldr	r2, [r4, #16]
 800a4cc:	3202      	adds	r2, #2
 800a4ce:	f104 010c 	add.w	r1, r4, #12
 800a4d2:	0092      	lsls	r2, r2, #2
 800a4d4:	300c      	adds	r0, #12
 800a4d6:	f7ff ff5b 	bl	800a390 <memcpy>
 800a4da:	4621      	mov	r1, r4
 800a4dc:	4638      	mov	r0, r7
 800a4de:	f7ff ffa5 	bl	800a42c <_Bfree>
 800a4e2:	4644      	mov	r4, r8
 800a4e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a4e8:	3501      	adds	r5, #1
 800a4ea:	615e      	str	r6, [r3, #20]
 800a4ec:	6125      	str	r5, [r4, #16]
 800a4ee:	4620      	mov	r0, r4
 800a4f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4f4:	0800be80 	.word	0x0800be80
 800a4f8:	0800bf23 	.word	0x0800bf23

0800a4fc <__s2b>:
 800a4fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a500:	460c      	mov	r4, r1
 800a502:	4615      	mov	r5, r2
 800a504:	461f      	mov	r7, r3
 800a506:	2209      	movs	r2, #9
 800a508:	3308      	adds	r3, #8
 800a50a:	4606      	mov	r6, r0
 800a50c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a510:	2100      	movs	r1, #0
 800a512:	2201      	movs	r2, #1
 800a514:	429a      	cmp	r2, r3
 800a516:	db09      	blt.n	800a52c <__s2b+0x30>
 800a518:	4630      	mov	r0, r6
 800a51a:	f7ff ff47 	bl	800a3ac <_Balloc>
 800a51e:	b940      	cbnz	r0, 800a532 <__s2b+0x36>
 800a520:	4602      	mov	r2, r0
 800a522:	4b19      	ldr	r3, [pc, #100]	; (800a588 <__s2b+0x8c>)
 800a524:	4819      	ldr	r0, [pc, #100]	; (800a58c <__s2b+0x90>)
 800a526:	21ce      	movs	r1, #206	; 0xce
 800a528:	f000 fce8 	bl	800aefc <__assert_func>
 800a52c:	0052      	lsls	r2, r2, #1
 800a52e:	3101      	adds	r1, #1
 800a530:	e7f0      	b.n	800a514 <__s2b+0x18>
 800a532:	9b08      	ldr	r3, [sp, #32]
 800a534:	6143      	str	r3, [r0, #20]
 800a536:	2d09      	cmp	r5, #9
 800a538:	f04f 0301 	mov.w	r3, #1
 800a53c:	6103      	str	r3, [r0, #16]
 800a53e:	dd16      	ble.n	800a56e <__s2b+0x72>
 800a540:	f104 0909 	add.w	r9, r4, #9
 800a544:	46c8      	mov	r8, r9
 800a546:	442c      	add	r4, r5
 800a548:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a54c:	4601      	mov	r1, r0
 800a54e:	3b30      	subs	r3, #48	; 0x30
 800a550:	220a      	movs	r2, #10
 800a552:	4630      	mov	r0, r6
 800a554:	f7ff ff8c 	bl	800a470 <__multadd>
 800a558:	45a0      	cmp	r8, r4
 800a55a:	d1f5      	bne.n	800a548 <__s2b+0x4c>
 800a55c:	f1a5 0408 	sub.w	r4, r5, #8
 800a560:	444c      	add	r4, r9
 800a562:	1b2d      	subs	r5, r5, r4
 800a564:	1963      	adds	r3, r4, r5
 800a566:	42bb      	cmp	r3, r7
 800a568:	db04      	blt.n	800a574 <__s2b+0x78>
 800a56a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a56e:	340a      	adds	r4, #10
 800a570:	2509      	movs	r5, #9
 800a572:	e7f6      	b.n	800a562 <__s2b+0x66>
 800a574:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a578:	4601      	mov	r1, r0
 800a57a:	3b30      	subs	r3, #48	; 0x30
 800a57c:	220a      	movs	r2, #10
 800a57e:	4630      	mov	r0, r6
 800a580:	f7ff ff76 	bl	800a470 <__multadd>
 800a584:	e7ee      	b.n	800a564 <__s2b+0x68>
 800a586:	bf00      	nop
 800a588:	0800be80 	.word	0x0800be80
 800a58c:	0800bf23 	.word	0x0800bf23

0800a590 <__hi0bits>:
 800a590:	0c03      	lsrs	r3, r0, #16
 800a592:	041b      	lsls	r3, r3, #16
 800a594:	b9d3      	cbnz	r3, 800a5cc <__hi0bits+0x3c>
 800a596:	0400      	lsls	r0, r0, #16
 800a598:	2310      	movs	r3, #16
 800a59a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a59e:	bf04      	itt	eq
 800a5a0:	0200      	lsleq	r0, r0, #8
 800a5a2:	3308      	addeq	r3, #8
 800a5a4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a5a8:	bf04      	itt	eq
 800a5aa:	0100      	lsleq	r0, r0, #4
 800a5ac:	3304      	addeq	r3, #4
 800a5ae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a5b2:	bf04      	itt	eq
 800a5b4:	0080      	lsleq	r0, r0, #2
 800a5b6:	3302      	addeq	r3, #2
 800a5b8:	2800      	cmp	r0, #0
 800a5ba:	db05      	blt.n	800a5c8 <__hi0bits+0x38>
 800a5bc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a5c0:	f103 0301 	add.w	r3, r3, #1
 800a5c4:	bf08      	it	eq
 800a5c6:	2320      	moveq	r3, #32
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	4770      	bx	lr
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	e7e4      	b.n	800a59a <__hi0bits+0xa>

0800a5d0 <__lo0bits>:
 800a5d0:	6803      	ldr	r3, [r0, #0]
 800a5d2:	f013 0207 	ands.w	r2, r3, #7
 800a5d6:	4601      	mov	r1, r0
 800a5d8:	d00b      	beq.n	800a5f2 <__lo0bits+0x22>
 800a5da:	07da      	lsls	r2, r3, #31
 800a5dc:	d423      	bmi.n	800a626 <__lo0bits+0x56>
 800a5de:	0798      	lsls	r0, r3, #30
 800a5e0:	bf49      	itett	mi
 800a5e2:	085b      	lsrmi	r3, r3, #1
 800a5e4:	089b      	lsrpl	r3, r3, #2
 800a5e6:	2001      	movmi	r0, #1
 800a5e8:	600b      	strmi	r3, [r1, #0]
 800a5ea:	bf5c      	itt	pl
 800a5ec:	600b      	strpl	r3, [r1, #0]
 800a5ee:	2002      	movpl	r0, #2
 800a5f0:	4770      	bx	lr
 800a5f2:	b298      	uxth	r0, r3
 800a5f4:	b9a8      	cbnz	r0, 800a622 <__lo0bits+0x52>
 800a5f6:	0c1b      	lsrs	r3, r3, #16
 800a5f8:	2010      	movs	r0, #16
 800a5fa:	b2da      	uxtb	r2, r3
 800a5fc:	b90a      	cbnz	r2, 800a602 <__lo0bits+0x32>
 800a5fe:	3008      	adds	r0, #8
 800a600:	0a1b      	lsrs	r3, r3, #8
 800a602:	071a      	lsls	r2, r3, #28
 800a604:	bf04      	itt	eq
 800a606:	091b      	lsreq	r3, r3, #4
 800a608:	3004      	addeq	r0, #4
 800a60a:	079a      	lsls	r2, r3, #30
 800a60c:	bf04      	itt	eq
 800a60e:	089b      	lsreq	r3, r3, #2
 800a610:	3002      	addeq	r0, #2
 800a612:	07da      	lsls	r2, r3, #31
 800a614:	d403      	bmi.n	800a61e <__lo0bits+0x4e>
 800a616:	085b      	lsrs	r3, r3, #1
 800a618:	f100 0001 	add.w	r0, r0, #1
 800a61c:	d005      	beq.n	800a62a <__lo0bits+0x5a>
 800a61e:	600b      	str	r3, [r1, #0]
 800a620:	4770      	bx	lr
 800a622:	4610      	mov	r0, r2
 800a624:	e7e9      	b.n	800a5fa <__lo0bits+0x2a>
 800a626:	2000      	movs	r0, #0
 800a628:	4770      	bx	lr
 800a62a:	2020      	movs	r0, #32
 800a62c:	4770      	bx	lr
	...

0800a630 <__i2b>:
 800a630:	b510      	push	{r4, lr}
 800a632:	460c      	mov	r4, r1
 800a634:	2101      	movs	r1, #1
 800a636:	f7ff feb9 	bl	800a3ac <_Balloc>
 800a63a:	4602      	mov	r2, r0
 800a63c:	b928      	cbnz	r0, 800a64a <__i2b+0x1a>
 800a63e:	4b05      	ldr	r3, [pc, #20]	; (800a654 <__i2b+0x24>)
 800a640:	4805      	ldr	r0, [pc, #20]	; (800a658 <__i2b+0x28>)
 800a642:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a646:	f000 fc59 	bl	800aefc <__assert_func>
 800a64a:	2301      	movs	r3, #1
 800a64c:	6144      	str	r4, [r0, #20]
 800a64e:	6103      	str	r3, [r0, #16]
 800a650:	bd10      	pop	{r4, pc}
 800a652:	bf00      	nop
 800a654:	0800be80 	.word	0x0800be80
 800a658:	0800bf23 	.word	0x0800bf23

0800a65c <__multiply>:
 800a65c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a660:	4691      	mov	r9, r2
 800a662:	690a      	ldr	r2, [r1, #16]
 800a664:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a668:	429a      	cmp	r2, r3
 800a66a:	bfb8      	it	lt
 800a66c:	460b      	movlt	r3, r1
 800a66e:	460c      	mov	r4, r1
 800a670:	bfbc      	itt	lt
 800a672:	464c      	movlt	r4, r9
 800a674:	4699      	movlt	r9, r3
 800a676:	6927      	ldr	r7, [r4, #16]
 800a678:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a67c:	68a3      	ldr	r3, [r4, #8]
 800a67e:	6861      	ldr	r1, [r4, #4]
 800a680:	eb07 060a 	add.w	r6, r7, sl
 800a684:	42b3      	cmp	r3, r6
 800a686:	b085      	sub	sp, #20
 800a688:	bfb8      	it	lt
 800a68a:	3101      	addlt	r1, #1
 800a68c:	f7ff fe8e 	bl	800a3ac <_Balloc>
 800a690:	b930      	cbnz	r0, 800a6a0 <__multiply+0x44>
 800a692:	4602      	mov	r2, r0
 800a694:	4b44      	ldr	r3, [pc, #272]	; (800a7a8 <__multiply+0x14c>)
 800a696:	4845      	ldr	r0, [pc, #276]	; (800a7ac <__multiply+0x150>)
 800a698:	f240 115d 	movw	r1, #349	; 0x15d
 800a69c:	f000 fc2e 	bl	800aefc <__assert_func>
 800a6a0:	f100 0514 	add.w	r5, r0, #20
 800a6a4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a6a8:	462b      	mov	r3, r5
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	4543      	cmp	r3, r8
 800a6ae:	d321      	bcc.n	800a6f4 <__multiply+0x98>
 800a6b0:	f104 0314 	add.w	r3, r4, #20
 800a6b4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a6b8:	f109 0314 	add.w	r3, r9, #20
 800a6bc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a6c0:	9202      	str	r2, [sp, #8]
 800a6c2:	1b3a      	subs	r2, r7, r4
 800a6c4:	3a15      	subs	r2, #21
 800a6c6:	f022 0203 	bic.w	r2, r2, #3
 800a6ca:	3204      	adds	r2, #4
 800a6cc:	f104 0115 	add.w	r1, r4, #21
 800a6d0:	428f      	cmp	r7, r1
 800a6d2:	bf38      	it	cc
 800a6d4:	2204      	movcc	r2, #4
 800a6d6:	9201      	str	r2, [sp, #4]
 800a6d8:	9a02      	ldr	r2, [sp, #8]
 800a6da:	9303      	str	r3, [sp, #12]
 800a6dc:	429a      	cmp	r2, r3
 800a6de:	d80c      	bhi.n	800a6fa <__multiply+0x9e>
 800a6e0:	2e00      	cmp	r6, #0
 800a6e2:	dd03      	ble.n	800a6ec <__multiply+0x90>
 800a6e4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d05a      	beq.n	800a7a2 <__multiply+0x146>
 800a6ec:	6106      	str	r6, [r0, #16]
 800a6ee:	b005      	add	sp, #20
 800a6f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6f4:	f843 2b04 	str.w	r2, [r3], #4
 800a6f8:	e7d8      	b.n	800a6ac <__multiply+0x50>
 800a6fa:	f8b3 a000 	ldrh.w	sl, [r3]
 800a6fe:	f1ba 0f00 	cmp.w	sl, #0
 800a702:	d024      	beq.n	800a74e <__multiply+0xf2>
 800a704:	f104 0e14 	add.w	lr, r4, #20
 800a708:	46a9      	mov	r9, r5
 800a70a:	f04f 0c00 	mov.w	ip, #0
 800a70e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a712:	f8d9 1000 	ldr.w	r1, [r9]
 800a716:	fa1f fb82 	uxth.w	fp, r2
 800a71a:	b289      	uxth	r1, r1
 800a71c:	fb0a 110b 	mla	r1, sl, fp, r1
 800a720:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a724:	f8d9 2000 	ldr.w	r2, [r9]
 800a728:	4461      	add	r1, ip
 800a72a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a72e:	fb0a c20b 	mla	r2, sl, fp, ip
 800a732:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a736:	b289      	uxth	r1, r1
 800a738:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a73c:	4577      	cmp	r7, lr
 800a73e:	f849 1b04 	str.w	r1, [r9], #4
 800a742:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a746:	d8e2      	bhi.n	800a70e <__multiply+0xb2>
 800a748:	9a01      	ldr	r2, [sp, #4]
 800a74a:	f845 c002 	str.w	ip, [r5, r2]
 800a74e:	9a03      	ldr	r2, [sp, #12]
 800a750:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a754:	3304      	adds	r3, #4
 800a756:	f1b9 0f00 	cmp.w	r9, #0
 800a75a:	d020      	beq.n	800a79e <__multiply+0x142>
 800a75c:	6829      	ldr	r1, [r5, #0]
 800a75e:	f104 0c14 	add.w	ip, r4, #20
 800a762:	46ae      	mov	lr, r5
 800a764:	f04f 0a00 	mov.w	sl, #0
 800a768:	f8bc b000 	ldrh.w	fp, [ip]
 800a76c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a770:	fb09 220b 	mla	r2, r9, fp, r2
 800a774:	4492      	add	sl, r2
 800a776:	b289      	uxth	r1, r1
 800a778:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a77c:	f84e 1b04 	str.w	r1, [lr], #4
 800a780:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a784:	f8be 1000 	ldrh.w	r1, [lr]
 800a788:	0c12      	lsrs	r2, r2, #16
 800a78a:	fb09 1102 	mla	r1, r9, r2, r1
 800a78e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a792:	4567      	cmp	r7, ip
 800a794:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a798:	d8e6      	bhi.n	800a768 <__multiply+0x10c>
 800a79a:	9a01      	ldr	r2, [sp, #4]
 800a79c:	50a9      	str	r1, [r5, r2]
 800a79e:	3504      	adds	r5, #4
 800a7a0:	e79a      	b.n	800a6d8 <__multiply+0x7c>
 800a7a2:	3e01      	subs	r6, #1
 800a7a4:	e79c      	b.n	800a6e0 <__multiply+0x84>
 800a7a6:	bf00      	nop
 800a7a8:	0800be80 	.word	0x0800be80
 800a7ac:	0800bf23 	.word	0x0800bf23

0800a7b0 <__pow5mult>:
 800a7b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7b4:	4615      	mov	r5, r2
 800a7b6:	f012 0203 	ands.w	r2, r2, #3
 800a7ba:	4606      	mov	r6, r0
 800a7bc:	460f      	mov	r7, r1
 800a7be:	d007      	beq.n	800a7d0 <__pow5mult+0x20>
 800a7c0:	4c25      	ldr	r4, [pc, #148]	; (800a858 <__pow5mult+0xa8>)
 800a7c2:	3a01      	subs	r2, #1
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a7ca:	f7ff fe51 	bl	800a470 <__multadd>
 800a7ce:	4607      	mov	r7, r0
 800a7d0:	10ad      	asrs	r5, r5, #2
 800a7d2:	d03d      	beq.n	800a850 <__pow5mult+0xa0>
 800a7d4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a7d6:	b97c      	cbnz	r4, 800a7f8 <__pow5mult+0x48>
 800a7d8:	2010      	movs	r0, #16
 800a7da:	f000 fbbf 	bl	800af5c <malloc>
 800a7de:	4602      	mov	r2, r0
 800a7e0:	6270      	str	r0, [r6, #36]	; 0x24
 800a7e2:	b928      	cbnz	r0, 800a7f0 <__pow5mult+0x40>
 800a7e4:	4b1d      	ldr	r3, [pc, #116]	; (800a85c <__pow5mult+0xac>)
 800a7e6:	481e      	ldr	r0, [pc, #120]	; (800a860 <__pow5mult+0xb0>)
 800a7e8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a7ec:	f000 fb86 	bl	800aefc <__assert_func>
 800a7f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a7f4:	6004      	str	r4, [r0, #0]
 800a7f6:	60c4      	str	r4, [r0, #12]
 800a7f8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a7fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a800:	b94c      	cbnz	r4, 800a816 <__pow5mult+0x66>
 800a802:	f240 2171 	movw	r1, #625	; 0x271
 800a806:	4630      	mov	r0, r6
 800a808:	f7ff ff12 	bl	800a630 <__i2b>
 800a80c:	2300      	movs	r3, #0
 800a80e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a812:	4604      	mov	r4, r0
 800a814:	6003      	str	r3, [r0, #0]
 800a816:	f04f 0900 	mov.w	r9, #0
 800a81a:	07eb      	lsls	r3, r5, #31
 800a81c:	d50a      	bpl.n	800a834 <__pow5mult+0x84>
 800a81e:	4639      	mov	r1, r7
 800a820:	4622      	mov	r2, r4
 800a822:	4630      	mov	r0, r6
 800a824:	f7ff ff1a 	bl	800a65c <__multiply>
 800a828:	4639      	mov	r1, r7
 800a82a:	4680      	mov	r8, r0
 800a82c:	4630      	mov	r0, r6
 800a82e:	f7ff fdfd 	bl	800a42c <_Bfree>
 800a832:	4647      	mov	r7, r8
 800a834:	106d      	asrs	r5, r5, #1
 800a836:	d00b      	beq.n	800a850 <__pow5mult+0xa0>
 800a838:	6820      	ldr	r0, [r4, #0]
 800a83a:	b938      	cbnz	r0, 800a84c <__pow5mult+0x9c>
 800a83c:	4622      	mov	r2, r4
 800a83e:	4621      	mov	r1, r4
 800a840:	4630      	mov	r0, r6
 800a842:	f7ff ff0b 	bl	800a65c <__multiply>
 800a846:	6020      	str	r0, [r4, #0]
 800a848:	f8c0 9000 	str.w	r9, [r0]
 800a84c:	4604      	mov	r4, r0
 800a84e:	e7e4      	b.n	800a81a <__pow5mult+0x6a>
 800a850:	4638      	mov	r0, r7
 800a852:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a856:	bf00      	nop
 800a858:	0800c070 	.word	0x0800c070
 800a85c:	0800bf0c 	.word	0x0800bf0c
 800a860:	0800bf23 	.word	0x0800bf23

0800a864 <__lshift>:
 800a864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a868:	460c      	mov	r4, r1
 800a86a:	6849      	ldr	r1, [r1, #4]
 800a86c:	6923      	ldr	r3, [r4, #16]
 800a86e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a872:	68a3      	ldr	r3, [r4, #8]
 800a874:	4607      	mov	r7, r0
 800a876:	4691      	mov	r9, r2
 800a878:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a87c:	f108 0601 	add.w	r6, r8, #1
 800a880:	42b3      	cmp	r3, r6
 800a882:	db0b      	blt.n	800a89c <__lshift+0x38>
 800a884:	4638      	mov	r0, r7
 800a886:	f7ff fd91 	bl	800a3ac <_Balloc>
 800a88a:	4605      	mov	r5, r0
 800a88c:	b948      	cbnz	r0, 800a8a2 <__lshift+0x3e>
 800a88e:	4602      	mov	r2, r0
 800a890:	4b2a      	ldr	r3, [pc, #168]	; (800a93c <__lshift+0xd8>)
 800a892:	482b      	ldr	r0, [pc, #172]	; (800a940 <__lshift+0xdc>)
 800a894:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a898:	f000 fb30 	bl	800aefc <__assert_func>
 800a89c:	3101      	adds	r1, #1
 800a89e:	005b      	lsls	r3, r3, #1
 800a8a0:	e7ee      	b.n	800a880 <__lshift+0x1c>
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	f100 0114 	add.w	r1, r0, #20
 800a8a8:	f100 0210 	add.w	r2, r0, #16
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	4553      	cmp	r3, sl
 800a8b0:	db37      	blt.n	800a922 <__lshift+0xbe>
 800a8b2:	6920      	ldr	r0, [r4, #16]
 800a8b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a8b8:	f104 0314 	add.w	r3, r4, #20
 800a8bc:	f019 091f 	ands.w	r9, r9, #31
 800a8c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a8c4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a8c8:	d02f      	beq.n	800a92a <__lshift+0xc6>
 800a8ca:	f1c9 0e20 	rsb	lr, r9, #32
 800a8ce:	468a      	mov	sl, r1
 800a8d0:	f04f 0c00 	mov.w	ip, #0
 800a8d4:	681a      	ldr	r2, [r3, #0]
 800a8d6:	fa02 f209 	lsl.w	r2, r2, r9
 800a8da:	ea42 020c 	orr.w	r2, r2, ip
 800a8de:	f84a 2b04 	str.w	r2, [sl], #4
 800a8e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8e6:	4298      	cmp	r0, r3
 800a8e8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a8ec:	d8f2      	bhi.n	800a8d4 <__lshift+0x70>
 800a8ee:	1b03      	subs	r3, r0, r4
 800a8f0:	3b15      	subs	r3, #21
 800a8f2:	f023 0303 	bic.w	r3, r3, #3
 800a8f6:	3304      	adds	r3, #4
 800a8f8:	f104 0215 	add.w	r2, r4, #21
 800a8fc:	4290      	cmp	r0, r2
 800a8fe:	bf38      	it	cc
 800a900:	2304      	movcc	r3, #4
 800a902:	f841 c003 	str.w	ip, [r1, r3]
 800a906:	f1bc 0f00 	cmp.w	ip, #0
 800a90a:	d001      	beq.n	800a910 <__lshift+0xac>
 800a90c:	f108 0602 	add.w	r6, r8, #2
 800a910:	3e01      	subs	r6, #1
 800a912:	4638      	mov	r0, r7
 800a914:	612e      	str	r6, [r5, #16]
 800a916:	4621      	mov	r1, r4
 800a918:	f7ff fd88 	bl	800a42c <_Bfree>
 800a91c:	4628      	mov	r0, r5
 800a91e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a922:	f842 0f04 	str.w	r0, [r2, #4]!
 800a926:	3301      	adds	r3, #1
 800a928:	e7c1      	b.n	800a8ae <__lshift+0x4a>
 800a92a:	3904      	subs	r1, #4
 800a92c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a930:	f841 2f04 	str.w	r2, [r1, #4]!
 800a934:	4298      	cmp	r0, r3
 800a936:	d8f9      	bhi.n	800a92c <__lshift+0xc8>
 800a938:	e7ea      	b.n	800a910 <__lshift+0xac>
 800a93a:	bf00      	nop
 800a93c:	0800be80 	.word	0x0800be80
 800a940:	0800bf23 	.word	0x0800bf23

0800a944 <__mcmp>:
 800a944:	b530      	push	{r4, r5, lr}
 800a946:	6902      	ldr	r2, [r0, #16]
 800a948:	690c      	ldr	r4, [r1, #16]
 800a94a:	1b12      	subs	r2, r2, r4
 800a94c:	d10e      	bne.n	800a96c <__mcmp+0x28>
 800a94e:	f100 0314 	add.w	r3, r0, #20
 800a952:	3114      	adds	r1, #20
 800a954:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a958:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a95c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a960:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a964:	42a5      	cmp	r5, r4
 800a966:	d003      	beq.n	800a970 <__mcmp+0x2c>
 800a968:	d305      	bcc.n	800a976 <__mcmp+0x32>
 800a96a:	2201      	movs	r2, #1
 800a96c:	4610      	mov	r0, r2
 800a96e:	bd30      	pop	{r4, r5, pc}
 800a970:	4283      	cmp	r3, r0
 800a972:	d3f3      	bcc.n	800a95c <__mcmp+0x18>
 800a974:	e7fa      	b.n	800a96c <__mcmp+0x28>
 800a976:	f04f 32ff 	mov.w	r2, #4294967295
 800a97a:	e7f7      	b.n	800a96c <__mcmp+0x28>

0800a97c <__mdiff>:
 800a97c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a980:	460c      	mov	r4, r1
 800a982:	4606      	mov	r6, r0
 800a984:	4611      	mov	r1, r2
 800a986:	4620      	mov	r0, r4
 800a988:	4690      	mov	r8, r2
 800a98a:	f7ff ffdb 	bl	800a944 <__mcmp>
 800a98e:	1e05      	subs	r5, r0, #0
 800a990:	d110      	bne.n	800a9b4 <__mdiff+0x38>
 800a992:	4629      	mov	r1, r5
 800a994:	4630      	mov	r0, r6
 800a996:	f7ff fd09 	bl	800a3ac <_Balloc>
 800a99a:	b930      	cbnz	r0, 800a9aa <__mdiff+0x2e>
 800a99c:	4b3a      	ldr	r3, [pc, #232]	; (800aa88 <__mdiff+0x10c>)
 800a99e:	4602      	mov	r2, r0
 800a9a0:	f240 2132 	movw	r1, #562	; 0x232
 800a9a4:	4839      	ldr	r0, [pc, #228]	; (800aa8c <__mdiff+0x110>)
 800a9a6:	f000 faa9 	bl	800aefc <__assert_func>
 800a9aa:	2301      	movs	r3, #1
 800a9ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a9b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9b4:	bfa4      	itt	ge
 800a9b6:	4643      	movge	r3, r8
 800a9b8:	46a0      	movge	r8, r4
 800a9ba:	4630      	mov	r0, r6
 800a9bc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a9c0:	bfa6      	itte	ge
 800a9c2:	461c      	movge	r4, r3
 800a9c4:	2500      	movge	r5, #0
 800a9c6:	2501      	movlt	r5, #1
 800a9c8:	f7ff fcf0 	bl	800a3ac <_Balloc>
 800a9cc:	b920      	cbnz	r0, 800a9d8 <__mdiff+0x5c>
 800a9ce:	4b2e      	ldr	r3, [pc, #184]	; (800aa88 <__mdiff+0x10c>)
 800a9d0:	4602      	mov	r2, r0
 800a9d2:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a9d6:	e7e5      	b.n	800a9a4 <__mdiff+0x28>
 800a9d8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a9dc:	6926      	ldr	r6, [r4, #16]
 800a9de:	60c5      	str	r5, [r0, #12]
 800a9e0:	f104 0914 	add.w	r9, r4, #20
 800a9e4:	f108 0514 	add.w	r5, r8, #20
 800a9e8:	f100 0e14 	add.w	lr, r0, #20
 800a9ec:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a9f0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a9f4:	f108 0210 	add.w	r2, r8, #16
 800a9f8:	46f2      	mov	sl, lr
 800a9fa:	2100      	movs	r1, #0
 800a9fc:	f859 3b04 	ldr.w	r3, [r9], #4
 800aa00:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800aa04:	fa1f f883 	uxth.w	r8, r3
 800aa08:	fa11 f18b 	uxtah	r1, r1, fp
 800aa0c:	0c1b      	lsrs	r3, r3, #16
 800aa0e:	eba1 0808 	sub.w	r8, r1, r8
 800aa12:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800aa16:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800aa1a:	fa1f f888 	uxth.w	r8, r8
 800aa1e:	1419      	asrs	r1, r3, #16
 800aa20:	454e      	cmp	r6, r9
 800aa22:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800aa26:	f84a 3b04 	str.w	r3, [sl], #4
 800aa2a:	d8e7      	bhi.n	800a9fc <__mdiff+0x80>
 800aa2c:	1b33      	subs	r3, r6, r4
 800aa2e:	3b15      	subs	r3, #21
 800aa30:	f023 0303 	bic.w	r3, r3, #3
 800aa34:	3304      	adds	r3, #4
 800aa36:	3415      	adds	r4, #21
 800aa38:	42a6      	cmp	r6, r4
 800aa3a:	bf38      	it	cc
 800aa3c:	2304      	movcc	r3, #4
 800aa3e:	441d      	add	r5, r3
 800aa40:	4473      	add	r3, lr
 800aa42:	469e      	mov	lr, r3
 800aa44:	462e      	mov	r6, r5
 800aa46:	4566      	cmp	r6, ip
 800aa48:	d30e      	bcc.n	800aa68 <__mdiff+0xec>
 800aa4a:	f10c 0203 	add.w	r2, ip, #3
 800aa4e:	1b52      	subs	r2, r2, r5
 800aa50:	f022 0203 	bic.w	r2, r2, #3
 800aa54:	3d03      	subs	r5, #3
 800aa56:	45ac      	cmp	ip, r5
 800aa58:	bf38      	it	cc
 800aa5a:	2200      	movcc	r2, #0
 800aa5c:	441a      	add	r2, r3
 800aa5e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800aa62:	b17b      	cbz	r3, 800aa84 <__mdiff+0x108>
 800aa64:	6107      	str	r7, [r0, #16]
 800aa66:	e7a3      	b.n	800a9b0 <__mdiff+0x34>
 800aa68:	f856 8b04 	ldr.w	r8, [r6], #4
 800aa6c:	fa11 f288 	uxtah	r2, r1, r8
 800aa70:	1414      	asrs	r4, r2, #16
 800aa72:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800aa76:	b292      	uxth	r2, r2
 800aa78:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800aa7c:	f84e 2b04 	str.w	r2, [lr], #4
 800aa80:	1421      	asrs	r1, r4, #16
 800aa82:	e7e0      	b.n	800aa46 <__mdiff+0xca>
 800aa84:	3f01      	subs	r7, #1
 800aa86:	e7ea      	b.n	800aa5e <__mdiff+0xe2>
 800aa88:	0800be80 	.word	0x0800be80
 800aa8c:	0800bf23 	.word	0x0800bf23

0800aa90 <__ulp>:
 800aa90:	b082      	sub	sp, #8
 800aa92:	ed8d 0b00 	vstr	d0, [sp]
 800aa96:	9b01      	ldr	r3, [sp, #4]
 800aa98:	4912      	ldr	r1, [pc, #72]	; (800aae4 <__ulp+0x54>)
 800aa9a:	4019      	ands	r1, r3
 800aa9c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800aaa0:	2900      	cmp	r1, #0
 800aaa2:	dd05      	ble.n	800aab0 <__ulp+0x20>
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	460b      	mov	r3, r1
 800aaa8:	ec43 2b10 	vmov	d0, r2, r3
 800aaac:	b002      	add	sp, #8
 800aaae:	4770      	bx	lr
 800aab0:	4249      	negs	r1, r1
 800aab2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800aab6:	ea4f 5021 	mov.w	r0, r1, asr #20
 800aaba:	f04f 0200 	mov.w	r2, #0
 800aabe:	f04f 0300 	mov.w	r3, #0
 800aac2:	da04      	bge.n	800aace <__ulp+0x3e>
 800aac4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800aac8:	fa41 f300 	asr.w	r3, r1, r0
 800aacc:	e7ec      	b.n	800aaa8 <__ulp+0x18>
 800aace:	f1a0 0114 	sub.w	r1, r0, #20
 800aad2:	291e      	cmp	r1, #30
 800aad4:	bfda      	itte	le
 800aad6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800aada:	fa20 f101 	lsrle.w	r1, r0, r1
 800aade:	2101      	movgt	r1, #1
 800aae0:	460a      	mov	r2, r1
 800aae2:	e7e1      	b.n	800aaa8 <__ulp+0x18>
 800aae4:	7ff00000 	.word	0x7ff00000

0800aae8 <__b2d>:
 800aae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaea:	6905      	ldr	r5, [r0, #16]
 800aaec:	f100 0714 	add.w	r7, r0, #20
 800aaf0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800aaf4:	1f2e      	subs	r6, r5, #4
 800aaf6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800aafa:	4620      	mov	r0, r4
 800aafc:	f7ff fd48 	bl	800a590 <__hi0bits>
 800ab00:	f1c0 0320 	rsb	r3, r0, #32
 800ab04:	280a      	cmp	r0, #10
 800ab06:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800ab84 <__b2d+0x9c>
 800ab0a:	600b      	str	r3, [r1, #0]
 800ab0c:	dc14      	bgt.n	800ab38 <__b2d+0x50>
 800ab0e:	f1c0 0e0b 	rsb	lr, r0, #11
 800ab12:	fa24 f10e 	lsr.w	r1, r4, lr
 800ab16:	42b7      	cmp	r7, r6
 800ab18:	ea41 030c 	orr.w	r3, r1, ip
 800ab1c:	bf34      	ite	cc
 800ab1e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ab22:	2100      	movcs	r1, #0
 800ab24:	3015      	adds	r0, #21
 800ab26:	fa04 f000 	lsl.w	r0, r4, r0
 800ab2a:	fa21 f10e 	lsr.w	r1, r1, lr
 800ab2e:	ea40 0201 	orr.w	r2, r0, r1
 800ab32:	ec43 2b10 	vmov	d0, r2, r3
 800ab36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab38:	42b7      	cmp	r7, r6
 800ab3a:	bf3a      	itte	cc
 800ab3c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ab40:	f1a5 0608 	subcc.w	r6, r5, #8
 800ab44:	2100      	movcs	r1, #0
 800ab46:	380b      	subs	r0, #11
 800ab48:	d017      	beq.n	800ab7a <__b2d+0x92>
 800ab4a:	f1c0 0c20 	rsb	ip, r0, #32
 800ab4e:	fa04 f500 	lsl.w	r5, r4, r0
 800ab52:	42be      	cmp	r6, r7
 800ab54:	fa21 f40c 	lsr.w	r4, r1, ip
 800ab58:	ea45 0504 	orr.w	r5, r5, r4
 800ab5c:	bf8c      	ite	hi
 800ab5e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800ab62:	2400      	movls	r4, #0
 800ab64:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800ab68:	fa01 f000 	lsl.w	r0, r1, r0
 800ab6c:	fa24 f40c 	lsr.w	r4, r4, ip
 800ab70:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ab74:	ea40 0204 	orr.w	r2, r0, r4
 800ab78:	e7db      	b.n	800ab32 <__b2d+0x4a>
 800ab7a:	ea44 030c 	orr.w	r3, r4, ip
 800ab7e:	460a      	mov	r2, r1
 800ab80:	e7d7      	b.n	800ab32 <__b2d+0x4a>
 800ab82:	bf00      	nop
 800ab84:	3ff00000 	.word	0x3ff00000

0800ab88 <__d2b>:
 800ab88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ab8c:	4689      	mov	r9, r1
 800ab8e:	2101      	movs	r1, #1
 800ab90:	ec57 6b10 	vmov	r6, r7, d0
 800ab94:	4690      	mov	r8, r2
 800ab96:	f7ff fc09 	bl	800a3ac <_Balloc>
 800ab9a:	4604      	mov	r4, r0
 800ab9c:	b930      	cbnz	r0, 800abac <__d2b+0x24>
 800ab9e:	4602      	mov	r2, r0
 800aba0:	4b25      	ldr	r3, [pc, #148]	; (800ac38 <__d2b+0xb0>)
 800aba2:	4826      	ldr	r0, [pc, #152]	; (800ac3c <__d2b+0xb4>)
 800aba4:	f240 310a 	movw	r1, #778	; 0x30a
 800aba8:	f000 f9a8 	bl	800aefc <__assert_func>
 800abac:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800abb0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800abb4:	bb35      	cbnz	r5, 800ac04 <__d2b+0x7c>
 800abb6:	2e00      	cmp	r6, #0
 800abb8:	9301      	str	r3, [sp, #4]
 800abba:	d028      	beq.n	800ac0e <__d2b+0x86>
 800abbc:	4668      	mov	r0, sp
 800abbe:	9600      	str	r6, [sp, #0]
 800abc0:	f7ff fd06 	bl	800a5d0 <__lo0bits>
 800abc4:	9900      	ldr	r1, [sp, #0]
 800abc6:	b300      	cbz	r0, 800ac0a <__d2b+0x82>
 800abc8:	9a01      	ldr	r2, [sp, #4]
 800abca:	f1c0 0320 	rsb	r3, r0, #32
 800abce:	fa02 f303 	lsl.w	r3, r2, r3
 800abd2:	430b      	orrs	r3, r1
 800abd4:	40c2      	lsrs	r2, r0
 800abd6:	6163      	str	r3, [r4, #20]
 800abd8:	9201      	str	r2, [sp, #4]
 800abda:	9b01      	ldr	r3, [sp, #4]
 800abdc:	61a3      	str	r3, [r4, #24]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	bf14      	ite	ne
 800abe2:	2202      	movne	r2, #2
 800abe4:	2201      	moveq	r2, #1
 800abe6:	6122      	str	r2, [r4, #16]
 800abe8:	b1d5      	cbz	r5, 800ac20 <__d2b+0x98>
 800abea:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800abee:	4405      	add	r5, r0
 800abf0:	f8c9 5000 	str.w	r5, [r9]
 800abf4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800abf8:	f8c8 0000 	str.w	r0, [r8]
 800abfc:	4620      	mov	r0, r4
 800abfe:	b003      	add	sp, #12
 800ac00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ac04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ac08:	e7d5      	b.n	800abb6 <__d2b+0x2e>
 800ac0a:	6161      	str	r1, [r4, #20]
 800ac0c:	e7e5      	b.n	800abda <__d2b+0x52>
 800ac0e:	a801      	add	r0, sp, #4
 800ac10:	f7ff fcde 	bl	800a5d0 <__lo0bits>
 800ac14:	9b01      	ldr	r3, [sp, #4]
 800ac16:	6163      	str	r3, [r4, #20]
 800ac18:	2201      	movs	r2, #1
 800ac1a:	6122      	str	r2, [r4, #16]
 800ac1c:	3020      	adds	r0, #32
 800ac1e:	e7e3      	b.n	800abe8 <__d2b+0x60>
 800ac20:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ac24:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ac28:	f8c9 0000 	str.w	r0, [r9]
 800ac2c:	6918      	ldr	r0, [r3, #16]
 800ac2e:	f7ff fcaf 	bl	800a590 <__hi0bits>
 800ac32:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ac36:	e7df      	b.n	800abf8 <__d2b+0x70>
 800ac38:	0800be80 	.word	0x0800be80
 800ac3c:	0800bf23 	.word	0x0800bf23

0800ac40 <__ratio>:
 800ac40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac44:	4688      	mov	r8, r1
 800ac46:	4669      	mov	r1, sp
 800ac48:	4681      	mov	r9, r0
 800ac4a:	f7ff ff4d 	bl	800aae8 <__b2d>
 800ac4e:	a901      	add	r1, sp, #4
 800ac50:	4640      	mov	r0, r8
 800ac52:	ec55 4b10 	vmov	r4, r5, d0
 800ac56:	f7ff ff47 	bl	800aae8 <__b2d>
 800ac5a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ac5e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ac62:	eba3 0c02 	sub.w	ip, r3, r2
 800ac66:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ac6a:	1a9b      	subs	r3, r3, r2
 800ac6c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ac70:	ec51 0b10 	vmov	r0, r1, d0
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	bfd6      	itet	le
 800ac78:	460a      	movle	r2, r1
 800ac7a:	462a      	movgt	r2, r5
 800ac7c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ac80:	468b      	mov	fp, r1
 800ac82:	462f      	mov	r7, r5
 800ac84:	bfd4      	ite	le
 800ac86:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ac8a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ac8e:	4620      	mov	r0, r4
 800ac90:	ee10 2a10 	vmov	r2, s0
 800ac94:	465b      	mov	r3, fp
 800ac96:	4639      	mov	r1, r7
 800ac98:	f7f5 fdf8 	bl	800088c <__aeabi_ddiv>
 800ac9c:	ec41 0b10 	vmov	d0, r0, r1
 800aca0:	b003      	add	sp, #12
 800aca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aca6 <__copybits>:
 800aca6:	3901      	subs	r1, #1
 800aca8:	b570      	push	{r4, r5, r6, lr}
 800acaa:	1149      	asrs	r1, r1, #5
 800acac:	6914      	ldr	r4, [r2, #16]
 800acae:	3101      	adds	r1, #1
 800acb0:	f102 0314 	add.w	r3, r2, #20
 800acb4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800acb8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800acbc:	1f05      	subs	r5, r0, #4
 800acbe:	42a3      	cmp	r3, r4
 800acc0:	d30c      	bcc.n	800acdc <__copybits+0x36>
 800acc2:	1aa3      	subs	r3, r4, r2
 800acc4:	3b11      	subs	r3, #17
 800acc6:	f023 0303 	bic.w	r3, r3, #3
 800acca:	3211      	adds	r2, #17
 800accc:	42a2      	cmp	r2, r4
 800acce:	bf88      	it	hi
 800acd0:	2300      	movhi	r3, #0
 800acd2:	4418      	add	r0, r3
 800acd4:	2300      	movs	r3, #0
 800acd6:	4288      	cmp	r0, r1
 800acd8:	d305      	bcc.n	800ace6 <__copybits+0x40>
 800acda:	bd70      	pop	{r4, r5, r6, pc}
 800acdc:	f853 6b04 	ldr.w	r6, [r3], #4
 800ace0:	f845 6f04 	str.w	r6, [r5, #4]!
 800ace4:	e7eb      	b.n	800acbe <__copybits+0x18>
 800ace6:	f840 3b04 	str.w	r3, [r0], #4
 800acea:	e7f4      	b.n	800acd6 <__copybits+0x30>

0800acec <__any_on>:
 800acec:	f100 0214 	add.w	r2, r0, #20
 800acf0:	6900      	ldr	r0, [r0, #16]
 800acf2:	114b      	asrs	r3, r1, #5
 800acf4:	4298      	cmp	r0, r3
 800acf6:	b510      	push	{r4, lr}
 800acf8:	db11      	blt.n	800ad1e <__any_on+0x32>
 800acfa:	dd0a      	ble.n	800ad12 <__any_on+0x26>
 800acfc:	f011 011f 	ands.w	r1, r1, #31
 800ad00:	d007      	beq.n	800ad12 <__any_on+0x26>
 800ad02:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ad06:	fa24 f001 	lsr.w	r0, r4, r1
 800ad0a:	fa00 f101 	lsl.w	r1, r0, r1
 800ad0e:	428c      	cmp	r4, r1
 800ad10:	d10b      	bne.n	800ad2a <__any_on+0x3e>
 800ad12:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ad16:	4293      	cmp	r3, r2
 800ad18:	d803      	bhi.n	800ad22 <__any_on+0x36>
 800ad1a:	2000      	movs	r0, #0
 800ad1c:	bd10      	pop	{r4, pc}
 800ad1e:	4603      	mov	r3, r0
 800ad20:	e7f7      	b.n	800ad12 <__any_on+0x26>
 800ad22:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ad26:	2900      	cmp	r1, #0
 800ad28:	d0f5      	beq.n	800ad16 <__any_on+0x2a>
 800ad2a:	2001      	movs	r0, #1
 800ad2c:	e7f6      	b.n	800ad1c <__any_on+0x30>

0800ad2e <_calloc_r>:
 800ad2e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ad30:	fba1 2402 	umull	r2, r4, r1, r2
 800ad34:	b94c      	cbnz	r4, 800ad4a <_calloc_r+0x1c>
 800ad36:	4611      	mov	r1, r2
 800ad38:	9201      	str	r2, [sp, #4]
 800ad3a:	f000 f82f 	bl	800ad9c <_malloc_r>
 800ad3e:	9a01      	ldr	r2, [sp, #4]
 800ad40:	4605      	mov	r5, r0
 800ad42:	b930      	cbnz	r0, 800ad52 <_calloc_r+0x24>
 800ad44:	4628      	mov	r0, r5
 800ad46:	b003      	add	sp, #12
 800ad48:	bd30      	pop	{r4, r5, pc}
 800ad4a:	220c      	movs	r2, #12
 800ad4c:	6002      	str	r2, [r0, #0]
 800ad4e:	2500      	movs	r5, #0
 800ad50:	e7f8      	b.n	800ad44 <_calloc_r+0x16>
 800ad52:	4621      	mov	r1, r4
 800ad54:	f7fe f962 	bl	800901c <memset>
 800ad58:	e7f4      	b.n	800ad44 <_calloc_r+0x16>
	...

0800ad5c <sbrk_aligned>:
 800ad5c:	b570      	push	{r4, r5, r6, lr}
 800ad5e:	4e0e      	ldr	r6, [pc, #56]	; (800ad98 <sbrk_aligned+0x3c>)
 800ad60:	460c      	mov	r4, r1
 800ad62:	6831      	ldr	r1, [r6, #0]
 800ad64:	4605      	mov	r5, r0
 800ad66:	b911      	cbnz	r1, 800ad6e <sbrk_aligned+0x12>
 800ad68:	f000 f896 	bl	800ae98 <_sbrk_r>
 800ad6c:	6030      	str	r0, [r6, #0]
 800ad6e:	4621      	mov	r1, r4
 800ad70:	4628      	mov	r0, r5
 800ad72:	f000 f891 	bl	800ae98 <_sbrk_r>
 800ad76:	1c43      	adds	r3, r0, #1
 800ad78:	d00a      	beq.n	800ad90 <sbrk_aligned+0x34>
 800ad7a:	1cc4      	adds	r4, r0, #3
 800ad7c:	f024 0403 	bic.w	r4, r4, #3
 800ad80:	42a0      	cmp	r0, r4
 800ad82:	d007      	beq.n	800ad94 <sbrk_aligned+0x38>
 800ad84:	1a21      	subs	r1, r4, r0
 800ad86:	4628      	mov	r0, r5
 800ad88:	f000 f886 	bl	800ae98 <_sbrk_r>
 800ad8c:	3001      	adds	r0, #1
 800ad8e:	d101      	bne.n	800ad94 <sbrk_aligned+0x38>
 800ad90:	f04f 34ff 	mov.w	r4, #4294967295
 800ad94:	4620      	mov	r0, r4
 800ad96:	bd70      	pop	{r4, r5, r6, pc}
 800ad98:	20001f68 	.word	0x20001f68

0800ad9c <_malloc_r>:
 800ad9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ada0:	1ccd      	adds	r5, r1, #3
 800ada2:	f025 0503 	bic.w	r5, r5, #3
 800ada6:	3508      	adds	r5, #8
 800ada8:	2d0c      	cmp	r5, #12
 800adaa:	bf38      	it	cc
 800adac:	250c      	movcc	r5, #12
 800adae:	2d00      	cmp	r5, #0
 800adb0:	4607      	mov	r7, r0
 800adb2:	db01      	blt.n	800adb8 <_malloc_r+0x1c>
 800adb4:	42a9      	cmp	r1, r5
 800adb6:	d905      	bls.n	800adc4 <_malloc_r+0x28>
 800adb8:	230c      	movs	r3, #12
 800adba:	603b      	str	r3, [r7, #0]
 800adbc:	2600      	movs	r6, #0
 800adbe:	4630      	mov	r0, r6
 800adc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adc4:	4e2e      	ldr	r6, [pc, #184]	; (800ae80 <_malloc_r+0xe4>)
 800adc6:	f000 f8d1 	bl	800af6c <__malloc_lock>
 800adca:	6833      	ldr	r3, [r6, #0]
 800adcc:	461c      	mov	r4, r3
 800adce:	bb34      	cbnz	r4, 800ae1e <_malloc_r+0x82>
 800add0:	4629      	mov	r1, r5
 800add2:	4638      	mov	r0, r7
 800add4:	f7ff ffc2 	bl	800ad5c <sbrk_aligned>
 800add8:	1c43      	adds	r3, r0, #1
 800adda:	4604      	mov	r4, r0
 800addc:	d14d      	bne.n	800ae7a <_malloc_r+0xde>
 800adde:	6834      	ldr	r4, [r6, #0]
 800ade0:	4626      	mov	r6, r4
 800ade2:	2e00      	cmp	r6, #0
 800ade4:	d140      	bne.n	800ae68 <_malloc_r+0xcc>
 800ade6:	6823      	ldr	r3, [r4, #0]
 800ade8:	4631      	mov	r1, r6
 800adea:	4638      	mov	r0, r7
 800adec:	eb04 0803 	add.w	r8, r4, r3
 800adf0:	f000 f852 	bl	800ae98 <_sbrk_r>
 800adf4:	4580      	cmp	r8, r0
 800adf6:	d13a      	bne.n	800ae6e <_malloc_r+0xd2>
 800adf8:	6821      	ldr	r1, [r4, #0]
 800adfa:	3503      	adds	r5, #3
 800adfc:	1a6d      	subs	r5, r5, r1
 800adfe:	f025 0503 	bic.w	r5, r5, #3
 800ae02:	3508      	adds	r5, #8
 800ae04:	2d0c      	cmp	r5, #12
 800ae06:	bf38      	it	cc
 800ae08:	250c      	movcc	r5, #12
 800ae0a:	4629      	mov	r1, r5
 800ae0c:	4638      	mov	r0, r7
 800ae0e:	f7ff ffa5 	bl	800ad5c <sbrk_aligned>
 800ae12:	3001      	adds	r0, #1
 800ae14:	d02b      	beq.n	800ae6e <_malloc_r+0xd2>
 800ae16:	6823      	ldr	r3, [r4, #0]
 800ae18:	442b      	add	r3, r5
 800ae1a:	6023      	str	r3, [r4, #0]
 800ae1c:	e00e      	b.n	800ae3c <_malloc_r+0xa0>
 800ae1e:	6822      	ldr	r2, [r4, #0]
 800ae20:	1b52      	subs	r2, r2, r5
 800ae22:	d41e      	bmi.n	800ae62 <_malloc_r+0xc6>
 800ae24:	2a0b      	cmp	r2, #11
 800ae26:	d916      	bls.n	800ae56 <_malloc_r+0xba>
 800ae28:	1961      	adds	r1, r4, r5
 800ae2a:	42a3      	cmp	r3, r4
 800ae2c:	6025      	str	r5, [r4, #0]
 800ae2e:	bf18      	it	ne
 800ae30:	6059      	strne	r1, [r3, #4]
 800ae32:	6863      	ldr	r3, [r4, #4]
 800ae34:	bf08      	it	eq
 800ae36:	6031      	streq	r1, [r6, #0]
 800ae38:	5162      	str	r2, [r4, r5]
 800ae3a:	604b      	str	r3, [r1, #4]
 800ae3c:	4638      	mov	r0, r7
 800ae3e:	f104 060b 	add.w	r6, r4, #11
 800ae42:	f000 f899 	bl	800af78 <__malloc_unlock>
 800ae46:	f026 0607 	bic.w	r6, r6, #7
 800ae4a:	1d23      	adds	r3, r4, #4
 800ae4c:	1af2      	subs	r2, r6, r3
 800ae4e:	d0b6      	beq.n	800adbe <_malloc_r+0x22>
 800ae50:	1b9b      	subs	r3, r3, r6
 800ae52:	50a3      	str	r3, [r4, r2]
 800ae54:	e7b3      	b.n	800adbe <_malloc_r+0x22>
 800ae56:	6862      	ldr	r2, [r4, #4]
 800ae58:	42a3      	cmp	r3, r4
 800ae5a:	bf0c      	ite	eq
 800ae5c:	6032      	streq	r2, [r6, #0]
 800ae5e:	605a      	strne	r2, [r3, #4]
 800ae60:	e7ec      	b.n	800ae3c <_malloc_r+0xa0>
 800ae62:	4623      	mov	r3, r4
 800ae64:	6864      	ldr	r4, [r4, #4]
 800ae66:	e7b2      	b.n	800adce <_malloc_r+0x32>
 800ae68:	4634      	mov	r4, r6
 800ae6a:	6876      	ldr	r6, [r6, #4]
 800ae6c:	e7b9      	b.n	800ade2 <_malloc_r+0x46>
 800ae6e:	230c      	movs	r3, #12
 800ae70:	603b      	str	r3, [r7, #0]
 800ae72:	4638      	mov	r0, r7
 800ae74:	f000 f880 	bl	800af78 <__malloc_unlock>
 800ae78:	e7a1      	b.n	800adbe <_malloc_r+0x22>
 800ae7a:	6025      	str	r5, [r4, #0]
 800ae7c:	e7de      	b.n	800ae3c <_malloc_r+0xa0>
 800ae7e:	bf00      	nop
 800ae80:	20001f64 	.word	0x20001f64
 800ae84:	00000000 	.word	0x00000000

0800ae88 <nan>:
 800ae88:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ae90 <nan+0x8>
 800ae8c:	4770      	bx	lr
 800ae8e:	bf00      	nop
 800ae90:	00000000 	.word	0x00000000
 800ae94:	7ff80000 	.word	0x7ff80000

0800ae98 <_sbrk_r>:
 800ae98:	b538      	push	{r3, r4, r5, lr}
 800ae9a:	4d06      	ldr	r5, [pc, #24]	; (800aeb4 <_sbrk_r+0x1c>)
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	4604      	mov	r4, r0
 800aea0:	4608      	mov	r0, r1
 800aea2:	602b      	str	r3, [r5, #0]
 800aea4:	f7f6 fa26 	bl	80012f4 <_sbrk>
 800aea8:	1c43      	adds	r3, r0, #1
 800aeaa:	d102      	bne.n	800aeb2 <_sbrk_r+0x1a>
 800aeac:	682b      	ldr	r3, [r5, #0]
 800aeae:	b103      	cbz	r3, 800aeb2 <_sbrk_r+0x1a>
 800aeb0:	6023      	str	r3, [r4, #0]
 800aeb2:	bd38      	pop	{r3, r4, r5, pc}
 800aeb4:	20001f6c 	.word	0x20001f6c

0800aeb8 <strncmp>:
 800aeb8:	b510      	push	{r4, lr}
 800aeba:	b17a      	cbz	r2, 800aedc <strncmp+0x24>
 800aebc:	4603      	mov	r3, r0
 800aebe:	3901      	subs	r1, #1
 800aec0:	1884      	adds	r4, r0, r2
 800aec2:	f813 0b01 	ldrb.w	r0, [r3], #1
 800aec6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800aeca:	4290      	cmp	r0, r2
 800aecc:	d101      	bne.n	800aed2 <strncmp+0x1a>
 800aece:	42a3      	cmp	r3, r4
 800aed0:	d101      	bne.n	800aed6 <strncmp+0x1e>
 800aed2:	1a80      	subs	r0, r0, r2
 800aed4:	bd10      	pop	{r4, pc}
 800aed6:	2800      	cmp	r0, #0
 800aed8:	d1f3      	bne.n	800aec2 <strncmp+0xa>
 800aeda:	e7fa      	b.n	800aed2 <strncmp+0x1a>
 800aedc:	4610      	mov	r0, r2
 800aede:	e7f9      	b.n	800aed4 <strncmp+0x1c>

0800aee0 <__ascii_wctomb>:
 800aee0:	b149      	cbz	r1, 800aef6 <__ascii_wctomb+0x16>
 800aee2:	2aff      	cmp	r2, #255	; 0xff
 800aee4:	bf85      	ittet	hi
 800aee6:	238a      	movhi	r3, #138	; 0x8a
 800aee8:	6003      	strhi	r3, [r0, #0]
 800aeea:	700a      	strbls	r2, [r1, #0]
 800aeec:	f04f 30ff 	movhi.w	r0, #4294967295
 800aef0:	bf98      	it	ls
 800aef2:	2001      	movls	r0, #1
 800aef4:	4770      	bx	lr
 800aef6:	4608      	mov	r0, r1
 800aef8:	4770      	bx	lr
	...

0800aefc <__assert_func>:
 800aefc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aefe:	4614      	mov	r4, r2
 800af00:	461a      	mov	r2, r3
 800af02:	4b09      	ldr	r3, [pc, #36]	; (800af28 <__assert_func+0x2c>)
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	4605      	mov	r5, r0
 800af08:	68d8      	ldr	r0, [r3, #12]
 800af0a:	b14c      	cbz	r4, 800af20 <__assert_func+0x24>
 800af0c:	4b07      	ldr	r3, [pc, #28]	; (800af2c <__assert_func+0x30>)
 800af0e:	9100      	str	r1, [sp, #0]
 800af10:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800af14:	4906      	ldr	r1, [pc, #24]	; (800af30 <__assert_func+0x34>)
 800af16:	462b      	mov	r3, r5
 800af18:	f000 f80e 	bl	800af38 <fiprintf>
 800af1c:	f000 fc2c 	bl	800b778 <abort>
 800af20:	4b04      	ldr	r3, [pc, #16]	; (800af34 <__assert_func+0x38>)
 800af22:	461c      	mov	r4, r3
 800af24:	e7f3      	b.n	800af0e <__assert_func+0x12>
 800af26:	bf00      	nop
 800af28:	20000110 	.word	0x20000110
 800af2c:	0800c07c 	.word	0x0800c07c
 800af30:	0800c089 	.word	0x0800c089
 800af34:	0800c0b7 	.word	0x0800c0b7

0800af38 <fiprintf>:
 800af38:	b40e      	push	{r1, r2, r3}
 800af3a:	b503      	push	{r0, r1, lr}
 800af3c:	4601      	mov	r1, r0
 800af3e:	ab03      	add	r3, sp, #12
 800af40:	4805      	ldr	r0, [pc, #20]	; (800af58 <fiprintf+0x20>)
 800af42:	f853 2b04 	ldr.w	r2, [r3], #4
 800af46:	6800      	ldr	r0, [r0, #0]
 800af48:	9301      	str	r3, [sp, #4]
 800af4a:	f000 f891 	bl	800b070 <_vfiprintf_r>
 800af4e:	b002      	add	sp, #8
 800af50:	f85d eb04 	ldr.w	lr, [sp], #4
 800af54:	b003      	add	sp, #12
 800af56:	4770      	bx	lr
 800af58:	20000110 	.word	0x20000110

0800af5c <malloc>:
 800af5c:	4b02      	ldr	r3, [pc, #8]	; (800af68 <malloc+0xc>)
 800af5e:	4601      	mov	r1, r0
 800af60:	6818      	ldr	r0, [r3, #0]
 800af62:	f7ff bf1b 	b.w	800ad9c <_malloc_r>
 800af66:	bf00      	nop
 800af68:	20000110 	.word	0x20000110

0800af6c <__malloc_lock>:
 800af6c:	4801      	ldr	r0, [pc, #4]	; (800af74 <__malloc_lock+0x8>)
 800af6e:	f000 bdc3 	b.w	800baf8 <__retarget_lock_acquire_recursive>
 800af72:	bf00      	nop
 800af74:	20001f70 	.word	0x20001f70

0800af78 <__malloc_unlock>:
 800af78:	4801      	ldr	r0, [pc, #4]	; (800af80 <__malloc_unlock+0x8>)
 800af7a:	f000 bdbe 	b.w	800bafa <__retarget_lock_release_recursive>
 800af7e:	bf00      	nop
 800af80:	20001f70 	.word	0x20001f70

0800af84 <_free_r>:
 800af84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800af86:	2900      	cmp	r1, #0
 800af88:	d044      	beq.n	800b014 <_free_r+0x90>
 800af8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af8e:	9001      	str	r0, [sp, #4]
 800af90:	2b00      	cmp	r3, #0
 800af92:	f1a1 0404 	sub.w	r4, r1, #4
 800af96:	bfb8      	it	lt
 800af98:	18e4      	addlt	r4, r4, r3
 800af9a:	f7ff ffe7 	bl	800af6c <__malloc_lock>
 800af9e:	4a1e      	ldr	r2, [pc, #120]	; (800b018 <_free_r+0x94>)
 800afa0:	9801      	ldr	r0, [sp, #4]
 800afa2:	6813      	ldr	r3, [r2, #0]
 800afa4:	b933      	cbnz	r3, 800afb4 <_free_r+0x30>
 800afa6:	6063      	str	r3, [r4, #4]
 800afa8:	6014      	str	r4, [r2, #0]
 800afaa:	b003      	add	sp, #12
 800afac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800afb0:	f7ff bfe2 	b.w	800af78 <__malloc_unlock>
 800afb4:	42a3      	cmp	r3, r4
 800afb6:	d908      	bls.n	800afca <_free_r+0x46>
 800afb8:	6825      	ldr	r5, [r4, #0]
 800afba:	1961      	adds	r1, r4, r5
 800afbc:	428b      	cmp	r3, r1
 800afbe:	bf01      	itttt	eq
 800afc0:	6819      	ldreq	r1, [r3, #0]
 800afc2:	685b      	ldreq	r3, [r3, #4]
 800afc4:	1949      	addeq	r1, r1, r5
 800afc6:	6021      	streq	r1, [r4, #0]
 800afc8:	e7ed      	b.n	800afa6 <_free_r+0x22>
 800afca:	461a      	mov	r2, r3
 800afcc:	685b      	ldr	r3, [r3, #4]
 800afce:	b10b      	cbz	r3, 800afd4 <_free_r+0x50>
 800afd0:	42a3      	cmp	r3, r4
 800afd2:	d9fa      	bls.n	800afca <_free_r+0x46>
 800afd4:	6811      	ldr	r1, [r2, #0]
 800afd6:	1855      	adds	r5, r2, r1
 800afd8:	42a5      	cmp	r5, r4
 800afda:	d10b      	bne.n	800aff4 <_free_r+0x70>
 800afdc:	6824      	ldr	r4, [r4, #0]
 800afde:	4421      	add	r1, r4
 800afe0:	1854      	adds	r4, r2, r1
 800afe2:	42a3      	cmp	r3, r4
 800afe4:	6011      	str	r1, [r2, #0]
 800afe6:	d1e0      	bne.n	800afaa <_free_r+0x26>
 800afe8:	681c      	ldr	r4, [r3, #0]
 800afea:	685b      	ldr	r3, [r3, #4]
 800afec:	6053      	str	r3, [r2, #4]
 800afee:	4421      	add	r1, r4
 800aff0:	6011      	str	r1, [r2, #0]
 800aff2:	e7da      	b.n	800afaa <_free_r+0x26>
 800aff4:	d902      	bls.n	800affc <_free_r+0x78>
 800aff6:	230c      	movs	r3, #12
 800aff8:	6003      	str	r3, [r0, #0]
 800affa:	e7d6      	b.n	800afaa <_free_r+0x26>
 800affc:	6825      	ldr	r5, [r4, #0]
 800affe:	1961      	adds	r1, r4, r5
 800b000:	428b      	cmp	r3, r1
 800b002:	bf04      	itt	eq
 800b004:	6819      	ldreq	r1, [r3, #0]
 800b006:	685b      	ldreq	r3, [r3, #4]
 800b008:	6063      	str	r3, [r4, #4]
 800b00a:	bf04      	itt	eq
 800b00c:	1949      	addeq	r1, r1, r5
 800b00e:	6021      	streq	r1, [r4, #0]
 800b010:	6054      	str	r4, [r2, #4]
 800b012:	e7ca      	b.n	800afaa <_free_r+0x26>
 800b014:	b003      	add	sp, #12
 800b016:	bd30      	pop	{r4, r5, pc}
 800b018:	20001f64 	.word	0x20001f64

0800b01c <__sfputc_r>:
 800b01c:	6893      	ldr	r3, [r2, #8]
 800b01e:	3b01      	subs	r3, #1
 800b020:	2b00      	cmp	r3, #0
 800b022:	b410      	push	{r4}
 800b024:	6093      	str	r3, [r2, #8]
 800b026:	da08      	bge.n	800b03a <__sfputc_r+0x1e>
 800b028:	6994      	ldr	r4, [r2, #24]
 800b02a:	42a3      	cmp	r3, r4
 800b02c:	db01      	blt.n	800b032 <__sfputc_r+0x16>
 800b02e:	290a      	cmp	r1, #10
 800b030:	d103      	bne.n	800b03a <__sfputc_r+0x1e>
 800b032:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b036:	f000 badf 	b.w	800b5f8 <__swbuf_r>
 800b03a:	6813      	ldr	r3, [r2, #0]
 800b03c:	1c58      	adds	r0, r3, #1
 800b03e:	6010      	str	r0, [r2, #0]
 800b040:	7019      	strb	r1, [r3, #0]
 800b042:	4608      	mov	r0, r1
 800b044:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b048:	4770      	bx	lr

0800b04a <__sfputs_r>:
 800b04a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b04c:	4606      	mov	r6, r0
 800b04e:	460f      	mov	r7, r1
 800b050:	4614      	mov	r4, r2
 800b052:	18d5      	adds	r5, r2, r3
 800b054:	42ac      	cmp	r4, r5
 800b056:	d101      	bne.n	800b05c <__sfputs_r+0x12>
 800b058:	2000      	movs	r0, #0
 800b05a:	e007      	b.n	800b06c <__sfputs_r+0x22>
 800b05c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b060:	463a      	mov	r2, r7
 800b062:	4630      	mov	r0, r6
 800b064:	f7ff ffda 	bl	800b01c <__sfputc_r>
 800b068:	1c43      	adds	r3, r0, #1
 800b06a:	d1f3      	bne.n	800b054 <__sfputs_r+0xa>
 800b06c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b070 <_vfiprintf_r>:
 800b070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b074:	460d      	mov	r5, r1
 800b076:	b09d      	sub	sp, #116	; 0x74
 800b078:	4614      	mov	r4, r2
 800b07a:	4698      	mov	r8, r3
 800b07c:	4606      	mov	r6, r0
 800b07e:	b118      	cbz	r0, 800b088 <_vfiprintf_r+0x18>
 800b080:	6983      	ldr	r3, [r0, #24]
 800b082:	b90b      	cbnz	r3, 800b088 <_vfiprintf_r+0x18>
 800b084:	f000 fc9a 	bl	800b9bc <__sinit>
 800b088:	4b89      	ldr	r3, [pc, #548]	; (800b2b0 <_vfiprintf_r+0x240>)
 800b08a:	429d      	cmp	r5, r3
 800b08c:	d11b      	bne.n	800b0c6 <_vfiprintf_r+0x56>
 800b08e:	6875      	ldr	r5, [r6, #4]
 800b090:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b092:	07d9      	lsls	r1, r3, #31
 800b094:	d405      	bmi.n	800b0a2 <_vfiprintf_r+0x32>
 800b096:	89ab      	ldrh	r3, [r5, #12]
 800b098:	059a      	lsls	r2, r3, #22
 800b09a:	d402      	bmi.n	800b0a2 <_vfiprintf_r+0x32>
 800b09c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b09e:	f000 fd2b 	bl	800baf8 <__retarget_lock_acquire_recursive>
 800b0a2:	89ab      	ldrh	r3, [r5, #12]
 800b0a4:	071b      	lsls	r3, r3, #28
 800b0a6:	d501      	bpl.n	800b0ac <_vfiprintf_r+0x3c>
 800b0a8:	692b      	ldr	r3, [r5, #16]
 800b0aa:	b9eb      	cbnz	r3, 800b0e8 <_vfiprintf_r+0x78>
 800b0ac:	4629      	mov	r1, r5
 800b0ae:	4630      	mov	r0, r6
 800b0b0:	f000 faf4 	bl	800b69c <__swsetup_r>
 800b0b4:	b1c0      	cbz	r0, 800b0e8 <_vfiprintf_r+0x78>
 800b0b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b0b8:	07dc      	lsls	r4, r3, #31
 800b0ba:	d50e      	bpl.n	800b0da <_vfiprintf_r+0x6a>
 800b0bc:	f04f 30ff 	mov.w	r0, #4294967295
 800b0c0:	b01d      	add	sp, #116	; 0x74
 800b0c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0c6:	4b7b      	ldr	r3, [pc, #492]	; (800b2b4 <_vfiprintf_r+0x244>)
 800b0c8:	429d      	cmp	r5, r3
 800b0ca:	d101      	bne.n	800b0d0 <_vfiprintf_r+0x60>
 800b0cc:	68b5      	ldr	r5, [r6, #8]
 800b0ce:	e7df      	b.n	800b090 <_vfiprintf_r+0x20>
 800b0d0:	4b79      	ldr	r3, [pc, #484]	; (800b2b8 <_vfiprintf_r+0x248>)
 800b0d2:	429d      	cmp	r5, r3
 800b0d4:	bf08      	it	eq
 800b0d6:	68f5      	ldreq	r5, [r6, #12]
 800b0d8:	e7da      	b.n	800b090 <_vfiprintf_r+0x20>
 800b0da:	89ab      	ldrh	r3, [r5, #12]
 800b0dc:	0598      	lsls	r0, r3, #22
 800b0de:	d4ed      	bmi.n	800b0bc <_vfiprintf_r+0x4c>
 800b0e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b0e2:	f000 fd0a 	bl	800bafa <__retarget_lock_release_recursive>
 800b0e6:	e7e9      	b.n	800b0bc <_vfiprintf_r+0x4c>
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	9309      	str	r3, [sp, #36]	; 0x24
 800b0ec:	2320      	movs	r3, #32
 800b0ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b0f2:	f8cd 800c 	str.w	r8, [sp, #12]
 800b0f6:	2330      	movs	r3, #48	; 0x30
 800b0f8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b2bc <_vfiprintf_r+0x24c>
 800b0fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b100:	f04f 0901 	mov.w	r9, #1
 800b104:	4623      	mov	r3, r4
 800b106:	469a      	mov	sl, r3
 800b108:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b10c:	b10a      	cbz	r2, 800b112 <_vfiprintf_r+0xa2>
 800b10e:	2a25      	cmp	r2, #37	; 0x25
 800b110:	d1f9      	bne.n	800b106 <_vfiprintf_r+0x96>
 800b112:	ebba 0b04 	subs.w	fp, sl, r4
 800b116:	d00b      	beq.n	800b130 <_vfiprintf_r+0xc0>
 800b118:	465b      	mov	r3, fp
 800b11a:	4622      	mov	r2, r4
 800b11c:	4629      	mov	r1, r5
 800b11e:	4630      	mov	r0, r6
 800b120:	f7ff ff93 	bl	800b04a <__sfputs_r>
 800b124:	3001      	adds	r0, #1
 800b126:	f000 80aa 	beq.w	800b27e <_vfiprintf_r+0x20e>
 800b12a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b12c:	445a      	add	r2, fp
 800b12e:	9209      	str	r2, [sp, #36]	; 0x24
 800b130:	f89a 3000 	ldrb.w	r3, [sl]
 800b134:	2b00      	cmp	r3, #0
 800b136:	f000 80a2 	beq.w	800b27e <_vfiprintf_r+0x20e>
 800b13a:	2300      	movs	r3, #0
 800b13c:	f04f 32ff 	mov.w	r2, #4294967295
 800b140:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b144:	f10a 0a01 	add.w	sl, sl, #1
 800b148:	9304      	str	r3, [sp, #16]
 800b14a:	9307      	str	r3, [sp, #28]
 800b14c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b150:	931a      	str	r3, [sp, #104]	; 0x68
 800b152:	4654      	mov	r4, sl
 800b154:	2205      	movs	r2, #5
 800b156:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b15a:	4858      	ldr	r0, [pc, #352]	; (800b2bc <_vfiprintf_r+0x24c>)
 800b15c:	f7f5 f860 	bl	8000220 <memchr>
 800b160:	9a04      	ldr	r2, [sp, #16]
 800b162:	b9d8      	cbnz	r0, 800b19c <_vfiprintf_r+0x12c>
 800b164:	06d1      	lsls	r1, r2, #27
 800b166:	bf44      	itt	mi
 800b168:	2320      	movmi	r3, #32
 800b16a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b16e:	0713      	lsls	r3, r2, #28
 800b170:	bf44      	itt	mi
 800b172:	232b      	movmi	r3, #43	; 0x2b
 800b174:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b178:	f89a 3000 	ldrb.w	r3, [sl]
 800b17c:	2b2a      	cmp	r3, #42	; 0x2a
 800b17e:	d015      	beq.n	800b1ac <_vfiprintf_r+0x13c>
 800b180:	9a07      	ldr	r2, [sp, #28]
 800b182:	4654      	mov	r4, sl
 800b184:	2000      	movs	r0, #0
 800b186:	f04f 0c0a 	mov.w	ip, #10
 800b18a:	4621      	mov	r1, r4
 800b18c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b190:	3b30      	subs	r3, #48	; 0x30
 800b192:	2b09      	cmp	r3, #9
 800b194:	d94e      	bls.n	800b234 <_vfiprintf_r+0x1c4>
 800b196:	b1b0      	cbz	r0, 800b1c6 <_vfiprintf_r+0x156>
 800b198:	9207      	str	r2, [sp, #28]
 800b19a:	e014      	b.n	800b1c6 <_vfiprintf_r+0x156>
 800b19c:	eba0 0308 	sub.w	r3, r0, r8
 800b1a0:	fa09 f303 	lsl.w	r3, r9, r3
 800b1a4:	4313      	orrs	r3, r2
 800b1a6:	9304      	str	r3, [sp, #16]
 800b1a8:	46a2      	mov	sl, r4
 800b1aa:	e7d2      	b.n	800b152 <_vfiprintf_r+0xe2>
 800b1ac:	9b03      	ldr	r3, [sp, #12]
 800b1ae:	1d19      	adds	r1, r3, #4
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	9103      	str	r1, [sp, #12]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	bfbb      	ittet	lt
 800b1b8:	425b      	neglt	r3, r3
 800b1ba:	f042 0202 	orrlt.w	r2, r2, #2
 800b1be:	9307      	strge	r3, [sp, #28]
 800b1c0:	9307      	strlt	r3, [sp, #28]
 800b1c2:	bfb8      	it	lt
 800b1c4:	9204      	strlt	r2, [sp, #16]
 800b1c6:	7823      	ldrb	r3, [r4, #0]
 800b1c8:	2b2e      	cmp	r3, #46	; 0x2e
 800b1ca:	d10c      	bne.n	800b1e6 <_vfiprintf_r+0x176>
 800b1cc:	7863      	ldrb	r3, [r4, #1]
 800b1ce:	2b2a      	cmp	r3, #42	; 0x2a
 800b1d0:	d135      	bne.n	800b23e <_vfiprintf_r+0x1ce>
 800b1d2:	9b03      	ldr	r3, [sp, #12]
 800b1d4:	1d1a      	adds	r2, r3, #4
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	9203      	str	r2, [sp, #12]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	bfb8      	it	lt
 800b1de:	f04f 33ff 	movlt.w	r3, #4294967295
 800b1e2:	3402      	adds	r4, #2
 800b1e4:	9305      	str	r3, [sp, #20]
 800b1e6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b2cc <_vfiprintf_r+0x25c>
 800b1ea:	7821      	ldrb	r1, [r4, #0]
 800b1ec:	2203      	movs	r2, #3
 800b1ee:	4650      	mov	r0, sl
 800b1f0:	f7f5 f816 	bl	8000220 <memchr>
 800b1f4:	b140      	cbz	r0, 800b208 <_vfiprintf_r+0x198>
 800b1f6:	2340      	movs	r3, #64	; 0x40
 800b1f8:	eba0 000a 	sub.w	r0, r0, sl
 800b1fc:	fa03 f000 	lsl.w	r0, r3, r0
 800b200:	9b04      	ldr	r3, [sp, #16]
 800b202:	4303      	orrs	r3, r0
 800b204:	3401      	adds	r4, #1
 800b206:	9304      	str	r3, [sp, #16]
 800b208:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b20c:	482c      	ldr	r0, [pc, #176]	; (800b2c0 <_vfiprintf_r+0x250>)
 800b20e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b212:	2206      	movs	r2, #6
 800b214:	f7f5 f804 	bl	8000220 <memchr>
 800b218:	2800      	cmp	r0, #0
 800b21a:	d03f      	beq.n	800b29c <_vfiprintf_r+0x22c>
 800b21c:	4b29      	ldr	r3, [pc, #164]	; (800b2c4 <_vfiprintf_r+0x254>)
 800b21e:	bb1b      	cbnz	r3, 800b268 <_vfiprintf_r+0x1f8>
 800b220:	9b03      	ldr	r3, [sp, #12]
 800b222:	3307      	adds	r3, #7
 800b224:	f023 0307 	bic.w	r3, r3, #7
 800b228:	3308      	adds	r3, #8
 800b22a:	9303      	str	r3, [sp, #12]
 800b22c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b22e:	443b      	add	r3, r7
 800b230:	9309      	str	r3, [sp, #36]	; 0x24
 800b232:	e767      	b.n	800b104 <_vfiprintf_r+0x94>
 800b234:	fb0c 3202 	mla	r2, ip, r2, r3
 800b238:	460c      	mov	r4, r1
 800b23a:	2001      	movs	r0, #1
 800b23c:	e7a5      	b.n	800b18a <_vfiprintf_r+0x11a>
 800b23e:	2300      	movs	r3, #0
 800b240:	3401      	adds	r4, #1
 800b242:	9305      	str	r3, [sp, #20]
 800b244:	4619      	mov	r1, r3
 800b246:	f04f 0c0a 	mov.w	ip, #10
 800b24a:	4620      	mov	r0, r4
 800b24c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b250:	3a30      	subs	r2, #48	; 0x30
 800b252:	2a09      	cmp	r2, #9
 800b254:	d903      	bls.n	800b25e <_vfiprintf_r+0x1ee>
 800b256:	2b00      	cmp	r3, #0
 800b258:	d0c5      	beq.n	800b1e6 <_vfiprintf_r+0x176>
 800b25a:	9105      	str	r1, [sp, #20]
 800b25c:	e7c3      	b.n	800b1e6 <_vfiprintf_r+0x176>
 800b25e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b262:	4604      	mov	r4, r0
 800b264:	2301      	movs	r3, #1
 800b266:	e7f0      	b.n	800b24a <_vfiprintf_r+0x1da>
 800b268:	ab03      	add	r3, sp, #12
 800b26a:	9300      	str	r3, [sp, #0]
 800b26c:	462a      	mov	r2, r5
 800b26e:	4b16      	ldr	r3, [pc, #88]	; (800b2c8 <_vfiprintf_r+0x258>)
 800b270:	a904      	add	r1, sp, #16
 800b272:	4630      	mov	r0, r6
 800b274:	f3af 8000 	nop.w
 800b278:	4607      	mov	r7, r0
 800b27a:	1c78      	adds	r0, r7, #1
 800b27c:	d1d6      	bne.n	800b22c <_vfiprintf_r+0x1bc>
 800b27e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b280:	07d9      	lsls	r1, r3, #31
 800b282:	d405      	bmi.n	800b290 <_vfiprintf_r+0x220>
 800b284:	89ab      	ldrh	r3, [r5, #12]
 800b286:	059a      	lsls	r2, r3, #22
 800b288:	d402      	bmi.n	800b290 <_vfiprintf_r+0x220>
 800b28a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b28c:	f000 fc35 	bl	800bafa <__retarget_lock_release_recursive>
 800b290:	89ab      	ldrh	r3, [r5, #12]
 800b292:	065b      	lsls	r3, r3, #25
 800b294:	f53f af12 	bmi.w	800b0bc <_vfiprintf_r+0x4c>
 800b298:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b29a:	e711      	b.n	800b0c0 <_vfiprintf_r+0x50>
 800b29c:	ab03      	add	r3, sp, #12
 800b29e:	9300      	str	r3, [sp, #0]
 800b2a0:	462a      	mov	r2, r5
 800b2a2:	4b09      	ldr	r3, [pc, #36]	; (800b2c8 <_vfiprintf_r+0x258>)
 800b2a4:	a904      	add	r1, sp, #16
 800b2a6:	4630      	mov	r0, r6
 800b2a8:	f000 f880 	bl	800b3ac <_printf_i>
 800b2ac:	e7e4      	b.n	800b278 <_vfiprintf_r+0x208>
 800b2ae:	bf00      	nop
 800b2b0:	0800c20c 	.word	0x0800c20c
 800b2b4:	0800c22c 	.word	0x0800c22c
 800b2b8:	0800c1ec 	.word	0x0800c1ec
 800b2bc:	0800c1b9 	.word	0x0800c1b9
 800b2c0:	0800c1c3 	.word	0x0800c1c3
 800b2c4:	00000000 	.word	0x00000000
 800b2c8:	0800b04b 	.word	0x0800b04b
 800b2cc:	0800c1bf 	.word	0x0800c1bf

0800b2d0 <_printf_common>:
 800b2d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2d4:	4616      	mov	r6, r2
 800b2d6:	4699      	mov	r9, r3
 800b2d8:	688a      	ldr	r2, [r1, #8]
 800b2da:	690b      	ldr	r3, [r1, #16]
 800b2dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b2e0:	4293      	cmp	r3, r2
 800b2e2:	bfb8      	it	lt
 800b2e4:	4613      	movlt	r3, r2
 800b2e6:	6033      	str	r3, [r6, #0]
 800b2e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b2ec:	4607      	mov	r7, r0
 800b2ee:	460c      	mov	r4, r1
 800b2f0:	b10a      	cbz	r2, 800b2f6 <_printf_common+0x26>
 800b2f2:	3301      	adds	r3, #1
 800b2f4:	6033      	str	r3, [r6, #0]
 800b2f6:	6823      	ldr	r3, [r4, #0]
 800b2f8:	0699      	lsls	r1, r3, #26
 800b2fa:	bf42      	ittt	mi
 800b2fc:	6833      	ldrmi	r3, [r6, #0]
 800b2fe:	3302      	addmi	r3, #2
 800b300:	6033      	strmi	r3, [r6, #0]
 800b302:	6825      	ldr	r5, [r4, #0]
 800b304:	f015 0506 	ands.w	r5, r5, #6
 800b308:	d106      	bne.n	800b318 <_printf_common+0x48>
 800b30a:	f104 0a19 	add.w	sl, r4, #25
 800b30e:	68e3      	ldr	r3, [r4, #12]
 800b310:	6832      	ldr	r2, [r6, #0]
 800b312:	1a9b      	subs	r3, r3, r2
 800b314:	42ab      	cmp	r3, r5
 800b316:	dc26      	bgt.n	800b366 <_printf_common+0x96>
 800b318:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b31c:	1e13      	subs	r3, r2, #0
 800b31e:	6822      	ldr	r2, [r4, #0]
 800b320:	bf18      	it	ne
 800b322:	2301      	movne	r3, #1
 800b324:	0692      	lsls	r2, r2, #26
 800b326:	d42b      	bmi.n	800b380 <_printf_common+0xb0>
 800b328:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b32c:	4649      	mov	r1, r9
 800b32e:	4638      	mov	r0, r7
 800b330:	47c0      	blx	r8
 800b332:	3001      	adds	r0, #1
 800b334:	d01e      	beq.n	800b374 <_printf_common+0xa4>
 800b336:	6823      	ldr	r3, [r4, #0]
 800b338:	68e5      	ldr	r5, [r4, #12]
 800b33a:	6832      	ldr	r2, [r6, #0]
 800b33c:	f003 0306 	and.w	r3, r3, #6
 800b340:	2b04      	cmp	r3, #4
 800b342:	bf08      	it	eq
 800b344:	1aad      	subeq	r5, r5, r2
 800b346:	68a3      	ldr	r3, [r4, #8]
 800b348:	6922      	ldr	r2, [r4, #16]
 800b34a:	bf0c      	ite	eq
 800b34c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b350:	2500      	movne	r5, #0
 800b352:	4293      	cmp	r3, r2
 800b354:	bfc4      	itt	gt
 800b356:	1a9b      	subgt	r3, r3, r2
 800b358:	18ed      	addgt	r5, r5, r3
 800b35a:	2600      	movs	r6, #0
 800b35c:	341a      	adds	r4, #26
 800b35e:	42b5      	cmp	r5, r6
 800b360:	d11a      	bne.n	800b398 <_printf_common+0xc8>
 800b362:	2000      	movs	r0, #0
 800b364:	e008      	b.n	800b378 <_printf_common+0xa8>
 800b366:	2301      	movs	r3, #1
 800b368:	4652      	mov	r2, sl
 800b36a:	4649      	mov	r1, r9
 800b36c:	4638      	mov	r0, r7
 800b36e:	47c0      	blx	r8
 800b370:	3001      	adds	r0, #1
 800b372:	d103      	bne.n	800b37c <_printf_common+0xac>
 800b374:	f04f 30ff 	mov.w	r0, #4294967295
 800b378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b37c:	3501      	adds	r5, #1
 800b37e:	e7c6      	b.n	800b30e <_printf_common+0x3e>
 800b380:	18e1      	adds	r1, r4, r3
 800b382:	1c5a      	adds	r2, r3, #1
 800b384:	2030      	movs	r0, #48	; 0x30
 800b386:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b38a:	4422      	add	r2, r4
 800b38c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b390:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b394:	3302      	adds	r3, #2
 800b396:	e7c7      	b.n	800b328 <_printf_common+0x58>
 800b398:	2301      	movs	r3, #1
 800b39a:	4622      	mov	r2, r4
 800b39c:	4649      	mov	r1, r9
 800b39e:	4638      	mov	r0, r7
 800b3a0:	47c0      	blx	r8
 800b3a2:	3001      	adds	r0, #1
 800b3a4:	d0e6      	beq.n	800b374 <_printf_common+0xa4>
 800b3a6:	3601      	adds	r6, #1
 800b3a8:	e7d9      	b.n	800b35e <_printf_common+0x8e>
	...

0800b3ac <_printf_i>:
 800b3ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b3b0:	7e0f      	ldrb	r7, [r1, #24]
 800b3b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b3b4:	2f78      	cmp	r7, #120	; 0x78
 800b3b6:	4691      	mov	r9, r2
 800b3b8:	4680      	mov	r8, r0
 800b3ba:	460c      	mov	r4, r1
 800b3bc:	469a      	mov	sl, r3
 800b3be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b3c2:	d807      	bhi.n	800b3d4 <_printf_i+0x28>
 800b3c4:	2f62      	cmp	r7, #98	; 0x62
 800b3c6:	d80a      	bhi.n	800b3de <_printf_i+0x32>
 800b3c8:	2f00      	cmp	r7, #0
 800b3ca:	f000 80d8 	beq.w	800b57e <_printf_i+0x1d2>
 800b3ce:	2f58      	cmp	r7, #88	; 0x58
 800b3d0:	f000 80a3 	beq.w	800b51a <_printf_i+0x16e>
 800b3d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b3d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b3dc:	e03a      	b.n	800b454 <_printf_i+0xa8>
 800b3de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b3e2:	2b15      	cmp	r3, #21
 800b3e4:	d8f6      	bhi.n	800b3d4 <_printf_i+0x28>
 800b3e6:	a101      	add	r1, pc, #4	; (adr r1, 800b3ec <_printf_i+0x40>)
 800b3e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b3ec:	0800b445 	.word	0x0800b445
 800b3f0:	0800b459 	.word	0x0800b459
 800b3f4:	0800b3d5 	.word	0x0800b3d5
 800b3f8:	0800b3d5 	.word	0x0800b3d5
 800b3fc:	0800b3d5 	.word	0x0800b3d5
 800b400:	0800b3d5 	.word	0x0800b3d5
 800b404:	0800b459 	.word	0x0800b459
 800b408:	0800b3d5 	.word	0x0800b3d5
 800b40c:	0800b3d5 	.word	0x0800b3d5
 800b410:	0800b3d5 	.word	0x0800b3d5
 800b414:	0800b3d5 	.word	0x0800b3d5
 800b418:	0800b565 	.word	0x0800b565
 800b41c:	0800b489 	.word	0x0800b489
 800b420:	0800b547 	.word	0x0800b547
 800b424:	0800b3d5 	.word	0x0800b3d5
 800b428:	0800b3d5 	.word	0x0800b3d5
 800b42c:	0800b587 	.word	0x0800b587
 800b430:	0800b3d5 	.word	0x0800b3d5
 800b434:	0800b489 	.word	0x0800b489
 800b438:	0800b3d5 	.word	0x0800b3d5
 800b43c:	0800b3d5 	.word	0x0800b3d5
 800b440:	0800b54f 	.word	0x0800b54f
 800b444:	682b      	ldr	r3, [r5, #0]
 800b446:	1d1a      	adds	r2, r3, #4
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	602a      	str	r2, [r5, #0]
 800b44c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b450:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b454:	2301      	movs	r3, #1
 800b456:	e0a3      	b.n	800b5a0 <_printf_i+0x1f4>
 800b458:	6820      	ldr	r0, [r4, #0]
 800b45a:	6829      	ldr	r1, [r5, #0]
 800b45c:	0606      	lsls	r6, r0, #24
 800b45e:	f101 0304 	add.w	r3, r1, #4
 800b462:	d50a      	bpl.n	800b47a <_printf_i+0xce>
 800b464:	680e      	ldr	r6, [r1, #0]
 800b466:	602b      	str	r3, [r5, #0]
 800b468:	2e00      	cmp	r6, #0
 800b46a:	da03      	bge.n	800b474 <_printf_i+0xc8>
 800b46c:	232d      	movs	r3, #45	; 0x2d
 800b46e:	4276      	negs	r6, r6
 800b470:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b474:	485e      	ldr	r0, [pc, #376]	; (800b5f0 <_printf_i+0x244>)
 800b476:	230a      	movs	r3, #10
 800b478:	e019      	b.n	800b4ae <_printf_i+0x102>
 800b47a:	680e      	ldr	r6, [r1, #0]
 800b47c:	602b      	str	r3, [r5, #0]
 800b47e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b482:	bf18      	it	ne
 800b484:	b236      	sxthne	r6, r6
 800b486:	e7ef      	b.n	800b468 <_printf_i+0xbc>
 800b488:	682b      	ldr	r3, [r5, #0]
 800b48a:	6820      	ldr	r0, [r4, #0]
 800b48c:	1d19      	adds	r1, r3, #4
 800b48e:	6029      	str	r1, [r5, #0]
 800b490:	0601      	lsls	r1, r0, #24
 800b492:	d501      	bpl.n	800b498 <_printf_i+0xec>
 800b494:	681e      	ldr	r6, [r3, #0]
 800b496:	e002      	b.n	800b49e <_printf_i+0xf2>
 800b498:	0646      	lsls	r6, r0, #25
 800b49a:	d5fb      	bpl.n	800b494 <_printf_i+0xe8>
 800b49c:	881e      	ldrh	r6, [r3, #0]
 800b49e:	4854      	ldr	r0, [pc, #336]	; (800b5f0 <_printf_i+0x244>)
 800b4a0:	2f6f      	cmp	r7, #111	; 0x6f
 800b4a2:	bf0c      	ite	eq
 800b4a4:	2308      	moveq	r3, #8
 800b4a6:	230a      	movne	r3, #10
 800b4a8:	2100      	movs	r1, #0
 800b4aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b4ae:	6865      	ldr	r5, [r4, #4]
 800b4b0:	60a5      	str	r5, [r4, #8]
 800b4b2:	2d00      	cmp	r5, #0
 800b4b4:	bfa2      	ittt	ge
 800b4b6:	6821      	ldrge	r1, [r4, #0]
 800b4b8:	f021 0104 	bicge.w	r1, r1, #4
 800b4bc:	6021      	strge	r1, [r4, #0]
 800b4be:	b90e      	cbnz	r6, 800b4c4 <_printf_i+0x118>
 800b4c0:	2d00      	cmp	r5, #0
 800b4c2:	d04d      	beq.n	800b560 <_printf_i+0x1b4>
 800b4c4:	4615      	mov	r5, r2
 800b4c6:	fbb6 f1f3 	udiv	r1, r6, r3
 800b4ca:	fb03 6711 	mls	r7, r3, r1, r6
 800b4ce:	5dc7      	ldrb	r7, [r0, r7]
 800b4d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b4d4:	4637      	mov	r7, r6
 800b4d6:	42bb      	cmp	r3, r7
 800b4d8:	460e      	mov	r6, r1
 800b4da:	d9f4      	bls.n	800b4c6 <_printf_i+0x11a>
 800b4dc:	2b08      	cmp	r3, #8
 800b4de:	d10b      	bne.n	800b4f8 <_printf_i+0x14c>
 800b4e0:	6823      	ldr	r3, [r4, #0]
 800b4e2:	07de      	lsls	r6, r3, #31
 800b4e4:	d508      	bpl.n	800b4f8 <_printf_i+0x14c>
 800b4e6:	6923      	ldr	r3, [r4, #16]
 800b4e8:	6861      	ldr	r1, [r4, #4]
 800b4ea:	4299      	cmp	r1, r3
 800b4ec:	bfde      	ittt	le
 800b4ee:	2330      	movle	r3, #48	; 0x30
 800b4f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b4f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b4f8:	1b52      	subs	r2, r2, r5
 800b4fa:	6122      	str	r2, [r4, #16]
 800b4fc:	f8cd a000 	str.w	sl, [sp]
 800b500:	464b      	mov	r3, r9
 800b502:	aa03      	add	r2, sp, #12
 800b504:	4621      	mov	r1, r4
 800b506:	4640      	mov	r0, r8
 800b508:	f7ff fee2 	bl	800b2d0 <_printf_common>
 800b50c:	3001      	adds	r0, #1
 800b50e:	d14c      	bne.n	800b5aa <_printf_i+0x1fe>
 800b510:	f04f 30ff 	mov.w	r0, #4294967295
 800b514:	b004      	add	sp, #16
 800b516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b51a:	4835      	ldr	r0, [pc, #212]	; (800b5f0 <_printf_i+0x244>)
 800b51c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b520:	6829      	ldr	r1, [r5, #0]
 800b522:	6823      	ldr	r3, [r4, #0]
 800b524:	f851 6b04 	ldr.w	r6, [r1], #4
 800b528:	6029      	str	r1, [r5, #0]
 800b52a:	061d      	lsls	r5, r3, #24
 800b52c:	d514      	bpl.n	800b558 <_printf_i+0x1ac>
 800b52e:	07df      	lsls	r7, r3, #31
 800b530:	bf44      	itt	mi
 800b532:	f043 0320 	orrmi.w	r3, r3, #32
 800b536:	6023      	strmi	r3, [r4, #0]
 800b538:	b91e      	cbnz	r6, 800b542 <_printf_i+0x196>
 800b53a:	6823      	ldr	r3, [r4, #0]
 800b53c:	f023 0320 	bic.w	r3, r3, #32
 800b540:	6023      	str	r3, [r4, #0]
 800b542:	2310      	movs	r3, #16
 800b544:	e7b0      	b.n	800b4a8 <_printf_i+0xfc>
 800b546:	6823      	ldr	r3, [r4, #0]
 800b548:	f043 0320 	orr.w	r3, r3, #32
 800b54c:	6023      	str	r3, [r4, #0]
 800b54e:	2378      	movs	r3, #120	; 0x78
 800b550:	4828      	ldr	r0, [pc, #160]	; (800b5f4 <_printf_i+0x248>)
 800b552:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b556:	e7e3      	b.n	800b520 <_printf_i+0x174>
 800b558:	0659      	lsls	r1, r3, #25
 800b55a:	bf48      	it	mi
 800b55c:	b2b6      	uxthmi	r6, r6
 800b55e:	e7e6      	b.n	800b52e <_printf_i+0x182>
 800b560:	4615      	mov	r5, r2
 800b562:	e7bb      	b.n	800b4dc <_printf_i+0x130>
 800b564:	682b      	ldr	r3, [r5, #0]
 800b566:	6826      	ldr	r6, [r4, #0]
 800b568:	6961      	ldr	r1, [r4, #20]
 800b56a:	1d18      	adds	r0, r3, #4
 800b56c:	6028      	str	r0, [r5, #0]
 800b56e:	0635      	lsls	r5, r6, #24
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	d501      	bpl.n	800b578 <_printf_i+0x1cc>
 800b574:	6019      	str	r1, [r3, #0]
 800b576:	e002      	b.n	800b57e <_printf_i+0x1d2>
 800b578:	0670      	lsls	r0, r6, #25
 800b57a:	d5fb      	bpl.n	800b574 <_printf_i+0x1c8>
 800b57c:	8019      	strh	r1, [r3, #0]
 800b57e:	2300      	movs	r3, #0
 800b580:	6123      	str	r3, [r4, #16]
 800b582:	4615      	mov	r5, r2
 800b584:	e7ba      	b.n	800b4fc <_printf_i+0x150>
 800b586:	682b      	ldr	r3, [r5, #0]
 800b588:	1d1a      	adds	r2, r3, #4
 800b58a:	602a      	str	r2, [r5, #0]
 800b58c:	681d      	ldr	r5, [r3, #0]
 800b58e:	6862      	ldr	r2, [r4, #4]
 800b590:	2100      	movs	r1, #0
 800b592:	4628      	mov	r0, r5
 800b594:	f7f4 fe44 	bl	8000220 <memchr>
 800b598:	b108      	cbz	r0, 800b59e <_printf_i+0x1f2>
 800b59a:	1b40      	subs	r0, r0, r5
 800b59c:	6060      	str	r0, [r4, #4]
 800b59e:	6863      	ldr	r3, [r4, #4]
 800b5a0:	6123      	str	r3, [r4, #16]
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b5a8:	e7a8      	b.n	800b4fc <_printf_i+0x150>
 800b5aa:	6923      	ldr	r3, [r4, #16]
 800b5ac:	462a      	mov	r2, r5
 800b5ae:	4649      	mov	r1, r9
 800b5b0:	4640      	mov	r0, r8
 800b5b2:	47d0      	blx	sl
 800b5b4:	3001      	adds	r0, #1
 800b5b6:	d0ab      	beq.n	800b510 <_printf_i+0x164>
 800b5b8:	6823      	ldr	r3, [r4, #0]
 800b5ba:	079b      	lsls	r3, r3, #30
 800b5bc:	d413      	bmi.n	800b5e6 <_printf_i+0x23a>
 800b5be:	68e0      	ldr	r0, [r4, #12]
 800b5c0:	9b03      	ldr	r3, [sp, #12]
 800b5c2:	4298      	cmp	r0, r3
 800b5c4:	bfb8      	it	lt
 800b5c6:	4618      	movlt	r0, r3
 800b5c8:	e7a4      	b.n	800b514 <_printf_i+0x168>
 800b5ca:	2301      	movs	r3, #1
 800b5cc:	4632      	mov	r2, r6
 800b5ce:	4649      	mov	r1, r9
 800b5d0:	4640      	mov	r0, r8
 800b5d2:	47d0      	blx	sl
 800b5d4:	3001      	adds	r0, #1
 800b5d6:	d09b      	beq.n	800b510 <_printf_i+0x164>
 800b5d8:	3501      	adds	r5, #1
 800b5da:	68e3      	ldr	r3, [r4, #12]
 800b5dc:	9903      	ldr	r1, [sp, #12]
 800b5de:	1a5b      	subs	r3, r3, r1
 800b5e0:	42ab      	cmp	r3, r5
 800b5e2:	dcf2      	bgt.n	800b5ca <_printf_i+0x21e>
 800b5e4:	e7eb      	b.n	800b5be <_printf_i+0x212>
 800b5e6:	2500      	movs	r5, #0
 800b5e8:	f104 0619 	add.w	r6, r4, #25
 800b5ec:	e7f5      	b.n	800b5da <_printf_i+0x22e>
 800b5ee:	bf00      	nop
 800b5f0:	0800c1ca 	.word	0x0800c1ca
 800b5f4:	0800c1db 	.word	0x0800c1db

0800b5f8 <__swbuf_r>:
 800b5f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5fa:	460e      	mov	r6, r1
 800b5fc:	4614      	mov	r4, r2
 800b5fe:	4605      	mov	r5, r0
 800b600:	b118      	cbz	r0, 800b60a <__swbuf_r+0x12>
 800b602:	6983      	ldr	r3, [r0, #24]
 800b604:	b90b      	cbnz	r3, 800b60a <__swbuf_r+0x12>
 800b606:	f000 f9d9 	bl	800b9bc <__sinit>
 800b60a:	4b21      	ldr	r3, [pc, #132]	; (800b690 <__swbuf_r+0x98>)
 800b60c:	429c      	cmp	r4, r3
 800b60e:	d12b      	bne.n	800b668 <__swbuf_r+0x70>
 800b610:	686c      	ldr	r4, [r5, #4]
 800b612:	69a3      	ldr	r3, [r4, #24]
 800b614:	60a3      	str	r3, [r4, #8]
 800b616:	89a3      	ldrh	r3, [r4, #12]
 800b618:	071a      	lsls	r2, r3, #28
 800b61a:	d52f      	bpl.n	800b67c <__swbuf_r+0x84>
 800b61c:	6923      	ldr	r3, [r4, #16]
 800b61e:	b36b      	cbz	r3, 800b67c <__swbuf_r+0x84>
 800b620:	6923      	ldr	r3, [r4, #16]
 800b622:	6820      	ldr	r0, [r4, #0]
 800b624:	1ac0      	subs	r0, r0, r3
 800b626:	6963      	ldr	r3, [r4, #20]
 800b628:	b2f6      	uxtb	r6, r6
 800b62a:	4283      	cmp	r3, r0
 800b62c:	4637      	mov	r7, r6
 800b62e:	dc04      	bgt.n	800b63a <__swbuf_r+0x42>
 800b630:	4621      	mov	r1, r4
 800b632:	4628      	mov	r0, r5
 800b634:	f000 f92e 	bl	800b894 <_fflush_r>
 800b638:	bb30      	cbnz	r0, 800b688 <__swbuf_r+0x90>
 800b63a:	68a3      	ldr	r3, [r4, #8]
 800b63c:	3b01      	subs	r3, #1
 800b63e:	60a3      	str	r3, [r4, #8]
 800b640:	6823      	ldr	r3, [r4, #0]
 800b642:	1c5a      	adds	r2, r3, #1
 800b644:	6022      	str	r2, [r4, #0]
 800b646:	701e      	strb	r6, [r3, #0]
 800b648:	6963      	ldr	r3, [r4, #20]
 800b64a:	3001      	adds	r0, #1
 800b64c:	4283      	cmp	r3, r0
 800b64e:	d004      	beq.n	800b65a <__swbuf_r+0x62>
 800b650:	89a3      	ldrh	r3, [r4, #12]
 800b652:	07db      	lsls	r3, r3, #31
 800b654:	d506      	bpl.n	800b664 <__swbuf_r+0x6c>
 800b656:	2e0a      	cmp	r6, #10
 800b658:	d104      	bne.n	800b664 <__swbuf_r+0x6c>
 800b65a:	4621      	mov	r1, r4
 800b65c:	4628      	mov	r0, r5
 800b65e:	f000 f919 	bl	800b894 <_fflush_r>
 800b662:	b988      	cbnz	r0, 800b688 <__swbuf_r+0x90>
 800b664:	4638      	mov	r0, r7
 800b666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b668:	4b0a      	ldr	r3, [pc, #40]	; (800b694 <__swbuf_r+0x9c>)
 800b66a:	429c      	cmp	r4, r3
 800b66c:	d101      	bne.n	800b672 <__swbuf_r+0x7a>
 800b66e:	68ac      	ldr	r4, [r5, #8]
 800b670:	e7cf      	b.n	800b612 <__swbuf_r+0x1a>
 800b672:	4b09      	ldr	r3, [pc, #36]	; (800b698 <__swbuf_r+0xa0>)
 800b674:	429c      	cmp	r4, r3
 800b676:	bf08      	it	eq
 800b678:	68ec      	ldreq	r4, [r5, #12]
 800b67a:	e7ca      	b.n	800b612 <__swbuf_r+0x1a>
 800b67c:	4621      	mov	r1, r4
 800b67e:	4628      	mov	r0, r5
 800b680:	f000 f80c 	bl	800b69c <__swsetup_r>
 800b684:	2800      	cmp	r0, #0
 800b686:	d0cb      	beq.n	800b620 <__swbuf_r+0x28>
 800b688:	f04f 37ff 	mov.w	r7, #4294967295
 800b68c:	e7ea      	b.n	800b664 <__swbuf_r+0x6c>
 800b68e:	bf00      	nop
 800b690:	0800c20c 	.word	0x0800c20c
 800b694:	0800c22c 	.word	0x0800c22c
 800b698:	0800c1ec 	.word	0x0800c1ec

0800b69c <__swsetup_r>:
 800b69c:	4b32      	ldr	r3, [pc, #200]	; (800b768 <__swsetup_r+0xcc>)
 800b69e:	b570      	push	{r4, r5, r6, lr}
 800b6a0:	681d      	ldr	r5, [r3, #0]
 800b6a2:	4606      	mov	r6, r0
 800b6a4:	460c      	mov	r4, r1
 800b6a6:	b125      	cbz	r5, 800b6b2 <__swsetup_r+0x16>
 800b6a8:	69ab      	ldr	r3, [r5, #24]
 800b6aa:	b913      	cbnz	r3, 800b6b2 <__swsetup_r+0x16>
 800b6ac:	4628      	mov	r0, r5
 800b6ae:	f000 f985 	bl	800b9bc <__sinit>
 800b6b2:	4b2e      	ldr	r3, [pc, #184]	; (800b76c <__swsetup_r+0xd0>)
 800b6b4:	429c      	cmp	r4, r3
 800b6b6:	d10f      	bne.n	800b6d8 <__swsetup_r+0x3c>
 800b6b8:	686c      	ldr	r4, [r5, #4]
 800b6ba:	89a3      	ldrh	r3, [r4, #12]
 800b6bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b6c0:	0719      	lsls	r1, r3, #28
 800b6c2:	d42c      	bmi.n	800b71e <__swsetup_r+0x82>
 800b6c4:	06dd      	lsls	r5, r3, #27
 800b6c6:	d411      	bmi.n	800b6ec <__swsetup_r+0x50>
 800b6c8:	2309      	movs	r3, #9
 800b6ca:	6033      	str	r3, [r6, #0]
 800b6cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b6d0:	81a3      	strh	r3, [r4, #12]
 800b6d2:	f04f 30ff 	mov.w	r0, #4294967295
 800b6d6:	e03e      	b.n	800b756 <__swsetup_r+0xba>
 800b6d8:	4b25      	ldr	r3, [pc, #148]	; (800b770 <__swsetup_r+0xd4>)
 800b6da:	429c      	cmp	r4, r3
 800b6dc:	d101      	bne.n	800b6e2 <__swsetup_r+0x46>
 800b6de:	68ac      	ldr	r4, [r5, #8]
 800b6e0:	e7eb      	b.n	800b6ba <__swsetup_r+0x1e>
 800b6e2:	4b24      	ldr	r3, [pc, #144]	; (800b774 <__swsetup_r+0xd8>)
 800b6e4:	429c      	cmp	r4, r3
 800b6e6:	bf08      	it	eq
 800b6e8:	68ec      	ldreq	r4, [r5, #12]
 800b6ea:	e7e6      	b.n	800b6ba <__swsetup_r+0x1e>
 800b6ec:	0758      	lsls	r0, r3, #29
 800b6ee:	d512      	bpl.n	800b716 <__swsetup_r+0x7a>
 800b6f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b6f2:	b141      	cbz	r1, 800b706 <__swsetup_r+0x6a>
 800b6f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b6f8:	4299      	cmp	r1, r3
 800b6fa:	d002      	beq.n	800b702 <__swsetup_r+0x66>
 800b6fc:	4630      	mov	r0, r6
 800b6fe:	f7ff fc41 	bl	800af84 <_free_r>
 800b702:	2300      	movs	r3, #0
 800b704:	6363      	str	r3, [r4, #52]	; 0x34
 800b706:	89a3      	ldrh	r3, [r4, #12]
 800b708:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b70c:	81a3      	strh	r3, [r4, #12]
 800b70e:	2300      	movs	r3, #0
 800b710:	6063      	str	r3, [r4, #4]
 800b712:	6923      	ldr	r3, [r4, #16]
 800b714:	6023      	str	r3, [r4, #0]
 800b716:	89a3      	ldrh	r3, [r4, #12]
 800b718:	f043 0308 	orr.w	r3, r3, #8
 800b71c:	81a3      	strh	r3, [r4, #12]
 800b71e:	6923      	ldr	r3, [r4, #16]
 800b720:	b94b      	cbnz	r3, 800b736 <__swsetup_r+0x9a>
 800b722:	89a3      	ldrh	r3, [r4, #12]
 800b724:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b728:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b72c:	d003      	beq.n	800b736 <__swsetup_r+0x9a>
 800b72e:	4621      	mov	r1, r4
 800b730:	4630      	mov	r0, r6
 800b732:	f000 fa09 	bl	800bb48 <__smakebuf_r>
 800b736:	89a0      	ldrh	r0, [r4, #12]
 800b738:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b73c:	f010 0301 	ands.w	r3, r0, #1
 800b740:	d00a      	beq.n	800b758 <__swsetup_r+0xbc>
 800b742:	2300      	movs	r3, #0
 800b744:	60a3      	str	r3, [r4, #8]
 800b746:	6963      	ldr	r3, [r4, #20]
 800b748:	425b      	negs	r3, r3
 800b74a:	61a3      	str	r3, [r4, #24]
 800b74c:	6923      	ldr	r3, [r4, #16]
 800b74e:	b943      	cbnz	r3, 800b762 <__swsetup_r+0xc6>
 800b750:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b754:	d1ba      	bne.n	800b6cc <__swsetup_r+0x30>
 800b756:	bd70      	pop	{r4, r5, r6, pc}
 800b758:	0781      	lsls	r1, r0, #30
 800b75a:	bf58      	it	pl
 800b75c:	6963      	ldrpl	r3, [r4, #20]
 800b75e:	60a3      	str	r3, [r4, #8]
 800b760:	e7f4      	b.n	800b74c <__swsetup_r+0xb0>
 800b762:	2000      	movs	r0, #0
 800b764:	e7f7      	b.n	800b756 <__swsetup_r+0xba>
 800b766:	bf00      	nop
 800b768:	20000110 	.word	0x20000110
 800b76c:	0800c20c 	.word	0x0800c20c
 800b770:	0800c22c 	.word	0x0800c22c
 800b774:	0800c1ec 	.word	0x0800c1ec

0800b778 <abort>:
 800b778:	b508      	push	{r3, lr}
 800b77a:	2006      	movs	r0, #6
 800b77c:	f000 fa4c 	bl	800bc18 <raise>
 800b780:	2001      	movs	r0, #1
 800b782:	f7f5 fd3f 	bl	8001204 <_exit>
	...

0800b788 <__sflush_r>:
 800b788:	898a      	ldrh	r2, [r1, #12]
 800b78a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b78e:	4605      	mov	r5, r0
 800b790:	0710      	lsls	r0, r2, #28
 800b792:	460c      	mov	r4, r1
 800b794:	d458      	bmi.n	800b848 <__sflush_r+0xc0>
 800b796:	684b      	ldr	r3, [r1, #4]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	dc05      	bgt.n	800b7a8 <__sflush_r+0x20>
 800b79c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	dc02      	bgt.n	800b7a8 <__sflush_r+0x20>
 800b7a2:	2000      	movs	r0, #0
 800b7a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b7aa:	2e00      	cmp	r6, #0
 800b7ac:	d0f9      	beq.n	800b7a2 <__sflush_r+0x1a>
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b7b4:	682f      	ldr	r7, [r5, #0]
 800b7b6:	602b      	str	r3, [r5, #0]
 800b7b8:	d032      	beq.n	800b820 <__sflush_r+0x98>
 800b7ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b7bc:	89a3      	ldrh	r3, [r4, #12]
 800b7be:	075a      	lsls	r2, r3, #29
 800b7c0:	d505      	bpl.n	800b7ce <__sflush_r+0x46>
 800b7c2:	6863      	ldr	r3, [r4, #4]
 800b7c4:	1ac0      	subs	r0, r0, r3
 800b7c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b7c8:	b10b      	cbz	r3, 800b7ce <__sflush_r+0x46>
 800b7ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b7cc:	1ac0      	subs	r0, r0, r3
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	4602      	mov	r2, r0
 800b7d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b7d4:	6a21      	ldr	r1, [r4, #32]
 800b7d6:	4628      	mov	r0, r5
 800b7d8:	47b0      	blx	r6
 800b7da:	1c43      	adds	r3, r0, #1
 800b7dc:	89a3      	ldrh	r3, [r4, #12]
 800b7de:	d106      	bne.n	800b7ee <__sflush_r+0x66>
 800b7e0:	6829      	ldr	r1, [r5, #0]
 800b7e2:	291d      	cmp	r1, #29
 800b7e4:	d82c      	bhi.n	800b840 <__sflush_r+0xb8>
 800b7e6:	4a2a      	ldr	r2, [pc, #168]	; (800b890 <__sflush_r+0x108>)
 800b7e8:	40ca      	lsrs	r2, r1
 800b7ea:	07d6      	lsls	r6, r2, #31
 800b7ec:	d528      	bpl.n	800b840 <__sflush_r+0xb8>
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	6062      	str	r2, [r4, #4]
 800b7f2:	04d9      	lsls	r1, r3, #19
 800b7f4:	6922      	ldr	r2, [r4, #16]
 800b7f6:	6022      	str	r2, [r4, #0]
 800b7f8:	d504      	bpl.n	800b804 <__sflush_r+0x7c>
 800b7fa:	1c42      	adds	r2, r0, #1
 800b7fc:	d101      	bne.n	800b802 <__sflush_r+0x7a>
 800b7fe:	682b      	ldr	r3, [r5, #0]
 800b800:	b903      	cbnz	r3, 800b804 <__sflush_r+0x7c>
 800b802:	6560      	str	r0, [r4, #84]	; 0x54
 800b804:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b806:	602f      	str	r7, [r5, #0]
 800b808:	2900      	cmp	r1, #0
 800b80a:	d0ca      	beq.n	800b7a2 <__sflush_r+0x1a>
 800b80c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b810:	4299      	cmp	r1, r3
 800b812:	d002      	beq.n	800b81a <__sflush_r+0x92>
 800b814:	4628      	mov	r0, r5
 800b816:	f7ff fbb5 	bl	800af84 <_free_r>
 800b81a:	2000      	movs	r0, #0
 800b81c:	6360      	str	r0, [r4, #52]	; 0x34
 800b81e:	e7c1      	b.n	800b7a4 <__sflush_r+0x1c>
 800b820:	6a21      	ldr	r1, [r4, #32]
 800b822:	2301      	movs	r3, #1
 800b824:	4628      	mov	r0, r5
 800b826:	47b0      	blx	r6
 800b828:	1c41      	adds	r1, r0, #1
 800b82a:	d1c7      	bne.n	800b7bc <__sflush_r+0x34>
 800b82c:	682b      	ldr	r3, [r5, #0]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d0c4      	beq.n	800b7bc <__sflush_r+0x34>
 800b832:	2b1d      	cmp	r3, #29
 800b834:	d001      	beq.n	800b83a <__sflush_r+0xb2>
 800b836:	2b16      	cmp	r3, #22
 800b838:	d101      	bne.n	800b83e <__sflush_r+0xb6>
 800b83a:	602f      	str	r7, [r5, #0]
 800b83c:	e7b1      	b.n	800b7a2 <__sflush_r+0x1a>
 800b83e:	89a3      	ldrh	r3, [r4, #12]
 800b840:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b844:	81a3      	strh	r3, [r4, #12]
 800b846:	e7ad      	b.n	800b7a4 <__sflush_r+0x1c>
 800b848:	690f      	ldr	r7, [r1, #16]
 800b84a:	2f00      	cmp	r7, #0
 800b84c:	d0a9      	beq.n	800b7a2 <__sflush_r+0x1a>
 800b84e:	0793      	lsls	r3, r2, #30
 800b850:	680e      	ldr	r6, [r1, #0]
 800b852:	bf08      	it	eq
 800b854:	694b      	ldreq	r3, [r1, #20]
 800b856:	600f      	str	r7, [r1, #0]
 800b858:	bf18      	it	ne
 800b85a:	2300      	movne	r3, #0
 800b85c:	eba6 0807 	sub.w	r8, r6, r7
 800b860:	608b      	str	r3, [r1, #8]
 800b862:	f1b8 0f00 	cmp.w	r8, #0
 800b866:	dd9c      	ble.n	800b7a2 <__sflush_r+0x1a>
 800b868:	6a21      	ldr	r1, [r4, #32]
 800b86a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b86c:	4643      	mov	r3, r8
 800b86e:	463a      	mov	r2, r7
 800b870:	4628      	mov	r0, r5
 800b872:	47b0      	blx	r6
 800b874:	2800      	cmp	r0, #0
 800b876:	dc06      	bgt.n	800b886 <__sflush_r+0xfe>
 800b878:	89a3      	ldrh	r3, [r4, #12]
 800b87a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b87e:	81a3      	strh	r3, [r4, #12]
 800b880:	f04f 30ff 	mov.w	r0, #4294967295
 800b884:	e78e      	b.n	800b7a4 <__sflush_r+0x1c>
 800b886:	4407      	add	r7, r0
 800b888:	eba8 0800 	sub.w	r8, r8, r0
 800b88c:	e7e9      	b.n	800b862 <__sflush_r+0xda>
 800b88e:	bf00      	nop
 800b890:	20400001 	.word	0x20400001

0800b894 <_fflush_r>:
 800b894:	b538      	push	{r3, r4, r5, lr}
 800b896:	690b      	ldr	r3, [r1, #16]
 800b898:	4605      	mov	r5, r0
 800b89a:	460c      	mov	r4, r1
 800b89c:	b913      	cbnz	r3, 800b8a4 <_fflush_r+0x10>
 800b89e:	2500      	movs	r5, #0
 800b8a0:	4628      	mov	r0, r5
 800b8a2:	bd38      	pop	{r3, r4, r5, pc}
 800b8a4:	b118      	cbz	r0, 800b8ae <_fflush_r+0x1a>
 800b8a6:	6983      	ldr	r3, [r0, #24]
 800b8a8:	b90b      	cbnz	r3, 800b8ae <_fflush_r+0x1a>
 800b8aa:	f000 f887 	bl	800b9bc <__sinit>
 800b8ae:	4b14      	ldr	r3, [pc, #80]	; (800b900 <_fflush_r+0x6c>)
 800b8b0:	429c      	cmp	r4, r3
 800b8b2:	d11b      	bne.n	800b8ec <_fflush_r+0x58>
 800b8b4:	686c      	ldr	r4, [r5, #4]
 800b8b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d0ef      	beq.n	800b89e <_fflush_r+0xa>
 800b8be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b8c0:	07d0      	lsls	r0, r2, #31
 800b8c2:	d404      	bmi.n	800b8ce <_fflush_r+0x3a>
 800b8c4:	0599      	lsls	r1, r3, #22
 800b8c6:	d402      	bmi.n	800b8ce <_fflush_r+0x3a>
 800b8c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b8ca:	f000 f915 	bl	800baf8 <__retarget_lock_acquire_recursive>
 800b8ce:	4628      	mov	r0, r5
 800b8d0:	4621      	mov	r1, r4
 800b8d2:	f7ff ff59 	bl	800b788 <__sflush_r>
 800b8d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b8d8:	07da      	lsls	r2, r3, #31
 800b8da:	4605      	mov	r5, r0
 800b8dc:	d4e0      	bmi.n	800b8a0 <_fflush_r+0xc>
 800b8de:	89a3      	ldrh	r3, [r4, #12]
 800b8e0:	059b      	lsls	r3, r3, #22
 800b8e2:	d4dd      	bmi.n	800b8a0 <_fflush_r+0xc>
 800b8e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b8e6:	f000 f908 	bl	800bafa <__retarget_lock_release_recursive>
 800b8ea:	e7d9      	b.n	800b8a0 <_fflush_r+0xc>
 800b8ec:	4b05      	ldr	r3, [pc, #20]	; (800b904 <_fflush_r+0x70>)
 800b8ee:	429c      	cmp	r4, r3
 800b8f0:	d101      	bne.n	800b8f6 <_fflush_r+0x62>
 800b8f2:	68ac      	ldr	r4, [r5, #8]
 800b8f4:	e7df      	b.n	800b8b6 <_fflush_r+0x22>
 800b8f6:	4b04      	ldr	r3, [pc, #16]	; (800b908 <_fflush_r+0x74>)
 800b8f8:	429c      	cmp	r4, r3
 800b8fa:	bf08      	it	eq
 800b8fc:	68ec      	ldreq	r4, [r5, #12]
 800b8fe:	e7da      	b.n	800b8b6 <_fflush_r+0x22>
 800b900:	0800c20c 	.word	0x0800c20c
 800b904:	0800c22c 	.word	0x0800c22c
 800b908:	0800c1ec 	.word	0x0800c1ec

0800b90c <std>:
 800b90c:	2300      	movs	r3, #0
 800b90e:	b510      	push	{r4, lr}
 800b910:	4604      	mov	r4, r0
 800b912:	e9c0 3300 	strd	r3, r3, [r0]
 800b916:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b91a:	6083      	str	r3, [r0, #8]
 800b91c:	8181      	strh	r1, [r0, #12]
 800b91e:	6643      	str	r3, [r0, #100]	; 0x64
 800b920:	81c2      	strh	r2, [r0, #14]
 800b922:	6183      	str	r3, [r0, #24]
 800b924:	4619      	mov	r1, r3
 800b926:	2208      	movs	r2, #8
 800b928:	305c      	adds	r0, #92	; 0x5c
 800b92a:	f7fd fb77 	bl	800901c <memset>
 800b92e:	4b05      	ldr	r3, [pc, #20]	; (800b944 <std+0x38>)
 800b930:	6263      	str	r3, [r4, #36]	; 0x24
 800b932:	4b05      	ldr	r3, [pc, #20]	; (800b948 <std+0x3c>)
 800b934:	62a3      	str	r3, [r4, #40]	; 0x28
 800b936:	4b05      	ldr	r3, [pc, #20]	; (800b94c <std+0x40>)
 800b938:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b93a:	4b05      	ldr	r3, [pc, #20]	; (800b950 <std+0x44>)
 800b93c:	6224      	str	r4, [r4, #32]
 800b93e:	6323      	str	r3, [r4, #48]	; 0x30
 800b940:	bd10      	pop	{r4, pc}
 800b942:	bf00      	nop
 800b944:	0800bc51 	.word	0x0800bc51
 800b948:	0800bc73 	.word	0x0800bc73
 800b94c:	0800bcab 	.word	0x0800bcab
 800b950:	0800bccf 	.word	0x0800bccf

0800b954 <_cleanup_r>:
 800b954:	4901      	ldr	r1, [pc, #4]	; (800b95c <_cleanup_r+0x8>)
 800b956:	f000 b8af 	b.w	800bab8 <_fwalk_reent>
 800b95a:	bf00      	nop
 800b95c:	0800b895 	.word	0x0800b895

0800b960 <__sfmoreglue>:
 800b960:	b570      	push	{r4, r5, r6, lr}
 800b962:	2268      	movs	r2, #104	; 0x68
 800b964:	1e4d      	subs	r5, r1, #1
 800b966:	4355      	muls	r5, r2
 800b968:	460e      	mov	r6, r1
 800b96a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b96e:	f7ff fa15 	bl	800ad9c <_malloc_r>
 800b972:	4604      	mov	r4, r0
 800b974:	b140      	cbz	r0, 800b988 <__sfmoreglue+0x28>
 800b976:	2100      	movs	r1, #0
 800b978:	e9c0 1600 	strd	r1, r6, [r0]
 800b97c:	300c      	adds	r0, #12
 800b97e:	60a0      	str	r0, [r4, #8]
 800b980:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b984:	f7fd fb4a 	bl	800901c <memset>
 800b988:	4620      	mov	r0, r4
 800b98a:	bd70      	pop	{r4, r5, r6, pc}

0800b98c <__sfp_lock_acquire>:
 800b98c:	4801      	ldr	r0, [pc, #4]	; (800b994 <__sfp_lock_acquire+0x8>)
 800b98e:	f000 b8b3 	b.w	800baf8 <__retarget_lock_acquire_recursive>
 800b992:	bf00      	nop
 800b994:	20001f71 	.word	0x20001f71

0800b998 <__sfp_lock_release>:
 800b998:	4801      	ldr	r0, [pc, #4]	; (800b9a0 <__sfp_lock_release+0x8>)
 800b99a:	f000 b8ae 	b.w	800bafa <__retarget_lock_release_recursive>
 800b99e:	bf00      	nop
 800b9a0:	20001f71 	.word	0x20001f71

0800b9a4 <__sinit_lock_acquire>:
 800b9a4:	4801      	ldr	r0, [pc, #4]	; (800b9ac <__sinit_lock_acquire+0x8>)
 800b9a6:	f000 b8a7 	b.w	800baf8 <__retarget_lock_acquire_recursive>
 800b9aa:	bf00      	nop
 800b9ac:	20001f72 	.word	0x20001f72

0800b9b0 <__sinit_lock_release>:
 800b9b0:	4801      	ldr	r0, [pc, #4]	; (800b9b8 <__sinit_lock_release+0x8>)
 800b9b2:	f000 b8a2 	b.w	800bafa <__retarget_lock_release_recursive>
 800b9b6:	bf00      	nop
 800b9b8:	20001f72 	.word	0x20001f72

0800b9bc <__sinit>:
 800b9bc:	b510      	push	{r4, lr}
 800b9be:	4604      	mov	r4, r0
 800b9c0:	f7ff fff0 	bl	800b9a4 <__sinit_lock_acquire>
 800b9c4:	69a3      	ldr	r3, [r4, #24]
 800b9c6:	b11b      	cbz	r3, 800b9d0 <__sinit+0x14>
 800b9c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b9cc:	f7ff bff0 	b.w	800b9b0 <__sinit_lock_release>
 800b9d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b9d4:	6523      	str	r3, [r4, #80]	; 0x50
 800b9d6:	4b13      	ldr	r3, [pc, #76]	; (800ba24 <__sinit+0x68>)
 800b9d8:	4a13      	ldr	r2, [pc, #76]	; (800ba28 <__sinit+0x6c>)
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	62a2      	str	r2, [r4, #40]	; 0x28
 800b9de:	42a3      	cmp	r3, r4
 800b9e0:	bf04      	itt	eq
 800b9e2:	2301      	moveq	r3, #1
 800b9e4:	61a3      	streq	r3, [r4, #24]
 800b9e6:	4620      	mov	r0, r4
 800b9e8:	f000 f820 	bl	800ba2c <__sfp>
 800b9ec:	6060      	str	r0, [r4, #4]
 800b9ee:	4620      	mov	r0, r4
 800b9f0:	f000 f81c 	bl	800ba2c <__sfp>
 800b9f4:	60a0      	str	r0, [r4, #8]
 800b9f6:	4620      	mov	r0, r4
 800b9f8:	f000 f818 	bl	800ba2c <__sfp>
 800b9fc:	2200      	movs	r2, #0
 800b9fe:	60e0      	str	r0, [r4, #12]
 800ba00:	2104      	movs	r1, #4
 800ba02:	6860      	ldr	r0, [r4, #4]
 800ba04:	f7ff ff82 	bl	800b90c <std>
 800ba08:	68a0      	ldr	r0, [r4, #8]
 800ba0a:	2201      	movs	r2, #1
 800ba0c:	2109      	movs	r1, #9
 800ba0e:	f7ff ff7d 	bl	800b90c <std>
 800ba12:	68e0      	ldr	r0, [r4, #12]
 800ba14:	2202      	movs	r2, #2
 800ba16:	2112      	movs	r1, #18
 800ba18:	f7ff ff78 	bl	800b90c <std>
 800ba1c:	2301      	movs	r3, #1
 800ba1e:	61a3      	str	r3, [r4, #24]
 800ba20:	e7d2      	b.n	800b9c8 <__sinit+0xc>
 800ba22:	bf00      	nop
 800ba24:	0800be1c 	.word	0x0800be1c
 800ba28:	0800b955 	.word	0x0800b955

0800ba2c <__sfp>:
 800ba2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba2e:	4607      	mov	r7, r0
 800ba30:	f7ff ffac 	bl	800b98c <__sfp_lock_acquire>
 800ba34:	4b1e      	ldr	r3, [pc, #120]	; (800bab0 <__sfp+0x84>)
 800ba36:	681e      	ldr	r6, [r3, #0]
 800ba38:	69b3      	ldr	r3, [r6, #24]
 800ba3a:	b913      	cbnz	r3, 800ba42 <__sfp+0x16>
 800ba3c:	4630      	mov	r0, r6
 800ba3e:	f7ff ffbd 	bl	800b9bc <__sinit>
 800ba42:	3648      	adds	r6, #72	; 0x48
 800ba44:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ba48:	3b01      	subs	r3, #1
 800ba4a:	d503      	bpl.n	800ba54 <__sfp+0x28>
 800ba4c:	6833      	ldr	r3, [r6, #0]
 800ba4e:	b30b      	cbz	r3, 800ba94 <__sfp+0x68>
 800ba50:	6836      	ldr	r6, [r6, #0]
 800ba52:	e7f7      	b.n	800ba44 <__sfp+0x18>
 800ba54:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ba58:	b9d5      	cbnz	r5, 800ba90 <__sfp+0x64>
 800ba5a:	4b16      	ldr	r3, [pc, #88]	; (800bab4 <__sfp+0x88>)
 800ba5c:	60e3      	str	r3, [r4, #12]
 800ba5e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ba62:	6665      	str	r5, [r4, #100]	; 0x64
 800ba64:	f000 f847 	bl	800baf6 <__retarget_lock_init_recursive>
 800ba68:	f7ff ff96 	bl	800b998 <__sfp_lock_release>
 800ba6c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ba70:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ba74:	6025      	str	r5, [r4, #0]
 800ba76:	61a5      	str	r5, [r4, #24]
 800ba78:	2208      	movs	r2, #8
 800ba7a:	4629      	mov	r1, r5
 800ba7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ba80:	f7fd facc 	bl	800901c <memset>
 800ba84:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ba88:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ba8c:	4620      	mov	r0, r4
 800ba8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba90:	3468      	adds	r4, #104	; 0x68
 800ba92:	e7d9      	b.n	800ba48 <__sfp+0x1c>
 800ba94:	2104      	movs	r1, #4
 800ba96:	4638      	mov	r0, r7
 800ba98:	f7ff ff62 	bl	800b960 <__sfmoreglue>
 800ba9c:	4604      	mov	r4, r0
 800ba9e:	6030      	str	r0, [r6, #0]
 800baa0:	2800      	cmp	r0, #0
 800baa2:	d1d5      	bne.n	800ba50 <__sfp+0x24>
 800baa4:	f7ff ff78 	bl	800b998 <__sfp_lock_release>
 800baa8:	230c      	movs	r3, #12
 800baaa:	603b      	str	r3, [r7, #0]
 800baac:	e7ee      	b.n	800ba8c <__sfp+0x60>
 800baae:	bf00      	nop
 800bab0:	0800be1c 	.word	0x0800be1c
 800bab4:	ffff0001 	.word	0xffff0001

0800bab8 <_fwalk_reent>:
 800bab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800babc:	4606      	mov	r6, r0
 800babe:	4688      	mov	r8, r1
 800bac0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bac4:	2700      	movs	r7, #0
 800bac6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800baca:	f1b9 0901 	subs.w	r9, r9, #1
 800bace:	d505      	bpl.n	800badc <_fwalk_reent+0x24>
 800bad0:	6824      	ldr	r4, [r4, #0]
 800bad2:	2c00      	cmp	r4, #0
 800bad4:	d1f7      	bne.n	800bac6 <_fwalk_reent+0xe>
 800bad6:	4638      	mov	r0, r7
 800bad8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800badc:	89ab      	ldrh	r3, [r5, #12]
 800bade:	2b01      	cmp	r3, #1
 800bae0:	d907      	bls.n	800baf2 <_fwalk_reent+0x3a>
 800bae2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bae6:	3301      	adds	r3, #1
 800bae8:	d003      	beq.n	800baf2 <_fwalk_reent+0x3a>
 800baea:	4629      	mov	r1, r5
 800baec:	4630      	mov	r0, r6
 800baee:	47c0      	blx	r8
 800baf0:	4307      	orrs	r7, r0
 800baf2:	3568      	adds	r5, #104	; 0x68
 800baf4:	e7e9      	b.n	800baca <_fwalk_reent+0x12>

0800baf6 <__retarget_lock_init_recursive>:
 800baf6:	4770      	bx	lr

0800baf8 <__retarget_lock_acquire_recursive>:
 800baf8:	4770      	bx	lr

0800bafa <__retarget_lock_release_recursive>:
 800bafa:	4770      	bx	lr

0800bafc <__swhatbuf_r>:
 800bafc:	b570      	push	{r4, r5, r6, lr}
 800bafe:	460e      	mov	r6, r1
 800bb00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb04:	2900      	cmp	r1, #0
 800bb06:	b096      	sub	sp, #88	; 0x58
 800bb08:	4614      	mov	r4, r2
 800bb0a:	461d      	mov	r5, r3
 800bb0c:	da08      	bge.n	800bb20 <__swhatbuf_r+0x24>
 800bb0e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800bb12:	2200      	movs	r2, #0
 800bb14:	602a      	str	r2, [r5, #0]
 800bb16:	061a      	lsls	r2, r3, #24
 800bb18:	d410      	bmi.n	800bb3c <__swhatbuf_r+0x40>
 800bb1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb1e:	e00e      	b.n	800bb3e <__swhatbuf_r+0x42>
 800bb20:	466a      	mov	r2, sp
 800bb22:	f000 f8fb 	bl	800bd1c <_fstat_r>
 800bb26:	2800      	cmp	r0, #0
 800bb28:	dbf1      	blt.n	800bb0e <__swhatbuf_r+0x12>
 800bb2a:	9a01      	ldr	r2, [sp, #4]
 800bb2c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bb30:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bb34:	425a      	negs	r2, r3
 800bb36:	415a      	adcs	r2, r3
 800bb38:	602a      	str	r2, [r5, #0]
 800bb3a:	e7ee      	b.n	800bb1a <__swhatbuf_r+0x1e>
 800bb3c:	2340      	movs	r3, #64	; 0x40
 800bb3e:	2000      	movs	r0, #0
 800bb40:	6023      	str	r3, [r4, #0]
 800bb42:	b016      	add	sp, #88	; 0x58
 800bb44:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bb48 <__smakebuf_r>:
 800bb48:	898b      	ldrh	r3, [r1, #12]
 800bb4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bb4c:	079d      	lsls	r5, r3, #30
 800bb4e:	4606      	mov	r6, r0
 800bb50:	460c      	mov	r4, r1
 800bb52:	d507      	bpl.n	800bb64 <__smakebuf_r+0x1c>
 800bb54:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bb58:	6023      	str	r3, [r4, #0]
 800bb5a:	6123      	str	r3, [r4, #16]
 800bb5c:	2301      	movs	r3, #1
 800bb5e:	6163      	str	r3, [r4, #20]
 800bb60:	b002      	add	sp, #8
 800bb62:	bd70      	pop	{r4, r5, r6, pc}
 800bb64:	ab01      	add	r3, sp, #4
 800bb66:	466a      	mov	r2, sp
 800bb68:	f7ff ffc8 	bl	800bafc <__swhatbuf_r>
 800bb6c:	9900      	ldr	r1, [sp, #0]
 800bb6e:	4605      	mov	r5, r0
 800bb70:	4630      	mov	r0, r6
 800bb72:	f7ff f913 	bl	800ad9c <_malloc_r>
 800bb76:	b948      	cbnz	r0, 800bb8c <__smakebuf_r+0x44>
 800bb78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb7c:	059a      	lsls	r2, r3, #22
 800bb7e:	d4ef      	bmi.n	800bb60 <__smakebuf_r+0x18>
 800bb80:	f023 0303 	bic.w	r3, r3, #3
 800bb84:	f043 0302 	orr.w	r3, r3, #2
 800bb88:	81a3      	strh	r3, [r4, #12]
 800bb8a:	e7e3      	b.n	800bb54 <__smakebuf_r+0xc>
 800bb8c:	4b0d      	ldr	r3, [pc, #52]	; (800bbc4 <__smakebuf_r+0x7c>)
 800bb8e:	62b3      	str	r3, [r6, #40]	; 0x28
 800bb90:	89a3      	ldrh	r3, [r4, #12]
 800bb92:	6020      	str	r0, [r4, #0]
 800bb94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb98:	81a3      	strh	r3, [r4, #12]
 800bb9a:	9b00      	ldr	r3, [sp, #0]
 800bb9c:	6163      	str	r3, [r4, #20]
 800bb9e:	9b01      	ldr	r3, [sp, #4]
 800bba0:	6120      	str	r0, [r4, #16]
 800bba2:	b15b      	cbz	r3, 800bbbc <__smakebuf_r+0x74>
 800bba4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bba8:	4630      	mov	r0, r6
 800bbaa:	f000 f8c9 	bl	800bd40 <_isatty_r>
 800bbae:	b128      	cbz	r0, 800bbbc <__smakebuf_r+0x74>
 800bbb0:	89a3      	ldrh	r3, [r4, #12]
 800bbb2:	f023 0303 	bic.w	r3, r3, #3
 800bbb6:	f043 0301 	orr.w	r3, r3, #1
 800bbba:	81a3      	strh	r3, [r4, #12]
 800bbbc:	89a0      	ldrh	r0, [r4, #12]
 800bbbe:	4305      	orrs	r5, r0
 800bbc0:	81a5      	strh	r5, [r4, #12]
 800bbc2:	e7cd      	b.n	800bb60 <__smakebuf_r+0x18>
 800bbc4:	0800b955 	.word	0x0800b955

0800bbc8 <_raise_r>:
 800bbc8:	291f      	cmp	r1, #31
 800bbca:	b538      	push	{r3, r4, r5, lr}
 800bbcc:	4604      	mov	r4, r0
 800bbce:	460d      	mov	r5, r1
 800bbd0:	d904      	bls.n	800bbdc <_raise_r+0x14>
 800bbd2:	2316      	movs	r3, #22
 800bbd4:	6003      	str	r3, [r0, #0]
 800bbd6:	f04f 30ff 	mov.w	r0, #4294967295
 800bbda:	bd38      	pop	{r3, r4, r5, pc}
 800bbdc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bbde:	b112      	cbz	r2, 800bbe6 <_raise_r+0x1e>
 800bbe0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bbe4:	b94b      	cbnz	r3, 800bbfa <_raise_r+0x32>
 800bbe6:	4620      	mov	r0, r4
 800bbe8:	f000 f830 	bl	800bc4c <_getpid_r>
 800bbec:	462a      	mov	r2, r5
 800bbee:	4601      	mov	r1, r0
 800bbf0:	4620      	mov	r0, r4
 800bbf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bbf6:	f000 b817 	b.w	800bc28 <_kill_r>
 800bbfa:	2b01      	cmp	r3, #1
 800bbfc:	d00a      	beq.n	800bc14 <_raise_r+0x4c>
 800bbfe:	1c59      	adds	r1, r3, #1
 800bc00:	d103      	bne.n	800bc0a <_raise_r+0x42>
 800bc02:	2316      	movs	r3, #22
 800bc04:	6003      	str	r3, [r0, #0]
 800bc06:	2001      	movs	r0, #1
 800bc08:	e7e7      	b.n	800bbda <_raise_r+0x12>
 800bc0a:	2400      	movs	r4, #0
 800bc0c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bc10:	4628      	mov	r0, r5
 800bc12:	4798      	blx	r3
 800bc14:	2000      	movs	r0, #0
 800bc16:	e7e0      	b.n	800bbda <_raise_r+0x12>

0800bc18 <raise>:
 800bc18:	4b02      	ldr	r3, [pc, #8]	; (800bc24 <raise+0xc>)
 800bc1a:	4601      	mov	r1, r0
 800bc1c:	6818      	ldr	r0, [r3, #0]
 800bc1e:	f7ff bfd3 	b.w	800bbc8 <_raise_r>
 800bc22:	bf00      	nop
 800bc24:	20000110 	.word	0x20000110

0800bc28 <_kill_r>:
 800bc28:	b538      	push	{r3, r4, r5, lr}
 800bc2a:	4d07      	ldr	r5, [pc, #28]	; (800bc48 <_kill_r+0x20>)
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	4604      	mov	r4, r0
 800bc30:	4608      	mov	r0, r1
 800bc32:	4611      	mov	r1, r2
 800bc34:	602b      	str	r3, [r5, #0]
 800bc36:	f7f5 fad5 	bl	80011e4 <_kill>
 800bc3a:	1c43      	adds	r3, r0, #1
 800bc3c:	d102      	bne.n	800bc44 <_kill_r+0x1c>
 800bc3e:	682b      	ldr	r3, [r5, #0]
 800bc40:	b103      	cbz	r3, 800bc44 <_kill_r+0x1c>
 800bc42:	6023      	str	r3, [r4, #0]
 800bc44:	bd38      	pop	{r3, r4, r5, pc}
 800bc46:	bf00      	nop
 800bc48:	20001f6c 	.word	0x20001f6c

0800bc4c <_getpid_r>:
 800bc4c:	f7f5 bac2 	b.w	80011d4 <_getpid>

0800bc50 <__sread>:
 800bc50:	b510      	push	{r4, lr}
 800bc52:	460c      	mov	r4, r1
 800bc54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc58:	f000 f894 	bl	800bd84 <_read_r>
 800bc5c:	2800      	cmp	r0, #0
 800bc5e:	bfab      	itete	ge
 800bc60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bc62:	89a3      	ldrhlt	r3, [r4, #12]
 800bc64:	181b      	addge	r3, r3, r0
 800bc66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bc6a:	bfac      	ite	ge
 800bc6c:	6563      	strge	r3, [r4, #84]	; 0x54
 800bc6e:	81a3      	strhlt	r3, [r4, #12]
 800bc70:	bd10      	pop	{r4, pc}

0800bc72 <__swrite>:
 800bc72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc76:	461f      	mov	r7, r3
 800bc78:	898b      	ldrh	r3, [r1, #12]
 800bc7a:	05db      	lsls	r3, r3, #23
 800bc7c:	4605      	mov	r5, r0
 800bc7e:	460c      	mov	r4, r1
 800bc80:	4616      	mov	r6, r2
 800bc82:	d505      	bpl.n	800bc90 <__swrite+0x1e>
 800bc84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc88:	2302      	movs	r3, #2
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	f000 f868 	bl	800bd60 <_lseek_r>
 800bc90:	89a3      	ldrh	r3, [r4, #12]
 800bc92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bc9a:	81a3      	strh	r3, [r4, #12]
 800bc9c:	4632      	mov	r2, r6
 800bc9e:	463b      	mov	r3, r7
 800bca0:	4628      	mov	r0, r5
 800bca2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bca6:	f000 b817 	b.w	800bcd8 <_write_r>

0800bcaa <__sseek>:
 800bcaa:	b510      	push	{r4, lr}
 800bcac:	460c      	mov	r4, r1
 800bcae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcb2:	f000 f855 	bl	800bd60 <_lseek_r>
 800bcb6:	1c43      	adds	r3, r0, #1
 800bcb8:	89a3      	ldrh	r3, [r4, #12]
 800bcba:	bf15      	itete	ne
 800bcbc:	6560      	strne	r0, [r4, #84]	; 0x54
 800bcbe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bcc2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bcc6:	81a3      	strheq	r3, [r4, #12]
 800bcc8:	bf18      	it	ne
 800bcca:	81a3      	strhne	r3, [r4, #12]
 800bccc:	bd10      	pop	{r4, pc}

0800bcce <__sclose>:
 800bcce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcd2:	f000 b813 	b.w	800bcfc <_close_r>
	...

0800bcd8 <_write_r>:
 800bcd8:	b538      	push	{r3, r4, r5, lr}
 800bcda:	4d07      	ldr	r5, [pc, #28]	; (800bcf8 <_write_r+0x20>)
 800bcdc:	4604      	mov	r4, r0
 800bcde:	4608      	mov	r0, r1
 800bce0:	4611      	mov	r1, r2
 800bce2:	2200      	movs	r2, #0
 800bce4:	602a      	str	r2, [r5, #0]
 800bce6:	461a      	mov	r2, r3
 800bce8:	f7f5 fab3 	bl	8001252 <_write>
 800bcec:	1c43      	adds	r3, r0, #1
 800bcee:	d102      	bne.n	800bcf6 <_write_r+0x1e>
 800bcf0:	682b      	ldr	r3, [r5, #0]
 800bcf2:	b103      	cbz	r3, 800bcf6 <_write_r+0x1e>
 800bcf4:	6023      	str	r3, [r4, #0]
 800bcf6:	bd38      	pop	{r3, r4, r5, pc}
 800bcf8:	20001f6c 	.word	0x20001f6c

0800bcfc <_close_r>:
 800bcfc:	b538      	push	{r3, r4, r5, lr}
 800bcfe:	4d06      	ldr	r5, [pc, #24]	; (800bd18 <_close_r+0x1c>)
 800bd00:	2300      	movs	r3, #0
 800bd02:	4604      	mov	r4, r0
 800bd04:	4608      	mov	r0, r1
 800bd06:	602b      	str	r3, [r5, #0]
 800bd08:	f7f5 fabf 	bl	800128a <_close>
 800bd0c:	1c43      	adds	r3, r0, #1
 800bd0e:	d102      	bne.n	800bd16 <_close_r+0x1a>
 800bd10:	682b      	ldr	r3, [r5, #0]
 800bd12:	b103      	cbz	r3, 800bd16 <_close_r+0x1a>
 800bd14:	6023      	str	r3, [r4, #0]
 800bd16:	bd38      	pop	{r3, r4, r5, pc}
 800bd18:	20001f6c 	.word	0x20001f6c

0800bd1c <_fstat_r>:
 800bd1c:	b538      	push	{r3, r4, r5, lr}
 800bd1e:	4d07      	ldr	r5, [pc, #28]	; (800bd3c <_fstat_r+0x20>)
 800bd20:	2300      	movs	r3, #0
 800bd22:	4604      	mov	r4, r0
 800bd24:	4608      	mov	r0, r1
 800bd26:	4611      	mov	r1, r2
 800bd28:	602b      	str	r3, [r5, #0]
 800bd2a:	f7f5 faba 	bl	80012a2 <_fstat>
 800bd2e:	1c43      	adds	r3, r0, #1
 800bd30:	d102      	bne.n	800bd38 <_fstat_r+0x1c>
 800bd32:	682b      	ldr	r3, [r5, #0]
 800bd34:	b103      	cbz	r3, 800bd38 <_fstat_r+0x1c>
 800bd36:	6023      	str	r3, [r4, #0]
 800bd38:	bd38      	pop	{r3, r4, r5, pc}
 800bd3a:	bf00      	nop
 800bd3c:	20001f6c 	.word	0x20001f6c

0800bd40 <_isatty_r>:
 800bd40:	b538      	push	{r3, r4, r5, lr}
 800bd42:	4d06      	ldr	r5, [pc, #24]	; (800bd5c <_isatty_r+0x1c>)
 800bd44:	2300      	movs	r3, #0
 800bd46:	4604      	mov	r4, r0
 800bd48:	4608      	mov	r0, r1
 800bd4a:	602b      	str	r3, [r5, #0]
 800bd4c:	f7f5 fab9 	bl	80012c2 <_isatty>
 800bd50:	1c43      	adds	r3, r0, #1
 800bd52:	d102      	bne.n	800bd5a <_isatty_r+0x1a>
 800bd54:	682b      	ldr	r3, [r5, #0]
 800bd56:	b103      	cbz	r3, 800bd5a <_isatty_r+0x1a>
 800bd58:	6023      	str	r3, [r4, #0]
 800bd5a:	bd38      	pop	{r3, r4, r5, pc}
 800bd5c:	20001f6c 	.word	0x20001f6c

0800bd60 <_lseek_r>:
 800bd60:	b538      	push	{r3, r4, r5, lr}
 800bd62:	4d07      	ldr	r5, [pc, #28]	; (800bd80 <_lseek_r+0x20>)
 800bd64:	4604      	mov	r4, r0
 800bd66:	4608      	mov	r0, r1
 800bd68:	4611      	mov	r1, r2
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	602a      	str	r2, [r5, #0]
 800bd6e:	461a      	mov	r2, r3
 800bd70:	f7f5 fab2 	bl	80012d8 <_lseek>
 800bd74:	1c43      	adds	r3, r0, #1
 800bd76:	d102      	bne.n	800bd7e <_lseek_r+0x1e>
 800bd78:	682b      	ldr	r3, [r5, #0]
 800bd7a:	b103      	cbz	r3, 800bd7e <_lseek_r+0x1e>
 800bd7c:	6023      	str	r3, [r4, #0]
 800bd7e:	bd38      	pop	{r3, r4, r5, pc}
 800bd80:	20001f6c 	.word	0x20001f6c

0800bd84 <_read_r>:
 800bd84:	b538      	push	{r3, r4, r5, lr}
 800bd86:	4d07      	ldr	r5, [pc, #28]	; (800bda4 <_read_r+0x20>)
 800bd88:	4604      	mov	r4, r0
 800bd8a:	4608      	mov	r0, r1
 800bd8c:	4611      	mov	r1, r2
 800bd8e:	2200      	movs	r2, #0
 800bd90:	602a      	str	r2, [r5, #0]
 800bd92:	461a      	mov	r2, r3
 800bd94:	f7f5 fa40 	bl	8001218 <_read>
 800bd98:	1c43      	adds	r3, r0, #1
 800bd9a:	d102      	bne.n	800bda2 <_read_r+0x1e>
 800bd9c:	682b      	ldr	r3, [r5, #0]
 800bd9e:	b103      	cbz	r3, 800bda2 <_read_r+0x1e>
 800bda0:	6023      	str	r3, [r4, #0]
 800bda2:	bd38      	pop	{r3, r4, r5, pc}
 800bda4:	20001f6c 	.word	0x20001f6c

0800bda8 <_init>:
 800bda8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdaa:	bf00      	nop
 800bdac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdae:	bc08      	pop	{r3}
 800bdb0:	469e      	mov	lr, r3
 800bdb2:	4770      	bx	lr

0800bdb4 <_fini>:
 800bdb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdb6:	bf00      	nop
 800bdb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdba:	bc08      	pop	{r3}
 800bdbc:	469e      	mov	lr, r3
 800bdbe:	4770      	bx	lr
