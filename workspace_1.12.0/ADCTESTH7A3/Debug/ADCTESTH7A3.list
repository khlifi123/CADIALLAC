
ADCTESTH7A3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a4c  080002b0  080002b0  000102b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08005cfc  08005cfc  00015cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005d0c  08005d0c  00015d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005d10  08005d10  00015d10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  08005d14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000a8  24000010  08005d24  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  240000b8  08005d24  000200b8  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000d6c5  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001b8e  00000000  00000000  0002d703  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000b40  00000000  00000000  0002f298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000a78  00000000  00000000  0002fdd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0002fd55  00000000  00000000  00030850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000ca58  00000000  00000000  000605a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0013eb44  00000000  00000000  0006cffd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001abb41  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002ea8  00000000  00000000  001abb94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000010 	.word	0x24000010
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08005ce4 	.word	0x08005ce4

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000014 	.word	0x24000014
 80002ec:	08005ce4 	.word	0x08005ce4

080002f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b082      	sub	sp, #8
 80002f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002f6:	f000 fbaf 	bl	8000a58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002fa:	f000 f873 	bl	80003e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002fe:	f000 f969 	bl	80005d4 <MX_GPIO_Init>
  MX_USB_OTG_HS_USB_Init();
 8000302:	f000 f95f 	bl	80005c4 <MX_USB_OTG_HS_USB_Init>
  MX_ADC1_Init();
 8000306:	f000 f8e3 	bl	80004d0 <MX_ADC1_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  for(int i=0;i<4;i++){
 800030a:	2300      	movs	r3, #0
 800030c:	607b      	str	r3, [r7, #4]
 800030e:	e01c      	b.n	800034a <main+0x5a>
	           HAL_ADC_Start(&hadc1);
 8000310:	482b      	ldr	r0, [pc, #172]	; (80003c0 <main+0xd0>)
 8000312:	f000 ff6f 	bl	80011f4 <HAL_ADC_Start>
	 		   HAL_ADC_PollForConversion(&hadc1, 5);
 8000316:	2105      	movs	r1, #5
 8000318:	4829      	ldr	r0, [pc, #164]	; (80003c0 <main+0xd0>)
 800031a:	f001 f825 	bl	8001368 <HAL_ADC_PollForConversion>
	 		  adc_samples[i]  = HAL_ADC_GetValue (&hadc1);
 800031e:	4828      	ldr	r0, [pc, #160]	; (80003c0 <main+0xd0>)
 8000320:	f001 f8fa 	bl	8001518 <HAL_ADC_GetValue>
 8000324:	4603      	mov	r3, r0
 8000326:	b299      	uxth	r1, r3
 8000328:	4a26      	ldr	r2, [pc, #152]	; (80003c4 <main+0xd4>)
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	 		  adc_sum+= adc_samples[i] ;
 8000330:	4a24      	ldr	r2, [pc, #144]	; (80003c4 <main+0xd4>)
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000338:	461a      	mov	r2, r3
 800033a:	4b23      	ldr	r3, [pc, #140]	; (80003c8 <main+0xd8>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	4413      	add	r3, r2
 8000340:	4a21      	ldr	r2, [pc, #132]	; (80003c8 <main+0xd8>)
 8000342:	6013      	str	r3, [r2, #0]
	  for(int i=0;i<4;i++){
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	3301      	adds	r3, #1
 8000348:	607b      	str	r3, [r7, #4]
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	2b03      	cmp	r3, #3
 800034e:	dddf      	ble.n	8000310 <main+0x20>
	        }
	      adc_average=adc_sum/4.0f;
 8000350:	4b1d      	ldr	r3, [pc, #116]	; (80003c8 <main+0xd8>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	ee07 3a90 	vmov	s15, r3
 8000358:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800035c:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8000360:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000364:	4b19      	ldr	r3, [pc, #100]	; (80003cc <main+0xdc>)
 8000366:	edc3 7a00 	vstr	s15, [r3]
	 	  VoltageB = (float) (adc_average*3.3)/4095.0f;
 800036a:	4b18      	ldr	r3, [pc, #96]	; (80003cc <main+0xdc>)
 800036c:	edd3 7a00 	vldr	s15, [r3]
 8000370:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000374:	ed9f 6b10 	vldr	d6, [pc, #64]	; 80003b8 <main+0xc8>
 8000378:	ee27 7b06 	vmul.f64	d7, d7, d6
 800037c:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8000380:	eddf 6a13 	vldr	s13, [pc, #76]	; 80003d0 <main+0xe0>
 8000384:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000388:	4b12      	ldr	r3, [pc, #72]	; (80003d4 <main+0xe4>)
 800038a:	edc3 7a00 	vstr	s15, [r3]
	 	  current = (VoltageB-2.57f)/0.066f;
 800038e:	4b11      	ldr	r3, [pc, #68]	; (80003d4 <main+0xe4>)
 8000390:	edd3 7a00 	vldr	s15, [r3]
 8000394:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80003d8 <main+0xe8>
 8000398:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800039c:	eddf 6a0f 	vldr	s13, [pc, #60]	; 80003dc <main+0xec>
 80003a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80003a4:	4b0e      	ldr	r3, [pc, #56]	; (80003e0 <main+0xf0>)
 80003a6:	edc3 7a00 	vstr	s15, [r3]
	 		adc_sum=0;
 80003aa:	4b07      	ldr	r3, [pc, #28]	; (80003c8 <main+0xd8>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	601a      	str	r2, [r3, #0]
	  for(int i=0;i<4;i++){
 80003b0:	e7ab      	b.n	800030a <main+0x1a>
 80003b2:	bf00      	nop
 80003b4:	f3af 8000 	nop.w
 80003b8:	66666666 	.word	0x66666666
 80003bc:	400a6666 	.word	0x400a6666
 80003c0:	24000050 	.word	0x24000050
 80003c4:	24000030 	.word	0x24000030
 80003c8:	2400004c 	.word	0x2400004c
 80003cc:	24000048 	.word	0x24000048
 80003d0:	457ff000 	.word	0x457ff000
 80003d4:	2400002c 	.word	0x2400002c
 80003d8:	40247ae1 	.word	0x40247ae1
 80003dc:	3d872b02 	.word	0x3d872b02
 80003e0:	24000044 	.word	0x24000044

080003e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b09c      	sub	sp, #112	; 0x70
 80003e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003ee:	224c      	movs	r2, #76	; 0x4c
 80003f0:	2100      	movs	r1, #0
 80003f2:	4618      	mov	r0, r3
 80003f4:	f005 fc6e 	bl	8005cd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003f8:	1d3b      	adds	r3, r7, #4
 80003fa:	2220      	movs	r2, #32
 80003fc:	2100      	movs	r1, #0
 80003fe:	4618      	mov	r0, r3
 8000400:	f005 fc68 	bl	8005cd4 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000404:	4b30      	ldr	r3, [pc, #192]	; (80004c8 <SystemClock_Config+0xe4>)
 8000406:	f04f 32ff 	mov.w	r2, #4294967295
 800040a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800040e:	2004      	movs	r0, #4
 8000410:	f002 f830 	bl	8002474 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000414:	2300      	movs	r3, #0
 8000416:	603b      	str	r3, [r7, #0]
 8000418:	4b2c      	ldr	r3, [pc, #176]	; (80004cc <SystemClock_Config+0xe8>)
 800041a:	699b      	ldr	r3, [r3, #24]
 800041c:	4a2b      	ldr	r2, [pc, #172]	; (80004cc <SystemClock_Config+0xe8>)
 800041e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000422:	6193      	str	r3, [r2, #24]
 8000424:	4b29      	ldr	r3, [pc, #164]	; (80004cc <SystemClock_Config+0xe8>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800042c:	603b      	str	r3, [r7, #0]
 800042e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000430:	bf00      	nop
 8000432:	4b26      	ldr	r3, [pc, #152]	; (80004cc <SystemClock_Config+0xe8>)
 8000434:	699b      	ldr	r3, [r3, #24]
 8000436:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800043a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800043e:	d1f8      	bne.n	8000432 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000440:	2321      	movs	r3, #33	; 0x21
 8000442:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000444:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000448:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800044a:	2301      	movs	r3, #1
 800044c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800044e:	2302      	movs	r3, #2
 8000450:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000452:	2302      	movs	r3, #2
 8000454:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000456:	2301      	movs	r3, #1
 8000458:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 800045a:	2312      	movs	r3, #18
 800045c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800045e:	2302      	movs	r3, #2
 8000460:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000462:	2304      	movs	r3, #4
 8000464:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000466:	2302      	movs	r3, #2
 8000468:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800046a:	230c      	movs	r3, #12
 800046c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800046e:	2300      	movs	r3, #0
 8000470:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000472:	2300      	movs	r3, #0
 8000474:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000476:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800047a:	4618      	mov	r0, r3
 800047c:	f002 f854 	bl	8002528 <HAL_RCC_OscConfig>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d001      	beq.n	800048a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000486:	f000 f989 	bl	800079c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800048a:	233f      	movs	r3, #63	; 0x3f
 800048c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800048e:	2303      	movs	r3, #3
 8000490:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000492:	2300      	movs	r3, #0
 8000494:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000496:	2300      	movs	r3, #0
 8000498:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800049a:	2300      	movs	r3, #0
 800049c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800049e:	2300      	movs	r3, #0
 80004a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80004a2:	2300      	movs	r3, #0
 80004a4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80004a6:	2300      	movs	r3, #0
 80004a8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004aa:	1d3b      	adds	r3, r7, #4
 80004ac:	2101      	movs	r1, #1
 80004ae:	4618      	mov	r0, r3
 80004b0:	f002 fc6c 	bl	8002d8c <HAL_RCC_ClockConfig>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <SystemClock_Config+0xda>
  {
    Error_Handler();
 80004ba:	f000 f96f 	bl	800079c <Error_Handler>
  }
}
 80004be:	bf00      	nop
 80004c0:	3770      	adds	r7, #112	; 0x70
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	58024400 	.word	0x58024400
 80004cc:	58024800 	.word	0x58024800

080004d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b08a      	sub	sp, #40	; 0x28
 80004d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80004d6:	f107 031c 	add.w	r3, r7, #28
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	605a      	str	r2, [r3, #4]
 80004e0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80004e2:	463b      	mov	r3, r7
 80004e4:	2200      	movs	r2, #0
 80004e6:	601a      	str	r2, [r3, #0]
 80004e8:	605a      	str	r2, [r3, #4]
 80004ea:	609a      	str	r2, [r3, #8]
 80004ec:	60da      	str	r2, [r3, #12]
 80004ee:	611a      	str	r2, [r3, #16]
 80004f0:	615a      	str	r2, [r3, #20]
 80004f2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80004f4:	4b30      	ldr	r3, [pc, #192]	; (80005b8 <MX_ADC1_Init+0xe8>)
 80004f6:	4a31      	ldr	r2, [pc, #196]	; (80005bc <MX_ADC1_Init+0xec>)
 80004f8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80004fa:	4b2f      	ldr	r3, [pc, #188]	; (80005b8 <MX_ADC1_Init+0xe8>)
 80004fc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000500:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000502:	4b2d      	ldr	r3, [pc, #180]	; (80005b8 <MX_ADC1_Init+0xe8>)
 8000504:	2208      	movs	r2, #8
 8000506:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000508:	4b2b      	ldr	r3, [pc, #172]	; (80005b8 <MX_ADC1_Init+0xe8>)
 800050a:	2200      	movs	r2, #0
 800050c:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800050e:	4b2a      	ldr	r3, [pc, #168]	; (80005b8 <MX_ADC1_Init+0xe8>)
 8000510:	2204      	movs	r2, #4
 8000512:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000514:	4b28      	ldr	r3, [pc, #160]	; (80005b8 <MX_ADC1_Init+0xe8>)
 8000516:	2200      	movs	r2, #0
 8000518:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800051a:	4b27      	ldr	r3, [pc, #156]	; (80005b8 <MX_ADC1_Init+0xe8>)
 800051c:	2201      	movs	r2, #1
 800051e:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000520:	4b25      	ldr	r3, [pc, #148]	; (80005b8 <MX_ADC1_Init+0xe8>)
 8000522:	2201      	movs	r2, #1
 8000524:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000526:	4b24      	ldr	r3, [pc, #144]	; (80005b8 <MX_ADC1_Init+0xe8>)
 8000528:	2200      	movs	r2, #0
 800052a:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800052c:	4b22      	ldr	r3, [pc, #136]	; (80005b8 <MX_ADC1_Init+0xe8>)
 800052e:	2200      	movs	r2, #0
 8000530:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000532:	4b21      	ldr	r3, [pc, #132]	; (80005b8 <MX_ADC1_Init+0xe8>)
 8000534:	2200      	movs	r2, #0
 8000536:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000538:	4b1f      	ldr	r3, [pc, #124]	; (80005b8 <MX_ADC1_Init+0xe8>)
 800053a:	2200      	movs	r2, #0
 800053c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800053e:	4b1e      	ldr	r3, [pc, #120]	; (80005b8 <MX_ADC1_Init+0xe8>)
 8000540:	2200      	movs	r2, #0
 8000542:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000544:	4b1c      	ldr	r3, [pc, #112]	; (80005b8 <MX_ADC1_Init+0xe8>)
 8000546:	2200      	movs	r2, #0
 8000548:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800054a:	4b1b      	ldr	r3, [pc, #108]	; (80005b8 <MX_ADC1_Init+0xe8>)
 800054c:	2200      	movs	r2, #0
 800054e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000552:	4819      	ldr	r0, [pc, #100]	; (80005b8 <MX_ADC1_Init+0xe8>)
 8000554:	f000 fcf4 	bl	8000f40 <HAL_ADC_Init>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800055e:	f000 f91d 	bl	800079c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000562:	2300      	movs	r3, #0
 8000564:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000566:	f107 031c 	add.w	r3, r7, #28
 800056a:	4619      	mov	r1, r3
 800056c:	4812      	ldr	r0, [pc, #72]	; (80005b8 <MX_ADC1_Init+0xe8>)
 800056e:	f001 fc37 	bl	8001de0 <HAL_ADCEx_MultiModeConfigChannel>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000578:	f000 f910 	bl	800079c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800057c:	4b10      	ldr	r3, [pc, #64]	; (80005c0 <MX_ADC1_Init+0xf0>)
 800057e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000580:	2306      	movs	r3, #6
 8000582:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
 8000584:	2305      	movs	r3, #5
 8000586:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000588:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800058c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800058e:	2304      	movs	r3, #4
 8000590:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000592:	2300      	movs	r3, #0
 8000594:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000596:	2300      	movs	r3, #0
 8000598:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800059a:	463b      	mov	r3, r7
 800059c:	4619      	mov	r1, r3
 800059e:	4806      	ldr	r0, [pc, #24]	; (80005b8 <MX_ADC1_Init+0xe8>)
 80005a0:	f000 ffc8 	bl	8001534 <HAL_ADC_ConfigChannel>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80005aa:	f000 f8f7 	bl	800079c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005ae:	bf00      	nop
 80005b0:	3728      	adds	r7, #40	; 0x28
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	24000050 	.word	0x24000050
 80005bc:	40022000 	.word	0x40022000
 80005c0:	1d500080 	.word	0x1d500080

080005c4 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 80005c8:	bf00      	nop
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
	...

080005d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b08c      	sub	sp, #48	; 0x30
 80005d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005da:	f107 031c 	add.w	r3, r7, #28
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	605a      	str	r2, [r3, #4]
 80005e4:	609a      	str	r2, [r3, #8]
 80005e6:	60da      	str	r2, [r3, #12]
 80005e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ea:	4b66      	ldr	r3, [pc, #408]	; (8000784 <MX_GPIO_Init+0x1b0>)
 80005ec:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80005f0:	4a64      	ldr	r2, [pc, #400]	; (8000784 <MX_GPIO_Init+0x1b0>)
 80005f2:	f043 0304 	orr.w	r3, r3, #4
 80005f6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80005fa:	4b62      	ldr	r3, [pc, #392]	; (8000784 <MX_GPIO_Init+0x1b0>)
 80005fc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000600:	f003 0304 	and.w	r3, r3, #4
 8000604:	61bb      	str	r3, [r7, #24]
 8000606:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000608:	4b5e      	ldr	r3, [pc, #376]	; (8000784 <MX_GPIO_Init+0x1b0>)
 800060a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800060e:	4a5d      	ldr	r2, [pc, #372]	; (8000784 <MX_GPIO_Init+0x1b0>)
 8000610:	f043 0320 	orr.w	r3, r3, #32
 8000614:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000618:	4b5a      	ldr	r3, [pc, #360]	; (8000784 <MX_GPIO_Init+0x1b0>)
 800061a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800061e:	f003 0320 	and.w	r3, r3, #32
 8000622:	617b      	str	r3, [r7, #20]
 8000624:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000626:	4b57      	ldr	r3, [pc, #348]	; (8000784 <MX_GPIO_Init+0x1b0>)
 8000628:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800062c:	4a55      	ldr	r2, [pc, #340]	; (8000784 <MX_GPIO_Init+0x1b0>)
 800062e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000632:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000636:	4b53      	ldr	r3, [pc, #332]	; (8000784 <MX_GPIO_Init+0x1b0>)
 8000638:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800063c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000640:	613b      	str	r3, [r7, #16]
 8000642:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000644:	4b4f      	ldr	r3, [pc, #316]	; (8000784 <MX_GPIO_Init+0x1b0>)
 8000646:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800064a:	4a4e      	ldr	r2, [pc, #312]	; (8000784 <MX_GPIO_Init+0x1b0>)
 800064c:	f043 0301 	orr.w	r3, r3, #1
 8000650:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000654:	4b4b      	ldr	r3, [pc, #300]	; (8000784 <MX_GPIO_Init+0x1b0>)
 8000656:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000662:	4b48      	ldr	r3, [pc, #288]	; (8000784 <MX_GPIO_Init+0x1b0>)
 8000664:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000668:	4a46      	ldr	r2, [pc, #280]	; (8000784 <MX_GPIO_Init+0x1b0>)
 800066a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800066e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000672:	4b44      	ldr	r3, [pc, #272]	; (8000784 <MX_GPIO_Init+0x1b0>)
 8000674:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800067c:	60bb      	str	r3, [r7, #8]
 800067e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000680:	4b40      	ldr	r3, [pc, #256]	; (8000784 <MX_GPIO_Init+0x1b0>)
 8000682:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000686:	4a3f      	ldr	r2, [pc, #252]	; (8000784 <MX_GPIO_Init+0x1b0>)
 8000688:	f043 0310 	orr.w	r3, r3, #16
 800068c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000690:	4b3c      	ldr	r3, [pc, #240]	; (8000784 <MX_GPIO_Init+0x1b0>)
 8000692:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000696:	f003 0310 	and.w	r3, r3, #16
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 800069e:	2200      	movs	r2, #0
 80006a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006a4:	4838      	ldr	r0, [pc, #224]	; (8000788 <MX_GPIO_Init+0x1b4>)
 80006a6:	f001 fecb 	bl	8002440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006aa:	2200      	movs	r2, #0
 80006ac:	2102      	movs	r1, #2
 80006ae:	4837      	ldr	r0, [pc, #220]	; (800078c <MX_GPIO_Init+0x1b8>)
 80006b0:	f001 fec6 	bl	8002440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ba:	2300      	movs	r3, #0
 80006bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006be:	2300      	movs	r3, #0
 80006c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006c2:	f107 031c 	add.w	r3, r7, #28
 80006c6:	4619      	mov	r1, r3
 80006c8:	4831      	ldr	r0, [pc, #196]	; (8000790 <MX_GPIO_Init+0x1bc>)
 80006ca:	f001 fd09 	bl	80020e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 80006ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d4:	2301      	movs	r3, #1
 80006d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d8:	2300      	movs	r3, #0
 80006da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006dc:	2300      	movs	r3, #0
 80006de:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80006e0:	f107 031c 	add.w	r3, r7, #28
 80006e4:	4619      	mov	r1, r3
 80006e6:	4828      	ldr	r0, [pc, #160]	; (8000788 <MX_GPIO_Init+0x1b4>)
 80006e8:	f001 fcfa 	bl	80020e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80006ec:	2380      	movs	r3, #128	; 0x80
 80006ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006f0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80006f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f6:	2300      	movs	r3, #0
 80006f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80006fa:	f107 031c 	add.w	r3, r7, #28
 80006fe:	4619      	mov	r1, r3
 8000700:	4824      	ldr	r0, [pc, #144]	; (8000794 <MX_GPIO_Init+0x1c0>)
 8000702:	f001 fced 	bl	80020e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000706:	f44f 7300 	mov.w	r3, #512	; 0x200
 800070a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800070c:	2300      	movs	r3, #0
 800070e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000714:	f107 031c 	add.w	r3, r7, #28
 8000718:	4619      	mov	r1, r3
 800071a:	481f      	ldr	r0, [pc, #124]	; (8000798 <MX_GPIO_Init+0x1c4>)
 800071c:	f001 fce0 	bl	80020e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000720:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000724:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000726:	2302      	movs	r3, #2
 8000728:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072a:	2300      	movs	r3, #0
 800072c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072e:	2300      	movs	r3, #0
 8000730:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000732:	230a      	movs	r3, #10
 8000734:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000736:	f107 031c 	add.w	r3, r7, #28
 800073a:	4619      	mov	r1, r3
 800073c:	4816      	ldr	r0, [pc, #88]	; (8000798 <MX_GPIO_Init+0x1c4>)
 800073e:	f001 fccf 	bl	80020e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000742:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000746:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000748:	2302      	movs	r3, #2
 800074a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074c:	2300      	movs	r3, #0
 800074e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000750:	2300      	movs	r3, #0
 8000752:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000754:	f107 031c 	add.w	r3, r7, #28
 8000758:	4619      	mov	r1, r3
 800075a:	480f      	ldr	r0, [pc, #60]	; (8000798 <MX_GPIO_Init+0x1c4>)
 800075c:	f001 fcc0 	bl	80020e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000760:	2302      	movs	r3, #2
 8000762:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000764:	2301      	movs	r3, #1
 8000766:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000768:	2300      	movs	r3, #0
 800076a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076c:	2300      	movs	r3, #0
 800076e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000770:	f107 031c 	add.w	r3, r7, #28
 8000774:	4619      	mov	r1, r3
 8000776:	4805      	ldr	r0, [pc, #20]	; (800078c <MX_GPIO_Init+0x1b8>)
 8000778:	f001 fcb2 	bl	80020e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800077c:	bf00      	nop
 800077e:	3730      	adds	r7, #48	; 0x30
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	58024400 	.word	0x58024400
 8000788:	58021400 	.word	0x58021400
 800078c:	58021000 	.word	0x58021000
 8000790:	58020800 	.word	0x58020800
 8000794:	58021800 	.word	0x58021800
 8000798:	58020000 	.word	0x58020000

0800079c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a0:	b672      	cpsid	i
}
 80007a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a4:	e7fe      	b.n	80007a4 <Error_Handler+0x8>
	...

080007a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ae:	4b0a      	ldr	r3, [pc, #40]	; (80007d8 <HAL_MspInit+0x30>)
 80007b0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80007b4:	4a08      	ldr	r2, [pc, #32]	; (80007d8 <HAL_MspInit+0x30>)
 80007b6:	f043 0302 	orr.w	r3, r3, #2
 80007ba:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80007be:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <HAL_MspInit+0x30>)
 80007c0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80007c4:	f003 0302 	and.w	r3, r3, #2
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007cc:	bf00      	nop
 80007ce:	370c      	adds	r7, #12
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr
 80007d8:	58024400 	.word	0x58024400

080007dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b0ba      	sub	sp, #232	; 0xe8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]
 80007f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007f4:	f107 0310 	add.w	r3, r7, #16
 80007f8:	22c0      	movs	r2, #192	; 0xc0
 80007fa:	2100      	movs	r1, #0
 80007fc:	4618      	mov	r0, r3
 80007fe:	f005 fa69 	bl	8005cd4 <memset>
  if(hadc->Instance==ADC1)
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4a2b      	ldr	r2, [pc, #172]	; (80008b4 <HAL_ADC_MspInit+0xd8>)
 8000808:	4293      	cmp	r3, r2
 800080a:	d14f      	bne.n	80008ac <HAL_ADC_MspInit+0xd0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800080c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000810:	f04f 0300 	mov.w	r3, #0
 8000814:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000818:	2301      	movs	r3, #1
 800081a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 16;
 800081c:	2310      	movs	r3, #16
 800081e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 3;
 8000820:	2303      	movs	r3, #3
 8000822:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000824:	2302      	movs	r3, #2
 8000826:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000828:	2302      	movs	r3, #2
 800082a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800082c:	23c0      	movs	r3, #192	; 0xc0
 800082e:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000830:	2300      	movs	r3, #0
 8000832:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000834:	2300      	movs	r3, #0
 8000836:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000838:	2300      	movs	r3, #0
 800083a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800083e:	f107 0310 	add.w	r3, r7, #16
 8000842:	4618      	mov	r0, r3
 8000844:	f002 fe18 	bl	8003478 <HAL_RCCEx_PeriphCLKConfig>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 800084e:	f7ff ffa5 	bl	800079c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000852:	4b19      	ldr	r3, [pc, #100]	; (80008b8 <HAL_ADC_MspInit+0xdc>)
 8000854:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000858:	4a17      	ldr	r2, [pc, #92]	; (80008b8 <HAL_ADC_MspInit+0xdc>)
 800085a:	f043 0320 	orr.w	r3, r3, #32
 800085e:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000862:	4b15      	ldr	r3, [pc, #84]	; (80008b8 <HAL_ADC_MspInit+0xdc>)
 8000864:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000868:	f003 0320 	and.w	r3, r3, #32
 800086c:	60fb      	str	r3, [r7, #12]
 800086e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000870:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <HAL_ADC_MspInit+0xdc>)
 8000872:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000876:	4a10      	ldr	r2, [pc, #64]	; (80008b8 <HAL_ADC_MspInit+0xdc>)
 8000878:	f043 0301 	orr.w	r3, r3, #1
 800087c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000880:	4b0d      	ldr	r3, [pc, #52]	; (80008b8 <HAL_ADC_MspInit+0xdc>)
 8000882:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000886:	f003 0301 	and.w	r3, r3, #1
 800088a:	60bb      	str	r3, [r7, #8]
 800088c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_INP7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800088e:	2380      	movs	r3, #128	; 0x80
 8000890:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000894:	2303      	movs	r3, #3
 8000896:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80008a4:	4619      	mov	r1, r3
 80008a6:	4805      	ldr	r0, [pc, #20]	; (80008bc <HAL_ADC_MspInit+0xe0>)
 80008a8:	f001 fc1a 	bl	80020e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80008ac:	bf00      	nop
 80008ae:	37e8      	adds	r7, #232	; 0xe8
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	40022000 	.word	0x40022000
 80008b8:	58024400 	.word	0x58024400
 80008bc:	58020000 	.word	0x58020000

080008c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008c4:	e7fe      	b.n	80008c4 <NMI_Handler+0x4>

080008c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008c6:	b480      	push	{r7}
 80008c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ca:	e7fe      	b.n	80008ca <HardFault_Handler+0x4>

080008cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d0:	e7fe      	b.n	80008d0 <MemManage_Handler+0x4>

080008d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008d6:	e7fe      	b.n	80008d6 <BusFault_Handler+0x4>

080008d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008dc:	e7fe      	b.n	80008dc <UsageFault_Handler+0x4>

080008de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008e2:	bf00      	nop
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr

080008ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008f0:	bf00      	nop
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr

080008fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008fa:	b480      	push	{r7}
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr

08000908 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800090c:	f000 f916 	bl	8000b3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000910:	bf00      	nop
 8000912:	bd80      	pop	{r7, pc}

08000914 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000918:	4b32      	ldr	r3, [pc, #200]	; (80009e4 <SystemInit+0xd0>)
 800091a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800091e:	4a31      	ldr	r2, [pc, #196]	; (80009e4 <SystemInit+0xd0>)
 8000920:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000924:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000928:	4b2f      	ldr	r3, [pc, #188]	; (80009e8 <SystemInit+0xd4>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	f003 030f 	and.w	r3, r3, #15
 8000930:	2b02      	cmp	r3, #2
 8000932:	d807      	bhi.n	8000944 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000934:	4b2c      	ldr	r3, [pc, #176]	; (80009e8 <SystemInit+0xd4>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	f023 030f 	bic.w	r3, r3, #15
 800093c:	4a2a      	ldr	r2, [pc, #168]	; (80009e8 <SystemInit+0xd4>)
 800093e:	f043 0303 	orr.w	r3, r3, #3
 8000942:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000944:	4b29      	ldr	r3, [pc, #164]	; (80009ec <SystemInit+0xd8>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a28      	ldr	r2, [pc, #160]	; (80009ec <SystemInit+0xd8>)
 800094a:	f043 0301 	orr.w	r3, r3, #1
 800094e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000950:	4b26      	ldr	r3, [pc, #152]	; (80009ec <SystemInit+0xd8>)
 8000952:	2200      	movs	r2, #0
 8000954:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000956:	4b25      	ldr	r3, [pc, #148]	; (80009ec <SystemInit+0xd8>)
 8000958:	681a      	ldr	r2, [r3, #0]
 800095a:	4924      	ldr	r1, [pc, #144]	; (80009ec <SystemInit+0xd8>)
 800095c:	4b24      	ldr	r3, [pc, #144]	; (80009f0 <SystemInit+0xdc>)
 800095e:	4013      	ands	r3, r2
 8000960:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000962:	4b21      	ldr	r3, [pc, #132]	; (80009e8 <SystemInit+0xd4>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	f003 030c 	and.w	r3, r3, #12
 800096a:	2b00      	cmp	r3, #0
 800096c:	d007      	beq.n	800097e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800096e:	4b1e      	ldr	r3, [pc, #120]	; (80009e8 <SystemInit+0xd4>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	f023 030f 	bic.w	r3, r3, #15
 8000976:	4a1c      	ldr	r2, [pc, #112]	; (80009e8 <SystemInit+0xd4>)
 8000978:	f043 0303 	orr.w	r3, r3, #3
 800097c:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800097e:	4b1b      	ldr	r3, [pc, #108]	; (80009ec <SystemInit+0xd8>)
 8000980:	2200      	movs	r2, #0
 8000982:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000984:	4b19      	ldr	r3, [pc, #100]	; (80009ec <SystemInit+0xd8>)
 8000986:	2200      	movs	r2, #0
 8000988:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800098a:	4b18      	ldr	r3, [pc, #96]	; (80009ec <SystemInit+0xd8>)
 800098c:	2200      	movs	r2, #0
 800098e:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000990:	4b16      	ldr	r3, [pc, #88]	; (80009ec <SystemInit+0xd8>)
 8000992:	4a18      	ldr	r2, [pc, #96]	; (80009f4 <SystemInit+0xe0>)
 8000994:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000996:	4b15      	ldr	r3, [pc, #84]	; (80009ec <SystemInit+0xd8>)
 8000998:	4a17      	ldr	r2, [pc, #92]	; (80009f8 <SystemInit+0xe4>)
 800099a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800099c:	4b13      	ldr	r3, [pc, #76]	; (80009ec <SystemInit+0xd8>)
 800099e:	4a17      	ldr	r2, [pc, #92]	; (80009fc <SystemInit+0xe8>)
 80009a0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80009a2:	4b12      	ldr	r3, [pc, #72]	; (80009ec <SystemInit+0xd8>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80009a8:	4b10      	ldr	r3, [pc, #64]	; (80009ec <SystemInit+0xd8>)
 80009aa:	4a14      	ldr	r2, [pc, #80]	; (80009fc <SystemInit+0xe8>)
 80009ac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80009ae:	4b0f      	ldr	r3, [pc, #60]	; (80009ec <SystemInit+0xd8>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80009b4:	4b0d      	ldr	r3, [pc, #52]	; (80009ec <SystemInit+0xd8>)
 80009b6:	4a11      	ldr	r2, [pc, #68]	; (80009fc <SystemInit+0xe8>)
 80009b8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80009ba:	4b0c      	ldr	r3, [pc, #48]	; (80009ec <SystemInit+0xd8>)
 80009bc:	2200      	movs	r2, #0
 80009be:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80009c0:	4b0a      	ldr	r3, [pc, #40]	; (80009ec <SystemInit+0xd8>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a09      	ldr	r2, [pc, #36]	; (80009ec <SystemInit+0xd8>)
 80009c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009ca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80009cc:	4b07      	ldr	r3, [pc, #28]	; (80009ec <SystemInit+0xd8>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80009d2:	4b0b      	ldr	r3, [pc, #44]	; (8000a00 <SystemInit+0xec>)
 80009d4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80009d8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80009da:	bf00      	nop
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr
 80009e4:	e000ed00 	.word	0xe000ed00
 80009e8:	52002000 	.word	0x52002000
 80009ec:	58024400 	.word	0x58024400
 80009f0:	eaf6ed7f 	.word	0xeaf6ed7f
 80009f4:	02020200 	.word	0x02020200
 80009f8:	01ff0000 	.word	0x01ff0000
 80009fc:	01010280 	.word	0x01010280
 8000a00:	52004000 	.word	0x52004000

08000a04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a3c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a08:	f7ff ff84 	bl	8000914 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a0c:	480c      	ldr	r0, [pc, #48]	; (8000a40 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a0e:	490d      	ldr	r1, [pc, #52]	; (8000a44 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a10:	4a0d      	ldr	r2, [pc, #52]	; (8000a48 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a14:	e002      	b.n	8000a1c <LoopCopyDataInit>

08000a16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a1a:	3304      	adds	r3, #4

08000a1c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000a1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a20:	d3f9      	bcc.n	8000a16 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a22:	4a0a      	ldr	r2, [pc, #40]	; (8000a4c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a24:	4c0a      	ldr	r4, [pc, #40]	; (8000a50 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a28:	e001      	b.n	8000a2e <LoopFillZerobss>

08000a2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a2c:	3204      	adds	r2, #4

08000a2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a30:	d3fb      	bcc.n	8000a2a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000a32:	f005 f92b 	bl	8005c8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a36:	f7ff fc5b 	bl	80002f0 <main>
  bx  lr
 8000a3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a3c:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000a40:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000a44:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000a48:	08005d14 	.word	0x08005d14
  ldr r2, =_sbss
 8000a4c:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000a50:	240000b8 	.word	0x240000b8

08000a54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a54:	e7fe      	b.n	8000a54 <ADC_IRQHandler>
	...

08000a58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a5e:	2003      	movs	r0, #3
 8000a60:	f001 fb0c 	bl	800207c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000a64:	f002 fb48 	bl	80030f8 <HAL_RCC_GetSysClockFreq>
 8000a68:	4602      	mov	r2, r0
 8000a6a:	4b15      	ldr	r3, [pc, #84]	; (8000ac0 <HAL_Init+0x68>)
 8000a6c:	699b      	ldr	r3, [r3, #24]
 8000a6e:	0a1b      	lsrs	r3, r3, #8
 8000a70:	f003 030f 	and.w	r3, r3, #15
 8000a74:	4913      	ldr	r1, [pc, #76]	; (8000ac4 <HAL_Init+0x6c>)
 8000a76:	5ccb      	ldrb	r3, [r1, r3]
 8000a78:	f003 031f 	and.w	r3, r3, #31
 8000a7c:	fa22 f303 	lsr.w	r3, r2, r3
 8000a80:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000a82:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <HAL_Init+0x68>)
 8000a84:	699b      	ldr	r3, [r3, #24]
 8000a86:	f003 030f 	and.w	r3, r3, #15
 8000a8a:	4a0e      	ldr	r2, [pc, #56]	; (8000ac4 <HAL_Init+0x6c>)
 8000a8c:	5cd3      	ldrb	r3, [r2, r3]
 8000a8e:	f003 031f 	and.w	r3, r3, #31
 8000a92:	687a      	ldr	r2, [r7, #4]
 8000a94:	fa22 f303 	lsr.w	r3, r2, r3
 8000a98:	4a0b      	ldr	r2, [pc, #44]	; (8000ac8 <HAL_Init+0x70>)
 8000a9a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000a9c:	4a0b      	ldr	r2, [pc, #44]	; (8000acc <HAL_Init+0x74>)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000aa2:	2000      	movs	r0, #0
 8000aa4:	f000 f814 	bl	8000ad0 <HAL_InitTick>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	e002      	b.n	8000ab8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000ab2:	f7ff fe79 	bl	80007a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ab6:	2300      	movs	r3, #0
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	3708      	adds	r7, #8
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	58024400 	.word	0x58024400
 8000ac4:	08005cfc 	.word	0x08005cfc
 8000ac8:	24000004 	.word	0x24000004
 8000acc:	24000000 	.word	0x24000000

08000ad0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000ad8:	4b15      	ldr	r3, [pc, #84]	; (8000b30 <HAL_InitTick+0x60>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d101      	bne.n	8000ae4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	e021      	b.n	8000b28 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000ae4:	4b13      	ldr	r3, [pc, #76]	; (8000b34 <HAL_InitTick+0x64>)
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	4b11      	ldr	r3, [pc, #68]	; (8000b30 <HAL_InitTick+0x60>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	4619      	mov	r1, r3
 8000aee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000af2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000afa:	4618      	mov	r0, r3
 8000afc:	f001 fae3 	bl	80020c6 <HAL_SYSTICK_Config>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000b06:	2301      	movs	r3, #1
 8000b08:	e00e      	b.n	8000b28 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	2b0f      	cmp	r3, #15
 8000b0e:	d80a      	bhi.n	8000b26 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b10:	2200      	movs	r2, #0
 8000b12:	6879      	ldr	r1, [r7, #4]
 8000b14:	f04f 30ff 	mov.w	r0, #4294967295
 8000b18:	f001 fabb 	bl	8002092 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b1c:	4a06      	ldr	r2, [pc, #24]	; (8000b38 <HAL_InitTick+0x68>)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b22:	2300      	movs	r3, #0
 8000b24:	e000      	b.n	8000b28 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000b26:	2301      	movs	r3, #1
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3708      	adds	r7, #8
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	2400000c 	.word	0x2400000c
 8000b34:	24000000 	.word	0x24000000
 8000b38:	24000008 	.word	0x24000008

08000b3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b40:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <HAL_IncTick+0x20>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	461a      	mov	r2, r3
 8000b46:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <HAL_IncTick+0x24>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	4a04      	ldr	r2, [pc, #16]	; (8000b60 <HAL_IncTick+0x24>)
 8000b4e:	6013      	str	r3, [r2, #0]
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	2400000c 	.word	0x2400000c
 8000b60:	240000b4 	.word	0x240000b4

08000b64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  return uwTick;
 8000b68:	4b03      	ldr	r3, [pc, #12]	; (8000b78 <HAL_GetTick+0x14>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	240000b4 	.word	0x240000b4

08000b7c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	689b      	ldr	r3, [r3, #8]
 8000b8a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	431a      	orrs	r2, r3
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	609a      	str	r2, [r3, #8]
}
 8000b96:	bf00      	nop
 8000b98:	370c      	adds	r7, #12
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr

08000ba2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	b083      	sub	sp, #12
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
 8000baa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	689b      	ldr	r3, [r3, #8]
 8000bb0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	431a      	orrs	r2, r3
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	609a      	str	r2, [r3, #8]
}
 8000bbc:	bf00      	nop
 8000bbe:	370c      	adds	r7, #12
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr

08000bc8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	689b      	ldr	r3, [r3, #8]
 8000bd4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b087      	sub	sp, #28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	60f8      	str	r0, [r7, #12]
 8000bec:	60b9      	str	r1, [r7, #8]
 8000bee:	607a      	str	r2, [r7, #4]
 8000bf0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	3360      	adds	r3, #96	; 0x60
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	009b      	lsls	r3, r3, #2
 8000bfc:	4413      	add	r3, r2
 8000bfe:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	430b      	orrs	r3, r1
 8000c12:	431a      	orrs	r2, r3
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8000c18:	bf00      	nop
 8000c1a:	371c      	adds	r7, #28
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b085      	sub	sp, #20
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	60f8      	str	r0, [r7, #12]
 8000c2c:	60b9      	str	r1, [r7, #8]
 8000c2e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	691b      	ldr	r3, [r3, #16]
 8000c34:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	f003 031f 	and.w	r3, r3, #31
 8000c3e:	6879      	ldr	r1, [r7, #4]
 8000c40:	fa01 f303 	lsl.w	r3, r1, r3
 8000c44:	431a      	orrs	r2, r3
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	611a      	str	r2, [r3, #16]
}
 8000c4a:	bf00      	nop
 8000c4c:	3714      	adds	r7, #20
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr

08000c56 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8000c56:	b480      	push	{r7}
 8000c58:	b087      	sub	sp, #28
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	60f8      	str	r0, [r7, #12]
 8000c5e:	60b9      	str	r1, [r7, #8]
 8000c60:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	3360      	adds	r3, #96	; 0x60
 8000c66:	461a      	mov	r2, r3
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	4413      	add	r3, r2
 8000c6e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	431a      	orrs	r2, r3
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	601a      	str	r2, [r3, #0]
  }
}
 8000c80:	bf00      	nop
 8000c82:	371c      	adds	r7, #28
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr

08000c8c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d101      	bne.n	8000ca4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	e000      	b.n	8000ca6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000ca4:	2300      	movs	r3, #0
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr

08000cb2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	b087      	sub	sp, #28
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	60f8      	str	r0, [r7, #12]
 8000cba:	60b9      	str	r1, [r7, #8]
 8000cbc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	3330      	adds	r3, #48	; 0x30
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	0a1b      	lsrs	r3, r3, #8
 8000cc8:	009b      	lsls	r3, r3, #2
 8000cca:	f003 030c 	and.w	r3, r3, #12
 8000cce:	4413      	add	r3, r2
 8000cd0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	68bb      	ldr	r3, [r7, #8]
 8000cd8:	f003 031f 	and.w	r3, r3, #31
 8000cdc:	211f      	movs	r1, #31
 8000cde:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce2:	43db      	mvns	r3, r3
 8000ce4:	401a      	ands	r2, r3
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	0e9b      	lsrs	r3, r3, #26
 8000cea:	f003 011f 	and.w	r1, r3, #31
 8000cee:	68bb      	ldr	r3, [r7, #8]
 8000cf0:	f003 031f 	and.w	r3, r3, #31
 8000cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf8:	431a      	orrs	r2, r3
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000cfe:	bf00      	nop
 8000d00:	371c      	adds	r7, #28
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr

08000d0a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	b087      	sub	sp, #28
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	60f8      	str	r0, [r7, #12]
 8000d12:	60b9      	str	r1, [r7, #8]
 8000d14:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	3314      	adds	r3, #20
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	0e5b      	lsrs	r3, r3, #25
 8000d20:	009b      	lsls	r3, r3, #2
 8000d22:	f003 0304 	and.w	r3, r3, #4
 8000d26:	4413      	add	r3, r2
 8000d28:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	68bb      	ldr	r3, [r7, #8]
 8000d30:	0d1b      	lsrs	r3, r3, #20
 8000d32:	f003 031f 	and.w	r3, r3, #31
 8000d36:	2107      	movs	r1, #7
 8000d38:	fa01 f303 	lsl.w	r3, r1, r3
 8000d3c:	43db      	mvns	r3, r3
 8000d3e:	401a      	ands	r2, r3
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	0d1b      	lsrs	r3, r3, #20
 8000d44:	f003 031f 	and.w	r3, r3, #31
 8000d48:	6879      	ldr	r1, [r7, #4]
 8000d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d4e:	431a      	orrs	r2, r3
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000d54:	bf00      	nop
 8000d56:	371c      	adds	r7, #28
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b085      	sub	sp, #20
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	60f8      	str	r0, [r7, #12]
 8000d68:	60b9      	str	r1, [r7, #8]
 8000d6a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8000d72:	68bb      	ldr	r3, [r7, #8]
 8000d74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000d78:	43db      	mvns	r3, r3
 8000d7a:	401a      	ands	r2, r3
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	f003 0318 	and.w	r3, r3, #24
 8000d82:	4908      	ldr	r1, [pc, #32]	; (8000da4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000d84:	40d9      	lsrs	r1, r3
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	400b      	ands	r3, r1
 8000d8a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000d8e:	431a      	orrs	r2, r3
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8000d96:	bf00      	nop
 8000d98:	3714      	adds	r7, #20
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	000fffff 	.word	0x000fffff

08000da8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	689b      	ldr	r3, [r3, #8]
 8000db4:	f003 031f 	and.w	r3, r3, #31
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr

08000dc4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	689b      	ldr	r3, [r3, #8]
 8000dd0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	689a      	ldr	r2, [r3, #8]
 8000dec:	4b04      	ldr	r3, [pc, #16]	; (8000e00 <LL_ADC_DisableDeepPowerDown+0x20>)
 8000dee:	4013      	ands	r3, r2
 8000df0:	687a      	ldr	r2, [r7, #4]
 8000df2:	6093      	str	r3, [r2, #8]
}
 8000df4:	bf00      	nop
 8000df6:	370c      	adds	r7, #12
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	5fffffc0 	.word	0x5fffffc0

08000e04 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	689b      	ldr	r3, [r3, #8]
 8000e10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000e14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000e18:	d101      	bne.n	8000e1e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e000      	b.n	8000e20 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000e1e:	2300      	movs	r3, #0
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	689a      	ldr	r2, [r3, #8]
 8000e38:	4b05      	ldr	r3, [pc, #20]	; (8000e50 <LL_ADC_EnableInternalRegulator+0x24>)
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000e44:	bf00      	nop
 8000e46:	370c      	adds	r7, #12
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	6fffffc0 	.word	0x6fffffc0

08000e54 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	689b      	ldr	r3, [r3, #8]
 8000e60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000e68:	d101      	bne.n	8000e6e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e000      	b.n	8000e70 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000e6e:	2300      	movs	r3, #0
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	370c      	adds	r7, #12
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr

08000e7c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	689a      	ldr	r2, [r3, #8]
 8000e88:	4b05      	ldr	r3, [pc, #20]	; (8000ea0 <LL_ADC_Enable+0x24>)
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	f043 0201 	orr.w	r2, r3, #1
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000e94:	bf00      	nop
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	7fffffc0 	.word	0x7fffffc0

08000ea4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	689b      	ldr	r3, [r3, #8]
 8000eb0:	f003 0301 	and.w	r3, r3, #1
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d101      	bne.n	8000ebc <LL_ADC_IsEnabled+0x18>
 8000eb8:	2301      	movs	r3, #1
 8000eba:	e000      	b.n	8000ebe <LL_ADC_IsEnabled+0x1a>
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
	...

08000ecc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	689a      	ldr	r2, [r3, #8]
 8000ed8:	4b05      	ldr	r3, [pc, #20]	; (8000ef0 <LL_ADC_REG_StartConversion+0x24>)
 8000eda:	4013      	ands	r3, r2
 8000edc:	f043 0204 	orr.w	r2, r3, #4
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000ee4:	bf00      	nop
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	7fffffc0 	.word	0x7fffffc0

08000ef4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	689b      	ldr	r3, [r3, #8]
 8000f00:	f003 0304 	and.w	r3, r3, #4
 8000f04:	2b04      	cmp	r3, #4
 8000f06:	d101      	bne.n	8000f0c <LL_ADC_REG_IsConversionOngoing+0x18>
 8000f08:	2301      	movs	r3, #1
 8000f0a:	e000      	b.n	8000f0e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000f0c:	2300      	movs	r3, #0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr

08000f1a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	b083      	sub	sp, #12
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	f003 0308 	and.w	r3, r3, #8
 8000f2a:	2b08      	cmp	r3, #8
 8000f2c:	d101      	bne.n	8000f32 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e000      	b.n	8000f34 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000f32:	2300      	movs	r3, #0
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000f40:	b590      	push	{r4, r7, lr}
 8000f42:	b089      	sub	sp, #36	; 0x24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d101      	bne.n	8000f5a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	e138      	b.n	80011cc <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	68db      	ldr	r3, [r3, #12]
 8000f5e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d109      	bne.n	8000f7c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f68:	6878      	ldr	r0, [r7, #4]
 8000f6a:	f7ff fc37 	bl	80007dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2200      	movs	r2, #0
 8000f72:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2200      	movs	r2, #0
 8000f78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff ff3f 	bl	8000e04 <LL_ADC_IsDeepPowerDownEnabled>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d004      	beq.n	8000f96 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff ff25 	bl	8000de0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff ff5a 	bl	8000e54 <LL_ADC_IsInternalRegulatorEnabled>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d114      	bne.n	8000fd0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff ff3e 	bl	8000e2c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000fb0:	4b88      	ldr	r3, [pc, #544]	; (80011d4 <HAL_ADC_Init+0x294>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	099b      	lsrs	r3, r3, #6
 8000fb6:	4a88      	ldr	r2, [pc, #544]	; (80011d8 <HAL_ADC_Init+0x298>)
 8000fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8000fbc:	099b      	lsrs	r3, r3, #6
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000fc2:	e002      	b.n	8000fca <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	3b01      	subs	r3, #1
 8000fc8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d1f9      	bne.n	8000fc4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff ff3d 	bl	8000e54 <LL_ADC_IsInternalRegulatorEnabled>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d10d      	bne.n	8000ffc <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fe4:	f043 0210 	orr.w	r2, r3, #16
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ff0:	f043 0201 	orr.w	r2, r3, #1
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff ff77 	bl	8000ef4 <LL_ADC_REG_IsConversionOngoing>
 8001006:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800100c:	f003 0310 	and.w	r3, r3, #16
 8001010:	2b00      	cmp	r3, #0
 8001012:	f040 80d2 	bne.w	80011ba <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	2b00      	cmp	r3, #0
 800101a:	f040 80ce 	bne.w	80011ba <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001022:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001026:	f043 0202 	orr.w	r2, r3, #2
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff ff36 	bl	8000ea4 <LL_ADC_IsEnabled>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d110      	bne.n	8001060 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800103e:	4867      	ldr	r0, [pc, #412]	; (80011dc <HAL_ADC_Init+0x29c>)
 8001040:	f7ff ff30 	bl	8000ea4 <LL_ADC_IsEnabled>
 8001044:	4604      	mov	r4, r0
 8001046:	4866      	ldr	r0, [pc, #408]	; (80011e0 <HAL_ADC_Init+0x2a0>)
 8001048:	f7ff ff2c 	bl	8000ea4 <LL_ADC_IsEnabled>
 800104c:	4603      	mov	r3, r0
 800104e:	4323      	orrs	r3, r4
 8001050:	2b00      	cmp	r3, #0
 8001052:	d105      	bne.n	8001060 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	4619      	mov	r1, r3
 800105a:	4862      	ldr	r0, [pc, #392]	; (80011e4 <HAL_ADC_Init+0x2a4>)
 800105c:	f7ff fd8e 	bl	8000b7c <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	7d5b      	ldrb	r3, [r3, #21]
 8001064:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800106a:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8001070:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	7f1b      	ldrb	r3, [r3, #28]
 8001076:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001078:	4313      	orrs	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	7f1b      	ldrb	r3, [r3, #28]
 8001080:	2b01      	cmp	r3, #1
 8001082:	d106      	bne.n	8001092 <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6a1b      	ldr	r3, [r3, #32]
 8001088:	3b01      	subs	r3, #1
 800108a:	045b      	lsls	r3, r3, #17
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	4313      	orrs	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001096:	2b00      	cmp	r3, #0
 8001098:	d009      	beq.n	80010ae <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800109e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010a6:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	68da      	ldr	r2, [r3, #12]
 80010b4:	4b4c      	ldr	r3, [pc, #304]	; (80011e8 <HAL_ADC_Init+0x2a8>)
 80010b6:	4013      	ands	r3, r2
 80010b8:	687a      	ldr	r2, [r7, #4]
 80010ba:	6812      	ldr	r2, [r2, #0]
 80010bc:	69b9      	ldr	r1, [r7, #24]
 80010be:	430b      	orrs	r3, r1
 80010c0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff ff14 	bl	8000ef4 <LL_ADC_REG_IsConversionOngoing>
 80010cc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff ff21 	bl	8000f1a <LL_ADC_INJ_IsConversionOngoing>
 80010d8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d14a      	bne.n	8001176 <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d147      	bne.n	8001176 <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	7d1b      	ldrb	r3, [r3, #20]
 80010ea:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80010f0:	4313      	orrs	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	68da      	ldr	r2, [r3, #12]
 80010fa:	4b3c      	ldr	r3, [pc, #240]	; (80011ec <HAL_ADC_Init+0x2ac>)
 80010fc:	4013      	ands	r3, r2
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	6812      	ldr	r2, [r2, #0]
 8001102:	69b9      	ldr	r1, [r7, #24]
 8001104:	430b      	orrs	r3, r1
 8001106:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800110e:	2b01      	cmp	r3, #1
 8001110:	d11b      	bne.n	800114a <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001116:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	691a      	ldr	r2, [r3, #16]
 800111e:	4b34      	ldr	r3, [pc, #208]	; (80011f0 <HAL_ADC_Init+0x2b0>)
 8001120:	4013      	ands	r3, r2
 8001122:	687a      	ldr	r2, [r7, #4]
 8001124:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001126:	3a01      	subs	r2, #1
 8001128:	0411      	lsls	r1, r2, #16
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800112e:	4311      	orrs	r1, r2
 8001130:	687a      	ldr	r2, [r7, #4]
 8001132:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001134:	4311      	orrs	r1, r2
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800113a:	430a      	orrs	r2, r1
 800113c:	431a      	orrs	r2, r3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f042 0201 	orr.w	r2, r2, #1
 8001146:	611a      	str	r2, [r3, #16]
 8001148:	e007      	b.n	800115a <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	691a      	ldr	r2, [r3, #16]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f022 0201 	bic.w	r2, r2, #1
 8001158:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	691b      	ldr	r3, [r3, #16]
 8001160:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	430a      	orrs	r2, r1
 800116e:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f000 fd41 	bl	8001bf8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	68db      	ldr	r3, [r3, #12]
 800117a:	2b01      	cmp	r3, #1
 800117c:	d10c      	bne.n	8001198 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001184:	f023 010f 	bic.w	r1, r3, #15
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	1e5a      	subs	r2, r3, #1
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	430a      	orrs	r2, r1
 8001194:	631a      	str	r2, [r3, #48]	; 0x30
 8001196:	e007      	b.n	80011a8 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f022 020f 	bic.w	r2, r2, #15
 80011a6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011ac:	f023 0303 	bic.w	r3, r3, #3
 80011b0:	f043 0201 	orr.w	r2, r3, #1
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	655a      	str	r2, [r3, #84]	; 0x54
 80011b8:	e007      	b.n	80011ca <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011be:	f043 0210 	orr.w	r2, r3, #16
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80011ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3724      	adds	r7, #36	; 0x24
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd90      	pop	{r4, r7, pc}
 80011d4:	24000000 	.word	0x24000000
 80011d8:	053e2d63 	.word	0x053e2d63
 80011dc:	40022000 	.word	0x40022000
 80011e0:	40022100 	.word	0x40022100
 80011e4:	40022300 	.word	0x40022300
 80011e8:	fff0c003 	.word	0xfff0c003
 80011ec:	ffffbffc 	.word	0xffffbffc
 80011f0:	fc00f81e 	.word	0xfc00f81e

080011f4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80011fc:	4856      	ldr	r0, [pc, #344]	; (8001358 <HAL_ADC_Start+0x164>)
 80011fe:	f7ff fdd3 	bl	8000da8 <LL_ADC_GetMultimode>
 8001202:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff fe73 	bl	8000ef4 <LL_ADC_REG_IsConversionOngoing>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	f040 809a 	bne.w	800134a <HAL_ADC_Start+0x156>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800121c:	2b01      	cmp	r3, #1
 800121e:	d101      	bne.n	8001224 <HAL_ADC_Start+0x30>
 8001220:	2302      	movs	r3, #2
 8001222:	e095      	b.n	8001350 <HAL_ADC_Start+0x15c>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2201      	movs	r2, #1
 8001228:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f000 fc67 	bl	8001b00 <ADC_Enable>
 8001232:	4603      	mov	r3, r0
 8001234:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001236:	7dfb      	ldrb	r3, [r7, #23]
 8001238:	2b00      	cmp	r3, #0
 800123a:	f040 8081 	bne.w	8001340 <HAL_ADC_Start+0x14c>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001242:	4b46      	ldr	r3, [pc, #280]	; (800135c <HAL_ADC_Start+0x168>)
 8001244:	4013      	ands	r3, r2
 8001246:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a43      	ldr	r2, [pc, #268]	; (8001360 <HAL_ADC_Start+0x16c>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d002      	beq.n	800125e <HAL_ADC_Start+0x6a>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	e000      	b.n	8001260 <HAL_ADC_Start+0x6c>
 800125e:	4b41      	ldr	r3, [pc, #260]	; (8001364 <HAL_ADC_Start+0x170>)
 8001260:	687a      	ldr	r2, [r7, #4]
 8001262:	6812      	ldr	r2, [r2, #0]
 8001264:	4293      	cmp	r3, r2
 8001266:	d002      	beq.n	800126e <HAL_ADC_Start+0x7a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d105      	bne.n	800127a <HAL_ADC_Start+0x86>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001272:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800127e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001282:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001286:	d106      	bne.n	8001296 <HAL_ADC_Start+0xa2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800128c:	f023 0206 	bic.w	r2, r3, #6
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	659a      	str	r2, [r3, #88]	; 0x58
 8001294:	e002      	b.n	800129c <HAL_ADC_Start+0xa8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2200      	movs	r2, #0
 800129a:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	221c      	movs	r2, #28
 80012a2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2200      	movs	r2, #0
 80012a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a2b      	ldr	r2, [pc, #172]	; (8001360 <HAL_ADC_Start+0x16c>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d002      	beq.n	80012bc <HAL_ADC_Start+0xc8>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	e000      	b.n	80012be <HAL_ADC_Start+0xca>
 80012bc:	4b29      	ldr	r3, [pc, #164]	; (8001364 <HAL_ADC_Start+0x170>)
 80012be:	687a      	ldr	r2, [r7, #4]
 80012c0:	6812      	ldr	r2, [r2, #0]
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d008      	beq.n	80012d8 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d005      	beq.n	80012d8 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	2b05      	cmp	r3, #5
 80012d0:	d002      	beq.n	80012d8 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	2b09      	cmp	r3, #9
 80012d6:	d114      	bne.n	8001302 <HAL_ADC_Start+0x10e>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	68db      	ldr	r3, [r3, #12]
 80012de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d007      	beq.n	80012f6 <HAL_ADC_Start+0x102>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012ea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80012ee:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff fde6 	bl	8000ecc <LL_ADC_REG_StartConversion>
 8001300:	e025      	b.n	800134e <HAL_ADC_Start+0x15a>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001306:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a13      	ldr	r2, [pc, #76]	; (8001360 <HAL_ADC_Start+0x16c>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d002      	beq.n	800131e <HAL_ADC_Start+0x12a>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	e000      	b.n	8001320 <HAL_ADC_Start+0x12c>
 800131e:	4b11      	ldr	r3, [pc, #68]	; (8001364 <HAL_ADC_Start+0x170>)
 8001320:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d00f      	beq.n	800134e <HAL_ADC_Start+0x15a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001332:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001336:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	655a      	str	r2, [r3, #84]	; 0x54
 800133e:	e006      	b.n	800134e <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2200      	movs	r2, #0
 8001344:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001348:	e001      	b.n	800134e <HAL_ADC_Start+0x15a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800134a:	2302      	movs	r3, #2
 800134c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800134e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001350:	4618      	mov	r0, r3
 8001352:	3718      	adds	r7, #24
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40022300 	.word	0x40022300
 800135c:	fffff0fe 	.word	0xfffff0fe
 8001360:	40022100 	.word	0x40022100
 8001364:	40022000 	.word	0x40022000

08001368 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b088      	sub	sp, #32
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001372:	4866      	ldr	r0, [pc, #408]	; (800150c <HAL_ADC_PollForConversion+0x1a4>)
 8001374:	f7ff fd18 	bl	8000da8 <LL_ADC_GetMultimode>
 8001378:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	691b      	ldr	r3, [r3, #16]
 800137e:	2b08      	cmp	r3, #8
 8001380:	d102      	bne.n	8001388 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001382:	2308      	movs	r3, #8
 8001384:	61fb      	str	r3, [r7, #28]
 8001386:	e02a      	b.n	80013de <HAL_ADC_PollForConversion+0x76>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d005      	beq.n	800139a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	2b05      	cmp	r3, #5
 8001392:	d002      	beq.n	800139a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	2b09      	cmp	r3, #9
 8001398:	d111      	bne.n	80013be <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	f003 0301 	and.w	r3, r3, #1
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d007      	beq.n	80013b8 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ac:	f043 0220 	orr.w	r2, r3, #32
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e0a4      	b.n	8001502 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80013b8:	2304      	movs	r3, #4
 80013ba:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80013bc:	e00f      	b.n	80013de <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80013be:	4853      	ldr	r0, [pc, #332]	; (800150c <HAL_ADC_PollForConversion+0x1a4>)
 80013c0:	f7ff fd00 	bl	8000dc4 <LL_ADC_GetMultiDMATransfer>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d007      	beq.n	80013da <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ce:	f043 0220 	orr.w	r2, r3, #32
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e093      	b.n	8001502 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80013da:	2304      	movs	r3, #4
 80013dc:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80013de:	f7ff fbc1 	bl	8000b64 <HAL_GetTick>
 80013e2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80013e4:	e021      	b.n	800142a <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013ec:	d01d      	beq.n	800142a <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80013ee:	f7ff fbb9 	bl	8000b64 <HAL_GetTick>
 80013f2:	4602      	mov	r2, r0
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	683a      	ldr	r2, [r7, #0]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d302      	bcc.n	8001404 <HAL_ADC_PollForConversion+0x9c>
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d112      	bne.n	800142a <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	4013      	ands	r3, r2
 800140e:	2b00      	cmp	r3, #0
 8001410:	d10b      	bne.n	800142a <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001416:	f043 0204 	orr.w	r2, r3, #4
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2200      	movs	r2, #0
 8001422:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8001426:	2303      	movs	r3, #3
 8001428:	e06b      	b.n	8001502 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	4013      	ands	r3, r2
 8001434:	2b00      	cmp	r3, #0
 8001436:	d0d6      	beq.n	80013e6 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800143c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff fc1f 	bl	8000c8c <LL_ADC_REG_IsTriggerSourceSWStart>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d01c      	beq.n	800148e <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	7d5b      	ldrb	r3, [r3, #21]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d118      	bne.n	800148e <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0308 	and.w	r3, r3, #8
 8001466:	2b08      	cmp	r3, #8
 8001468:	d111      	bne.n	800148e <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800146e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800147a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d105      	bne.n	800148e <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001486:	f043 0201 	orr.w	r2, r3, #1
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a1f      	ldr	r2, [pc, #124]	; (8001510 <HAL_ADC_PollForConversion+0x1a8>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d002      	beq.n	800149e <HAL_ADC_PollForConversion+0x136>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	e000      	b.n	80014a0 <HAL_ADC_PollForConversion+0x138>
 800149e:	4b1d      	ldr	r3, [pc, #116]	; (8001514 <HAL_ADC_PollForConversion+0x1ac>)
 80014a0:	687a      	ldr	r2, [r7, #4]
 80014a2:	6812      	ldr	r2, [r2, #0]
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d008      	beq.n	80014ba <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d005      	beq.n	80014ba <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	2b05      	cmp	r3, #5
 80014b2:	d002      	beq.n	80014ba <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	2b09      	cmp	r3, #9
 80014b8:	d104      	bne.n	80014c4 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	61bb      	str	r3, [r7, #24]
 80014c2:	e00c      	b.n	80014de <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a11      	ldr	r2, [pc, #68]	; (8001510 <HAL_ADC_PollForConversion+0x1a8>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d002      	beq.n	80014d4 <HAL_ADC_PollForConversion+0x16c>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	e000      	b.n	80014d6 <HAL_ADC_PollForConversion+0x16e>
 80014d4:	4b0f      	ldr	r3, [pc, #60]	; (8001514 <HAL_ADC_PollForConversion+0x1ac>)
 80014d6:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	2b08      	cmp	r3, #8
 80014e2:	d104      	bne.n	80014ee <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2208      	movs	r2, #8
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	e008      	b.n	8001500 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d103      	bne.n	8001500 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	220c      	movs	r2, #12
 80014fe:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001500:	2300      	movs	r3, #0
}
 8001502:	4618      	mov	r0, r3
 8001504:	3720      	adds	r7, #32
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	40022300 	.word	0x40022300
 8001510:	40022100 	.word	0x40022100
 8001514:	40022000 	.word	0x40022000

08001518 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001526:	4618      	mov	r0, r3
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
	...

08001534 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001534:	b590      	push	{r4, r7, lr}
 8001536:	b0a1      	sub	sp, #132	; 0x84
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800153e:	2300      	movs	r3, #0
 8001540:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001544:	2300      	movs	r3, #0
 8001546:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	4a9a      	ldr	r2, [pc, #616]	; (80017b8 <HAL_ADC_ConfigChannel+0x284>)
 800154e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001556:	2b01      	cmp	r3, #1
 8001558:	d101      	bne.n	800155e <HAL_ADC_ConfigChannel+0x2a>
 800155a:	2302      	movs	r3, #2
 800155c:	e2bc      	b.n	8001ad8 <HAL_ADC_ConfigChannel+0x5a4>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2201      	movs	r2, #1
 8001562:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff fcc2 	bl	8000ef4 <LL_ADC_REG_IsConversionOngoing>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	f040 82a1 	bne.w	8001aba <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001580:	2b00      	cmp	r3, #0
 8001582:	d108      	bne.n	8001596 <HAL_ADC_ConfigChannel+0x62>
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	0e9b      	lsrs	r3, r3, #26
 800158a:	f003 031f 	and.w	r3, r3, #31
 800158e:	2201      	movs	r2, #1
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	e016      	b.n	80015c4 <HAL_ADC_ConfigChannel+0x90>
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800159c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800159e:	fa93 f3a3 	rbit	r3, r3
 80015a2:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80015a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80015a6:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80015a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d101      	bne.n	80015b2 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 80015ae:	2320      	movs	r3, #32
 80015b0:	e003      	b.n	80015ba <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 80015b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80015b4:	fab3 f383 	clz	r3, r3
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	f003 031f 	and.w	r3, r3, #31
 80015be:	2201      	movs	r2, #1
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	687a      	ldr	r2, [r7, #4]
 80015c6:	6812      	ldr	r2, [r2, #0]
 80015c8:	69d1      	ldr	r1, [r2, #28]
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	6812      	ldr	r2, [r2, #0]
 80015ce:	430b      	orrs	r3, r1
 80015d0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6818      	ldr	r0, [r3, #0]
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	6859      	ldr	r1, [r3, #4]
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	461a      	mov	r2, r3
 80015e0:	f7ff fb67 	bl	8000cb2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff fc83 	bl	8000ef4 <LL_ADC_REG_IsConversionOngoing>
 80015ee:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff fc90 	bl	8000f1a <LL_ADC_INJ_IsConversionOngoing>
 80015fa:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80015fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80015fe:	2b00      	cmp	r3, #0
 8001600:	f040 80a0 	bne.w	8001744 <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001604:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001606:	2b00      	cmp	r3, #0
 8001608:	f040 809c 	bne.w	8001744 <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6818      	ldr	r0, [r3, #0]
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	6819      	ldr	r1, [r3, #0]
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	461a      	mov	r2, r3
 800161a:	f7ff fb76 	bl	8000d0a <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	f003 0310 	and.w	r3, r3, #16
 8001628:	2b00      	cmp	r3, #0
 800162a:	d10b      	bne.n	8001644 <HAL_ADC_ConfigChannel+0x110>
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	695a      	ldr	r2, [r3, #20]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	68db      	ldr	r3, [r3, #12]
 8001636:	089b      	lsrs	r3, r3, #2
 8001638:	f003 0307 	and.w	r3, r3, #7
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	fa02 f303 	lsl.w	r3, r2, r3
 8001642:	e00a      	b.n	800165a <HAL_ADC_ConfigChannel+0x126>
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	695a      	ldr	r2, [r3, #20]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	68db      	ldr	r3, [r3, #12]
 800164e:	089b      	lsrs	r3, r3, #2
 8001650:	f003 0304 	and.w	r3, r3, #4
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	fa02 f303 	lsl.w	r3, r2, r3
 800165a:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	691b      	ldr	r3, [r3, #16]
 8001660:	2b04      	cmp	r3, #4
 8001662:	d027      	beq.n	80016b4 <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6818      	ldr	r0, [r3, #0]
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	6919      	ldr	r1, [r3, #16]
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001672:	f7ff fab7 	bl	8000be4 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6818      	ldr	r0, [r3, #0]
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	6919      	ldr	r1, [r3, #16]
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	7e5b      	ldrb	r3, [r3, #25]
 8001682:	2b01      	cmp	r3, #1
 8001684:	d102      	bne.n	800168c <HAL_ADC_ConfigChannel+0x158>
 8001686:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800168a:	e000      	b.n	800168e <HAL_ADC_ConfigChannel+0x15a>
 800168c:	2300      	movs	r3, #0
 800168e:	461a      	mov	r2, r3
 8001690:	f7ff fae1 	bl	8000c56 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6818      	ldr	r0, [r3, #0]
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	6919      	ldr	r1, [r3, #16]
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	7e1b      	ldrb	r3, [r3, #24]
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d102      	bne.n	80016aa <HAL_ADC_ConfigChannel+0x176>
 80016a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80016a8:	e000      	b.n	80016ac <HAL_ADC_ConfigChannel+0x178>
 80016aa:	2300      	movs	r3, #0
 80016ac:	461a      	mov	r2, r3
 80016ae:	f7ff fab9 	bl	8000c24 <LL_ADC_SetDataRightShift>
 80016b2:	e047      	b.n	8001744 <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	069b      	lsls	r3, r3, #26
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d107      	bne.n	80016d8 <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80016d6:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80016de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	069b      	lsls	r3, r3, #26
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d107      	bne.n	80016fc <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80016fa:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001702:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	069b      	lsls	r3, r3, #26
 800170c:	429a      	cmp	r2, r3
 800170e:	d107      	bne.n	8001720 <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800171e:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001726:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	069b      	lsls	r3, r3, #26
 8001730:	429a      	cmp	r2, r3
 8001732:	d107      	bne.n	8001744 <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001742:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff fbab 	bl	8000ea4 <LL_ADC_IsEnabled>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	f040 81bb 	bne.w	8001acc <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6818      	ldr	r0, [r3, #0]
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	6819      	ldr	r1, [r3, #0]
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	68db      	ldr	r3, [r3, #12]
 8001762:	461a      	mov	r2, r3
 8001764:	f7ff fafc 	bl	8000d60 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	4a12      	ldr	r2, [pc, #72]	; (80017b8 <HAL_ADC_ConfigChannel+0x284>)
 800176e:	4293      	cmp	r3, r2
 8001770:	f040 8130 	bne.w	80019d4 <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001780:	2b00      	cmp	r3, #0
 8001782:	d10b      	bne.n	800179c <HAL_ADC_ConfigChannel+0x268>
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	0e9b      	lsrs	r3, r3, #26
 800178a:	3301      	adds	r3, #1
 800178c:	f003 031f 	and.w	r3, r3, #31
 8001790:	2b09      	cmp	r3, #9
 8001792:	bf94      	ite	ls
 8001794:	2301      	movls	r3, #1
 8001796:	2300      	movhi	r3, #0
 8001798:	b2db      	uxtb	r3, r3
 800179a:	e01b      	b.n	80017d4 <HAL_ADC_ConfigChannel+0x2a0>
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80017a4:	fa93 f3a3 	rbit	r3, r3
 80017a8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80017aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80017ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d103      	bne.n	80017bc <HAL_ADC_ConfigChannel+0x288>
    return 32U;
 80017b4:	2320      	movs	r3, #32
 80017b6:	e005      	b.n	80017c4 <HAL_ADC_ConfigChannel+0x290>
 80017b8:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
 80017bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017be:	fab3 f383 	clz	r3, r3
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	3301      	adds	r3, #1
 80017c6:	f003 031f 	and.w	r3, r3, #31
 80017ca:	2b09      	cmp	r3, #9
 80017cc:	bf94      	ite	ls
 80017ce:	2301      	movls	r3, #1
 80017d0:	2300      	movhi	r3, #0
 80017d2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d079      	beq.n	80018cc <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d107      	bne.n	80017f4 <HAL_ADC_ConfigChannel+0x2c0>
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	0e9b      	lsrs	r3, r3, #26
 80017ea:	3301      	adds	r3, #1
 80017ec:	069b      	lsls	r3, r3, #26
 80017ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80017f2:	e015      	b.n	8001820 <HAL_ADC_ConfigChannel+0x2ec>
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017fc:	fa93 f3a3 	rbit	r3, r3
 8001800:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001802:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001804:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001806:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001808:	2b00      	cmp	r3, #0
 800180a:	d101      	bne.n	8001810 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 800180c:	2320      	movs	r3, #32
 800180e:	e003      	b.n	8001818 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8001810:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001812:	fab3 f383 	clz	r3, r3
 8001816:	b2db      	uxtb	r3, r3
 8001818:	3301      	adds	r3, #1
 800181a:	069b      	lsls	r3, r3, #26
 800181c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001828:	2b00      	cmp	r3, #0
 800182a:	d109      	bne.n	8001840 <HAL_ADC_ConfigChannel+0x30c>
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	0e9b      	lsrs	r3, r3, #26
 8001832:	3301      	adds	r3, #1
 8001834:	f003 031f 	and.w	r3, r3, #31
 8001838:	2101      	movs	r1, #1
 800183a:	fa01 f303 	lsl.w	r3, r1, r3
 800183e:	e017      	b.n	8001870 <HAL_ADC_ConfigChannel+0x33c>
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001846:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001848:	fa93 f3a3 	rbit	r3, r3
 800184c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800184e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001850:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8001852:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001854:	2b00      	cmp	r3, #0
 8001856:	d101      	bne.n	800185c <HAL_ADC_ConfigChannel+0x328>
    return 32U;
 8001858:	2320      	movs	r3, #32
 800185a:	e003      	b.n	8001864 <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
 800185c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800185e:	fab3 f383 	clz	r3, r3
 8001862:	b2db      	uxtb	r3, r3
 8001864:	3301      	adds	r3, #1
 8001866:	f003 031f 	and.w	r3, r3, #31
 800186a:	2101      	movs	r1, #1
 800186c:	fa01 f303 	lsl.w	r3, r1, r3
 8001870:	ea42 0103 	orr.w	r1, r2, r3
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800187c:	2b00      	cmp	r3, #0
 800187e:	d10a      	bne.n	8001896 <HAL_ADC_ConfigChannel+0x362>
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	0e9b      	lsrs	r3, r3, #26
 8001886:	3301      	adds	r3, #1
 8001888:	f003 021f 	and.w	r2, r3, #31
 800188c:	4613      	mov	r3, r2
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	4413      	add	r3, r2
 8001892:	051b      	lsls	r3, r3, #20
 8001894:	e018      	b.n	80018c8 <HAL_ADC_ConfigChannel+0x394>
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800189c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800189e:	fa93 f3a3 	rbit	r3, r3
 80018a2:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80018a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018a6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80018a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d101      	bne.n	80018b2 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 80018ae:	2320      	movs	r3, #32
 80018b0:	e003      	b.n	80018ba <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
 80018b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018b4:	fab3 f383 	clz	r3, r3
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	3301      	adds	r3, #1
 80018bc:	f003 021f 	and.w	r2, r3, #31
 80018c0:	4613      	mov	r3, r2
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	4413      	add	r3, r2
 80018c6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80018c8:	430b      	orrs	r3, r1
 80018ca:	e07e      	b.n	80019ca <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d107      	bne.n	80018e8 <HAL_ADC_ConfigChannel+0x3b4>
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	0e9b      	lsrs	r3, r3, #26
 80018de:	3301      	adds	r3, #1
 80018e0:	069b      	lsls	r3, r3, #26
 80018e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80018e6:	e015      	b.n	8001914 <HAL_ADC_ConfigChannel+0x3e0>
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018f0:	fa93 f3a3 	rbit	r3, r3
 80018f4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80018f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80018fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d101      	bne.n	8001904 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8001900:	2320      	movs	r3, #32
 8001902:	e003      	b.n	800190c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8001904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001906:	fab3 f383 	clz	r3, r3
 800190a:	b2db      	uxtb	r3, r3
 800190c:	3301      	adds	r3, #1
 800190e:	069b      	lsls	r3, r3, #26
 8001910:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800191c:	2b00      	cmp	r3, #0
 800191e:	d109      	bne.n	8001934 <HAL_ADC_ConfigChannel+0x400>
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	0e9b      	lsrs	r3, r3, #26
 8001926:	3301      	adds	r3, #1
 8001928:	f003 031f 	and.w	r3, r3, #31
 800192c:	2101      	movs	r1, #1
 800192e:	fa01 f303 	lsl.w	r3, r1, r3
 8001932:	e017      	b.n	8001964 <HAL_ADC_ConfigChannel+0x430>
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	fa93 f3a3 	rbit	r3, r3
 8001940:	61bb      	str	r3, [r7, #24]
  return result;
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001946:	6a3b      	ldr	r3, [r7, #32]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d101      	bne.n	8001950 <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
 800194c:	2320      	movs	r3, #32
 800194e:	e003      	b.n	8001958 <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
 8001950:	6a3b      	ldr	r3, [r7, #32]
 8001952:	fab3 f383 	clz	r3, r3
 8001956:	b2db      	uxtb	r3, r3
 8001958:	3301      	adds	r3, #1
 800195a:	f003 031f 	and.w	r3, r3, #31
 800195e:	2101      	movs	r1, #1
 8001960:	fa01 f303 	lsl.w	r3, r1, r3
 8001964:	ea42 0103 	orr.w	r1, r2, r3
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001970:	2b00      	cmp	r3, #0
 8001972:	d10d      	bne.n	8001990 <HAL_ADC_ConfigChannel+0x45c>
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	0e9b      	lsrs	r3, r3, #26
 800197a:	3301      	adds	r3, #1
 800197c:	f003 021f 	and.w	r2, r3, #31
 8001980:	4613      	mov	r3, r2
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	4413      	add	r3, r2
 8001986:	3b1e      	subs	r3, #30
 8001988:	051b      	lsls	r3, r3, #20
 800198a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800198e:	e01b      	b.n	80019c8 <HAL_ADC_ConfigChannel+0x494>
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	fa93 f3a3 	rbit	r3, r3
 800199c:	60fb      	str	r3, [r7, #12]
  return result;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d101      	bne.n	80019ac <HAL_ADC_ConfigChannel+0x478>
    return 32U;
 80019a8:	2320      	movs	r3, #32
 80019aa:	e003      	b.n	80019b4 <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	fab3 f383 	clz	r3, r3
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	3301      	adds	r3, #1
 80019b6:	f003 021f 	and.w	r2, r3, #31
 80019ba:	4613      	mov	r3, r2
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	4413      	add	r3, r2
 80019c0:	3b1e      	subs	r3, #30
 80019c2:	051b      	lsls	r3, r3, #20
 80019c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80019c8:	430b      	orrs	r3, r1
 80019ca:	683a      	ldr	r2, [r7, #0]
 80019cc:	6892      	ldr	r2, [r2, #8]
 80019ce:	4619      	mov	r1, r3
 80019d0:	f7ff f99b 	bl	8000d0a <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	da77      	bge.n	8001acc <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80019dc:	4840      	ldr	r0, [pc, #256]	; (8001ae0 <HAL_ADC_ConfigChannel+0x5ac>)
 80019de:	f7ff f8f3 	bl	8000bc8 <LL_ADC_GetCommonPathInternalCh>
 80019e2:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80019e4:	483f      	ldr	r0, [pc, #252]	; (8001ae4 <HAL_ADC_ConfigChannel+0x5b0>)
 80019e6:	f7ff fa5d 	bl	8000ea4 <LL_ADC_IsEnabled>
 80019ea:	4604      	mov	r4, r0
 80019ec:	483e      	ldr	r0, [pc, #248]	; (8001ae8 <HAL_ADC_ConfigChannel+0x5b4>)
 80019ee:	f7ff fa59 	bl	8000ea4 <LL_ADC_IsEnabled>
 80019f2:	4603      	mov	r3, r0
 80019f4:	4323      	orrs	r3, r4
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d155      	bne.n	8001aa6 <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a3b      	ldr	r2, [pc, #236]	; (8001aec <HAL_ADC_ConfigChannel+0x5b8>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d122      	bne.n	8001a4a <HAL_ADC_ConfigChannel+0x516>
 8001a04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d11d      	bne.n	8001a4a <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a35      	ldr	r2, [pc, #212]	; (8001ae8 <HAL_ADC_ConfigChannel+0x5b4>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d159      	bne.n	8001acc <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8001a18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a1a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a1e:	4619      	mov	r1, r3
 8001a20:	482f      	ldr	r0, [pc, #188]	; (8001ae0 <HAL_ADC_ConfigChannel+0x5ac>)
 8001a22:	f7ff f8be 	bl	8000ba2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a26:	4b32      	ldr	r3, [pc, #200]	; (8001af0 <HAL_ADC_ConfigChannel+0x5bc>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	099b      	lsrs	r3, r3, #6
 8001a2c:	4a31      	ldr	r2, [pc, #196]	; (8001af4 <HAL_ADC_ConfigChannel+0x5c0>)
 8001a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a32:	099b      	lsrs	r3, r3, #6
 8001a34:	3301      	adds	r3, #1
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8001a3a:	e002      	b.n	8001a42 <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d1f9      	bne.n	8001a3c <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001a48:	e040      	b.n	8001acc <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a2a      	ldr	r2, [pc, #168]	; (8001af8 <HAL_ADC_ConfigChannel+0x5c4>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d111      	bne.n	8001a78 <HAL_ADC_ConfigChannel+0x544>
 8001a54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d10c      	bne.n	8001a78 <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a21      	ldr	r2, [pc, #132]	; (8001ae8 <HAL_ADC_ConfigChannel+0x5b4>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d131      	bne.n	8001acc <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8001a68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a6e:	4619      	mov	r1, r3
 8001a70:	481b      	ldr	r0, [pc, #108]	; (8001ae0 <HAL_ADC_ConfigChannel+0x5ac>)
 8001a72:	f7ff f896 	bl	8000ba2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001a76:	e029      	b.n	8001acc <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a1f      	ldr	r2, [pc, #124]	; (8001afc <HAL_ADC_ConfigChannel+0x5c8>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d124      	bne.n	8001acc <HAL_ADC_ConfigChannel+0x598>
 8001a82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d11f      	bne.n	8001acc <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a15      	ldr	r2, [pc, #84]	; (8001ae8 <HAL_ADC_ConfigChannel+0x5b4>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d11a      	bne.n	8001acc <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8001a96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a98:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4810      	ldr	r0, [pc, #64]	; (8001ae0 <HAL_ADC_ConfigChannel+0x5ac>)
 8001aa0:	f7ff f87f 	bl	8000ba2 <LL_ADC_SetCommonPathInternalCh>
 8001aa4:	e012      	b.n	8001acc <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aaa:	f043 0220 	orr.w	r2, r3, #32
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8001ab8:	e008      	b.n	8001acc <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001abe:	f043 0220 	orr.w	r2, r3, #32
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001ad4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3784      	adds	r7, #132	; 0x84
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd90      	pop	{r4, r7, pc}
 8001ae0:	40022300 	.word	0x40022300
 8001ae4:	40022000 	.word	0x40022000
 8001ae8:	40022100 	.word	0x40022100
 8001aec:	cb840000 	.word	0xcb840000
 8001af0:	24000000 	.word	0x24000000
 8001af4:	053e2d63 	.word	0x053e2d63
 8001af8:	bac04000 	.word	0xbac04000
 8001afc:	cfb80000 	.word	0xcfb80000

08001b00 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff f9c9 	bl	8000ea4 <LL_ADC_IsEnabled>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d161      	bne.n	8001bdc <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	689a      	ldr	r2, [r3, #8]
 8001b1e:	4b32      	ldr	r3, [pc, #200]	; (8001be8 <ADC_Enable+0xe8>)
 8001b20:	4013      	ands	r3, r2
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d00d      	beq.n	8001b42 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b2a:	f043 0210 	orr.w	r2, r3, #16
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b36:	f043 0201 	orr.w	r2, r3, #1
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e04d      	b.n	8001bde <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff f998 	bl	8000e7c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001b4c:	f7ff f80a 	bl	8000b64 <HAL_GetTick>
 8001b50:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b52:	4826      	ldr	r0, [pc, #152]	; (8001bec <ADC_Enable+0xec>)
 8001b54:	f7ff f928 	bl	8000da8 <LL_ADC_GetMultimode>
 8001b58:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a24      	ldr	r2, [pc, #144]	; (8001bf0 <ADC_Enable+0xf0>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d002      	beq.n	8001b6a <ADC_Enable+0x6a>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	e000      	b.n	8001b6c <ADC_Enable+0x6c>
 8001b6a:	4b22      	ldr	r3, [pc, #136]	; (8001bf4 <ADC_Enable+0xf4>)
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	6812      	ldr	r2, [r2, #0]
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d02c      	beq.n	8001bce <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d130      	bne.n	8001bdc <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001b7a:	e028      	b.n	8001bce <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff f98f 	bl	8000ea4 <LL_ADC_IsEnabled>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d104      	bne.n	8001b96 <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff f973 	bl	8000e7c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001b96:	f7fe ffe5 	bl	8000b64 <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d914      	bls.n	8001bce <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d00d      	beq.n	8001bce <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bb6:	f043 0210 	orr.w	r2, r3, #16
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc2:	f043 0201 	orr.w	r2, r3, #1
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e007      	b.n	8001bde <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0301 	and.w	r3, r3, #1
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d1cf      	bne.n	8001b7c <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3710      	adds	r7, #16
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	8000003f 	.word	0x8000003f
 8001bec:	40022300 	.word	0x40022300
 8001bf0:	40022100 	.word	0x40022100
 8001bf4:	40022000 	.word	0x40022000

08001bf8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8001c00:	4b60      	ldr	r3, [pc, #384]	; (8001d84 <ADC_ConfigureBoostMode+0x18c>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d01c      	beq.n	8001c46 <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8001c0c:	f001 fbee 	bl	80033ec <HAL_RCC_GetHCLKFreq>
 8001c10:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001c1a:	d010      	beq.n	8001c3e <ADC_ConfigureBoostMode+0x46>
 8001c1c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001c20:	d873      	bhi.n	8001d0a <ADC_ConfigureBoostMode+0x112>
 8001c22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c26:	d002      	beq.n	8001c2e <ADC_ConfigureBoostMode+0x36>
 8001c28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001c2c:	d16d      	bne.n	8001d0a <ADC_ConfigureBoostMode+0x112>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	0c1b      	lsrs	r3, r3, #16
 8001c34:	68fa      	ldr	r2, [r7, #12]
 8001c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c3a:	60fb      	str	r3, [r7, #12]
        break;
 8001c3c:	e068      	b.n	8001d10 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	089b      	lsrs	r3, r3, #2
 8001c42:	60fb      	str	r3, [r7, #12]
        break;
 8001c44:	e064      	b.n	8001d10 <ADC_ConfigureBoostMode+0x118>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8001c46:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001c4a:	f04f 0100 	mov.w	r1, #0
 8001c4e:	f002 fdd1 	bl	80047f4 <HAL_RCCEx_GetPeriphCLKFreq>
 8001c52:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8001c5c:	d051      	beq.n	8001d02 <ADC_ConfigureBoostMode+0x10a>
 8001c5e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8001c62:	d854      	bhi.n	8001d0e <ADC_ConfigureBoostMode+0x116>
 8001c64:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8001c68:	d047      	beq.n	8001cfa <ADC_ConfigureBoostMode+0x102>
 8001c6a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8001c6e:	d84e      	bhi.n	8001d0e <ADC_ConfigureBoostMode+0x116>
 8001c70:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8001c74:	d03d      	beq.n	8001cf2 <ADC_ConfigureBoostMode+0xfa>
 8001c76:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8001c7a:	d848      	bhi.n	8001d0e <ADC_ConfigureBoostMode+0x116>
 8001c7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001c80:	d033      	beq.n	8001cea <ADC_ConfigureBoostMode+0xf2>
 8001c82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001c86:	d842      	bhi.n	8001d0e <ADC_ConfigureBoostMode+0x116>
 8001c88:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8001c8c:	d029      	beq.n	8001ce2 <ADC_ConfigureBoostMode+0xea>
 8001c8e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8001c92:	d83c      	bhi.n	8001d0e <ADC_ConfigureBoostMode+0x116>
 8001c94:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8001c98:	d01a      	beq.n	8001cd0 <ADC_ConfigureBoostMode+0xd8>
 8001c9a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8001c9e:	d836      	bhi.n	8001d0e <ADC_ConfigureBoostMode+0x116>
 8001ca0:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8001ca4:	d014      	beq.n	8001cd0 <ADC_ConfigureBoostMode+0xd8>
 8001ca6:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8001caa:	d830      	bhi.n	8001d0e <ADC_ConfigureBoostMode+0x116>
 8001cac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001cb0:	d00e      	beq.n	8001cd0 <ADC_ConfigureBoostMode+0xd8>
 8001cb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001cb6:	d82a      	bhi.n	8001d0e <ADC_ConfigureBoostMode+0x116>
 8001cb8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001cbc:	d008      	beq.n	8001cd0 <ADC_ConfigureBoostMode+0xd8>
 8001cbe:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001cc2:	d824      	bhi.n	8001d0e <ADC_ConfigureBoostMode+0x116>
 8001cc4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001cc8:	d002      	beq.n	8001cd0 <ADC_ConfigureBoostMode+0xd8>
 8001cca:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001cce:	d11e      	bne.n	8001d0e <ADC_ConfigureBoostMode+0x116>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	0c9b      	lsrs	r3, r3, #18
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	68fa      	ldr	r2, [r7, #12]
 8001cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cde:	60fb      	str	r3, [r7, #12]
        break;
 8001ce0:	e016      	b.n	8001d10 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	091b      	lsrs	r3, r3, #4
 8001ce6:	60fb      	str	r3, [r7, #12]
        break;
 8001ce8:	e012      	b.n	8001d10 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	095b      	lsrs	r3, r3, #5
 8001cee:	60fb      	str	r3, [r7, #12]
        break;
 8001cf0:	e00e      	b.n	8001d10 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	099b      	lsrs	r3, r3, #6
 8001cf6:	60fb      	str	r3, [r7, #12]
        break;
 8001cf8:	e00a      	b.n	8001d10 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	09db      	lsrs	r3, r3, #7
 8001cfe:	60fb      	str	r3, [r7, #12]
        break;
 8001d00:	e006      	b.n	8001d10 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	0a1b      	lsrs	r3, r3, #8
 8001d06:	60fb      	str	r3, [r7, #12]
        break;
 8001d08:	e002      	b.n	8001d10 <ADC_ConfigureBoostMode+0x118>
        break;
 8001d0a:	bf00      	nop
 8001d0c:	e000      	b.n	8001d10 <ADC_ConfigureBoostMode+0x118>
      default:
        break;
 8001d0e:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	085b      	lsrs	r3, r3, #1
 8001d14:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	4a1b      	ldr	r2, [pc, #108]	; (8001d88 <ADC_ConfigureBoostMode+0x190>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d808      	bhi.n	8001d30 <ADC_ConfigureBoostMode+0x138>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	689a      	ldr	r2, [r3, #8]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001d2c:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8001d2e:	e025      	b.n	8001d7c <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 12500000UL)
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	4a16      	ldr	r2, [pc, #88]	; (8001d8c <ADC_ConfigureBoostMode+0x194>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d80a      	bhi.n	8001d4e <ADC_ConfigureBoostMode+0x156>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d4a:	609a      	str	r2, [r3, #8]
}
 8001d4c:	e016      	b.n	8001d7c <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 25000000UL)
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	4a0f      	ldr	r2, [pc, #60]	; (8001d90 <ADC_ConfigureBoostMode+0x198>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d80a      	bhi.n	8001d6c <ADC_ConfigureBoostMode+0x174>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d68:	609a      	str	r2, [r3, #8]
}
 8001d6a:	e007      	b.n	8001d7c <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	689a      	ldr	r2, [r3, #8]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8001d7a:	609a      	str	r2, [r3, #8]
}
 8001d7c:	bf00      	nop
 8001d7e:	3710      	adds	r7, #16
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	40022300 	.word	0x40022300
 8001d88:	005f5e10 	.word	0x005f5e10
 8001d8c:	00bebc20 	.word	0x00bebc20
 8001d90:	017d7840 	.word	0x017d7840

08001d94 <LL_ADC_IsEnabled>:
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f003 0301 	and.w	r3, r3, #1
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d101      	bne.n	8001dac <LL_ADC_IsEnabled+0x18>
 8001da8:	2301      	movs	r3, #1
 8001daa:	e000      	b.n	8001dae <LL_ADC_IsEnabled+0x1a>
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <LL_ADC_REG_IsConversionOngoing>:
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b083      	sub	sp, #12
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	f003 0304 	and.w	r3, r3, #4
 8001dca:	2b04      	cmp	r3, #4
 8001dcc:	d101      	bne.n	8001dd2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e000      	b.n	8001dd4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001dd2:	2300      	movs	r3, #0
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001de0:	b590      	push	{r4, r7, lr}
 8001de2:	b09f      	sub	sp, #124	; 0x7c
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dea:	2300      	movs	r3, #0
 8001dec:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d101      	bne.n	8001dfe <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	e080      	b.n	8001f00 <HAL_ADCEx_MultiModeConfigChannel+0x120>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2201      	movs	r2, #1
 8001e02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8001e06:	2300      	movs	r3, #0
 8001e08:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a3d      	ldr	r2, [pc, #244]	; (8001f08 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d102      	bne.n	8001e1e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001e18:	4b3c      	ldr	r3, [pc, #240]	; (8001f0c <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8001e1a:	60bb      	str	r3, [r7, #8]
 8001e1c:	e001      	b.n	8001e22 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001e1e:	2300      	movs	r3, #0
 8001e20:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d10b      	bne.n	8001e40 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e2c:	f043 0220 	orr.w	r2, r3, #32
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e05f      	b.n	8001f00 <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7ff ffb9 	bl	8001dba <LL_ADC_REG_IsConversionOngoing>
 8001e48:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7ff ffb3 	bl	8001dba <LL_ADC_REG_IsConversionOngoing>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d141      	bne.n	8001ede <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001e5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d13e      	bne.n	8001ede <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001e60:	4b2b      	ldr	r3, [pc, #172]	; (8001f10 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8001e62:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d020      	beq.n	8001eae <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8001e6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	431a      	orrs	r2, r3
 8001e7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e7c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e7e:	4822      	ldr	r0, [pc, #136]	; (8001f08 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8001e80:	f7ff ff88 	bl	8001d94 <LL_ADC_IsEnabled>
 8001e84:	4604      	mov	r4, r0
 8001e86:	4821      	ldr	r0, [pc, #132]	; (8001f0c <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8001e88:	f7ff ff84 	bl	8001d94 <LL_ADC_IsEnabled>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	4323      	orrs	r3, r4
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d12e      	bne.n	8001ef2 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001e94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e96:	689a      	ldr	r2, [r3, #8]
 8001e98:	4b1e      	ldr	r3, [pc, #120]	; (8001f14 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	683a      	ldr	r2, [r7, #0]
 8001e9e:	6811      	ldr	r1, [r2, #0]
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	6892      	ldr	r2, [r2, #8]
 8001ea4:	430a      	orrs	r2, r1
 8001ea6:	431a      	orrs	r2, r3
 8001ea8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001eaa:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001eac:	e021      	b.n	8001ef2 <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8001eae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001eb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001eb8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001eba:	4813      	ldr	r0, [pc, #76]	; (8001f08 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8001ebc:	f7ff ff6a 	bl	8001d94 <LL_ADC_IsEnabled>
 8001ec0:	4604      	mov	r4, r0
 8001ec2:	4812      	ldr	r0, [pc, #72]	; (8001f0c <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8001ec4:	f7ff ff66 	bl	8001d94 <LL_ADC_IsEnabled>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	4323      	orrs	r3, r4
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d110      	bne.n	8001ef2 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001ed0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ed2:	689a      	ldr	r2, [r3, #8]
 8001ed4:	4b0f      	ldr	r3, [pc, #60]	; (8001f14 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001eda:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001edc:	e009      	b.n	8001ef2 <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ee2:	f043 0220 	orr.w	r2, r3, #32
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001ef0:	e000      	b.n	8001ef4 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001ef2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001efc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	377c      	adds	r7, #124	; 0x7c
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd90      	pop	{r4, r7, pc}
 8001f08:	40022000 	.word	0x40022000
 8001f0c:	40022100 	.word	0x40022100
 8001f10:	40022300 	.word	0x40022300
 8001f14:	fffff0e0 	.word	0xfffff0e0

08001f18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f003 0307 	and.w	r3, r3, #7
 8001f26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f28:	4b0b      	ldr	r3, [pc, #44]	; (8001f58 <__NVIC_SetPriorityGrouping+0x40>)
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f2e:	68ba      	ldr	r2, [r7, #8]
 8001f30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f34:	4013      	ands	r3, r2
 8001f36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001f40:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <__NVIC_SetPriorityGrouping+0x44>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f46:	4a04      	ldr	r2, [pc, #16]	; (8001f58 <__NVIC_SetPriorityGrouping+0x40>)
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	60d3      	str	r3, [r2, #12]
}
 8001f4c:	bf00      	nop
 8001f4e:	3714      	adds	r7, #20
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr
 8001f58:	e000ed00 	.word	0xe000ed00
 8001f5c:	05fa0000 	.word	0x05fa0000

08001f60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f64:	4b04      	ldr	r3, [pc, #16]	; (8001f78 <__NVIC_GetPriorityGrouping+0x18>)
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	0a1b      	lsrs	r3, r3, #8
 8001f6a:	f003 0307 	and.w	r3, r3, #7
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr
 8001f78:	e000ed00 	.word	0xe000ed00

08001f7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	4603      	mov	r3, r0
 8001f84:	6039      	str	r1, [r7, #0]
 8001f86:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001f88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	db0a      	blt.n	8001fa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	b2da      	uxtb	r2, r3
 8001f94:	490c      	ldr	r1, [pc, #48]	; (8001fc8 <__NVIC_SetPriority+0x4c>)
 8001f96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f9a:	0112      	lsls	r2, r2, #4
 8001f9c:	b2d2      	uxtb	r2, r2
 8001f9e:	440b      	add	r3, r1
 8001fa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fa4:	e00a      	b.n	8001fbc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	b2da      	uxtb	r2, r3
 8001faa:	4908      	ldr	r1, [pc, #32]	; (8001fcc <__NVIC_SetPriority+0x50>)
 8001fac:	88fb      	ldrh	r3, [r7, #6]
 8001fae:	f003 030f 	and.w	r3, r3, #15
 8001fb2:	3b04      	subs	r3, #4
 8001fb4:	0112      	lsls	r2, r2, #4
 8001fb6:	b2d2      	uxtb	r2, r2
 8001fb8:	440b      	add	r3, r1
 8001fba:	761a      	strb	r2, [r3, #24]
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr
 8001fc8:	e000e100 	.word	0xe000e100
 8001fcc:	e000ed00 	.word	0xe000ed00

08001fd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b089      	sub	sp, #36	; 0x24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f003 0307 	and.w	r3, r3, #7
 8001fe2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	f1c3 0307 	rsb	r3, r3, #7
 8001fea:	2b04      	cmp	r3, #4
 8001fec:	bf28      	it	cs
 8001fee:	2304      	movcs	r3, #4
 8001ff0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	3304      	adds	r3, #4
 8001ff6:	2b06      	cmp	r3, #6
 8001ff8:	d902      	bls.n	8002000 <NVIC_EncodePriority+0x30>
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	3b03      	subs	r3, #3
 8001ffe:	e000      	b.n	8002002 <NVIC_EncodePriority+0x32>
 8002000:	2300      	movs	r3, #0
 8002002:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002004:	f04f 32ff 	mov.w	r2, #4294967295
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	43da      	mvns	r2, r3
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	401a      	ands	r2, r3
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002018:	f04f 31ff 	mov.w	r1, #4294967295
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	fa01 f303 	lsl.w	r3, r1, r3
 8002022:	43d9      	mvns	r1, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002028:	4313      	orrs	r3, r2
         );
}
 800202a:	4618      	mov	r0, r3
 800202c:	3724      	adds	r7, #36	; 0x24
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
	...

08002038 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	3b01      	subs	r3, #1
 8002044:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002048:	d301      	bcc.n	800204e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800204a:	2301      	movs	r3, #1
 800204c:	e00f      	b.n	800206e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800204e:	4a0a      	ldr	r2, [pc, #40]	; (8002078 <SysTick_Config+0x40>)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	3b01      	subs	r3, #1
 8002054:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002056:	210f      	movs	r1, #15
 8002058:	f04f 30ff 	mov.w	r0, #4294967295
 800205c:	f7ff ff8e 	bl	8001f7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002060:	4b05      	ldr	r3, [pc, #20]	; (8002078 <SysTick_Config+0x40>)
 8002062:	2200      	movs	r2, #0
 8002064:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002066:	4b04      	ldr	r3, [pc, #16]	; (8002078 <SysTick_Config+0x40>)
 8002068:	2207      	movs	r2, #7
 800206a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	e000e010 	.word	0xe000e010

0800207c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f7ff ff47 	bl	8001f18 <__NVIC_SetPriorityGrouping>
}
 800208a:	bf00      	nop
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b086      	sub	sp, #24
 8002096:	af00      	add	r7, sp, #0
 8002098:	4603      	mov	r3, r0
 800209a:	60b9      	str	r1, [r7, #8]
 800209c:	607a      	str	r2, [r7, #4]
 800209e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020a0:	f7ff ff5e 	bl	8001f60 <__NVIC_GetPriorityGrouping>
 80020a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	68b9      	ldr	r1, [r7, #8]
 80020aa:	6978      	ldr	r0, [r7, #20]
 80020ac:	f7ff ff90 	bl	8001fd0 <NVIC_EncodePriority>
 80020b0:	4602      	mov	r2, r0
 80020b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80020b6:	4611      	mov	r1, r2
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff ff5f 	bl	8001f7c <__NVIC_SetPriority>
}
 80020be:	bf00      	nop
 80020c0:	3718      	adds	r7, #24
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b082      	sub	sp, #8
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f7ff ffb2 	bl	8002038 <SysTick_Config>
 80020d4:	4603      	mov	r3, r0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
	...

080020e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b089      	sub	sp, #36	; 0x24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80020ea:	2300      	movs	r3, #0
 80020ec:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80020ee:	4b89      	ldr	r3, [pc, #548]	; (8002314 <HAL_GPIO_Init+0x234>)
 80020f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80020f2:	e194      	b.n	800241e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	2101      	movs	r1, #1
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002100:	4013      	ands	r3, r2
 8002102:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	2b00      	cmp	r3, #0
 8002108:	f000 8186 	beq.w	8002418 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f003 0303 	and.w	r3, r3, #3
 8002114:	2b01      	cmp	r3, #1
 8002116:	d005      	beq.n	8002124 <HAL_GPIO_Init+0x44>
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f003 0303 	and.w	r3, r3, #3
 8002120:	2b02      	cmp	r3, #2
 8002122:	d130      	bne.n	8002186 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	2203      	movs	r2, #3
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	43db      	mvns	r3, r3
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	4013      	ands	r3, r2
 800213a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	68da      	ldr	r2, [r3, #12]
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	005b      	lsls	r3, r3, #1
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	4313      	orrs	r3, r2
 800214c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800215a:	2201      	movs	r2, #1
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	fa02 f303 	lsl.w	r3, r2, r3
 8002162:	43db      	mvns	r3, r3
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	4013      	ands	r3, r2
 8002168:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	091b      	lsrs	r3, r3, #4
 8002170:	f003 0201 	and.w	r2, r3, #1
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	fa02 f303 	lsl.w	r3, r2, r3
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	4313      	orrs	r3, r2
 800217e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f003 0303 	and.w	r3, r3, #3
 800218e:	2b03      	cmp	r3, #3
 8002190:	d017      	beq.n	80021c2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	2203      	movs	r2, #3
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	43db      	mvns	r3, r3
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	4013      	ands	r3, r2
 80021a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	689a      	ldr	r2, [r3, #8]
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	fa02 f303 	lsl.w	r3, r2, r3
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f003 0303 	and.w	r3, r3, #3
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d123      	bne.n	8002216 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	08da      	lsrs	r2, r3, #3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	3208      	adds	r2, #8
 80021d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	f003 0307 	and.w	r3, r3, #7
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	220f      	movs	r2, #15
 80021e6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ea:	43db      	mvns	r3, r3
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	4013      	ands	r3, r2
 80021f0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	691a      	ldr	r2, [r3, #16]
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	f003 0307 	and.w	r3, r3, #7
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	4313      	orrs	r3, r2
 8002206:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	08da      	lsrs	r2, r3, #3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	3208      	adds	r2, #8
 8002210:	69b9      	ldr	r1, [r7, #24]
 8002212:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	2203      	movs	r2, #3
 8002222:	fa02 f303 	lsl.w	r3, r2, r3
 8002226:	43db      	mvns	r3, r3
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	4013      	ands	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f003 0203 	and.w	r2, r3, #3
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	fa02 f303 	lsl.w	r3, r2, r3
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	4313      	orrs	r3, r2
 8002242:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002252:	2b00      	cmp	r3, #0
 8002254:	f000 80e0 	beq.w	8002418 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002258:	4b2f      	ldr	r3, [pc, #188]	; (8002318 <HAL_GPIO_Init+0x238>)
 800225a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800225e:	4a2e      	ldr	r2, [pc, #184]	; (8002318 <HAL_GPIO_Init+0x238>)
 8002260:	f043 0302 	orr.w	r3, r3, #2
 8002264:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8002268:	4b2b      	ldr	r3, [pc, #172]	; (8002318 <HAL_GPIO_Init+0x238>)
 800226a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	60fb      	str	r3, [r7, #12]
 8002274:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002276:	4a29      	ldr	r2, [pc, #164]	; (800231c <HAL_GPIO_Init+0x23c>)
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	089b      	lsrs	r3, r3, #2
 800227c:	3302      	adds	r3, #2
 800227e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002282:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	f003 0303 	and.w	r3, r3, #3
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	220f      	movs	r2, #15
 800228e:	fa02 f303 	lsl.w	r3, r2, r3
 8002292:	43db      	mvns	r3, r3
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	4013      	ands	r3, r2
 8002298:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a20      	ldr	r2, [pc, #128]	; (8002320 <HAL_GPIO_Init+0x240>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d052      	beq.n	8002348 <HAL_GPIO_Init+0x268>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a1f      	ldr	r2, [pc, #124]	; (8002324 <HAL_GPIO_Init+0x244>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d031      	beq.n	800230e <HAL_GPIO_Init+0x22e>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a1e      	ldr	r2, [pc, #120]	; (8002328 <HAL_GPIO_Init+0x248>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d02b      	beq.n	800230a <HAL_GPIO_Init+0x22a>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a1d      	ldr	r2, [pc, #116]	; (800232c <HAL_GPIO_Init+0x24c>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d025      	beq.n	8002306 <HAL_GPIO_Init+0x226>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a1c      	ldr	r2, [pc, #112]	; (8002330 <HAL_GPIO_Init+0x250>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d01f      	beq.n	8002302 <HAL_GPIO_Init+0x222>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a1b      	ldr	r2, [pc, #108]	; (8002334 <HAL_GPIO_Init+0x254>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d019      	beq.n	80022fe <HAL_GPIO_Init+0x21e>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a1a      	ldr	r2, [pc, #104]	; (8002338 <HAL_GPIO_Init+0x258>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d013      	beq.n	80022fa <HAL_GPIO_Init+0x21a>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a19      	ldr	r2, [pc, #100]	; (800233c <HAL_GPIO_Init+0x25c>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d00d      	beq.n	80022f6 <HAL_GPIO_Init+0x216>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a18      	ldr	r2, [pc, #96]	; (8002340 <HAL_GPIO_Init+0x260>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d007      	beq.n	80022f2 <HAL_GPIO_Init+0x212>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a17      	ldr	r2, [pc, #92]	; (8002344 <HAL_GPIO_Init+0x264>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d101      	bne.n	80022ee <HAL_GPIO_Init+0x20e>
 80022ea:	2309      	movs	r3, #9
 80022ec:	e02d      	b.n	800234a <HAL_GPIO_Init+0x26a>
 80022ee:	230a      	movs	r3, #10
 80022f0:	e02b      	b.n	800234a <HAL_GPIO_Init+0x26a>
 80022f2:	2308      	movs	r3, #8
 80022f4:	e029      	b.n	800234a <HAL_GPIO_Init+0x26a>
 80022f6:	2307      	movs	r3, #7
 80022f8:	e027      	b.n	800234a <HAL_GPIO_Init+0x26a>
 80022fa:	2306      	movs	r3, #6
 80022fc:	e025      	b.n	800234a <HAL_GPIO_Init+0x26a>
 80022fe:	2305      	movs	r3, #5
 8002300:	e023      	b.n	800234a <HAL_GPIO_Init+0x26a>
 8002302:	2304      	movs	r3, #4
 8002304:	e021      	b.n	800234a <HAL_GPIO_Init+0x26a>
 8002306:	2303      	movs	r3, #3
 8002308:	e01f      	b.n	800234a <HAL_GPIO_Init+0x26a>
 800230a:	2302      	movs	r3, #2
 800230c:	e01d      	b.n	800234a <HAL_GPIO_Init+0x26a>
 800230e:	2301      	movs	r3, #1
 8002310:	e01b      	b.n	800234a <HAL_GPIO_Init+0x26a>
 8002312:	bf00      	nop
 8002314:	58000080 	.word	0x58000080
 8002318:	58024400 	.word	0x58024400
 800231c:	58000400 	.word	0x58000400
 8002320:	58020000 	.word	0x58020000
 8002324:	58020400 	.word	0x58020400
 8002328:	58020800 	.word	0x58020800
 800232c:	58020c00 	.word	0x58020c00
 8002330:	58021000 	.word	0x58021000
 8002334:	58021400 	.word	0x58021400
 8002338:	58021800 	.word	0x58021800
 800233c:	58021c00 	.word	0x58021c00
 8002340:	58022000 	.word	0x58022000
 8002344:	58022400 	.word	0x58022400
 8002348:	2300      	movs	r3, #0
 800234a:	69fa      	ldr	r2, [r7, #28]
 800234c:	f002 0203 	and.w	r2, r2, #3
 8002350:	0092      	lsls	r2, r2, #2
 8002352:	4093      	lsls	r3, r2
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	4313      	orrs	r3, r2
 8002358:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800235a:	4938      	ldr	r1, [pc, #224]	; (800243c <HAL_GPIO_Init+0x35c>)
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	089b      	lsrs	r3, r3, #2
 8002360:	3302      	adds	r3, #2
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002368:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	43db      	mvns	r3, r3
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	4013      	ands	r3, r2
 8002378:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d003      	beq.n	800238e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	4313      	orrs	r3, r2
 800238c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800238e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002396:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	43db      	mvns	r3, r3
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	4013      	ands	r3, r2
 80023a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d003      	beq.n	80023bc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80023bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	43db      	mvns	r3, r3
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	4013      	ands	r3, r2
 80023d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d003      	beq.n	80023e8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	43db      	mvns	r3, r3
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	4013      	ands	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d003      	beq.n	8002412 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	4313      	orrs	r3, r2
 8002410:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	3301      	adds	r3, #1
 800241c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	fa22 f303 	lsr.w	r3, r2, r3
 8002428:	2b00      	cmp	r3, #0
 800242a:	f47f ae63 	bne.w	80020f4 <HAL_GPIO_Init+0x14>
  }
}
 800242e:	bf00      	nop
 8002430:	bf00      	nop
 8002432:	3724      	adds	r7, #36	; 0x24
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr
 800243c:	58000400 	.word	0x58000400

08002440 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	460b      	mov	r3, r1
 800244a:	807b      	strh	r3, [r7, #2]
 800244c:	4613      	mov	r3, r2
 800244e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002450:	787b      	ldrb	r3, [r7, #1]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d003      	beq.n	800245e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002456:	887a      	ldrh	r2, [r7, #2]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800245c:	e003      	b.n	8002466 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800245e:	887b      	ldrh	r3, [r7, #2]
 8002460:	041a      	lsls	r2, r3, #16
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	619a      	str	r2, [r3, #24]
}
 8002466:	bf00      	nop
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
	...

08002474 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800247c:	4b29      	ldr	r3, [pc, #164]	; (8002524 <HAL_PWREx_ConfigSupply+0xb0>)
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	f003 0307 	and.w	r3, r3, #7
 8002484:	2b06      	cmp	r3, #6
 8002486:	d00a      	beq.n	800249e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002488:	4b26      	ldr	r3, [pc, #152]	; (8002524 <HAL_PWREx_ConfigSupply+0xb0>)
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	429a      	cmp	r2, r3
 8002494:	d001      	beq.n	800249a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e040      	b.n	800251c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800249a:	2300      	movs	r3, #0
 800249c:	e03e      	b.n	800251c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800249e:	4b21      	ldr	r3, [pc, #132]	; (8002524 <HAL_PWREx_ConfigSupply+0xb0>)
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80024a6:	491f      	ldr	r1, [pc, #124]	; (8002524 <HAL_PWREx_ConfigSupply+0xb0>)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80024ae:	f7fe fb59 	bl	8000b64 <HAL_GetTick>
 80024b2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80024b4:	e009      	b.n	80024ca <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80024b6:	f7fe fb55 	bl	8000b64 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024c4:	d901      	bls.n	80024ca <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e028      	b.n	800251c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80024ca:	4b16      	ldr	r3, [pc, #88]	; (8002524 <HAL_PWREx_ConfigSupply+0xb0>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024d6:	d1ee      	bne.n	80024b6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2b1e      	cmp	r3, #30
 80024dc:	d008      	beq.n	80024f0 <HAL_PWREx_ConfigSupply+0x7c>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2b2e      	cmp	r3, #46	; 0x2e
 80024e2:	d005      	beq.n	80024f0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2b1d      	cmp	r3, #29
 80024e8:	d002      	beq.n	80024f0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2b2d      	cmp	r3, #45	; 0x2d
 80024ee:	d114      	bne.n	800251a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80024f0:	f7fe fb38 	bl	8000b64 <HAL_GetTick>
 80024f4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80024f6:	e009      	b.n	800250c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80024f8:	f7fe fb34 	bl	8000b64 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002506:	d901      	bls.n	800250c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e007      	b.n	800251c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800250c:	4b05      	ldr	r3, [pc, #20]	; (8002524 <HAL_PWREx_ConfigSupply+0xb0>)
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002514:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002518:	d1ee      	bne.n	80024f8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	3710      	adds	r7, #16
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	58024800 	.word	0x58024800

08002528 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b08c      	sub	sp, #48	; 0x30
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d102      	bne.n	800253c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	f000 bc1f 	b.w	8002d7a <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0301 	and.w	r3, r3, #1
 8002544:	2b00      	cmp	r3, #0
 8002546:	f000 80b3 	beq.w	80026b0 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800254a:	4b95      	ldr	r3, [pc, #596]	; (80027a0 <HAL_RCC_OscConfig+0x278>)
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002552:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002554:	4b92      	ldr	r3, [pc, #584]	; (80027a0 <HAL_RCC_OscConfig+0x278>)
 8002556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002558:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800255a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800255c:	2b10      	cmp	r3, #16
 800255e:	d007      	beq.n	8002570 <HAL_RCC_OscConfig+0x48>
 8002560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002562:	2b18      	cmp	r3, #24
 8002564:	d112      	bne.n	800258c <HAL_RCC_OscConfig+0x64>
 8002566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002568:	f003 0303 	and.w	r3, r3, #3
 800256c:	2b02      	cmp	r3, #2
 800256e:	d10d      	bne.n	800258c <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002570:	4b8b      	ldr	r3, [pc, #556]	; (80027a0 <HAL_RCC_OscConfig+0x278>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002578:	2b00      	cmp	r3, #0
 800257a:	f000 8098 	beq.w	80026ae <HAL_RCC_OscConfig+0x186>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	f040 8093 	bne.w	80026ae <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e3f6      	b.n	8002d7a <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002594:	d106      	bne.n	80025a4 <HAL_RCC_OscConfig+0x7c>
 8002596:	4b82      	ldr	r3, [pc, #520]	; (80027a0 <HAL_RCC_OscConfig+0x278>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a81      	ldr	r2, [pc, #516]	; (80027a0 <HAL_RCC_OscConfig+0x278>)
 800259c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025a0:	6013      	str	r3, [r2, #0]
 80025a2:	e058      	b.n	8002656 <HAL_RCC_OscConfig+0x12e>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d112      	bne.n	80025d2 <HAL_RCC_OscConfig+0xaa>
 80025ac:	4b7c      	ldr	r3, [pc, #496]	; (80027a0 <HAL_RCC_OscConfig+0x278>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a7b      	ldr	r2, [pc, #492]	; (80027a0 <HAL_RCC_OscConfig+0x278>)
 80025b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025b6:	6013      	str	r3, [r2, #0]
 80025b8:	4b79      	ldr	r3, [pc, #484]	; (80027a0 <HAL_RCC_OscConfig+0x278>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a78      	ldr	r2, [pc, #480]	; (80027a0 <HAL_RCC_OscConfig+0x278>)
 80025be:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80025c2:	6013      	str	r3, [r2, #0]
 80025c4:	4b76      	ldr	r3, [pc, #472]	; (80027a0 <HAL_RCC_OscConfig+0x278>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a75      	ldr	r2, [pc, #468]	; (80027a0 <HAL_RCC_OscConfig+0x278>)
 80025ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025ce:	6013      	str	r3, [r2, #0]
 80025d0:	e041      	b.n	8002656 <HAL_RCC_OscConfig+0x12e>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025da:	d112      	bne.n	8002602 <HAL_RCC_OscConfig+0xda>
 80025dc:	4b70      	ldr	r3, [pc, #448]	; (80027a0 <HAL_RCC_OscConfig+0x278>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a6f      	ldr	r2, [pc, #444]	; (80027a0 <HAL_RCC_OscConfig+0x278>)
 80025e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025e6:	6013      	str	r3, [r2, #0]
 80025e8:	4b6d      	ldr	r3, [pc, #436]	; (80027a0 <HAL_RCC_OscConfig+0x278>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a6c      	ldr	r2, [pc, #432]	; (80027a0 <HAL_RCC_OscConfig+0x278>)
 80025ee:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80025f2:	6013      	str	r3, [r2, #0]
 80025f4:	4b6a      	ldr	r3, [pc, #424]	; (80027a0 <HAL_RCC_OscConfig+0x278>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a69      	ldr	r2, [pc, #420]	; (80027a0 <HAL_RCC_OscConfig+0x278>)
 80025fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025fe:	6013      	str	r3, [r2, #0]
 8002600:	e029      	b.n	8002656 <HAL_RCC_OscConfig+0x12e>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800260a:	d112      	bne.n	8002632 <HAL_RCC_OscConfig+0x10a>
 800260c:	4b64      	ldr	r3, [pc, #400]	; (80027a0 <HAL_RCC_OscConfig+0x278>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a63      	ldr	r2, [pc, #396]	; (80027a0 <HAL_RCC_OscConfig+0x278>)
 8002612:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002616:	6013      	str	r3, [r2, #0]
 8002618:	4b61      	ldr	r3, [pc, #388]	; (80027a0 <HAL_RCC_OscConfig+0x278>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a60      	ldr	r2, [pc, #384]	; (80027a0 <HAL_RCC_OscConfig+0x278>)
 800261e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002622:	6013      	str	r3, [r2, #0]
 8002624:	4b5e      	ldr	r3, [pc, #376]	; (80027a0 <HAL_RCC_OscConfig+0x278>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a5d      	ldr	r2, [pc, #372]	; (80027a0 <HAL_RCC_OscConfig+0x278>)
 800262a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800262e:	6013      	str	r3, [r2, #0]
 8002630:	e011      	b.n	8002656 <HAL_RCC_OscConfig+0x12e>
 8002632:	4b5b      	ldr	r3, [pc, #364]	; (80027a0 <HAL_RCC_OscConfig+0x278>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a5a      	ldr	r2, [pc, #360]	; (80027a0 <HAL_RCC_OscConfig+0x278>)
 8002638:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800263c:	6013      	str	r3, [r2, #0]
 800263e:	4b58      	ldr	r3, [pc, #352]	; (80027a0 <HAL_RCC_OscConfig+0x278>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a57      	ldr	r2, [pc, #348]	; (80027a0 <HAL_RCC_OscConfig+0x278>)
 8002644:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002648:	6013      	str	r3, [r2, #0]
 800264a:	4b55      	ldr	r3, [pc, #340]	; (80027a0 <HAL_RCC_OscConfig+0x278>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a54      	ldr	r2, [pc, #336]	; (80027a0 <HAL_RCC_OscConfig+0x278>)
 8002650:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002654:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d013      	beq.n	8002686 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800265e:	f7fe fa81 	bl	8000b64 <HAL_GetTick>
 8002662:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002664:	e008      	b.n	8002678 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002666:	f7fe fa7d 	bl	8000b64 <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	2b64      	cmp	r3, #100	; 0x64
 8002672:	d901      	bls.n	8002678 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e380      	b.n	8002d7a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002678:	4b49      	ldr	r3, [pc, #292]	; (80027a0 <HAL_RCC_OscConfig+0x278>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d0f0      	beq.n	8002666 <HAL_RCC_OscConfig+0x13e>
 8002684:	e014      	b.n	80026b0 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002686:	f7fe fa6d 	bl	8000b64 <HAL_GetTick>
 800268a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800268c:	e008      	b.n	80026a0 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800268e:	f7fe fa69 	bl	8000b64 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	2b64      	cmp	r3, #100	; 0x64
 800269a:	d901      	bls.n	80026a0 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e36c      	b.n	8002d7a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80026a0:	4b3f      	ldr	r3, [pc, #252]	; (80027a0 <HAL_RCC_OscConfig+0x278>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d1f0      	bne.n	800268e <HAL_RCC_OscConfig+0x166>
 80026ac:	e000      	b.n	80026b0 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026ae:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0302 	and.w	r3, r3, #2
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f000 808c 	beq.w	80027d6 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026be:	4b38      	ldr	r3, [pc, #224]	; (80027a0 <HAL_RCC_OscConfig+0x278>)
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026c6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80026c8:	4b35      	ldr	r3, [pc, #212]	; (80027a0 <HAL_RCC_OscConfig+0x278>)
 80026ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026cc:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80026ce:	6a3b      	ldr	r3, [r7, #32]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d007      	beq.n	80026e4 <HAL_RCC_OscConfig+0x1bc>
 80026d4:	6a3b      	ldr	r3, [r7, #32]
 80026d6:	2b18      	cmp	r3, #24
 80026d8:	d137      	bne.n	800274a <HAL_RCC_OscConfig+0x222>
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	f003 0303 	and.w	r3, r3, #3
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d132      	bne.n	800274a <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026e4:	4b2e      	ldr	r3, [pc, #184]	; (80027a0 <HAL_RCC_OscConfig+0x278>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0304 	and.w	r3, r3, #4
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d005      	beq.n	80026fc <HAL_RCC_OscConfig+0x1d4>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d101      	bne.n	80026fc <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e33e      	b.n	8002d7a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80026fc:	4b28      	ldr	r3, [pc, #160]	; (80027a0 <HAL_RCC_OscConfig+0x278>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f023 0219 	bic.w	r2, r3, #25
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	4925      	ldr	r1, [pc, #148]	; (80027a0 <HAL_RCC_OscConfig+0x278>)
 800270a:	4313      	orrs	r3, r2
 800270c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800270e:	f7fe fa29 	bl	8000b64 <HAL_GetTick>
 8002712:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002714:	e008      	b.n	8002728 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002716:	f7fe fa25 	bl	8000b64 <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	2b02      	cmp	r3, #2
 8002722:	d901      	bls.n	8002728 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e328      	b.n	8002d7a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002728:	4b1d      	ldr	r3, [pc, #116]	; (80027a0 <HAL_RCC_OscConfig+0x278>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0304 	and.w	r3, r3, #4
 8002730:	2b00      	cmp	r3, #0
 8002732:	d0f0      	beq.n	8002716 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002734:	4b1a      	ldr	r3, [pc, #104]	; (80027a0 <HAL_RCC_OscConfig+0x278>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	061b      	lsls	r3, r3, #24
 8002742:	4917      	ldr	r1, [pc, #92]	; (80027a0 <HAL_RCC_OscConfig+0x278>)
 8002744:	4313      	orrs	r3, r2
 8002746:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002748:	e045      	b.n	80027d6 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d028      	beq.n	80027a4 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002752:	4b13      	ldr	r3, [pc, #76]	; (80027a0 <HAL_RCC_OscConfig+0x278>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f023 0219 	bic.w	r2, r3, #25
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	4910      	ldr	r1, [pc, #64]	; (80027a0 <HAL_RCC_OscConfig+0x278>)
 8002760:	4313      	orrs	r3, r2
 8002762:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002764:	f7fe f9fe 	bl	8000b64 <HAL_GetTick>
 8002768:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800276a:	e008      	b.n	800277e <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800276c:	f7fe f9fa 	bl	8000b64 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b02      	cmp	r3, #2
 8002778:	d901      	bls.n	800277e <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e2fd      	b.n	8002d7a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800277e:	4b08      	ldr	r3, [pc, #32]	; (80027a0 <HAL_RCC_OscConfig+0x278>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0304 	and.w	r3, r3, #4
 8002786:	2b00      	cmp	r3, #0
 8002788:	d0f0      	beq.n	800276c <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800278a:	4b05      	ldr	r3, [pc, #20]	; (80027a0 <HAL_RCC_OscConfig+0x278>)
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	061b      	lsls	r3, r3, #24
 8002798:	4901      	ldr	r1, [pc, #4]	; (80027a0 <HAL_RCC_OscConfig+0x278>)
 800279a:	4313      	orrs	r3, r2
 800279c:	604b      	str	r3, [r1, #4]
 800279e:	e01a      	b.n	80027d6 <HAL_RCC_OscConfig+0x2ae>
 80027a0:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027a4:	4b97      	ldr	r3, [pc, #604]	; (8002a04 <HAL_RCC_OscConfig+0x4dc>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a96      	ldr	r2, [pc, #600]	; (8002a04 <HAL_RCC_OscConfig+0x4dc>)
 80027aa:	f023 0301 	bic.w	r3, r3, #1
 80027ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b0:	f7fe f9d8 	bl	8000b64 <HAL_GetTick>
 80027b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80027b6:	e008      	b.n	80027ca <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027b8:	f7fe f9d4 	bl	8000b64 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e2d7      	b.n	8002d7a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80027ca:	4b8e      	ldr	r3, [pc, #568]	; (8002a04 <HAL_RCC_OscConfig+0x4dc>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0304 	and.w	r3, r3, #4
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1f0      	bne.n	80027b8 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0310 	and.w	r3, r3, #16
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d06a      	beq.n	80028b8 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027e2:	4b88      	ldr	r3, [pc, #544]	; (8002a04 <HAL_RCC_OscConfig+0x4dc>)
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027ea:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80027ec:	4b85      	ldr	r3, [pc, #532]	; (8002a04 <HAL_RCC_OscConfig+0x4dc>)
 80027ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	2b08      	cmp	r3, #8
 80027f6:	d007      	beq.n	8002808 <HAL_RCC_OscConfig+0x2e0>
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	2b18      	cmp	r3, #24
 80027fc:	d11b      	bne.n	8002836 <HAL_RCC_OscConfig+0x30e>
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	f003 0303 	and.w	r3, r3, #3
 8002804:	2b01      	cmp	r3, #1
 8002806:	d116      	bne.n	8002836 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002808:	4b7e      	ldr	r3, [pc, #504]	; (8002a04 <HAL_RCC_OscConfig+0x4dc>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002810:	2b00      	cmp	r3, #0
 8002812:	d005      	beq.n	8002820 <HAL_RCC_OscConfig+0x2f8>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	69db      	ldr	r3, [r3, #28]
 8002818:	2b80      	cmp	r3, #128	; 0x80
 800281a:	d001      	beq.n	8002820 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e2ac      	b.n	8002d7a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002820:	4b78      	ldr	r3, [pc, #480]	; (8002a04 <HAL_RCC_OscConfig+0x4dc>)
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a1b      	ldr	r3, [r3, #32]
 800282c:	061b      	lsls	r3, r3, #24
 800282e:	4975      	ldr	r1, [pc, #468]	; (8002a04 <HAL_RCC_OscConfig+0x4dc>)
 8002830:	4313      	orrs	r3, r2
 8002832:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002834:	e040      	b.n	80028b8 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	69db      	ldr	r3, [r3, #28]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d023      	beq.n	8002886 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800283e:	4b71      	ldr	r3, [pc, #452]	; (8002a04 <HAL_RCC_OscConfig+0x4dc>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a70      	ldr	r2, [pc, #448]	; (8002a04 <HAL_RCC_OscConfig+0x4dc>)
 8002844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002848:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800284a:	f7fe f98b 	bl	8000b64 <HAL_GetTick>
 800284e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002850:	e008      	b.n	8002864 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002852:	f7fe f987 	bl	8000b64 <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	2b02      	cmp	r3, #2
 800285e:	d901      	bls.n	8002864 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e28a      	b.n	8002d7a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002864:	4b67      	ldr	r3, [pc, #412]	; (8002a04 <HAL_RCC_OscConfig+0x4dc>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800286c:	2b00      	cmp	r3, #0
 800286e:	d0f0      	beq.n	8002852 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002870:	4b64      	ldr	r3, [pc, #400]	; (8002a04 <HAL_RCC_OscConfig+0x4dc>)
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a1b      	ldr	r3, [r3, #32]
 800287c:	061b      	lsls	r3, r3, #24
 800287e:	4961      	ldr	r1, [pc, #388]	; (8002a04 <HAL_RCC_OscConfig+0x4dc>)
 8002880:	4313      	orrs	r3, r2
 8002882:	60cb      	str	r3, [r1, #12]
 8002884:	e018      	b.n	80028b8 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002886:	4b5f      	ldr	r3, [pc, #380]	; (8002a04 <HAL_RCC_OscConfig+0x4dc>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a5e      	ldr	r2, [pc, #376]	; (8002a04 <HAL_RCC_OscConfig+0x4dc>)
 800288c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002890:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002892:	f7fe f967 	bl	8000b64 <HAL_GetTick>
 8002896:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002898:	e008      	b.n	80028ac <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800289a:	f7fe f963 	bl	8000b64 <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d901      	bls.n	80028ac <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e266      	b.n	8002d7a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80028ac:	4b55      	ldr	r3, [pc, #340]	; (8002a04 <HAL_RCC_OscConfig+0x4dc>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d1f0      	bne.n	800289a <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0308 	and.w	r3, r3, #8
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d036      	beq.n	8002932 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	695b      	ldr	r3, [r3, #20]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d019      	beq.n	8002900 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028cc:	4b4d      	ldr	r3, [pc, #308]	; (8002a04 <HAL_RCC_OscConfig+0x4dc>)
 80028ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028d0:	4a4c      	ldr	r2, [pc, #304]	; (8002a04 <HAL_RCC_OscConfig+0x4dc>)
 80028d2:	f043 0301 	orr.w	r3, r3, #1
 80028d6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028d8:	f7fe f944 	bl	8000b64 <HAL_GetTick>
 80028dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028e0:	f7fe f940 	bl	8000b64 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e243      	b.n	8002d7a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80028f2:	4b44      	ldr	r3, [pc, #272]	; (8002a04 <HAL_RCC_OscConfig+0x4dc>)
 80028f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d0f0      	beq.n	80028e0 <HAL_RCC_OscConfig+0x3b8>
 80028fe:	e018      	b.n	8002932 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002900:	4b40      	ldr	r3, [pc, #256]	; (8002a04 <HAL_RCC_OscConfig+0x4dc>)
 8002902:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002904:	4a3f      	ldr	r2, [pc, #252]	; (8002a04 <HAL_RCC_OscConfig+0x4dc>)
 8002906:	f023 0301 	bic.w	r3, r3, #1
 800290a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800290c:	f7fe f92a 	bl	8000b64 <HAL_GetTick>
 8002910:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002912:	e008      	b.n	8002926 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002914:	f7fe f926 	bl	8000b64 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b02      	cmp	r3, #2
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e229      	b.n	8002d7a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002926:	4b37      	ldr	r3, [pc, #220]	; (8002a04 <HAL_RCC_OscConfig+0x4dc>)
 8002928:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d1f0      	bne.n	8002914 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0320 	and.w	r3, r3, #32
 800293a:	2b00      	cmp	r3, #0
 800293c:	d036      	beq.n	80029ac <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d019      	beq.n	800297a <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002946:	4b2f      	ldr	r3, [pc, #188]	; (8002a04 <HAL_RCC_OscConfig+0x4dc>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a2e      	ldr	r2, [pc, #184]	; (8002a04 <HAL_RCC_OscConfig+0x4dc>)
 800294c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002950:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002952:	f7fe f907 	bl	8000b64 <HAL_GetTick>
 8002956:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002958:	e008      	b.n	800296c <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800295a:	f7fe f903 	bl	8000b64 <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	2b02      	cmp	r3, #2
 8002966:	d901      	bls.n	800296c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e206      	b.n	8002d7a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800296c:	4b25      	ldr	r3, [pc, #148]	; (8002a04 <HAL_RCC_OscConfig+0x4dc>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d0f0      	beq.n	800295a <HAL_RCC_OscConfig+0x432>
 8002978:	e018      	b.n	80029ac <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800297a:	4b22      	ldr	r3, [pc, #136]	; (8002a04 <HAL_RCC_OscConfig+0x4dc>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a21      	ldr	r2, [pc, #132]	; (8002a04 <HAL_RCC_OscConfig+0x4dc>)
 8002980:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002984:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002986:	f7fe f8ed 	bl	8000b64 <HAL_GetTick>
 800298a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800298c:	e008      	b.n	80029a0 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800298e:	f7fe f8e9 	bl	8000b64 <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	2b02      	cmp	r3, #2
 800299a:	d901      	bls.n	80029a0 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e1ec      	b.n	8002d7a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80029a0:	4b18      	ldr	r3, [pc, #96]	; (8002a04 <HAL_RCC_OscConfig+0x4dc>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d1f0      	bne.n	800298e <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0304 	and.w	r3, r3, #4
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	f000 80af 	beq.w	8002b18 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80029ba:	4b13      	ldr	r3, [pc, #76]	; (8002a08 <HAL_RCC_OscConfig+0x4e0>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a12      	ldr	r2, [pc, #72]	; (8002a08 <HAL_RCC_OscConfig+0x4e0>)
 80029c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029c4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80029c6:	f7fe f8cd 	bl	8000b64 <HAL_GetTick>
 80029ca:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80029cc:	e008      	b.n	80029e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029ce:	f7fe f8c9 	bl	8000b64 <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	2b64      	cmp	r3, #100	; 0x64
 80029da:	d901      	bls.n	80029e0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e1cc      	b.n	8002d7a <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80029e0:	4b09      	ldr	r3, [pc, #36]	; (8002a08 <HAL_RCC_OscConfig+0x4e0>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d0f0      	beq.n	80029ce <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d10b      	bne.n	8002a0c <HAL_RCC_OscConfig+0x4e4>
 80029f4:	4b03      	ldr	r3, [pc, #12]	; (8002a04 <HAL_RCC_OscConfig+0x4dc>)
 80029f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f8:	4a02      	ldr	r2, [pc, #8]	; (8002a04 <HAL_RCC_OscConfig+0x4dc>)
 80029fa:	f043 0301 	orr.w	r3, r3, #1
 80029fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002a00:	e05b      	b.n	8002aba <HAL_RCC_OscConfig+0x592>
 8002a02:	bf00      	nop
 8002a04:	58024400 	.word	0x58024400
 8002a08:	58024800 	.word	0x58024800
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d112      	bne.n	8002a3a <HAL_RCC_OscConfig+0x512>
 8002a14:	4b9d      	ldr	r3, [pc, #628]	; (8002c8c <HAL_RCC_OscConfig+0x764>)
 8002a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a18:	4a9c      	ldr	r2, [pc, #624]	; (8002c8c <HAL_RCC_OscConfig+0x764>)
 8002a1a:	f023 0301 	bic.w	r3, r3, #1
 8002a1e:	6713      	str	r3, [r2, #112]	; 0x70
 8002a20:	4b9a      	ldr	r3, [pc, #616]	; (8002c8c <HAL_RCC_OscConfig+0x764>)
 8002a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a24:	4a99      	ldr	r2, [pc, #612]	; (8002c8c <HAL_RCC_OscConfig+0x764>)
 8002a26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a2a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a2c:	4b97      	ldr	r3, [pc, #604]	; (8002c8c <HAL_RCC_OscConfig+0x764>)
 8002a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a30:	4a96      	ldr	r2, [pc, #600]	; (8002c8c <HAL_RCC_OscConfig+0x764>)
 8002a32:	f023 0304 	bic.w	r3, r3, #4
 8002a36:	6713      	str	r3, [r2, #112]	; 0x70
 8002a38:	e03f      	b.n	8002aba <HAL_RCC_OscConfig+0x592>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	2b05      	cmp	r3, #5
 8002a40:	d112      	bne.n	8002a68 <HAL_RCC_OscConfig+0x540>
 8002a42:	4b92      	ldr	r3, [pc, #584]	; (8002c8c <HAL_RCC_OscConfig+0x764>)
 8002a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a46:	4a91      	ldr	r2, [pc, #580]	; (8002c8c <HAL_RCC_OscConfig+0x764>)
 8002a48:	f043 0304 	orr.w	r3, r3, #4
 8002a4c:	6713      	str	r3, [r2, #112]	; 0x70
 8002a4e:	4b8f      	ldr	r3, [pc, #572]	; (8002c8c <HAL_RCC_OscConfig+0x764>)
 8002a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a52:	4a8e      	ldr	r2, [pc, #568]	; (8002c8c <HAL_RCC_OscConfig+0x764>)
 8002a54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a58:	6713      	str	r3, [r2, #112]	; 0x70
 8002a5a:	4b8c      	ldr	r3, [pc, #560]	; (8002c8c <HAL_RCC_OscConfig+0x764>)
 8002a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a5e:	4a8b      	ldr	r2, [pc, #556]	; (8002c8c <HAL_RCC_OscConfig+0x764>)
 8002a60:	f043 0301 	orr.w	r3, r3, #1
 8002a64:	6713      	str	r3, [r2, #112]	; 0x70
 8002a66:	e028      	b.n	8002aba <HAL_RCC_OscConfig+0x592>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	2b85      	cmp	r3, #133	; 0x85
 8002a6e:	d112      	bne.n	8002a96 <HAL_RCC_OscConfig+0x56e>
 8002a70:	4b86      	ldr	r3, [pc, #536]	; (8002c8c <HAL_RCC_OscConfig+0x764>)
 8002a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a74:	4a85      	ldr	r2, [pc, #532]	; (8002c8c <HAL_RCC_OscConfig+0x764>)
 8002a76:	f043 0304 	orr.w	r3, r3, #4
 8002a7a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a7c:	4b83      	ldr	r3, [pc, #524]	; (8002c8c <HAL_RCC_OscConfig+0x764>)
 8002a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a80:	4a82      	ldr	r2, [pc, #520]	; (8002c8c <HAL_RCC_OscConfig+0x764>)
 8002a82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a86:	6713      	str	r3, [r2, #112]	; 0x70
 8002a88:	4b80      	ldr	r3, [pc, #512]	; (8002c8c <HAL_RCC_OscConfig+0x764>)
 8002a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a8c:	4a7f      	ldr	r2, [pc, #508]	; (8002c8c <HAL_RCC_OscConfig+0x764>)
 8002a8e:	f043 0301 	orr.w	r3, r3, #1
 8002a92:	6713      	str	r3, [r2, #112]	; 0x70
 8002a94:	e011      	b.n	8002aba <HAL_RCC_OscConfig+0x592>
 8002a96:	4b7d      	ldr	r3, [pc, #500]	; (8002c8c <HAL_RCC_OscConfig+0x764>)
 8002a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a9a:	4a7c      	ldr	r2, [pc, #496]	; (8002c8c <HAL_RCC_OscConfig+0x764>)
 8002a9c:	f023 0301 	bic.w	r3, r3, #1
 8002aa0:	6713      	str	r3, [r2, #112]	; 0x70
 8002aa2:	4b7a      	ldr	r3, [pc, #488]	; (8002c8c <HAL_RCC_OscConfig+0x764>)
 8002aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa6:	4a79      	ldr	r2, [pc, #484]	; (8002c8c <HAL_RCC_OscConfig+0x764>)
 8002aa8:	f023 0304 	bic.w	r3, r3, #4
 8002aac:	6713      	str	r3, [r2, #112]	; 0x70
 8002aae:	4b77      	ldr	r3, [pc, #476]	; (8002c8c <HAL_RCC_OscConfig+0x764>)
 8002ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab2:	4a76      	ldr	r2, [pc, #472]	; (8002c8c <HAL_RCC_OscConfig+0x764>)
 8002ab4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ab8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d015      	beq.n	8002aee <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ac2:	f7fe f84f 	bl	8000b64 <HAL_GetTick>
 8002ac6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ac8:	e00a      	b.n	8002ae0 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aca:	f7fe f84b 	bl	8000b64 <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d901      	bls.n	8002ae0 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e14c      	b.n	8002d7a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ae0:	4b6a      	ldr	r3, [pc, #424]	; (8002c8c <HAL_RCC_OscConfig+0x764>)
 8002ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae4:	f003 0302 	and.w	r3, r3, #2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d0ee      	beq.n	8002aca <HAL_RCC_OscConfig+0x5a2>
 8002aec:	e014      	b.n	8002b18 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aee:	f7fe f839 	bl	8000b64 <HAL_GetTick>
 8002af2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002af4:	e00a      	b.n	8002b0c <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002af6:	f7fe f835 	bl	8000b64 <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d901      	bls.n	8002b0c <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e136      	b.n	8002d7a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b0c:	4b5f      	ldr	r3, [pc, #380]	; (8002c8c <HAL_RCC_OscConfig+0x764>)
 8002b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b10:	f003 0302 	and.w	r3, r3, #2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d1ee      	bne.n	8002af6 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	f000 812b 	beq.w	8002d78 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002b22:	4b5a      	ldr	r3, [pc, #360]	; (8002c8c <HAL_RCC_OscConfig+0x764>)
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b2a:	2b18      	cmp	r3, #24
 8002b2c:	f000 80bb 	beq.w	8002ca6 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	f040 8095 	bne.w	8002c64 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b3a:	4b54      	ldr	r3, [pc, #336]	; (8002c8c <HAL_RCC_OscConfig+0x764>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a53      	ldr	r2, [pc, #332]	; (8002c8c <HAL_RCC_OscConfig+0x764>)
 8002b40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b46:	f7fe f80d 	bl	8000b64 <HAL_GetTick>
 8002b4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b4c:	e008      	b.n	8002b60 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b4e:	f7fe f809 	bl	8000b64 <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d901      	bls.n	8002b60 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e10c      	b.n	8002d7a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b60:	4b4a      	ldr	r3, [pc, #296]	; (8002c8c <HAL_RCC_OscConfig+0x764>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d1f0      	bne.n	8002b4e <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b6c:	4b47      	ldr	r3, [pc, #284]	; (8002c8c <HAL_RCC_OscConfig+0x764>)
 8002b6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b70:	4b47      	ldr	r3, [pc, #284]	; (8002c90 <HAL_RCC_OscConfig+0x768>)
 8002b72:	4013      	ands	r3, r2
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002b7c:	0112      	lsls	r2, r2, #4
 8002b7e:	430a      	orrs	r2, r1
 8002b80:	4942      	ldr	r1, [pc, #264]	; (8002c8c <HAL_RCC_OscConfig+0x764>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	628b      	str	r3, [r1, #40]	; 0x28
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b94:	3b01      	subs	r3, #1
 8002b96:	025b      	lsls	r3, r3, #9
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	431a      	orrs	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba0:	3b01      	subs	r3, #1
 8002ba2:	041b      	lsls	r3, r3, #16
 8002ba4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002ba8:	431a      	orrs	r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bae:	3b01      	subs	r3, #1
 8002bb0:	061b      	lsls	r3, r3, #24
 8002bb2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002bb6:	4935      	ldr	r1, [pc, #212]	; (8002c8c <HAL_RCC_OscConfig+0x764>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002bbc:	4b33      	ldr	r3, [pc, #204]	; (8002c8c <HAL_RCC_OscConfig+0x764>)
 8002bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc0:	4a32      	ldr	r2, [pc, #200]	; (8002c8c <HAL_RCC_OscConfig+0x764>)
 8002bc2:	f023 0301 	bic.w	r3, r3, #1
 8002bc6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002bc8:	4b30      	ldr	r3, [pc, #192]	; (8002c8c <HAL_RCC_OscConfig+0x764>)
 8002bca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bcc:	4b31      	ldr	r3, [pc, #196]	; (8002c94 <HAL_RCC_OscConfig+0x76c>)
 8002bce:	4013      	ands	r3, r2
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002bd4:	00d2      	lsls	r2, r2, #3
 8002bd6:	492d      	ldr	r1, [pc, #180]	; (8002c8c <HAL_RCC_OscConfig+0x764>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002bdc:	4b2b      	ldr	r3, [pc, #172]	; (8002c8c <HAL_RCC_OscConfig+0x764>)
 8002bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be0:	f023 020c 	bic.w	r2, r3, #12
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be8:	4928      	ldr	r1, [pc, #160]	; (8002c8c <HAL_RCC_OscConfig+0x764>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002bee:	4b27      	ldr	r3, [pc, #156]	; (8002c8c <HAL_RCC_OscConfig+0x764>)
 8002bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf2:	f023 0202 	bic.w	r2, r3, #2
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bfa:	4924      	ldr	r1, [pc, #144]	; (8002c8c <HAL_RCC_OscConfig+0x764>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002c00:	4b22      	ldr	r3, [pc, #136]	; (8002c8c <HAL_RCC_OscConfig+0x764>)
 8002c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c04:	4a21      	ldr	r2, [pc, #132]	; (8002c8c <HAL_RCC_OscConfig+0x764>)
 8002c06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c0c:	4b1f      	ldr	r3, [pc, #124]	; (8002c8c <HAL_RCC_OscConfig+0x764>)
 8002c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c10:	4a1e      	ldr	r2, [pc, #120]	; (8002c8c <HAL_RCC_OscConfig+0x764>)
 8002c12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002c18:	4b1c      	ldr	r3, [pc, #112]	; (8002c8c <HAL_RCC_OscConfig+0x764>)
 8002c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1c:	4a1b      	ldr	r2, [pc, #108]	; (8002c8c <HAL_RCC_OscConfig+0x764>)
 8002c1e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002c24:	4b19      	ldr	r3, [pc, #100]	; (8002c8c <HAL_RCC_OscConfig+0x764>)
 8002c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c28:	4a18      	ldr	r2, [pc, #96]	; (8002c8c <HAL_RCC_OscConfig+0x764>)
 8002c2a:	f043 0301 	orr.w	r3, r3, #1
 8002c2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c30:	4b16      	ldr	r3, [pc, #88]	; (8002c8c <HAL_RCC_OscConfig+0x764>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a15      	ldr	r2, [pc, #84]	; (8002c8c <HAL_RCC_OscConfig+0x764>)
 8002c36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c3c:	f7fd ff92 	bl	8000b64 <HAL_GetTick>
 8002c40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c44:	f7fd ff8e 	bl	8000b64 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e091      	b.n	8002d7a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c56:	4b0d      	ldr	r3, [pc, #52]	; (8002c8c <HAL_RCC_OscConfig+0x764>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d0f0      	beq.n	8002c44 <HAL_RCC_OscConfig+0x71c>
 8002c62:	e089      	b.n	8002d78 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c64:	4b09      	ldr	r3, [pc, #36]	; (8002c8c <HAL_RCC_OscConfig+0x764>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a08      	ldr	r2, [pc, #32]	; (8002c8c <HAL_RCC_OscConfig+0x764>)
 8002c6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c70:	f7fd ff78 	bl	8000b64 <HAL_GetTick>
 8002c74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c76:	e00f      	b.n	8002c98 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c78:	f7fd ff74 	bl	8000b64 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d908      	bls.n	8002c98 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e077      	b.n	8002d7a <HAL_RCC_OscConfig+0x852>
 8002c8a:	bf00      	nop
 8002c8c:	58024400 	.word	0x58024400
 8002c90:	fffffc0c 	.word	0xfffffc0c
 8002c94:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c98:	4b3a      	ldr	r3, [pc, #232]	; (8002d84 <HAL_RCC_OscConfig+0x85c>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d1e9      	bne.n	8002c78 <HAL_RCC_OscConfig+0x750>
 8002ca4:	e068      	b.n	8002d78 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002ca6:	4b37      	ldr	r3, [pc, #220]	; (8002d84 <HAL_RCC_OscConfig+0x85c>)
 8002ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002caa:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002cac:	4b35      	ldr	r3, [pc, #212]	; (8002d84 <HAL_RCC_OscConfig+0x85c>)
 8002cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb0:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d031      	beq.n	8002d1e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	f003 0203 	and.w	r2, r3, #3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d12a      	bne.n	8002d1e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	091b      	lsrs	r3, r3, #4
 8002ccc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d122      	bne.n	8002d1e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce2:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d11a      	bne.n	8002d1e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	0a5b      	lsrs	r3, r3, #9
 8002cec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cf4:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d111      	bne.n	8002d1e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	0c1b      	lsrs	r3, r3, #16
 8002cfe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d06:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d108      	bne.n	8002d1e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	0e1b      	lsrs	r3, r3, #24
 8002d10:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d18:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d001      	beq.n	8002d22 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e02b      	b.n	8002d7a <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002d22:	4b18      	ldr	r3, [pc, #96]	; (8002d84 <HAL_RCC_OscConfig+0x85c>)
 8002d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d26:	08db      	lsrs	r3, r3, #3
 8002d28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002d2c:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d32:	693a      	ldr	r2, [r7, #16]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d01f      	beq.n	8002d78 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002d38:	4b12      	ldr	r3, [pc, #72]	; (8002d84 <HAL_RCC_OscConfig+0x85c>)
 8002d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3c:	4a11      	ldr	r2, [pc, #68]	; (8002d84 <HAL_RCC_OscConfig+0x85c>)
 8002d3e:	f023 0301 	bic.w	r3, r3, #1
 8002d42:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d44:	f7fd ff0e 	bl	8000b64 <HAL_GetTick>
 8002d48:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002d4a:	bf00      	nop
 8002d4c:	f7fd ff0a 	bl	8000b64 <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d0f9      	beq.n	8002d4c <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002d58:	4b0a      	ldr	r3, [pc, #40]	; (8002d84 <HAL_RCC_OscConfig+0x85c>)
 8002d5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d5c:	4b0a      	ldr	r3, [pc, #40]	; (8002d88 <HAL_RCC_OscConfig+0x860>)
 8002d5e:	4013      	ands	r3, r2
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002d64:	00d2      	lsls	r2, r2, #3
 8002d66:	4907      	ldr	r1, [pc, #28]	; (8002d84 <HAL_RCC_OscConfig+0x85c>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002d6c:	4b05      	ldr	r3, [pc, #20]	; (8002d84 <HAL_RCC_OscConfig+0x85c>)
 8002d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d70:	4a04      	ldr	r2, [pc, #16]	; (8002d84 <HAL_RCC_OscConfig+0x85c>)
 8002d72:	f043 0301 	orr.w	r3, r3, #1
 8002d76:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3730      	adds	r7, #48	; 0x30
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	58024400 	.word	0x58024400
 8002d88:	ffff0007 	.word	0xffff0007

08002d8c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b086      	sub	sp, #24
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d101      	bne.n	8002da0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e19c      	b.n	80030da <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002da0:	4b8a      	ldr	r3, [pc, #552]	; (8002fcc <HAL_RCC_ClockConfig+0x240>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 030f 	and.w	r3, r3, #15
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d910      	bls.n	8002dd0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dae:	4b87      	ldr	r3, [pc, #540]	; (8002fcc <HAL_RCC_ClockConfig+0x240>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f023 020f 	bic.w	r2, r3, #15
 8002db6:	4985      	ldr	r1, [pc, #532]	; (8002fcc <HAL_RCC_ClockConfig+0x240>)
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dbe:	4b83      	ldr	r3, [pc, #524]	; (8002fcc <HAL_RCC_ClockConfig+0x240>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 030f 	and.w	r3, r3, #15
 8002dc6:	683a      	ldr	r2, [r7, #0]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d001      	beq.n	8002dd0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e184      	b.n	80030da <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0304 	and.w	r3, r3, #4
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d010      	beq.n	8002dfe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	691a      	ldr	r2, [r3, #16]
 8002de0:	4b7b      	ldr	r3, [pc, #492]	; (8002fd0 <HAL_RCC_ClockConfig+0x244>)
 8002de2:	699b      	ldr	r3, [r3, #24]
 8002de4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d908      	bls.n	8002dfe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002dec:	4b78      	ldr	r3, [pc, #480]	; (8002fd0 <HAL_RCC_ClockConfig+0x244>)
 8002dee:	699b      	ldr	r3, [r3, #24]
 8002df0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	691b      	ldr	r3, [r3, #16]
 8002df8:	4975      	ldr	r1, [pc, #468]	; (8002fd0 <HAL_RCC_ClockConfig+0x244>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0308 	and.w	r3, r3, #8
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d010      	beq.n	8002e2c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	695a      	ldr	r2, [r3, #20]
 8002e0e:	4b70      	ldr	r3, [pc, #448]	; (8002fd0 <HAL_RCC_ClockConfig+0x244>)
 8002e10:	69db      	ldr	r3, [r3, #28]
 8002e12:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d908      	bls.n	8002e2c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002e1a:	4b6d      	ldr	r3, [pc, #436]	; (8002fd0 <HAL_RCC_ClockConfig+0x244>)
 8002e1c:	69db      	ldr	r3, [r3, #28]
 8002e1e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	695b      	ldr	r3, [r3, #20]
 8002e26:	496a      	ldr	r1, [pc, #424]	; (8002fd0 <HAL_RCC_ClockConfig+0x244>)
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0310 	and.w	r3, r3, #16
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d010      	beq.n	8002e5a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	699a      	ldr	r2, [r3, #24]
 8002e3c:	4b64      	ldr	r3, [pc, #400]	; (8002fd0 <HAL_RCC_ClockConfig+0x244>)
 8002e3e:	69db      	ldr	r3, [r3, #28]
 8002e40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d908      	bls.n	8002e5a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002e48:	4b61      	ldr	r3, [pc, #388]	; (8002fd0 <HAL_RCC_ClockConfig+0x244>)
 8002e4a:	69db      	ldr	r3, [r3, #28]
 8002e4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	495e      	ldr	r1, [pc, #376]	; (8002fd0 <HAL_RCC_ClockConfig+0x244>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0320 	and.w	r3, r3, #32
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d010      	beq.n	8002e88 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	69da      	ldr	r2, [r3, #28]
 8002e6a:	4b59      	ldr	r3, [pc, #356]	; (8002fd0 <HAL_RCC_ClockConfig+0x244>)
 8002e6c:	6a1b      	ldr	r3, [r3, #32]
 8002e6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d908      	bls.n	8002e88 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002e76:	4b56      	ldr	r3, [pc, #344]	; (8002fd0 <HAL_RCC_ClockConfig+0x244>)
 8002e78:	6a1b      	ldr	r3, [r3, #32]
 8002e7a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	69db      	ldr	r3, [r3, #28]
 8002e82:	4953      	ldr	r1, [pc, #332]	; (8002fd0 <HAL_RCC_ClockConfig+0x244>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0302 	and.w	r3, r3, #2
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d010      	beq.n	8002eb6 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	68da      	ldr	r2, [r3, #12]
 8002e98:	4b4d      	ldr	r3, [pc, #308]	; (8002fd0 <HAL_RCC_ClockConfig+0x244>)
 8002e9a:	699b      	ldr	r3, [r3, #24]
 8002e9c:	f003 030f 	and.w	r3, r3, #15
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d908      	bls.n	8002eb6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ea4:	4b4a      	ldr	r3, [pc, #296]	; (8002fd0 <HAL_RCC_ClockConfig+0x244>)
 8002ea6:	699b      	ldr	r3, [r3, #24]
 8002ea8:	f023 020f 	bic.w	r2, r3, #15
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	4947      	ldr	r1, [pc, #284]	; (8002fd0 <HAL_RCC_ClockConfig+0x244>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0301 	and.w	r3, r3, #1
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d055      	beq.n	8002f6e <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002ec2:	4b43      	ldr	r3, [pc, #268]	; (8002fd0 <HAL_RCC_ClockConfig+0x244>)
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	4940      	ldr	r1, [pc, #256]	; (8002fd0 <HAL_RCC_ClockConfig+0x244>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d107      	bne.n	8002eec <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002edc:	4b3c      	ldr	r3, [pc, #240]	; (8002fd0 <HAL_RCC_ClockConfig+0x244>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d121      	bne.n	8002f2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e0f6      	b.n	80030da <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	2b03      	cmp	r3, #3
 8002ef2:	d107      	bne.n	8002f04 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ef4:	4b36      	ldr	r3, [pc, #216]	; (8002fd0 <HAL_RCC_ClockConfig+0x244>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d115      	bne.n	8002f2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e0ea      	b.n	80030da <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d107      	bne.n	8002f1c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002f0c:	4b30      	ldr	r3, [pc, #192]	; (8002fd0 <HAL_RCC_ClockConfig+0x244>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d109      	bne.n	8002f2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e0de      	b.n	80030da <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f1c:	4b2c      	ldr	r3, [pc, #176]	; (8002fd0 <HAL_RCC_ClockConfig+0x244>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0304 	and.w	r3, r3, #4
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d101      	bne.n	8002f2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e0d6      	b.n	80030da <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f2c:	4b28      	ldr	r3, [pc, #160]	; (8002fd0 <HAL_RCC_ClockConfig+0x244>)
 8002f2e:	691b      	ldr	r3, [r3, #16]
 8002f30:	f023 0207 	bic.w	r2, r3, #7
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	4925      	ldr	r1, [pc, #148]	; (8002fd0 <HAL_RCC_ClockConfig+0x244>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f3e:	f7fd fe11 	bl	8000b64 <HAL_GetTick>
 8002f42:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f44:	e00a      	b.n	8002f5c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f46:	f7fd fe0d 	bl	8000b64 <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d901      	bls.n	8002f5c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e0be      	b.n	80030da <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f5c:	4b1c      	ldr	r3, [pc, #112]	; (8002fd0 <HAL_RCC_ClockConfig+0x244>)
 8002f5e:	691b      	ldr	r3, [r3, #16]
 8002f60:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	00db      	lsls	r3, r3, #3
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d1eb      	bne.n	8002f46 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d010      	beq.n	8002f9c <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	68da      	ldr	r2, [r3, #12]
 8002f7e:	4b14      	ldr	r3, [pc, #80]	; (8002fd0 <HAL_RCC_ClockConfig+0x244>)
 8002f80:	699b      	ldr	r3, [r3, #24]
 8002f82:	f003 030f 	and.w	r3, r3, #15
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d208      	bcs.n	8002f9c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f8a:	4b11      	ldr	r3, [pc, #68]	; (8002fd0 <HAL_RCC_ClockConfig+0x244>)
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	f023 020f 	bic.w	r2, r3, #15
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	490e      	ldr	r1, [pc, #56]	; (8002fd0 <HAL_RCC_ClockConfig+0x244>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f9c:	4b0b      	ldr	r3, [pc, #44]	; (8002fcc <HAL_RCC_ClockConfig+0x240>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 030f 	and.w	r3, r3, #15
 8002fa4:	683a      	ldr	r2, [r7, #0]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d214      	bcs.n	8002fd4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002faa:	4b08      	ldr	r3, [pc, #32]	; (8002fcc <HAL_RCC_ClockConfig+0x240>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f023 020f 	bic.w	r2, r3, #15
 8002fb2:	4906      	ldr	r1, [pc, #24]	; (8002fcc <HAL_RCC_ClockConfig+0x240>)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fba:	4b04      	ldr	r3, [pc, #16]	; (8002fcc <HAL_RCC_ClockConfig+0x240>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 030f 	and.w	r3, r3, #15
 8002fc2:	683a      	ldr	r2, [r7, #0]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d005      	beq.n	8002fd4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e086      	b.n	80030da <HAL_RCC_ClockConfig+0x34e>
 8002fcc:	52002000 	.word	0x52002000
 8002fd0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0304 	and.w	r3, r3, #4
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d010      	beq.n	8003002 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	691a      	ldr	r2, [r3, #16]
 8002fe4:	4b3f      	ldr	r3, [pc, #252]	; (80030e4 <HAL_RCC_ClockConfig+0x358>)
 8002fe6:	699b      	ldr	r3, [r3, #24]
 8002fe8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d208      	bcs.n	8003002 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002ff0:	4b3c      	ldr	r3, [pc, #240]	; (80030e4 <HAL_RCC_ClockConfig+0x358>)
 8002ff2:	699b      	ldr	r3, [r3, #24]
 8002ff4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	691b      	ldr	r3, [r3, #16]
 8002ffc:	4939      	ldr	r1, [pc, #228]	; (80030e4 <HAL_RCC_ClockConfig+0x358>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0308 	and.w	r3, r3, #8
 800300a:	2b00      	cmp	r3, #0
 800300c:	d010      	beq.n	8003030 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	695a      	ldr	r2, [r3, #20]
 8003012:	4b34      	ldr	r3, [pc, #208]	; (80030e4 <HAL_RCC_ClockConfig+0x358>)
 8003014:	69db      	ldr	r3, [r3, #28]
 8003016:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800301a:	429a      	cmp	r2, r3
 800301c:	d208      	bcs.n	8003030 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800301e:	4b31      	ldr	r3, [pc, #196]	; (80030e4 <HAL_RCC_ClockConfig+0x358>)
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	492e      	ldr	r1, [pc, #184]	; (80030e4 <HAL_RCC_ClockConfig+0x358>)
 800302c:	4313      	orrs	r3, r2
 800302e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0310 	and.w	r3, r3, #16
 8003038:	2b00      	cmp	r3, #0
 800303a:	d010      	beq.n	800305e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	699a      	ldr	r2, [r3, #24]
 8003040:	4b28      	ldr	r3, [pc, #160]	; (80030e4 <HAL_RCC_ClockConfig+0x358>)
 8003042:	69db      	ldr	r3, [r3, #28]
 8003044:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003048:	429a      	cmp	r2, r3
 800304a:	d208      	bcs.n	800305e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800304c:	4b25      	ldr	r3, [pc, #148]	; (80030e4 <HAL_RCC_ClockConfig+0x358>)
 800304e:	69db      	ldr	r3, [r3, #28]
 8003050:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	4922      	ldr	r1, [pc, #136]	; (80030e4 <HAL_RCC_ClockConfig+0x358>)
 800305a:	4313      	orrs	r3, r2
 800305c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0320 	and.w	r3, r3, #32
 8003066:	2b00      	cmp	r3, #0
 8003068:	d010      	beq.n	800308c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	69da      	ldr	r2, [r3, #28]
 800306e:	4b1d      	ldr	r3, [pc, #116]	; (80030e4 <HAL_RCC_ClockConfig+0x358>)
 8003070:	6a1b      	ldr	r3, [r3, #32]
 8003072:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003076:	429a      	cmp	r2, r3
 8003078:	d208      	bcs.n	800308c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800307a:	4b1a      	ldr	r3, [pc, #104]	; (80030e4 <HAL_RCC_ClockConfig+0x358>)
 800307c:	6a1b      	ldr	r3, [r3, #32]
 800307e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	69db      	ldr	r3, [r3, #28]
 8003086:	4917      	ldr	r1, [pc, #92]	; (80030e4 <HAL_RCC_ClockConfig+0x358>)
 8003088:	4313      	orrs	r3, r2
 800308a:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800308c:	f000 f834 	bl	80030f8 <HAL_RCC_GetSysClockFreq>
 8003090:	4602      	mov	r2, r0
 8003092:	4b14      	ldr	r3, [pc, #80]	; (80030e4 <HAL_RCC_ClockConfig+0x358>)
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	0a1b      	lsrs	r3, r3, #8
 8003098:	f003 030f 	and.w	r3, r3, #15
 800309c:	4912      	ldr	r1, [pc, #72]	; (80030e8 <HAL_RCC_ClockConfig+0x35c>)
 800309e:	5ccb      	ldrb	r3, [r1, r3]
 80030a0:	f003 031f 	and.w	r3, r3, #31
 80030a4:	fa22 f303 	lsr.w	r3, r2, r3
 80030a8:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80030aa:	4b0e      	ldr	r3, [pc, #56]	; (80030e4 <HAL_RCC_ClockConfig+0x358>)
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	f003 030f 	and.w	r3, r3, #15
 80030b2:	4a0d      	ldr	r2, [pc, #52]	; (80030e8 <HAL_RCC_ClockConfig+0x35c>)
 80030b4:	5cd3      	ldrb	r3, [r2, r3]
 80030b6:	f003 031f 	and.w	r3, r3, #31
 80030ba:	693a      	ldr	r2, [r7, #16]
 80030bc:	fa22 f303 	lsr.w	r3, r2, r3
 80030c0:	4a0a      	ldr	r2, [pc, #40]	; (80030ec <HAL_RCC_ClockConfig+0x360>)
 80030c2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80030c4:	4a0a      	ldr	r2, [pc, #40]	; (80030f0 <HAL_RCC_ClockConfig+0x364>)
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80030ca:	4b0a      	ldr	r3, [pc, #40]	; (80030f4 <HAL_RCC_ClockConfig+0x368>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7fd fcfe 	bl	8000ad0 <HAL_InitTick>
 80030d4:	4603      	mov	r3, r0
 80030d6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80030d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3718      	adds	r7, #24
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	58024400 	.word	0x58024400
 80030e8:	08005cfc 	.word	0x08005cfc
 80030ec:	24000004 	.word	0x24000004
 80030f0:	24000000 	.word	0x24000000
 80030f4:	24000008 	.word	0x24000008

080030f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b089      	sub	sp, #36	; 0x24
 80030fc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030fe:	4bb3      	ldr	r3, [pc, #716]	; (80033cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003106:	2b18      	cmp	r3, #24
 8003108:	f200 8155 	bhi.w	80033b6 <HAL_RCC_GetSysClockFreq+0x2be>
 800310c:	a201      	add	r2, pc, #4	; (adr r2, 8003114 <HAL_RCC_GetSysClockFreq+0x1c>)
 800310e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003112:	bf00      	nop
 8003114:	08003179 	.word	0x08003179
 8003118:	080033b7 	.word	0x080033b7
 800311c:	080033b7 	.word	0x080033b7
 8003120:	080033b7 	.word	0x080033b7
 8003124:	080033b7 	.word	0x080033b7
 8003128:	080033b7 	.word	0x080033b7
 800312c:	080033b7 	.word	0x080033b7
 8003130:	080033b7 	.word	0x080033b7
 8003134:	0800319f 	.word	0x0800319f
 8003138:	080033b7 	.word	0x080033b7
 800313c:	080033b7 	.word	0x080033b7
 8003140:	080033b7 	.word	0x080033b7
 8003144:	080033b7 	.word	0x080033b7
 8003148:	080033b7 	.word	0x080033b7
 800314c:	080033b7 	.word	0x080033b7
 8003150:	080033b7 	.word	0x080033b7
 8003154:	080031a5 	.word	0x080031a5
 8003158:	080033b7 	.word	0x080033b7
 800315c:	080033b7 	.word	0x080033b7
 8003160:	080033b7 	.word	0x080033b7
 8003164:	080033b7 	.word	0x080033b7
 8003168:	080033b7 	.word	0x080033b7
 800316c:	080033b7 	.word	0x080033b7
 8003170:	080033b7 	.word	0x080033b7
 8003174:	080031ab 	.word	0x080031ab
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003178:	4b94      	ldr	r3, [pc, #592]	; (80033cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0320 	and.w	r3, r3, #32
 8003180:	2b00      	cmp	r3, #0
 8003182:	d009      	beq.n	8003198 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003184:	4b91      	ldr	r3, [pc, #580]	; (80033cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	08db      	lsrs	r3, r3, #3
 800318a:	f003 0303 	and.w	r3, r3, #3
 800318e:	4a90      	ldr	r2, [pc, #576]	; (80033d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003190:	fa22 f303 	lsr.w	r3, r2, r3
 8003194:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003196:	e111      	b.n	80033bc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003198:	4b8d      	ldr	r3, [pc, #564]	; (80033d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800319a:	61bb      	str	r3, [r7, #24]
      break;
 800319c:	e10e      	b.n	80033bc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800319e:	4b8d      	ldr	r3, [pc, #564]	; (80033d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80031a0:	61bb      	str	r3, [r7, #24]
      break;
 80031a2:	e10b      	b.n	80033bc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80031a4:	4b8c      	ldr	r3, [pc, #560]	; (80033d8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80031a6:	61bb      	str	r3, [r7, #24]
      break;
 80031a8:	e108      	b.n	80033bc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80031aa:	4b88      	ldr	r3, [pc, #544]	; (80033cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ae:	f003 0303 	and.w	r3, r3, #3
 80031b2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80031b4:	4b85      	ldr	r3, [pc, #532]	; (80033cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b8:	091b      	lsrs	r3, r3, #4
 80031ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031be:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80031c0:	4b82      	ldr	r3, [pc, #520]	; (80033cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c4:	f003 0301 	and.w	r3, r3, #1
 80031c8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80031ca:	4b80      	ldr	r3, [pc, #512]	; (80033cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ce:	08db      	lsrs	r3, r3, #3
 80031d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80031d4:	68fa      	ldr	r2, [r7, #12]
 80031d6:	fb02 f303 	mul.w	r3, r2, r3
 80031da:	ee07 3a90 	vmov	s15, r3
 80031de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031e2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	f000 80e1 	beq.w	80033b0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	f000 8083 	beq.w	80032fc <HAL_RCC_GetSysClockFreq+0x204>
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	f200 80a1 	bhi.w	8003340 <HAL_RCC_GetSysClockFreq+0x248>
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d003      	beq.n	800320c <HAL_RCC_GetSysClockFreq+0x114>
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d056      	beq.n	80032b8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800320a:	e099      	b.n	8003340 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800320c:	4b6f      	ldr	r3, [pc, #444]	; (80033cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0320 	and.w	r3, r3, #32
 8003214:	2b00      	cmp	r3, #0
 8003216:	d02d      	beq.n	8003274 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003218:	4b6c      	ldr	r3, [pc, #432]	; (80033cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	08db      	lsrs	r3, r3, #3
 800321e:	f003 0303 	and.w	r3, r3, #3
 8003222:	4a6b      	ldr	r2, [pc, #428]	; (80033d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003224:	fa22 f303 	lsr.w	r3, r2, r3
 8003228:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	ee07 3a90 	vmov	s15, r3
 8003230:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	ee07 3a90 	vmov	s15, r3
 800323a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800323e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003242:	4b62      	ldr	r3, [pc, #392]	; (80033cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003246:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800324a:	ee07 3a90 	vmov	s15, r3
 800324e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003252:	ed97 6a02 	vldr	s12, [r7, #8]
 8003256:	eddf 5a61 	vldr	s11, [pc, #388]	; 80033dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800325a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800325e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003262:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003266:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800326a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800326e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003272:	e087      	b.n	8003384 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	ee07 3a90 	vmov	s15, r3
 800327a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800327e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80033e0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003282:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003286:	4b51      	ldr	r3, [pc, #324]	; (80033cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800328e:	ee07 3a90 	vmov	s15, r3
 8003292:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003296:	ed97 6a02 	vldr	s12, [r7, #8]
 800329a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80033dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800329e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80032b6:	e065      	b.n	8003384 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	ee07 3a90 	vmov	s15, r3
 80032be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032c2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80033e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80032c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032ca:	4b40      	ldr	r3, [pc, #256]	; (80033cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032d2:	ee07 3a90 	vmov	s15, r3
 80032d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032da:	ed97 6a02 	vldr	s12, [r7, #8]
 80032de:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80033dc <HAL_RCC_GetSysClockFreq+0x2e4>
 80032e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80032fa:	e043      	b.n	8003384 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	ee07 3a90 	vmov	s15, r3
 8003302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003306:	eddf 6a38 	vldr	s13, [pc, #224]	; 80033e8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800330a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800330e:	4b2f      	ldr	r3, [pc, #188]	; (80033cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003312:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003316:	ee07 3a90 	vmov	s15, r3
 800331a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800331e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003322:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80033dc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003326:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800332a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800332e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003332:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003336:	ee67 7a27 	vmul.f32	s15, s14, s15
 800333a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800333e:	e021      	b.n	8003384 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	ee07 3a90 	vmov	s15, r3
 8003346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800334a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80033e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800334e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003352:	4b1e      	ldr	r3, [pc, #120]	; (80033cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003356:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800335a:	ee07 3a90 	vmov	s15, r3
 800335e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003362:	ed97 6a02 	vldr	s12, [r7, #8]
 8003366:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80033dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800336a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800336e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003372:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003376:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800337a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800337e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003382:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003384:	4b11      	ldr	r3, [pc, #68]	; (80033cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003388:	0a5b      	lsrs	r3, r3, #9
 800338a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800338e:	3301      	adds	r3, #1
 8003390:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	ee07 3a90 	vmov	s15, r3
 8003398:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800339c:	edd7 6a07 	vldr	s13, [r7, #28]
 80033a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033a8:	ee17 3a90 	vmov	r3, s15
 80033ac:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80033ae:	e005      	b.n	80033bc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80033b0:	2300      	movs	r3, #0
 80033b2:	61bb      	str	r3, [r7, #24]
      break;
 80033b4:	e002      	b.n	80033bc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80033b6:	4b07      	ldr	r3, [pc, #28]	; (80033d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80033b8:	61bb      	str	r3, [r7, #24]
      break;
 80033ba:	bf00      	nop
  }

  return sysclockfreq;
 80033bc:	69bb      	ldr	r3, [r7, #24]
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3724      	adds	r7, #36	; 0x24
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	58024400 	.word	0x58024400
 80033d0:	03d09000 	.word	0x03d09000
 80033d4:	003d0900 	.word	0x003d0900
 80033d8:	007a1200 	.word	0x007a1200
 80033dc:	46000000 	.word	0x46000000
 80033e0:	4c742400 	.word	0x4c742400
 80033e4:	4a742400 	.word	0x4a742400
 80033e8:	4af42400 	.word	0x4af42400

080033ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80033f2:	f7ff fe81 	bl	80030f8 <HAL_RCC_GetSysClockFreq>
 80033f6:	4602      	mov	r2, r0
 80033f8:	4b10      	ldr	r3, [pc, #64]	; (800343c <HAL_RCC_GetHCLKFreq+0x50>)
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	0a1b      	lsrs	r3, r3, #8
 80033fe:	f003 030f 	and.w	r3, r3, #15
 8003402:	490f      	ldr	r1, [pc, #60]	; (8003440 <HAL_RCC_GetHCLKFreq+0x54>)
 8003404:	5ccb      	ldrb	r3, [r1, r3]
 8003406:	f003 031f 	and.w	r3, r3, #31
 800340a:	fa22 f303 	lsr.w	r3, r2, r3
 800340e:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003410:	4b0a      	ldr	r3, [pc, #40]	; (800343c <HAL_RCC_GetHCLKFreq+0x50>)
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	f003 030f 	and.w	r3, r3, #15
 8003418:	4a09      	ldr	r2, [pc, #36]	; (8003440 <HAL_RCC_GetHCLKFreq+0x54>)
 800341a:	5cd3      	ldrb	r3, [r2, r3]
 800341c:	f003 031f 	and.w	r3, r3, #31
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	fa22 f303 	lsr.w	r3, r2, r3
 8003426:	4a07      	ldr	r2, [pc, #28]	; (8003444 <HAL_RCC_GetHCLKFreq+0x58>)
 8003428:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800342a:	4a07      	ldr	r2, [pc, #28]	; (8003448 <HAL_RCC_GetHCLKFreq+0x5c>)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003430:	4b04      	ldr	r3, [pc, #16]	; (8003444 <HAL_RCC_GetHCLKFreq+0x58>)
 8003432:	681b      	ldr	r3, [r3, #0]
}
 8003434:	4618      	mov	r0, r3
 8003436:	3708      	adds	r7, #8
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}
 800343c:	58024400 	.word	0x58024400
 8003440:	08005cfc 	.word	0x08005cfc
 8003444:	24000004 	.word	0x24000004
 8003448:	24000000 	.word	0x24000000

0800344c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8003450:	f7ff ffcc 	bl	80033ec <HAL_RCC_GetHCLKFreq>
 8003454:	4602      	mov	r2, r0
 8003456:	4b06      	ldr	r3, [pc, #24]	; (8003470 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003458:	69db      	ldr	r3, [r3, #28]
 800345a:	091b      	lsrs	r3, r3, #4
 800345c:	f003 0307 	and.w	r3, r3, #7
 8003460:	4904      	ldr	r1, [pc, #16]	; (8003474 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003462:	5ccb      	ldrb	r3, [r1, r3]
 8003464:	f003 031f 	and.w	r3, r3, #31
 8003468:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800346c:	4618      	mov	r0, r3
 800346e:	bd80      	pop	{r7, pc}
 8003470:	58024400 	.word	0x58024400
 8003474:	08005cfc 	.word	0x08005cfc

08003478 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003478:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800347c:	b0c8      	sub	sp, #288	; 0x120
 800347e:	af00      	add	r7, sp, #0
 8003480:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003484:	2300      	movs	r3, #0
 8003486:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800348a:	2300      	movs	r3, #0
 800348c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003490:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003498:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800349c:	2500      	movs	r5, #0
 800349e:	ea54 0305 	orrs.w	r3, r4, r5
 80034a2:	d049      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80034a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034aa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80034ae:	d02f      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80034b0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80034b4:	d828      	bhi.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80034b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034ba:	d01a      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80034bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034c0:	d822      	bhi.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d003      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x56>
 80034c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034ca:	d007      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80034cc:	e01c      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034ce:	4ba7      	ldr	r3, [pc, #668]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80034d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d2:	4aa6      	ldr	r2, [pc, #664]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80034d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034d8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80034da:	e01a      	b.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80034dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034e0:	3308      	adds	r3, #8
 80034e2:	2102      	movs	r1, #2
 80034e4:	4618      	mov	r0, r3
 80034e6:	f002 fa6d 	bl	80059c4 <RCCEx_PLL2_Config>
 80034ea:	4603      	mov	r3, r0
 80034ec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80034f0:	e00f      	b.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80034f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034f6:	3328      	adds	r3, #40	; 0x28
 80034f8:	2102      	movs	r1, #2
 80034fa:	4618      	mov	r0, r3
 80034fc:	f002 fb14 	bl	8005b28 <RCCEx_PLL3_Config>
 8003500:	4603      	mov	r3, r0
 8003502:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003506:	e004      	b.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800350e:	e000      	b.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003510:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003512:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003516:	2b00      	cmp	r3, #0
 8003518:	d10a      	bne.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800351a:	4b94      	ldr	r3, [pc, #592]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800351c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800351e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003522:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003526:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003528:	4a90      	ldr	r2, [pc, #576]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800352a:	430b      	orrs	r3, r1
 800352c:	6513      	str	r3, [r2, #80]	; 0x50
 800352e:	e003      	b.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003530:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003534:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003538:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800353c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003540:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003544:	f04f 0900 	mov.w	r9, #0
 8003548:	ea58 0309 	orrs.w	r3, r8, r9
 800354c:	d047      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800354e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003554:	2b04      	cmp	r3, #4
 8003556:	d82a      	bhi.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003558:	a201      	add	r2, pc, #4	; (adr r2, 8003560 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800355a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800355e:	bf00      	nop
 8003560:	08003575 	.word	0x08003575
 8003564:	08003583 	.word	0x08003583
 8003568:	08003599 	.word	0x08003599
 800356c:	080035b7 	.word	0x080035b7
 8003570:	080035b7 	.word	0x080035b7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003574:	4b7d      	ldr	r3, [pc, #500]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003578:	4a7c      	ldr	r2, [pc, #496]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800357a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800357e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003580:	e01a      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003582:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003586:	3308      	adds	r3, #8
 8003588:	2100      	movs	r1, #0
 800358a:	4618      	mov	r0, r3
 800358c:	f002 fa1a 	bl	80059c4 <RCCEx_PLL2_Config>
 8003590:	4603      	mov	r3, r0
 8003592:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003596:	e00f      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003598:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800359c:	3328      	adds	r3, #40	; 0x28
 800359e:	2100      	movs	r1, #0
 80035a0:	4618      	mov	r0, r3
 80035a2:	f002 fac1 	bl	8005b28 <RCCEx_PLL3_Config>
 80035a6:	4603      	mov	r3, r0
 80035a8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035ac:	e004      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80035b4:	e000      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80035b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035b8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d10a      	bne.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80035c0:	4b6a      	ldr	r3, [pc, #424]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80035c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035c4:	f023 0107 	bic.w	r1, r3, #7
 80035c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ce:	4a67      	ldr	r2, [pc, #412]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80035d0:	430b      	orrs	r3, r1
 80035d2:	6513      	str	r3, [r2, #80]	; 0x50
 80035d4:	e003      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035d6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80035da:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80035de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e6:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80035ea:	f04f 0b00 	mov.w	fp, #0
 80035ee:	ea5a 030b 	orrs.w	r3, sl, fp
 80035f2:	d054      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 80035f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035fa:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80035fe:	d036      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8003600:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003604:	d82f      	bhi.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003606:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800360a:	d032      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800360c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003610:	d829      	bhi.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003612:	2bc0      	cmp	r3, #192	; 0xc0
 8003614:	d02f      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8003616:	2bc0      	cmp	r3, #192	; 0xc0
 8003618:	d825      	bhi.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800361a:	2b80      	cmp	r3, #128	; 0x80
 800361c:	d018      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800361e:	2b80      	cmp	r3, #128	; 0x80
 8003620:	d821      	bhi.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003622:	2b00      	cmp	r3, #0
 8003624:	d002      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8003626:	2b40      	cmp	r3, #64	; 0x40
 8003628:	d007      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800362a:	e01c      	b.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800362c:	4b4f      	ldr	r3, [pc, #316]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800362e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003630:	4a4e      	ldr	r2, [pc, #312]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003632:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003636:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003638:	e01e      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800363a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800363e:	3308      	adds	r3, #8
 8003640:	2100      	movs	r1, #0
 8003642:	4618      	mov	r0, r3
 8003644:	f002 f9be 	bl	80059c4 <RCCEx_PLL2_Config>
 8003648:	4603      	mov	r3, r0
 800364a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800364e:	e013      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003650:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003654:	3328      	adds	r3, #40	; 0x28
 8003656:	2100      	movs	r1, #0
 8003658:	4618      	mov	r0, r3
 800365a:	f002 fa65 	bl	8005b28 <RCCEx_PLL3_Config>
 800365e:	4603      	mov	r3, r0
 8003660:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003664:	e008      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800366c:	e004      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800366e:	bf00      	nop
 8003670:	e002      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003672:	bf00      	nop
 8003674:	e000      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003676:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003678:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800367c:	2b00      	cmp	r3, #0
 800367e:	d10a      	bne.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8003680:	4b3a      	ldr	r3, [pc, #232]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003682:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003684:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003688:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800368c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800368e:	4a37      	ldr	r2, [pc, #220]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003690:	430b      	orrs	r3, r1
 8003692:	6513      	str	r3, [r2, #80]	; 0x50
 8003694:	e003      	b.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003696:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800369a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800369e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a6:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80036aa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80036ae:	2300      	movs	r3, #0
 80036b0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80036b4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80036b8:	460b      	mov	r3, r1
 80036ba:	4313      	orrs	r3, r2
 80036bc:	d05c      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 80036be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036c4:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80036c8:	d03b      	beq.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80036ca:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80036ce:	d834      	bhi.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80036d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036d4:	d037      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80036d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036da:	d82e      	bhi.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80036dc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80036e0:	d033      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80036e2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80036e6:	d828      	bhi.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80036e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036ec:	d01a      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80036ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036f2:	d822      	bhi.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d003      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x288>
 80036f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036fc:	d007      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x296>
 80036fe:	e01c      	b.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003700:	4b1a      	ldr	r3, [pc, #104]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003704:	4a19      	ldr	r2, [pc, #100]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003706:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800370a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800370c:	e01e      	b.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800370e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003712:	3308      	adds	r3, #8
 8003714:	2100      	movs	r1, #0
 8003716:	4618      	mov	r0, r3
 8003718:	f002 f954 	bl	80059c4 <RCCEx_PLL2_Config>
 800371c:	4603      	mov	r3, r0
 800371e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003722:	e013      	b.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003724:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003728:	3328      	adds	r3, #40	; 0x28
 800372a:	2100      	movs	r1, #0
 800372c:	4618      	mov	r0, r3
 800372e:	f002 f9fb 	bl	8005b28 <RCCEx_PLL3_Config>
 8003732:	4603      	mov	r3, r0
 8003734:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003738:	e008      	b.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003740:	e004      	b.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003742:	bf00      	nop
 8003744:	e002      	b.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003746:	bf00      	nop
 8003748:	e000      	b.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800374a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800374c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003750:	2b00      	cmp	r3, #0
 8003752:	d10d      	bne.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8003754:	4b05      	ldr	r3, [pc, #20]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003756:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003758:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 800375c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003760:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003762:	4a02      	ldr	r2, [pc, #8]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003764:	430b      	orrs	r3, r1
 8003766:	6513      	str	r3, [r2, #80]	; 0x50
 8003768:	e006      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800376a:	bf00      	nop
 800376c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003770:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003774:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003778:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800377c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003780:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003784:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003788:	2300      	movs	r3, #0
 800378a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800378e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003792:	460b      	mov	r3, r1
 8003794:	4313      	orrs	r3, r2
 8003796:	d03a      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8003798:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800379c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800379e:	2b30      	cmp	r3, #48	; 0x30
 80037a0:	d01f      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80037a2:	2b30      	cmp	r3, #48	; 0x30
 80037a4:	d819      	bhi.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x362>
 80037a6:	2b20      	cmp	r3, #32
 80037a8:	d00c      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80037aa:	2b20      	cmp	r3, #32
 80037ac:	d815      	bhi.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x362>
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d019      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80037b2:	2b10      	cmp	r3, #16
 80037b4:	d111      	bne.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037b6:	4bae      	ldr	r3, [pc, #696]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80037b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ba:	4aad      	ldr	r2, [pc, #692]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80037bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80037c2:	e011      	b.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80037c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037c8:	3308      	adds	r3, #8
 80037ca:	2102      	movs	r1, #2
 80037cc:	4618      	mov	r0, r3
 80037ce:	f002 f8f9 	bl	80059c4 <RCCEx_PLL2_Config>
 80037d2:	4603      	mov	r3, r0
 80037d4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80037d8:	e006      	b.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80037e0:	e002      	b.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80037e2:	bf00      	nop
 80037e4:	e000      	b.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80037e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037e8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d10a      	bne.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80037f0:	4b9f      	ldr	r3, [pc, #636]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80037f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037f4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80037f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037fe:	4a9c      	ldr	r2, [pc, #624]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003800:	430b      	orrs	r3, r1
 8003802:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003804:	e003      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003806:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800380a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800380e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003816:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800381a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800381e:	2300      	movs	r3, #0
 8003820:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003824:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003828:	460b      	mov	r3, r1
 800382a:	4313      	orrs	r3, r2
 800382c:	d051      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800382e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003832:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003834:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003838:	d035      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800383a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800383e:	d82e      	bhi.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003840:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003844:	d031      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x432>
 8003846:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800384a:	d828      	bhi.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x426>
 800384c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003850:	d01a      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003852:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003856:	d822      	bhi.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003858:	2b00      	cmp	r3, #0
 800385a:	d003      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800385c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003860:	d007      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8003862:	e01c      	b.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003864:	4b82      	ldr	r3, [pc, #520]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003868:	4a81      	ldr	r2, [pc, #516]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800386a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800386e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003870:	e01c      	b.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003872:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003876:	3308      	adds	r3, #8
 8003878:	2100      	movs	r1, #0
 800387a:	4618      	mov	r0, r3
 800387c:	f002 f8a2 	bl	80059c4 <RCCEx_PLL2_Config>
 8003880:	4603      	mov	r3, r0
 8003882:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003886:	e011      	b.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003888:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800388c:	3328      	adds	r3, #40	; 0x28
 800388e:	2100      	movs	r1, #0
 8003890:	4618      	mov	r0, r3
 8003892:	f002 f949 	bl	8005b28 <RCCEx_PLL3_Config>
 8003896:	4603      	mov	r3, r0
 8003898:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800389c:	e006      	b.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80038a4:	e002      	b.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80038a6:	bf00      	nop
 80038a8:	e000      	b.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80038aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038ac:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d10a      	bne.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80038b4:	4b6e      	ldr	r3, [pc, #440]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80038b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038b8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80038bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038c2:	4a6b      	ldr	r2, [pc, #428]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80038c4:	430b      	orrs	r3, r1
 80038c6:	6513      	str	r3, [r2, #80]	; 0x50
 80038c8:	e003      	b.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038ca:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80038ce:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80038d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038da:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80038de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80038e2:	2300      	movs	r3, #0
 80038e4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80038e8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80038ec:	460b      	mov	r3, r1
 80038ee:	4313      	orrs	r3, r2
 80038f0:	d053      	beq.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80038f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038fc:	d033      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80038fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003902:	d82c      	bhi.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003904:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003908:	d02f      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800390a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800390e:	d826      	bhi.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003910:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003914:	d02b      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003916:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800391a:	d820      	bhi.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800391c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003920:	d012      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8003922:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003926:	d81a      	bhi.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003928:	2b00      	cmp	r3, #0
 800392a:	d022      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 800392c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003930:	d115      	bne.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003932:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003936:	3308      	adds	r3, #8
 8003938:	2101      	movs	r1, #1
 800393a:	4618      	mov	r0, r3
 800393c:	f002 f842 	bl	80059c4 <RCCEx_PLL2_Config>
 8003940:	4603      	mov	r3, r0
 8003942:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003946:	e015      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003948:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800394c:	3328      	adds	r3, #40	; 0x28
 800394e:	2101      	movs	r1, #1
 8003950:	4618      	mov	r0, r3
 8003952:	f002 f8e9 	bl	8005b28 <RCCEx_PLL3_Config>
 8003956:	4603      	mov	r3, r0
 8003958:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800395c:	e00a      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003964:	e006      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003966:	bf00      	nop
 8003968:	e004      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800396a:	bf00      	nop
 800396c:	e002      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800396e:	bf00      	nop
 8003970:	e000      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003972:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003974:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003978:	2b00      	cmp	r3, #0
 800397a:	d10a      	bne.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800397c:	4b3c      	ldr	r3, [pc, #240]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800397e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003980:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003984:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003988:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800398a:	4a39      	ldr	r2, [pc, #228]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800398c:	430b      	orrs	r3, r1
 800398e:	6513      	str	r3, [r2, #80]	; 0x50
 8003990:	e003      	b.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003992:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003996:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800399a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800399e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a2:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80039a6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80039aa:	2300      	movs	r3, #0
 80039ac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80039b0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80039b4:	460b      	mov	r3, r1
 80039b6:	4313      	orrs	r3, r2
 80039b8:	d060      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80039ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80039c2:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80039c6:	d039      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 80039c8:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80039cc:	d832      	bhi.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80039ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039d2:	d035      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80039d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039d8:	d82c      	bhi.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80039da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039de:	d031      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80039e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039e4:	d826      	bhi.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80039e6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80039ea:	d02d      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80039ec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80039f0:	d820      	bhi.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80039f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039f6:	d012      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80039f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039fc:	d81a      	bhi.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d024      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003a02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a06:	d115      	bne.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a0c:	3308      	adds	r3, #8
 8003a0e:	2101      	movs	r1, #1
 8003a10:	4618      	mov	r0, r3
 8003a12:	f001 ffd7 	bl	80059c4 <RCCEx_PLL2_Config>
 8003a16:	4603      	mov	r3, r0
 8003a18:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003a1c:	e017      	b.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a22:	3328      	adds	r3, #40	; 0x28
 8003a24:	2101      	movs	r1, #1
 8003a26:	4618      	mov	r0, r3
 8003a28:	f002 f87e 	bl	8005b28 <RCCEx_PLL3_Config>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003a32:	e00c      	b.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003a3a:	e008      	b.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003a3c:	bf00      	nop
 8003a3e:	e006      	b.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003a40:	bf00      	nop
 8003a42:	e004      	b.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003a44:	bf00      	nop
 8003a46:	e002      	b.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003a48:	bf00      	nop
 8003a4a:	e000      	b.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003a4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a4e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d10e      	bne.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003a56:	4b06      	ldr	r3, [pc, #24]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a5a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003a5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a62:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a66:	4a02      	ldr	r2, [pc, #8]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003a68:	430b      	orrs	r3, r1
 8003a6a:	6593      	str	r3, [r2, #88]	; 0x58
 8003a6c:	e006      	b.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x604>
 8003a6e:	bf00      	nop
 8003a70:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a74:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003a78:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003a7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a84:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003a88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003a92:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003a96:	460b      	mov	r3, r1
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	d037      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003a9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003aa0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003aa2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003aa6:	d00e      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8003aa8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003aac:	d816      	bhi.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d018      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8003ab2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ab6:	d111      	bne.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ab8:	4bc4      	ldr	r3, [pc, #784]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003abc:	4ac3      	ldr	r2, [pc, #780]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003abe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ac2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003ac4:	e00f      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ac6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003aca:	3308      	adds	r3, #8
 8003acc:	2101      	movs	r1, #1
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f001 ff78 	bl	80059c4 <RCCEx_PLL2_Config>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003ada:	e004      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003ae2:	e000      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003ae4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ae6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d10a      	bne.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003aee:	4bb7      	ldr	r3, [pc, #732]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003af0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003af2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003af6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003afa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003afc:	4ab3      	ldr	r2, [pc, #716]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003afe:	430b      	orrs	r3, r1
 8003b00:	6513      	str	r3, [r2, #80]	; 0x50
 8003b02:	e003      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b04:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b08:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003b0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b14:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003b18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003b22:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003b26:	460b      	mov	r3, r1
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	d039      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003b2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b32:	2b03      	cmp	r3, #3
 8003b34:	d81c      	bhi.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8003b36:	a201      	add	r2, pc, #4	; (adr r2, 8003b3c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b3c:	08003b79 	.word	0x08003b79
 8003b40:	08003b4d 	.word	0x08003b4d
 8003b44:	08003b5b 	.word	0x08003b5b
 8003b48:	08003b79 	.word	0x08003b79
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b4c:	4b9f      	ldr	r3, [pc, #636]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b50:	4a9e      	ldr	r2, [pc, #632]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003b58:	e00f      	b.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003b5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b5e:	3308      	adds	r3, #8
 8003b60:	2102      	movs	r1, #2
 8003b62:	4618      	mov	r0, r3
 8003b64:	f001 ff2e 	bl	80059c4 <RCCEx_PLL2_Config>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003b6e:	e004      	b.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003b76:	e000      	b.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003b78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b7a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d10a      	bne.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003b82:	4b92      	ldr	r3, [pc, #584]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b86:	f023 0103 	bic.w	r1, r3, #3
 8003b8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b90:	4a8e      	ldr	r2, [pc, #568]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b92:	430b      	orrs	r3, r1
 8003b94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b96:	e003      	b.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b98:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b9c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ba0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ba8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003bac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003bb6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003bba:	460b      	mov	r3, r1
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	f000 8099 	beq.w	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bc2:	4b83      	ldr	r3, [pc, #524]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a82      	ldr	r2, [pc, #520]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003bc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bcc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003bce:	f7fc ffc9 	bl	8000b64 <HAL_GetTick>
 8003bd2:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bd6:	e00b      	b.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bd8:	f7fc ffc4 	bl	8000b64 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	2b64      	cmp	r3, #100	; 0x64
 8003be6:	d903      	bls.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8003be8:	2303      	movs	r3, #3
 8003bea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003bee:	e005      	b.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bf0:	4b77      	ldr	r3, [pc, #476]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d0ed      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003bfc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d173      	bne.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003c04:	4b71      	ldr	r3, [pc, #452]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c06:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c0c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003c10:	4053      	eors	r3, r2
 8003c12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d015      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c1a:	4b6c      	ldr	r3, [pc, #432]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c22:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c26:	4b69      	ldr	r3, [pc, #420]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c2a:	4a68      	ldr	r2, [pc, #416]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c30:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c32:	4b66      	ldr	r3, [pc, #408]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c36:	4a65      	ldr	r2, [pc, #404]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c3c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003c3e:	4a63      	ldr	r2, [pc, #396]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c44:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003c46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c4a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003c4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c52:	d118      	bne.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c54:	f7fc ff86 	bl	8000b64 <HAL_GetTick>
 8003c58:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c5c:	e00d      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c5e:	f7fc ff81 	bl	8000b64 <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003c68:	1ad2      	subs	r2, r2, r3
 8003c6a:	f241 3388 	movw	r3, #5000	; 0x1388
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d903      	bls.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8003c78:	e005      	b.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c7a:	4b54      	ldr	r3, [pc, #336]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c7e:	f003 0302 	and.w	r3, r3, #2
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d0eb      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003c86:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d129      	bne.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c92:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003c96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c9e:	d10e      	bne.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003ca0:	4b4a      	ldr	r3, [pc, #296]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ca2:	691b      	ldr	r3, [r3, #16]
 8003ca4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003ca8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003cb0:	091a      	lsrs	r2, r3, #4
 8003cb2:	4b48      	ldr	r3, [pc, #288]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	4a45      	ldr	r2, [pc, #276]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003cb8:	430b      	orrs	r3, r1
 8003cba:	6113      	str	r3, [r2, #16]
 8003cbc:	e005      	b.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x852>
 8003cbe:	4b43      	ldr	r3, [pc, #268]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	4a42      	ldr	r2, [pc, #264]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003cc4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003cc8:	6113      	str	r3, [r2, #16]
 8003cca:	4b40      	ldr	r3, [pc, #256]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ccc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003cce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cd2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003cd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cda:	4a3c      	ldr	r2, [pc, #240]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003cdc:	430b      	orrs	r3, r1
 8003cde:	6713      	str	r3, [r2, #112]	; 0x70
 8003ce0:	e008      	b.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ce2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ce6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8003cea:	e003      	b.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cec:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003cf0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003cf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cfc:	f002 0301 	and.w	r3, r2, #1
 8003d00:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003d04:	2300      	movs	r3, #0
 8003d06:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003d0a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003d0e:	460b      	mov	r3, r1
 8003d10:	4313      	orrs	r3, r2
 8003d12:	f000 8090 	beq.w	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003d16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d1e:	2b28      	cmp	r3, #40	; 0x28
 8003d20:	d870      	bhi.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003d22:	a201      	add	r2, pc, #4	; (adr r2, 8003d28 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d28:	08003e0d 	.word	0x08003e0d
 8003d2c:	08003e05 	.word	0x08003e05
 8003d30:	08003e05 	.word	0x08003e05
 8003d34:	08003e05 	.word	0x08003e05
 8003d38:	08003e05 	.word	0x08003e05
 8003d3c:	08003e05 	.word	0x08003e05
 8003d40:	08003e05 	.word	0x08003e05
 8003d44:	08003e05 	.word	0x08003e05
 8003d48:	08003dd9 	.word	0x08003dd9
 8003d4c:	08003e05 	.word	0x08003e05
 8003d50:	08003e05 	.word	0x08003e05
 8003d54:	08003e05 	.word	0x08003e05
 8003d58:	08003e05 	.word	0x08003e05
 8003d5c:	08003e05 	.word	0x08003e05
 8003d60:	08003e05 	.word	0x08003e05
 8003d64:	08003e05 	.word	0x08003e05
 8003d68:	08003def 	.word	0x08003def
 8003d6c:	08003e05 	.word	0x08003e05
 8003d70:	08003e05 	.word	0x08003e05
 8003d74:	08003e05 	.word	0x08003e05
 8003d78:	08003e05 	.word	0x08003e05
 8003d7c:	08003e05 	.word	0x08003e05
 8003d80:	08003e05 	.word	0x08003e05
 8003d84:	08003e05 	.word	0x08003e05
 8003d88:	08003e0d 	.word	0x08003e0d
 8003d8c:	08003e05 	.word	0x08003e05
 8003d90:	08003e05 	.word	0x08003e05
 8003d94:	08003e05 	.word	0x08003e05
 8003d98:	08003e05 	.word	0x08003e05
 8003d9c:	08003e05 	.word	0x08003e05
 8003da0:	08003e05 	.word	0x08003e05
 8003da4:	08003e05 	.word	0x08003e05
 8003da8:	08003e0d 	.word	0x08003e0d
 8003dac:	08003e05 	.word	0x08003e05
 8003db0:	08003e05 	.word	0x08003e05
 8003db4:	08003e05 	.word	0x08003e05
 8003db8:	08003e05 	.word	0x08003e05
 8003dbc:	08003e05 	.word	0x08003e05
 8003dc0:	08003e05 	.word	0x08003e05
 8003dc4:	08003e05 	.word	0x08003e05
 8003dc8:	08003e0d 	.word	0x08003e0d
 8003dcc:	58024400 	.word	0x58024400
 8003dd0:	58024800 	.word	0x58024800
 8003dd4:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003dd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ddc:	3308      	adds	r3, #8
 8003dde:	2101      	movs	r1, #1
 8003de0:	4618      	mov	r0, r3
 8003de2:	f001 fdef 	bl	80059c4 <RCCEx_PLL2_Config>
 8003de6:	4603      	mov	r3, r0
 8003de8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003dec:	e00f      	b.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003dee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003df2:	3328      	adds	r3, #40	; 0x28
 8003df4:	2101      	movs	r1, #1
 8003df6:	4618      	mov	r0, r3
 8003df8:	f001 fe96 	bl	8005b28 <RCCEx_PLL3_Config>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003e02:	e004      	b.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003e0a:	e000      	b.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003e0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e0e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d10b      	bne.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003e16:	4bc0      	ldr	r3, [pc, #768]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e1a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003e1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e26:	4abc      	ldr	r2, [pc, #752]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003e28:	430b      	orrs	r3, r1
 8003e2a:	6553      	str	r3, [r2, #84]	; 0x54
 8003e2c:	e003      	b.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e2e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e32:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003e36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e3e:	f002 0302 	and.w	r3, r2, #2
 8003e42:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e46:	2300      	movs	r3, #0
 8003e48:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003e4c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003e50:	460b      	mov	r3, r1
 8003e52:	4313      	orrs	r3, r2
 8003e54:	d043      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003e56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e5e:	2b05      	cmp	r3, #5
 8003e60:	d824      	bhi.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8003e62:	a201      	add	r2, pc, #4	; (adr r2, 8003e68 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8003e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e68:	08003eb5 	.word	0x08003eb5
 8003e6c:	08003e81 	.word	0x08003e81
 8003e70:	08003e97 	.word	0x08003e97
 8003e74:	08003eb5 	.word	0x08003eb5
 8003e78:	08003eb5 	.word	0x08003eb5
 8003e7c:	08003eb5 	.word	0x08003eb5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e84:	3308      	adds	r3, #8
 8003e86:	2101      	movs	r1, #1
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f001 fd9b 	bl	80059c4 <RCCEx_PLL2_Config>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003e94:	e00f      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e9a:	3328      	adds	r3, #40	; 0x28
 8003e9c:	2101      	movs	r1, #1
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f001 fe42 	bl	8005b28 <RCCEx_PLL3_Config>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003eaa:	e004      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003eb2:	e000      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8003eb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003eb6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d10b      	bne.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003ebe:	4b96      	ldr	r3, [pc, #600]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ec2:	f023 0107 	bic.w	r1, r3, #7
 8003ec6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003eca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ece:	4a92      	ldr	r2, [pc, #584]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003ed0:	430b      	orrs	r3, r1
 8003ed2:	6553      	str	r3, [r2, #84]	; 0x54
 8003ed4:	e003      	b.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ed6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003eda:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ede:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee6:	f002 0304 	and.w	r3, r2, #4
 8003eea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003eee:	2300      	movs	r3, #0
 8003ef0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ef4:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003ef8:	460b      	mov	r3, r1
 8003efa:	4313      	orrs	r3, r2
 8003efc:	d043      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003efe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f06:	2b05      	cmp	r3, #5
 8003f08:	d824      	bhi.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8003f0a:	a201      	add	r2, pc, #4	; (adr r2, 8003f10 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8003f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f10:	08003f5d 	.word	0x08003f5d
 8003f14:	08003f29 	.word	0x08003f29
 8003f18:	08003f3f 	.word	0x08003f3f
 8003f1c:	08003f5d 	.word	0x08003f5d
 8003f20:	08003f5d 	.word	0x08003f5d
 8003f24:	08003f5d 	.word	0x08003f5d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f2c:	3308      	adds	r3, #8
 8003f2e:	2101      	movs	r1, #1
 8003f30:	4618      	mov	r0, r3
 8003f32:	f001 fd47 	bl	80059c4 <RCCEx_PLL2_Config>
 8003f36:	4603      	mov	r3, r0
 8003f38:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003f3c:	e00f      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f42:	3328      	adds	r3, #40	; 0x28
 8003f44:	2101      	movs	r1, #1
 8003f46:	4618      	mov	r0, r3
 8003f48:	f001 fdee 	bl	8005b28 <RCCEx_PLL3_Config>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003f52:	e004      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003f5a:	e000      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8003f5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f5e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d10b      	bne.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f66:	4b6c      	ldr	r3, [pc, #432]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f6a:	f023 0107 	bic.w	r1, r3, #7
 8003f6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f72:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f76:	4a68      	ldr	r2, [pc, #416]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003f78:	430b      	orrs	r3, r1
 8003f7a:	6593      	str	r3, [r2, #88]	; 0x58
 8003f7c:	e003      	b.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f7e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f82:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f8e:	f002 0320 	and.w	r3, r2, #32
 8003f92:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003f96:	2300      	movs	r3, #0
 8003f98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003f9c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	d055      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003fa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003faa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003fae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003fb2:	d033      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003fb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003fb8:	d82c      	bhi.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003fba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fbe:	d02f      	beq.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003fc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fc4:	d826      	bhi.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003fc6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003fca:	d02b      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003fcc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003fd0:	d820      	bhi.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003fd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fd6:	d012      	beq.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8003fd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fdc:	d81a      	bhi.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d022      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8003fe2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003fe6:	d115      	bne.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fe8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fec:	3308      	adds	r3, #8
 8003fee:	2100      	movs	r1, #0
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f001 fce7 	bl	80059c4 <RCCEx_PLL2_Config>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003ffc:	e015      	b.n	800402a <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003ffe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004002:	3328      	adds	r3, #40	; 0x28
 8004004:	2102      	movs	r1, #2
 8004006:	4618      	mov	r0, r3
 8004008:	f001 fd8e 	bl	8005b28 <RCCEx_PLL3_Config>
 800400c:	4603      	mov	r3, r0
 800400e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004012:	e00a      	b.n	800402a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800401a:	e006      	b.n	800402a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800401c:	bf00      	nop
 800401e:	e004      	b.n	800402a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004020:	bf00      	nop
 8004022:	e002      	b.n	800402a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004024:	bf00      	nop
 8004026:	e000      	b.n	800402a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004028:	bf00      	nop
    }

    if (ret == HAL_OK)
 800402a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800402e:	2b00      	cmp	r3, #0
 8004030:	d10b      	bne.n	800404a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004032:	4b39      	ldr	r3, [pc, #228]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004036:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800403a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800403e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004042:	4a35      	ldr	r2, [pc, #212]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004044:	430b      	orrs	r3, r1
 8004046:	6553      	str	r3, [r2, #84]	; 0x54
 8004048:	e003      	b.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800404a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800404e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004052:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800405a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800405e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004062:	2300      	movs	r3, #0
 8004064:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004068:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800406c:	460b      	mov	r3, r1
 800406e:	4313      	orrs	r3, r2
 8004070:	d058      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004072:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004076:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800407a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800407e:	d033      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8004080:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004084:	d82c      	bhi.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004086:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800408a:	d02f      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800408c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004090:	d826      	bhi.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004092:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004096:	d02b      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8004098:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800409c:	d820      	bhi.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800409e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040a2:	d012      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0xc52>
 80040a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040a8:	d81a      	bhi.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d022      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 80040ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040b2:	d115      	bne.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80040b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040b8:	3308      	adds	r3, #8
 80040ba:	2100      	movs	r1, #0
 80040bc:	4618      	mov	r0, r3
 80040be:	f001 fc81 	bl	80059c4 <RCCEx_PLL2_Config>
 80040c2:	4603      	mov	r3, r0
 80040c4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80040c8:	e015      	b.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80040ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040ce:	3328      	adds	r3, #40	; 0x28
 80040d0:	2102      	movs	r1, #2
 80040d2:	4618      	mov	r0, r3
 80040d4:	f001 fd28 	bl	8005b28 <RCCEx_PLL3_Config>
 80040d8:	4603      	mov	r3, r0
 80040da:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80040de:	e00a      	b.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80040e6:	e006      	b.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80040e8:	bf00      	nop
 80040ea:	e004      	b.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80040ec:	bf00      	nop
 80040ee:	e002      	b.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80040f0:	bf00      	nop
 80040f2:	e000      	b.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80040f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040f6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d10e      	bne.n	800411c <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80040fe:	4b06      	ldr	r3, [pc, #24]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004102:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8004106:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800410a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800410e:	4a02      	ldr	r2, [pc, #8]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004110:	430b      	orrs	r3, r1
 8004112:	6593      	str	r3, [r2, #88]	; 0x58
 8004114:	e006      	b.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8004116:	bf00      	nop
 8004118:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800411c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004120:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004124:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800412c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004130:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004134:	2300      	movs	r3, #0
 8004136:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800413a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800413e:	460b      	mov	r3, r1
 8004140:	4313      	orrs	r3, r2
 8004142:	d055      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004144:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004148:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800414c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004150:	d033      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8004152:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004156:	d82c      	bhi.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004158:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800415c:	d02f      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800415e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004162:	d826      	bhi.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004164:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004168:	d02b      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800416a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800416e:	d820      	bhi.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004170:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004174:	d012      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8004176:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800417a:	d81a      	bhi.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800417c:	2b00      	cmp	r3, #0
 800417e:	d022      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8004180:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004184:	d115      	bne.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004186:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800418a:	3308      	adds	r3, #8
 800418c:	2100      	movs	r1, #0
 800418e:	4618      	mov	r0, r3
 8004190:	f001 fc18 	bl	80059c4 <RCCEx_PLL2_Config>
 8004194:	4603      	mov	r3, r0
 8004196:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800419a:	e015      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800419c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041a0:	3328      	adds	r3, #40	; 0x28
 80041a2:	2102      	movs	r1, #2
 80041a4:	4618      	mov	r0, r3
 80041a6:	f001 fcbf 	bl	8005b28 <RCCEx_PLL3_Config>
 80041aa:	4603      	mov	r3, r0
 80041ac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80041b0:	e00a      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80041b8:	e006      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80041ba:	bf00      	nop
 80041bc:	e004      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80041be:	bf00      	nop
 80041c0:	e002      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80041c2:	bf00      	nop
 80041c4:	e000      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80041c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041c8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d10b      	bne.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80041d0:	4ba1      	ldr	r3, [pc, #644]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80041d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041d4:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80041d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041dc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80041e0:	4a9d      	ldr	r2, [pc, #628]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80041e2:	430b      	orrs	r3, r1
 80041e4:	6593      	str	r3, [r2, #88]	; 0x58
 80041e6:	e003      	b.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041e8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80041ec:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80041f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f8:	f002 0308 	and.w	r3, r2, #8
 80041fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004200:	2300      	movs	r3, #0
 8004202:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004206:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800420a:	460b      	mov	r3, r1
 800420c:	4313      	orrs	r3, r2
 800420e:	d01e      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004210:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004214:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004218:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800421c:	d10c      	bne.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800421e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004222:	3328      	adds	r3, #40	; 0x28
 8004224:	2102      	movs	r1, #2
 8004226:	4618      	mov	r0, r3
 8004228:	f001 fc7e 	bl	8005b28 <RCCEx_PLL3_Config>
 800422c:	4603      	mov	r3, r0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d002      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004238:	4b87      	ldr	r3, [pc, #540]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800423a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800423c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004240:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004244:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004248:	4a83      	ldr	r2, [pc, #524]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800424a:	430b      	orrs	r3, r1
 800424c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800424e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004256:	f002 0310 	and.w	r3, r2, #16
 800425a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800425e:	2300      	movs	r3, #0
 8004260:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004264:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004268:	460b      	mov	r3, r1
 800426a:	4313      	orrs	r3, r2
 800426c:	d01e      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800426e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004272:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004276:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800427a:	d10c      	bne.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800427c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004280:	3328      	adds	r3, #40	; 0x28
 8004282:	2102      	movs	r1, #2
 8004284:	4618      	mov	r0, r3
 8004286:	f001 fc4f 	bl	8005b28 <RCCEx_PLL3_Config>
 800428a:	4603      	mov	r3, r0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d002      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004296:	4b70      	ldr	r3, [pc, #448]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800429a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800429e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80042a6:	4a6c      	ldr	r2, [pc, #432]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80042a8:	430b      	orrs	r3, r1
 80042aa:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80042ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b4:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80042b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80042bc:	2300      	movs	r3, #0
 80042be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80042c2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80042c6:	460b      	mov	r3, r1
 80042c8:	4313      	orrs	r3, r2
 80042ca:	d03e      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80042cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042d0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80042d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80042d8:	d022      	beq.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 80042da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80042de:	d81b      	bhi.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d003      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0xe74>
 80042e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042e8:	d00b      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 80042ea:	e015      	b.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80042ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042f0:	3308      	adds	r3, #8
 80042f2:	2100      	movs	r1, #0
 80042f4:	4618      	mov	r0, r3
 80042f6:	f001 fb65 	bl	80059c4 <RCCEx_PLL2_Config>
 80042fa:	4603      	mov	r3, r0
 80042fc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004300:	e00f      	b.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004302:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004306:	3328      	adds	r3, #40	; 0x28
 8004308:	2102      	movs	r1, #2
 800430a:	4618      	mov	r0, r3
 800430c:	f001 fc0c 	bl	8005b28 <RCCEx_PLL3_Config>
 8004310:	4603      	mov	r3, r0
 8004312:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004316:	e004      	b.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800431e:	e000      	b.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8004320:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004322:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004326:	2b00      	cmp	r3, #0
 8004328:	d10b      	bne.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800432a:	4b4b      	ldr	r3, [pc, #300]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800432c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800432e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004332:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004336:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800433a:	4a47      	ldr	r2, [pc, #284]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800433c:	430b      	orrs	r3, r1
 800433e:	6593      	str	r3, [r2, #88]	; 0x58
 8004340:	e003      	b.n	800434a <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004342:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004346:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800434a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800434e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004352:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004356:	67bb      	str	r3, [r7, #120]	; 0x78
 8004358:	2300      	movs	r3, #0
 800435a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800435c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004360:	460b      	mov	r3, r1
 8004362:	4313      	orrs	r3, r2
 8004364:	d03b      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004366:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800436a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800436e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004372:	d01f      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8004374:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004378:	d818      	bhi.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800437a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800437e:	d003      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8004380:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004384:	d007      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8004386:	e011      	b.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004388:	4b33      	ldr	r3, [pc, #204]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800438a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800438c:	4a32      	ldr	r2, [pc, #200]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800438e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004392:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004394:	e00f      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004396:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800439a:	3328      	adds	r3, #40	; 0x28
 800439c:	2101      	movs	r1, #1
 800439e:	4618      	mov	r0, r3
 80043a0:	f001 fbc2 	bl	8005b28 <RCCEx_PLL3_Config>
 80043a4:	4603      	mov	r3, r0
 80043a6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 80043aa:	e004      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80043b2:	e000      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 80043b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043b6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d10b      	bne.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80043be:	4b26      	ldr	r3, [pc, #152]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80043c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043c2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80043c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ce:	4a22      	ldr	r2, [pc, #136]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80043d0:	430b      	orrs	r3, r1
 80043d2:	6553      	str	r3, [r2, #84]	; 0x54
 80043d4:	e003      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043d6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80043da:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80043de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e6:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80043ea:	673b      	str	r3, [r7, #112]	; 0x70
 80043ec:	2300      	movs	r3, #0
 80043ee:	677b      	str	r3, [r7, #116]	; 0x74
 80043f0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80043f4:	460b      	mov	r3, r1
 80043f6:	4313      	orrs	r3, r2
 80043f8:	d034      	beq.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80043fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004400:	2b00      	cmp	r3, #0
 8004402:	d003      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8004404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004408:	d007      	beq.n	800441a <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800440a:	e011      	b.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800440c:	4b12      	ldr	r3, [pc, #72]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800440e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004410:	4a11      	ldr	r2, [pc, #68]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004412:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004416:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004418:	e00e      	b.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800441a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800441e:	3308      	adds	r3, #8
 8004420:	2102      	movs	r1, #2
 8004422:	4618      	mov	r0, r3
 8004424:	f001 face 	bl	80059c4 <RCCEx_PLL2_Config>
 8004428:	4603      	mov	r3, r0
 800442a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800442e:	e003      	b.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004436:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004438:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800443c:	2b00      	cmp	r3, #0
 800443e:	d10d      	bne.n	800445c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004440:	4b05      	ldr	r3, [pc, #20]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004442:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004444:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004448:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800444c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800444e:	4a02      	ldr	r2, [pc, #8]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004450:	430b      	orrs	r3, r1
 8004452:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004454:	e006      	b.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8004456:	bf00      	nop
 8004458:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800445c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004460:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004464:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800446c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004470:	66bb      	str	r3, [r7, #104]	; 0x68
 8004472:	2300      	movs	r3, #0
 8004474:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004476:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800447a:	460b      	mov	r3, r1
 800447c:	4313      	orrs	r3, r2
 800447e:	d00c      	beq.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004480:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004484:	3328      	adds	r3, #40	; 0x28
 8004486:	2102      	movs	r1, #2
 8004488:	4618      	mov	r0, r3
 800448a:	f001 fb4d 	bl	8005b28 <RCCEx_PLL3_Config>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d002      	beq.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800449a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800449e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80044a6:	663b      	str	r3, [r7, #96]	; 0x60
 80044a8:	2300      	movs	r3, #0
 80044aa:	667b      	str	r3, [r7, #100]	; 0x64
 80044ac:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80044b0:	460b      	mov	r3, r1
 80044b2:	4313      	orrs	r3, r2
 80044b4:	d038      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 80044b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044c2:	d018      	beq.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 80044c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044c8:	d811      	bhi.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80044ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044ce:	d014      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x1082>
 80044d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044d4:	d80b      	bhi.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d011      	beq.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x1086>
 80044da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044de:	d106      	bne.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044e0:	4bc3      	ldr	r3, [pc, #780]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80044e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e4:	4ac2      	ldr	r2, [pc, #776]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80044e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80044ec:	e008      	b.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80044f4:	e004      	b.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80044f6:	bf00      	nop
 80044f8:	e002      	b.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80044fa:	bf00      	nop
 80044fc:	e000      	b.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80044fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004500:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004504:	2b00      	cmp	r3, #0
 8004506:	d10b      	bne.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004508:	4bb9      	ldr	r3, [pc, #740]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800450a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800450c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004510:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004518:	4ab5      	ldr	r2, [pc, #724]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800451a:	430b      	orrs	r3, r1
 800451c:	6553      	str	r3, [r2, #84]	; 0x54
 800451e:	e003      	b.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004520:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004524:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004528:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800452c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004530:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004534:	65bb      	str	r3, [r7, #88]	; 0x58
 8004536:	2300      	movs	r3, #0
 8004538:	65fb      	str	r3, [r7, #92]	; 0x5c
 800453a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800453e:	460b      	mov	r3, r1
 8004540:	4313      	orrs	r3, r2
 8004542:	d009      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004544:	4baa      	ldr	r3, [pc, #680]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004546:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004548:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800454c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004550:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004552:	4aa7      	ldr	r2, [pc, #668]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004554:	430b      	orrs	r3, r1
 8004556:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004558:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800455c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004560:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004564:	653b      	str	r3, [r7, #80]	; 0x50
 8004566:	2300      	movs	r3, #0
 8004568:	657b      	str	r3, [r7, #84]	; 0x54
 800456a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800456e:	460b      	mov	r3, r1
 8004570:	4313      	orrs	r3, r2
 8004572:	d009      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004574:	4b9e      	ldr	r3, [pc, #632]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004576:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004578:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800457c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004582:	4a9b      	ldr	r2, [pc, #620]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004584:	430b      	orrs	r3, r1
 8004586:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004588:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800458c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004590:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004594:	64bb      	str	r3, [r7, #72]	; 0x48
 8004596:	2300      	movs	r3, #0
 8004598:	64fb      	str	r3, [r7, #76]	; 0x4c
 800459a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800459e:	460b      	mov	r3, r1
 80045a0:	4313      	orrs	r3, r2
 80045a2:	d009      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80045a4:	4b92      	ldr	r3, [pc, #584]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80045a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045a8:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 80045ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045b2:	4a8f      	ldr	r2, [pc, #572]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80045b4:	430b      	orrs	r3, r1
 80045b6:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80045b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c0:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80045c4:	643b      	str	r3, [r7, #64]	; 0x40
 80045c6:	2300      	movs	r3, #0
 80045c8:	647b      	str	r3, [r7, #68]	; 0x44
 80045ca:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80045ce:	460b      	mov	r3, r1
 80045d0:	4313      	orrs	r3, r2
 80045d2:	d00e      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80045d4:	4b86      	ldr	r3, [pc, #536]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	4a85      	ldr	r2, [pc, #532]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80045da:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80045de:	6113      	str	r3, [r2, #16]
 80045e0:	4b83      	ldr	r3, [pc, #524]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80045e2:	6919      	ldr	r1, [r3, #16]
 80045e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045e8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80045ec:	4a80      	ldr	r2, [pc, #512]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80045ee:	430b      	orrs	r3, r1
 80045f0:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80045f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045fa:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80045fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8004600:	2300      	movs	r3, #0
 8004602:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004604:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004608:	460b      	mov	r3, r1
 800460a:	4313      	orrs	r3, r2
 800460c:	d009      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800460e:	4b78      	ldr	r3, [pc, #480]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004612:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004616:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800461a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800461c:	4a74      	ldr	r2, [pc, #464]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800461e:	430b      	orrs	r3, r1
 8004620:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004622:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800462a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800462e:	633b      	str	r3, [r7, #48]	; 0x30
 8004630:	2300      	movs	r3, #0
 8004632:	637b      	str	r3, [r7, #52]	; 0x34
 8004634:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004638:	460b      	mov	r3, r1
 800463a:	4313      	orrs	r3, r2
 800463c:	d00a      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800463e:	4b6c      	ldr	r3, [pc, #432]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004642:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004646:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800464a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800464e:	4a68      	ldr	r2, [pc, #416]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004650:	430b      	orrs	r3, r1
 8004652:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004654:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800465c:	2100      	movs	r1, #0
 800465e:	62b9      	str	r1, [r7, #40]	; 0x28
 8004660:	f003 0301 	and.w	r3, r3, #1
 8004664:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004666:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800466a:	460b      	mov	r3, r1
 800466c:	4313      	orrs	r3, r2
 800466e:	d011      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004670:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004674:	3308      	adds	r3, #8
 8004676:	2100      	movs	r1, #0
 8004678:	4618      	mov	r0, r3
 800467a:	f001 f9a3 	bl	80059c4 <RCCEx_PLL2_Config>
 800467e:	4603      	mov	r3, r0
 8004680:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004684:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004688:	2b00      	cmp	r3, #0
 800468a:	d003      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800468c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004690:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004694:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800469c:	2100      	movs	r1, #0
 800469e:	6239      	str	r1, [r7, #32]
 80046a0:	f003 0302 	and.w	r3, r3, #2
 80046a4:	627b      	str	r3, [r7, #36]	; 0x24
 80046a6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80046aa:	460b      	mov	r3, r1
 80046ac:	4313      	orrs	r3, r2
 80046ae:	d011      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80046b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046b4:	3308      	adds	r3, #8
 80046b6:	2101      	movs	r1, #1
 80046b8:	4618      	mov	r0, r3
 80046ba:	f001 f983 	bl	80059c4 <RCCEx_PLL2_Config>
 80046be:	4603      	mov	r3, r0
 80046c0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80046c4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d003      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046cc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80046d0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80046d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046dc:	2100      	movs	r1, #0
 80046de:	61b9      	str	r1, [r7, #24]
 80046e0:	f003 0304 	and.w	r3, r3, #4
 80046e4:	61fb      	str	r3, [r7, #28]
 80046e6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80046ea:	460b      	mov	r3, r1
 80046ec:	4313      	orrs	r3, r2
 80046ee:	d011      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80046f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046f4:	3308      	adds	r3, #8
 80046f6:	2102      	movs	r1, #2
 80046f8:	4618      	mov	r0, r3
 80046fa:	f001 f963 	bl	80059c4 <RCCEx_PLL2_Config>
 80046fe:	4603      	mov	r3, r0
 8004700:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004704:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004708:	2b00      	cmp	r3, #0
 800470a:	d003      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800470c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004710:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004714:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800471c:	2100      	movs	r1, #0
 800471e:	6139      	str	r1, [r7, #16]
 8004720:	f003 0308 	and.w	r3, r3, #8
 8004724:	617b      	str	r3, [r7, #20]
 8004726:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800472a:	460b      	mov	r3, r1
 800472c:	4313      	orrs	r3, r2
 800472e:	d011      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004730:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004734:	3328      	adds	r3, #40	; 0x28
 8004736:	2100      	movs	r1, #0
 8004738:	4618      	mov	r0, r3
 800473a:	f001 f9f5 	bl	8005b28 <RCCEx_PLL3_Config>
 800473e:	4603      	mov	r3, r0
 8004740:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8004744:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004748:	2b00      	cmp	r3, #0
 800474a:	d003      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800474c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004750:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004754:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800475c:	2100      	movs	r1, #0
 800475e:	60b9      	str	r1, [r7, #8]
 8004760:	f003 0310 	and.w	r3, r3, #16
 8004764:	60fb      	str	r3, [r7, #12]
 8004766:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800476a:	460b      	mov	r3, r1
 800476c:	4313      	orrs	r3, r2
 800476e:	d011      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004770:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004774:	3328      	adds	r3, #40	; 0x28
 8004776:	2101      	movs	r1, #1
 8004778:	4618      	mov	r0, r3
 800477a:	f001 f9d5 	bl	8005b28 <RCCEx_PLL3_Config>
 800477e:	4603      	mov	r3, r0
 8004780:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004784:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004788:	2b00      	cmp	r3, #0
 800478a:	d003      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800478c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004790:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004794:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800479c:	2100      	movs	r1, #0
 800479e:	6039      	str	r1, [r7, #0]
 80047a0:	f003 0320 	and.w	r3, r3, #32
 80047a4:	607b      	str	r3, [r7, #4]
 80047a6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80047aa:	460b      	mov	r3, r1
 80047ac:	4313      	orrs	r3, r2
 80047ae:	d011      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80047b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047b4:	3328      	adds	r3, #40	; 0x28
 80047b6:	2102      	movs	r1, #2
 80047b8:	4618      	mov	r0, r3
 80047ba:	f001 f9b5 	bl	8005b28 <RCCEx_PLL3_Config>
 80047be:	4603      	mov	r3, r0
 80047c0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80047c4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d003      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047cc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80047d0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 80047d4:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d101      	bne.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 80047dc:	2300      	movs	r3, #0
 80047de:	e000      	b.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80047e8:	46bd      	mov	sp, r7
 80047ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047ee:	bf00      	nop
 80047f0:	58024400 	.word	0x58024400

080047f4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b090      	sub	sp, #64	; 0x40
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80047fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004802:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8004806:	430b      	orrs	r3, r1
 8004808:	f040 8094 	bne.w	8004934 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800480c:	4b97      	ldr	r3, [pc, #604]	; (8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800480e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004810:	f003 0307 	and.w	r3, r3, #7
 8004814:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8004816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004818:	2b04      	cmp	r3, #4
 800481a:	f200 8087 	bhi.w	800492c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800481e:	a201      	add	r2, pc, #4	; (adr r2, 8004824 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8004820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004824:	08004839 	.word	0x08004839
 8004828:	08004861 	.word	0x08004861
 800482c:	08004889 	.word	0x08004889
 8004830:	08004925 	.word	0x08004925
 8004834:	080048b1 	.word	0x080048b1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004838:	4b8c      	ldr	r3, [pc, #560]	; (8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004840:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004844:	d108      	bne.n	8004858 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004846:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800484a:	4618      	mov	r0, r3
 800484c:	f000 ff68 	bl	8005720 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004852:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004854:	f000 bc97 	b.w	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004858:	2300      	movs	r3, #0
 800485a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800485c:	f000 bc93 	b.w	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004860:	4b82      	ldr	r3, [pc, #520]	; (8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004868:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800486c:	d108      	bne.n	8004880 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800486e:	f107 0318 	add.w	r3, r7, #24
 8004872:	4618      	mov	r0, r3
 8004874:	f000 fcac 	bl	80051d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004878:	69bb      	ldr	r3, [r7, #24]
 800487a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800487c:	f000 bc83 	b.w	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004880:	2300      	movs	r3, #0
 8004882:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004884:	f000 bc7f 	b.w	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004888:	4b78      	ldr	r3, [pc, #480]	; (8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004890:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004894:	d108      	bne.n	80048a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004896:	f107 030c 	add.w	r3, r7, #12
 800489a:	4618      	mov	r0, r3
 800489c:	f000 fdec 	bl	8005478 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80048a4:	f000 bc6f 	b.w	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80048a8:	2300      	movs	r3, #0
 80048aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80048ac:	f000 bc6b 	b.w	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80048b0:	4b6e      	ldr	r3, [pc, #440]	; (8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80048b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80048b8:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80048ba:	4b6c      	ldr	r3, [pc, #432]	; (8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0304 	and.w	r3, r3, #4
 80048c2:	2b04      	cmp	r3, #4
 80048c4:	d10c      	bne.n	80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80048c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d109      	bne.n	80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80048cc:	4b67      	ldr	r3, [pc, #412]	; (8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	08db      	lsrs	r3, r3, #3
 80048d2:	f003 0303 	and.w	r3, r3, #3
 80048d6:	4a66      	ldr	r2, [pc, #408]	; (8004a70 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80048d8:	fa22 f303 	lsr.w	r3, r2, r3
 80048dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048de:	e01f      	b.n	8004920 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80048e0:	4b62      	ldr	r3, [pc, #392]	; (8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048ec:	d106      	bne.n	80048fc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80048ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048f4:	d102      	bne.n	80048fc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80048f6:	4b5f      	ldr	r3, [pc, #380]	; (8004a74 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80048f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048fa:	e011      	b.n	8004920 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80048fc:	4b5b      	ldr	r3, [pc, #364]	; (8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004904:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004908:	d106      	bne.n	8004918 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800490a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800490c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004910:	d102      	bne.n	8004918 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004912:	4b59      	ldr	r3, [pc, #356]	; (8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004914:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004916:	e003      	b.n	8004920 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004918:	2300      	movs	r3, #0
 800491a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800491c:	f000 bc33 	b.w	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8004920:	f000 bc31 	b.w	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004924:	4b55      	ldr	r3, [pc, #340]	; (8004a7c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8004926:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004928:	f000 bc2d 	b.w	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 800492c:	2300      	movs	r3, #0
 800492e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004930:	f000 bc29 	b.w	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8004934:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004938:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800493c:	430b      	orrs	r3, r1
 800493e:	f040 809f 	bne.w	8004a80 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 8004942:	4b4a      	ldr	r3, [pc, #296]	; (8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004944:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004946:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800494a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800494c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800494e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004952:	d04d      	beq.n	80049f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8004954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004956:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800495a:	f200 8084 	bhi.w	8004a66 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800495e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004960:	2bc0      	cmp	r3, #192	; 0xc0
 8004962:	d07d      	beq.n	8004a60 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 8004964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004966:	2bc0      	cmp	r3, #192	; 0xc0
 8004968:	d87d      	bhi.n	8004a66 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800496a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800496c:	2b80      	cmp	r3, #128	; 0x80
 800496e:	d02d      	beq.n	80049cc <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8004970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004972:	2b80      	cmp	r3, #128	; 0x80
 8004974:	d877      	bhi.n	8004a66 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8004976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004978:	2b00      	cmp	r3, #0
 800497a:	d003      	beq.n	8004984 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 800497c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800497e:	2b40      	cmp	r3, #64	; 0x40
 8004980:	d012      	beq.n	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8004982:	e070      	b.n	8004a66 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004984:	4b39      	ldr	r3, [pc, #228]	; (8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800498c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004990:	d107      	bne.n	80049a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004992:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004996:	4618      	mov	r0, r3
 8004998:	f000 fec2 	bl	8005720 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800499c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800499e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80049a0:	e3f1      	b.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80049a2:	2300      	movs	r3, #0
 80049a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80049a6:	e3ee      	b.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80049a8:	4b30      	ldr	r3, [pc, #192]	; (8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049b4:	d107      	bne.n	80049c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80049b6:	f107 0318 	add.w	r3, r7, #24
 80049ba:	4618      	mov	r0, r3
 80049bc:	f000 fc08 	bl	80051d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80049c0:	69bb      	ldr	r3, [r7, #24]
 80049c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80049c4:	e3df      	b.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80049c6:	2300      	movs	r3, #0
 80049c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80049ca:	e3dc      	b.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80049cc:	4b27      	ldr	r3, [pc, #156]	; (8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049d8:	d107      	bne.n	80049ea <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80049da:	f107 030c 	add.w	r3, r7, #12
 80049de:	4618      	mov	r0, r3
 80049e0:	f000 fd4a 	bl	8005478 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80049e8:	e3cd      	b.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80049ea:	2300      	movs	r3, #0
 80049ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80049ee:	e3ca      	b.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80049f0:	4b1e      	ldr	r3, [pc, #120]	; (8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80049f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80049f8:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80049fa:	4b1c      	ldr	r3, [pc, #112]	; (8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0304 	and.w	r3, r3, #4
 8004a02:	2b04      	cmp	r3, #4
 8004a04:	d10c      	bne.n	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8004a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d109      	bne.n	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004a0c:	4b17      	ldr	r3, [pc, #92]	; (8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	08db      	lsrs	r3, r3, #3
 8004a12:	f003 0303 	and.w	r3, r3, #3
 8004a16:	4a16      	ldr	r2, [pc, #88]	; (8004a70 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8004a18:	fa22 f303 	lsr.w	r3, r2, r3
 8004a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a1e:	e01e      	b.n	8004a5e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004a20:	4b12      	ldr	r3, [pc, #72]	; (8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a2c:	d106      	bne.n	8004a3c <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 8004a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a34:	d102      	bne.n	8004a3c <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004a36:	4b0f      	ldr	r3, [pc, #60]	; (8004a74 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8004a38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a3a:	e010      	b.n	8004a5e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004a3c:	4b0b      	ldr	r3, [pc, #44]	; (8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a48:	d106      	bne.n	8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8004a4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a50:	d102      	bne.n	8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004a52:	4b09      	ldr	r3, [pc, #36]	; (8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004a54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a56:	e002      	b.n	8004a5e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8004a5c:	e393      	b.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8004a5e:	e392      	b.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004a60:	4b06      	ldr	r3, [pc, #24]	; (8004a7c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8004a62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004a64:	e38f      	b.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8004a66:	2300      	movs	r3, #0
 8004a68:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004a6a:	e38c      	b.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8004a6c:	58024400 	.word	0x58024400
 8004a70:	03d09000 	.word	0x03d09000
 8004a74:	003d0900 	.word	0x003d0900
 8004a78:	007a1200 	.word	0x007a1200
 8004a7c:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8004a80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a84:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8004a88:	430b      	orrs	r3, r1
 8004a8a:	f040 809c 	bne.w	8004bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 8004a8e:	4b9e      	ldr	r3, [pc, #632]	; (8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004a90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a92:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8004a96:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8004a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a9e:	d054      	beq.n	8004b4a <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 8004aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004aa6:	f200 808b 	bhi.w	8004bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8004aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aac:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004ab0:	f000 8083 	beq.w	8004bba <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 8004ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004aba:	f200 8081 	bhi.w	8004bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8004abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ac4:	d02f      	beq.n	8004b26 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8004ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004acc:	d878      	bhi.n	8004bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8004ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d004      	beq.n	8004ade <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8004ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ada:	d012      	beq.n	8004b02 <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 8004adc:	e070      	b.n	8004bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004ade:	4b8a      	ldr	r3, [pc, #552]	; (8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ae6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004aea:	d107      	bne.n	8004afc <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004aec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004af0:	4618      	mov	r0, r3
 8004af2:	f000 fe15 	bl	8005720 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004afa:	e344      	b.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004afc:	2300      	movs	r3, #0
 8004afe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004b00:	e341      	b.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004b02:	4b81      	ldr	r3, [pc, #516]	; (8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b0e:	d107      	bne.n	8004b20 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b10:	f107 0318 	add.w	r3, r7, #24
 8004b14:	4618      	mov	r0, r3
 8004b16:	f000 fb5b 	bl	80051d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004b1a:	69bb      	ldr	r3, [r7, #24]
 8004b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004b1e:	e332      	b.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004b20:	2300      	movs	r3, #0
 8004b22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004b24:	e32f      	b.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004b26:	4b78      	ldr	r3, [pc, #480]	; (8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b32:	d107      	bne.n	8004b44 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004b34:	f107 030c 	add.w	r3, r7, #12
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f000 fc9d 	bl	8005478 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004b42:	e320      	b.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004b44:	2300      	movs	r3, #0
 8004b46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004b48:	e31d      	b.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004b4a:	4b6f      	ldr	r3, [pc, #444]	; (8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b4e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004b52:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004b54:	4b6c      	ldr	r3, [pc, #432]	; (8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0304 	and.w	r3, r3, #4
 8004b5c:	2b04      	cmp	r3, #4
 8004b5e:	d10c      	bne.n	8004b7a <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8004b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d109      	bne.n	8004b7a <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004b66:	4b68      	ldr	r3, [pc, #416]	; (8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	08db      	lsrs	r3, r3, #3
 8004b6c:	f003 0303 	and.w	r3, r3, #3
 8004b70:	4a66      	ldr	r2, [pc, #408]	; (8004d0c <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8004b72:	fa22 f303 	lsr.w	r3, r2, r3
 8004b76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b78:	e01e      	b.n	8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004b7a:	4b63      	ldr	r3, [pc, #396]	; (8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b86:	d106      	bne.n	8004b96 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8004b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b8e:	d102      	bne.n	8004b96 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004b90:	4b5f      	ldr	r3, [pc, #380]	; (8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8004b92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b94:	e010      	b.n	8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004b96:	4b5c      	ldr	r3, [pc, #368]	; (8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ba2:	d106      	bne.n	8004bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8004ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ba6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004baa:	d102      	bne.n	8004bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004bac:	4b59      	ldr	r3, [pc, #356]	; (8004d14 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8004bae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bb0:	e002      	b.n	8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        break;
 8004bb6:	e2e6      	b.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8004bb8:	e2e5      	b.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004bba:	4b57      	ldr	r3, [pc, #348]	; (8004d18 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8004bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004bbe:	e2e2      	b.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004bc4:	e2df      	b.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8004bc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004bca:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8004bce:	430b      	orrs	r3, r1
 8004bd0:	f040 80a7 	bne.w	8004d22 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8004bd4:	4b4c      	ldr	r3, [pc, #304]	; (8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004bd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bd8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8004bdc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8004bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004be0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004be4:	d055      	beq.n	8004c92 <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 8004be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004be8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bec:	f200 8096 	bhi.w	8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8004bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bf2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004bf6:	f000 8084 	beq.w	8004d02 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 8004bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bfc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004c00:	f200 808c 	bhi.w	8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8004c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c0a:	d030      	beq.n	8004c6e <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 8004c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c12:	f200 8083 	bhi.w	8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8004c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d004      	beq.n	8004c26 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8004c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c22:	d012      	beq.n	8004c4a <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 8004c24:	e07a      	b.n	8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004c26:	4b38      	ldr	r3, [pc, #224]	; (8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c32:	d107      	bne.n	8004c44 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004c34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f000 fd71 	bl	8005720 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c40:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004c42:	e2a0      	b.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004c44:	2300      	movs	r3, #0
 8004c46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c48:	e29d      	b.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004c4a:	4b2f      	ldr	r3, [pc, #188]	; (8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c56:	d107      	bne.n	8004c68 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c58:	f107 0318 	add.w	r3, r7, #24
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f000 fab7 	bl	80051d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004c62:	69bb      	ldr	r3, [r7, #24]
 8004c64:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004c66:	e28e      	b.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c6c:	e28b      	b.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004c6e:	4b26      	ldr	r3, [pc, #152]	; (8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c7a:	d107      	bne.n	8004c8c <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004c7c:	f107 030c 	add.w	r3, r7, #12
 8004c80:	4618      	mov	r0, r3
 8004c82:	f000 fbf9 	bl	8005478 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004c8a:	e27c      	b.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c90:	e279      	b.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004c92:	4b1d      	ldr	r3, [pc, #116]	; (8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c96:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004c9a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004c9c:	4b1a      	ldr	r3, [pc, #104]	; (8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0304 	and.w	r3, r3, #4
 8004ca4:	2b04      	cmp	r3, #4
 8004ca6:	d10c      	bne.n	8004cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 8004ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d109      	bne.n	8004cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004cae:	4b16      	ldr	r3, [pc, #88]	; (8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	08db      	lsrs	r3, r3, #3
 8004cb4:	f003 0303 	and.w	r3, r3, #3
 8004cb8:	4a14      	ldr	r2, [pc, #80]	; (8004d0c <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8004cba:	fa22 f303 	lsr.w	r3, r2, r3
 8004cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cc0:	e01e      	b.n	8004d00 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004cc2:	4b11      	ldr	r3, [pc, #68]	; (8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cce:	d106      	bne.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8004cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004cd6:	d102      	bne.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004cd8:	4b0d      	ldr	r3, [pc, #52]	; (8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8004cda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cdc:	e010      	b.n	8004d00 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004cde:	4b0a      	ldr	r3, [pc, #40]	; (8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ce6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004cea:	d106      	bne.n	8004cfa <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8004cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cf2:	d102      	bne.n	8004cfa <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004cf4:	4b07      	ldr	r3, [pc, #28]	; (8004d14 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8004cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cf8:	e002      	b.n	8004d00 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8004cfe:	e242      	b.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8004d00:	e241      	b.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004d02:	4b05      	ldr	r3, [pc, #20]	; (8004d18 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8004d04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004d06:	e23e      	b.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8004d08:	58024400 	.word	0x58024400
 8004d0c:	03d09000 	.word	0x03d09000
 8004d10:	003d0900 	.word	0x003d0900
 8004d14:	007a1200 	.word	0x007a1200
 8004d18:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004d20:	e231      	b.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8004d22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d26:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8004d2a:	430b      	orrs	r3, r1
 8004d2c:	f040 8085 	bne.w	8004e3a <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8004d30:	4b9c      	ldr	r3, [pc, #624]	; (8004fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004d32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d34:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8004d38:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8004d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d40:	d06b      	beq.n	8004e1a <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8004d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d48:	d874      	bhi.n	8004e34 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8004d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d4c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d50:	d056      	beq.n	8004e00 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 8004d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d54:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d58:	d86c      	bhi.n	8004e34 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8004d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d5c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d60:	d03b      	beq.n	8004dda <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 8004d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d64:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d68:	d864      	bhi.n	8004e34 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8004d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d70:	d021      	beq.n	8004db6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 8004d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d78:	d85c      	bhi.n	8004e34 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8004d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d004      	beq.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 8004d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d86:	d004      	beq.n	8004d92 <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 8004d88:	e054      	b.n	8004e34 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8004d8a:	f7fe fb5f 	bl	800344c <HAL_RCC_GetPCLK1Freq>
 8004d8e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004d90:	e1f9      	b.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004d92:	4b84      	ldr	r3, [pc, #528]	; (8004fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d9e:	d107      	bne.n	8004db0 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004da0:	f107 0318 	add.w	r3, r7, #24
 8004da4:	4618      	mov	r0, r3
 8004da6:	f000 fa13 	bl	80051d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004dae:	e1ea      	b.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004db0:	2300      	movs	r3, #0
 8004db2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004db4:	e1e7      	b.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004db6:	4b7b      	ldr	r3, [pc, #492]	; (8004fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004dbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004dc2:	d107      	bne.n	8004dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004dc4:	f107 030c 	add.w	r3, r7, #12
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f000 fb55 	bl	8005478 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004dd2:	e1d8      	b.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004dd8:	e1d5      	b.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004dda:	4b72      	ldr	r3, [pc, #456]	; (8004fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0304 	and.w	r3, r3, #4
 8004de2:	2b04      	cmp	r3, #4
 8004de4:	d109      	bne.n	8004dfa <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004de6:	4b6f      	ldr	r3, [pc, #444]	; (8004fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	08db      	lsrs	r3, r3, #3
 8004dec:	f003 0303 	and.w	r3, r3, #3
 8004df0:	4a6d      	ldr	r2, [pc, #436]	; (8004fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8004df2:	fa22 f303 	lsr.w	r3, r2, r3
 8004df6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004df8:	e1c5      	b.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004dfe:	e1c2      	b.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8004e00:	4b68      	ldr	r3, [pc, #416]	; (8004fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e0c:	d102      	bne.n	8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 8004e0e:	4b67      	ldr	r3, [pc, #412]	; (8004fac <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8004e10:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004e12:	e1b8      	b.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004e14:	2300      	movs	r3, #0
 8004e16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004e18:	e1b5      	b.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004e1a:	4b62      	ldr	r3, [pc, #392]	; (8004fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e26:	d102      	bne.n	8004e2e <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 8004e28:	4b61      	ldr	r3, [pc, #388]	; (8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8004e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004e2c:	e1ab      	b.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004e32:	e1a8      	b.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8004e34:	2300      	movs	r3, #0
 8004e36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004e38:	e1a5      	b.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8004e3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e3e:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8004e42:	430b      	orrs	r3, r1
 8004e44:	d173      	bne.n	8004f2e <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8004e46:	4b57      	ldr	r3, [pc, #348]	; (8004fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e4a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e4e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8004e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e56:	d02f      	beq.n	8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 8004e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e5e:	d863      	bhi.n	8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8004e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d004      	beq.n	8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8004e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e6c:	d012      	beq.n	8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 8004e6e:	e05b      	b.n	8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004e70:	4b4c      	ldr	r3, [pc, #304]	; (8004fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e7c:	d107      	bne.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e7e:	f107 0318 	add.w	r3, r7, #24
 8004e82:	4618      	mov	r0, r3
 8004e84:	f000 f9a4 	bl	80051d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004e8c:	e17b      	b.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004e92:	e178      	b.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004e94:	4b43      	ldr	r3, [pc, #268]	; (8004fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ea0:	d107      	bne.n	8004eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004ea2:	f107 030c 	add.w	r3, r7, #12
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f000 fae6 	bl	8005478 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004eb0:	e169      	b.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004eb6:	e166      	b.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004eb8:	4b3a      	ldr	r3, [pc, #232]	; (8004fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004eba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ebc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004ec0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004ec2:	4b38      	ldr	r3, [pc, #224]	; (8004fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 0304 	and.w	r3, r3, #4
 8004eca:	2b04      	cmp	r3, #4
 8004ecc:	d10c      	bne.n	8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 8004ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d109      	bne.n	8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004ed4:	4b33      	ldr	r3, [pc, #204]	; (8004fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	08db      	lsrs	r3, r3, #3
 8004eda:	f003 0303 	and.w	r3, r3, #3
 8004ede:	4a32      	ldr	r2, [pc, #200]	; (8004fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8004ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ee6:	e01e      	b.n	8004f26 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004ee8:	4b2e      	ldr	r3, [pc, #184]	; (8004fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ef0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ef4:	d106      	bne.n	8004f04 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 8004ef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ef8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004efc:	d102      	bne.n	8004f04 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004efe:	4b2b      	ldr	r3, [pc, #172]	; (8004fac <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8004f00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f02:	e010      	b.n	8004f26 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004f04:	4b27      	ldr	r3, [pc, #156]	; (8004fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f10:	d106      	bne.n	8004f20 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8004f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f18:	d102      	bne.n	8004f20 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004f1a:	4b25      	ldr	r3, [pc, #148]	; (8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8004f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f1e:	e002      	b.n	8004f26 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004f20:	2300      	movs	r3, #0
 8004f22:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8004f24:	e12f      	b.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8004f26:	e12e      	b.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004f2c:	e12b      	b.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004f2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f32:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8004f36:	430b      	orrs	r3, r1
 8004f38:	d13c      	bne.n	8004fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8004f3a:	4b1a      	ldr	r3, [pc, #104]	; (8004fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f42:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8004f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d004      	beq.n	8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8004f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f50:	d012      	beq.n	8004f78 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 8004f52:	e023      	b.n	8004f9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004f54:	4b13      	ldr	r3, [pc, #76]	; (8004fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f60:	d107      	bne.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004f62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f66:	4618      	mov	r0, r3
 8004f68:	f000 fbda 	bl	8005720 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004f70:	e109      	b.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004f72:	2300      	movs	r3, #0
 8004f74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004f76:	e106      	b.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004f78:	4b0a      	ldr	r3, [pc, #40]	; (8004fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f84:	d107      	bne.n	8004f96 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f86:	f107 0318 	add.w	r3, r7, #24
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f000 f920 	bl	80051d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004f90:	6a3b      	ldr	r3, [r7, #32]
 8004f92:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004f94:	e0f7      	b.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004f96:	2300      	movs	r3, #0
 8004f98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004f9a:	e0f4      	b.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004fa0:	e0f1      	b.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8004fa2:	bf00      	nop
 8004fa4:	58024400 	.word	0x58024400
 8004fa8:	03d09000 	.word	0x03d09000
 8004fac:	003d0900 	.word	0x003d0900
 8004fb0:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8004fb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fb8:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8004fbc:	430b      	orrs	r3, r1
 8004fbe:	f040 8091 	bne.w	80050e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8004fc2:	4b73      	ldr	r3, [pc, #460]	; (8005190 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8004fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fc6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8004fca:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8004fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fce:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004fd2:	f000 8081 	beq.w	80050d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8004fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fd8:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004fdc:	d87f      	bhi.n	80050de <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8004fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fe0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004fe4:	d06b      	beq.n	80050be <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8004fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fe8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004fec:	d877      	bhi.n	80050de <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8004fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ff4:	d056      	beq.n	80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8004ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ffc:	d86f      	bhi.n	80050de <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8004ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005000:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005004:	d03b      	beq.n	800507e <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8005006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005008:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800500c:	d867      	bhi.n	80050de <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800500e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005010:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005014:	d021      	beq.n	800505a <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8005016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005018:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800501c:	d85f      	bhi.n	80050de <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800501e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005020:	2b00      	cmp	r3, #0
 8005022:	d004      	beq.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8005024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005026:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800502a:	d004      	beq.n	8005036 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 800502c:	e057      	b.n	80050de <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800502e:	f000 f8b9 	bl	80051a4 <HAL_RCCEx_GetD3PCLK1Freq>
 8005032:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005034:	e0a7      	b.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005036:	4b56      	ldr	r3, [pc, #344]	; (8005190 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800503e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005042:	d107      	bne.n	8005054 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005044:	f107 0318 	add.w	r3, r7, #24
 8005048:	4618      	mov	r0, r3
 800504a:	f000 f8c1 	bl	80051d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800504e:	69fb      	ldr	r3, [r7, #28]
 8005050:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005052:	e098      	b.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005054:	2300      	movs	r3, #0
 8005056:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005058:	e095      	b.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800505a:	4b4d      	ldr	r3, [pc, #308]	; (8005190 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005062:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005066:	d107      	bne.n	8005078 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005068:	f107 030c 	add.w	r3, r7, #12
 800506c:	4618      	mov	r0, r3
 800506e:	f000 fa03 	bl	8005478 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005076:	e086      	b.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005078:	2300      	movs	r3, #0
 800507a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800507c:	e083      	b.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800507e:	4b44      	ldr	r3, [pc, #272]	; (8005190 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 0304 	and.w	r3, r3, #4
 8005086:	2b04      	cmp	r3, #4
 8005088:	d109      	bne.n	800509e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800508a:	4b41      	ldr	r3, [pc, #260]	; (8005190 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	08db      	lsrs	r3, r3, #3
 8005090:	f003 0303 	and.w	r3, r3, #3
 8005094:	4a3f      	ldr	r2, [pc, #252]	; (8005194 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8005096:	fa22 f303 	lsr.w	r3, r2, r3
 800509a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800509c:	e073      	b.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800509e:	2300      	movs	r3, #0
 80050a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80050a2:	e070      	b.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80050a4:	4b3a      	ldr	r3, [pc, #232]	; (8005190 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050b0:	d102      	bne.n	80050b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 80050b2:	4b39      	ldr	r3, [pc, #228]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 80050b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80050b6:	e066      	b.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80050b8:	2300      	movs	r3, #0
 80050ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80050bc:	e063      	b.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80050be:	4b34      	ldr	r3, [pc, #208]	; (8005190 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050ca:	d102      	bne.n	80050d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 80050cc:	4b33      	ldr	r3, [pc, #204]	; (800519c <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 80050ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80050d0:	e059      	b.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80050d2:	2300      	movs	r3, #0
 80050d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80050d6:	e056      	b.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80050d8:	4b31      	ldr	r3, [pc, #196]	; (80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 80050da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80050dc:	e053      	b.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80050de:	2300      	movs	r3, #0
 80050e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80050e2:	e050      	b.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80050e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050e8:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80050ec:	430b      	orrs	r3, r1
 80050ee:	d148      	bne.n	8005182 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80050f0:	4b27      	ldr	r3, [pc, #156]	; (8005190 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80050f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80050f8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80050fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005100:	d02a      	beq.n	8005158 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8005102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005104:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005108:	d838      	bhi.n	800517c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800510a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800510c:	2b00      	cmp	r3, #0
 800510e:	d004      	beq.n	800511a <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 8005110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005112:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005116:	d00d      	beq.n	8005134 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 8005118:	e030      	b.n	800517c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800511a:	4b1d      	ldr	r3, [pc, #116]	; (8005190 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005122:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005126:	d102      	bne.n	800512e <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 8005128:	4b1c      	ldr	r3, [pc, #112]	; (800519c <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800512a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800512c:	e02b      	b.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800512e:	2300      	movs	r3, #0
 8005130:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005132:	e028      	b.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005134:	4b16      	ldr	r3, [pc, #88]	; (8005190 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800513c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005140:	d107      	bne.n	8005152 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005142:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005146:	4618      	mov	r0, r3
 8005148:	f000 faea 	bl	8005720 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800514c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800514e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005150:	e019      	b.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005152:	2300      	movs	r3, #0
 8005154:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005156:	e016      	b.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005158:	4b0d      	ldr	r3, [pc, #52]	; (8005190 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005160:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005164:	d107      	bne.n	8005176 <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005166:	f107 0318 	add.w	r3, r7, #24
 800516a:	4618      	mov	r0, r3
 800516c:	f000 f830 	bl	80051d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005170:	69fb      	ldr	r3, [r7, #28]
 8005172:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005174:	e007      	b.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005176:	2300      	movs	r3, #0
 8005178:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800517a:	e004      	b.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 800517c:	2300      	movs	r3, #0
 800517e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005180:	e001      	b.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 8005182:	2300      	movs	r3, #0
 8005184:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8005186:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005188:	4618      	mov	r0, r3
 800518a:	3740      	adds	r7, #64	; 0x40
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}
 8005190:	58024400 	.word	0x58024400
 8005194:	03d09000 	.word	0x03d09000
 8005198:	003d0900 	.word	0x003d0900
 800519c:	007a1200 	.word	0x007a1200
 80051a0:	00bb8000 	.word	0x00bb8000

080051a4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80051a8:	f7fe f920 	bl	80033ec <HAL_RCC_GetHCLKFreq>
 80051ac:	4602      	mov	r2, r0
 80051ae:	4b06      	ldr	r3, [pc, #24]	; (80051c8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80051b0:	6a1b      	ldr	r3, [r3, #32]
 80051b2:	091b      	lsrs	r3, r3, #4
 80051b4:	f003 0307 	and.w	r3, r3, #7
 80051b8:	4904      	ldr	r1, [pc, #16]	; (80051cc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80051ba:	5ccb      	ldrb	r3, [r1, r3]
 80051bc:	f003 031f 	and.w	r3, r3, #31
 80051c0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	58024400 	.word	0x58024400
 80051cc:	08005cfc 	.word	0x08005cfc

080051d0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b089      	sub	sp, #36	; 0x24
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80051d8:	4ba1      	ldr	r3, [pc, #644]	; (8005460 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051dc:	f003 0303 	and.w	r3, r3, #3
 80051e0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80051e2:	4b9f      	ldr	r3, [pc, #636]	; (8005460 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e6:	0b1b      	lsrs	r3, r3, #12
 80051e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051ec:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80051ee:	4b9c      	ldr	r3, [pc, #624]	; (8005460 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f2:	091b      	lsrs	r3, r3, #4
 80051f4:	f003 0301 	and.w	r3, r3, #1
 80051f8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80051fa:	4b99      	ldr	r3, [pc, #612]	; (8005460 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051fe:	08db      	lsrs	r3, r3, #3
 8005200:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005204:	693a      	ldr	r2, [r7, #16]
 8005206:	fb02 f303 	mul.w	r3, r2, r3
 800520a:	ee07 3a90 	vmov	s15, r3
 800520e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005212:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	2b00      	cmp	r3, #0
 800521a:	f000 8111 	beq.w	8005440 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800521e:	69bb      	ldr	r3, [r7, #24]
 8005220:	2b02      	cmp	r3, #2
 8005222:	f000 8083 	beq.w	800532c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005226:	69bb      	ldr	r3, [r7, #24]
 8005228:	2b02      	cmp	r3, #2
 800522a:	f200 80a1 	bhi.w	8005370 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800522e:	69bb      	ldr	r3, [r7, #24]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d003      	beq.n	800523c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005234:	69bb      	ldr	r3, [r7, #24]
 8005236:	2b01      	cmp	r3, #1
 8005238:	d056      	beq.n	80052e8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800523a:	e099      	b.n	8005370 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800523c:	4b88      	ldr	r3, [pc, #544]	; (8005460 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 0320 	and.w	r3, r3, #32
 8005244:	2b00      	cmp	r3, #0
 8005246:	d02d      	beq.n	80052a4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005248:	4b85      	ldr	r3, [pc, #532]	; (8005460 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	08db      	lsrs	r3, r3, #3
 800524e:	f003 0303 	and.w	r3, r3, #3
 8005252:	4a84      	ldr	r2, [pc, #528]	; (8005464 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005254:	fa22 f303 	lsr.w	r3, r2, r3
 8005258:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	ee07 3a90 	vmov	s15, r3
 8005260:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	ee07 3a90 	vmov	s15, r3
 800526a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800526e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005272:	4b7b      	ldr	r3, [pc, #492]	; (8005460 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005276:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800527a:	ee07 3a90 	vmov	s15, r3
 800527e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005282:	ed97 6a03 	vldr	s12, [r7, #12]
 8005286:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005468 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800528a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800528e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005292:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005296:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800529a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800529e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80052a2:	e087      	b.n	80053b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	ee07 3a90 	vmov	s15, r3
 80052aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052ae:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800546c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80052b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052b6:	4b6a      	ldr	r3, [pc, #424]	; (8005460 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052be:	ee07 3a90 	vmov	s15, r3
 80052c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80052ca:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005468 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80052ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80052e6:	e065      	b.n	80053b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	ee07 3a90 	vmov	s15, r3
 80052ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052f2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005470 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80052f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052fa:	4b59      	ldr	r3, [pc, #356]	; (8005460 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005302:	ee07 3a90 	vmov	s15, r3
 8005306:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800530a:	ed97 6a03 	vldr	s12, [r7, #12]
 800530e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005468 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005312:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005316:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800531a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800531e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005322:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005326:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800532a:	e043      	b.n	80053b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	ee07 3a90 	vmov	s15, r3
 8005332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005336:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005474 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800533a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800533e:	4b48      	ldr	r3, [pc, #288]	; (8005460 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005346:	ee07 3a90 	vmov	s15, r3
 800534a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800534e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005352:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005468 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005356:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800535a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800535e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005362:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800536a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800536e:	e021      	b.n	80053b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	ee07 3a90 	vmov	s15, r3
 8005376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800537a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005470 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800537e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005382:	4b37      	ldr	r3, [pc, #220]	; (8005460 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800538a:	ee07 3a90 	vmov	s15, r3
 800538e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005392:	ed97 6a03 	vldr	s12, [r7, #12]
 8005396:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005468 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800539a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800539e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80053b2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80053b4:	4b2a      	ldr	r3, [pc, #168]	; (8005460 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b8:	0a5b      	lsrs	r3, r3, #9
 80053ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053be:	ee07 3a90 	vmov	s15, r3
 80053c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80053ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80053ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80053d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053da:	ee17 2a90 	vmov	r2, s15
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80053e2:	4b1f      	ldr	r3, [pc, #124]	; (8005460 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e6:	0c1b      	lsrs	r3, r3, #16
 80053e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053ec:	ee07 3a90 	vmov	s15, r3
 80053f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80053f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80053fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8005400:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005404:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005408:	ee17 2a90 	vmov	r2, s15
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005410:	4b13      	ldr	r3, [pc, #76]	; (8005460 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005414:	0e1b      	lsrs	r3, r3, #24
 8005416:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800541a:	ee07 3a90 	vmov	s15, r3
 800541e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005422:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005426:	ee37 7a87 	vadd.f32	s14, s15, s14
 800542a:	edd7 6a07 	vldr	s13, [r7, #28]
 800542e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005432:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005436:	ee17 2a90 	vmov	r2, s15
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800543e:	e008      	b.n	8005452 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2200      	movs	r2, #0
 8005444:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	609a      	str	r2, [r3, #8]
}
 8005452:	bf00      	nop
 8005454:	3724      	adds	r7, #36	; 0x24
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr
 800545e:	bf00      	nop
 8005460:	58024400 	.word	0x58024400
 8005464:	03d09000 	.word	0x03d09000
 8005468:	46000000 	.word	0x46000000
 800546c:	4c742400 	.word	0x4c742400
 8005470:	4a742400 	.word	0x4a742400
 8005474:	4af42400 	.word	0x4af42400

08005478 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005478:	b480      	push	{r7}
 800547a:	b089      	sub	sp, #36	; 0x24
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005480:	4ba1      	ldr	r3, [pc, #644]	; (8005708 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005484:	f003 0303 	and.w	r3, r3, #3
 8005488:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800548a:	4b9f      	ldr	r3, [pc, #636]	; (8005708 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800548c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800548e:	0d1b      	lsrs	r3, r3, #20
 8005490:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005494:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005496:	4b9c      	ldr	r3, [pc, #624]	; (8005708 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800549a:	0a1b      	lsrs	r3, r3, #8
 800549c:	f003 0301 	and.w	r3, r3, #1
 80054a0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80054a2:	4b99      	ldr	r3, [pc, #612]	; (8005708 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054a6:	08db      	lsrs	r3, r3, #3
 80054a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80054ac:	693a      	ldr	r2, [r7, #16]
 80054ae:	fb02 f303 	mul.w	r3, r2, r3
 80054b2:	ee07 3a90 	vmov	s15, r3
 80054b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054ba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	f000 8111 	beq.w	80056e8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80054c6:	69bb      	ldr	r3, [r7, #24]
 80054c8:	2b02      	cmp	r3, #2
 80054ca:	f000 8083 	beq.w	80055d4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80054ce:	69bb      	ldr	r3, [r7, #24]
 80054d0:	2b02      	cmp	r3, #2
 80054d2:	f200 80a1 	bhi.w	8005618 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d003      	beq.n	80054e4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d056      	beq.n	8005590 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80054e2:	e099      	b.n	8005618 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80054e4:	4b88      	ldr	r3, [pc, #544]	; (8005708 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 0320 	and.w	r3, r3, #32
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d02d      	beq.n	800554c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80054f0:	4b85      	ldr	r3, [pc, #532]	; (8005708 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	08db      	lsrs	r3, r3, #3
 80054f6:	f003 0303 	and.w	r3, r3, #3
 80054fa:	4a84      	ldr	r2, [pc, #528]	; (800570c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80054fc:	fa22 f303 	lsr.w	r3, r2, r3
 8005500:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	ee07 3a90 	vmov	s15, r3
 8005508:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	ee07 3a90 	vmov	s15, r3
 8005512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005516:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800551a:	4b7b      	ldr	r3, [pc, #492]	; (8005708 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800551c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800551e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005522:	ee07 3a90 	vmov	s15, r3
 8005526:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800552a:	ed97 6a03 	vldr	s12, [r7, #12]
 800552e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005710 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005532:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005536:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800553a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800553e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005546:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800554a:	e087      	b.n	800565c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	ee07 3a90 	vmov	s15, r3
 8005552:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005556:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005714 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800555a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800555e:	4b6a      	ldr	r3, [pc, #424]	; (8005708 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005562:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005566:	ee07 3a90 	vmov	s15, r3
 800556a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800556e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005572:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005710 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005576:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800557a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800557e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005582:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005586:	ee67 7a27 	vmul.f32	s15, s14, s15
 800558a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800558e:	e065      	b.n	800565c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	ee07 3a90 	vmov	s15, r3
 8005596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800559a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005718 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800559e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055a2:	4b59      	ldr	r3, [pc, #356]	; (8005708 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055aa:	ee07 3a90 	vmov	s15, r3
 80055ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80055b6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005710 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80055ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80055d2:	e043      	b.n	800565c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	ee07 3a90 	vmov	s15, r3
 80055da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055de:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800571c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80055e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055e6:	4b48      	ldr	r3, [pc, #288]	; (8005708 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055ee:	ee07 3a90 	vmov	s15, r3
 80055f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80055fa:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005710 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80055fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005602:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005606:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800560a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800560e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005612:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005616:	e021      	b.n	800565c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	ee07 3a90 	vmov	s15, r3
 800561e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005622:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005718 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005626:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800562a:	4b37      	ldr	r3, [pc, #220]	; (8005708 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800562c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005632:	ee07 3a90 	vmov	s15, r3
 8005636:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800563a:	ed97 6a03 	vldr	s12, [r7, #12]
 800563e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005710 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005642:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005646:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800564a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800564e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005652:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005656:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800565a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800565c:	4b2a      	ldr	r3, [pc, #168]	; (8005708 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800565e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005660:	0a5b      	lsrs	r3, r3, #9
 8005662:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005666:	ee07 3a90 	vmov	s15, r3
 800566a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800566e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005672:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005676:	edd7 6a07 	vldr	s13, [r7, #28]
 800567a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800567e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005682:	ee17 2a90 	vmov	r2, s15
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800568a:	4b1f      	ldr	r3, [pc, #124]	; (8005708 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800568c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568e:	0c1b      	lsrs	r3, r3, #16
 8005690:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005694:	ee07 3a90 	vmov	s15, r3
 8005698:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800569c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80056a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80056a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80056a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056b0:	ee17 2a90 	vmov	r2, s15
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80056b8:	4b13      	ldr	r3, [pc, #76]	; (8005708 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056bc:	0e1b      	lsrs	r3, r3, #24
 80056be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056c2:	ee07 3a90 	vmov	s15, r3
 80056c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80056ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80056d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80056d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056de:	ee17 2a90 	vmov	r2, s15
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80056e6:	e008      	b.n	80056fa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2200      	movs	r2, #0
 80056ec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	609a      	str	r2, [r3, #8]
}
 80056fa:	bf00      	nop
 80056fc:	3724      	adds	r7, #36	; 0x24
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop
 8005708:	58024400 	.word	0x58024400
 800570c:	03d09000 	.word	0x03d09000
 8005710:	46000000 	.word	0x46000000
 8005714:	4c742400 	.word	0x4c742400
 8005718:	4a742400 	.word	0x4a742400
 800571c:	4af42400 	.word	0x4af42400

08005720 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8005720:	b480      	push	{r7}
 8005722:	b089      	sub	sp, #36	; 0x24
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005728:	4ba0      	ldr	r3, [pc, #640]	; (80059ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800572a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800572c:	f003 0303 	and.w	r3, r3, #3
 8005730:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8005732:	4b9e      	ldr	r3, [pc, #632]	; (80059ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005736:	091b      	lsrs	r3, r3, #4
 8005738:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800573c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800573e:	4b9b      	ldr	r3, [pc, #620]	; (80059ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005742:	f003 0301 	and.w	r3, r3, #1
 8005746:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005748:	4b98      	ldr	r3, [pc, #608]	; (80059ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800574a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800574c:	08db      	lsrs	r3, r3, #3
 800574e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005752:	693a      	ldr	r2, [r7, #16]
 8005754:	fb02 f303 	mul.w	r3, r2, r3
 8005758:	ee07 3a90 	vmov	s15, r3
 800575c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005760:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	2b00      	cmp	r3, #0
 8005768:	f000 8111 	beq.w	800598e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	2b02      	cmp	r3, #2
 8005770:	f000 8083 	beq.w	800587a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8005774:	69bb      	ldr	r3, [r7, #24]
 8005776:	2b02      	cmp	r3, #2
 8005778:	f200 80a1 	bhi.w	80058be <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800577c:	69bb      	ldr	r3, [r7, #24]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d003      	beq.n	800578a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	2b01      	cmp	r3, #1
 8005786:	d056      	beq.n	8005836 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8005788:	e099      	b.n	80058be <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800578a:	4b88      	ldr	r3, [pc, #544]	; (80059ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 0320 	and.w	r3, r3, #32
 8005792:	2b00      	cmp	r3, #0
 8005794:	d02d      	beq.n	80057f2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005796:	4b85      	ldr	r3, [pc, #532]	; (80059ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	08db      	lsrs	r3, r3, #3
 800579c:	f003 0303 	and.w	r3, r3, #3
 80057a0:	4a83      	ldr	r2, [pc, #524]	; (80059b0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80057a2:	fa22 f303 	lsr.w	r3, r2, r3
 80057a6:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	ee07 3a90 	vmov	s15, r3
 80057ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	ee07 3a90 	vmov	s15, r3
 80057b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057c0:	4b7a      	ldr	r3, [pc, #488]	; (80059ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80057c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057c8:	ee07 3a90 	vmov	s15, r3
 80057cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057d0:	ed97 6a03 	vldr	s12, [r7, #12]
 80057d4:	eddf 5a77 	vldr	s11, [pc, #476]	; 80059b4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80057d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057ec:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80057f0:	e087      	b.n	8005902 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	ee07 3a90 	vmov	s15, r3
 80057f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057fc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80059b8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005800:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005804:	4b69      	ldr	r3, [pc, #420]	; (80059ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005808:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800580c:	ee07 3a90 	vmov	s15, r3
 8005810:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005814:	ed97 6a03 	vldr	s12, [r7, #12]
 8005818:	eddf 5a66 	vldr	s11, [pc, #408]	; 80059b4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800581c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005820:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005824:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005828:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800582c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005830:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005834:	e065      	b.n	8005902 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	ee07 3a90 	vmov	s15, r3
 800583c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005840:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80059bc <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8005844:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005848:	4b58      	ldr	r3, [pc, #352]	; (80059ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800584a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800584c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005850:	ee07 3a90 	vmov	s15, r3
 8005854:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005858:	ed97 6a03 	vldr	s12, [r7, #12]
 800585c:	eddf 5a55 	vldr	s11, [pc, #340]	; 80059b4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005860:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005864:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005868:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800586c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005870:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005874:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005878:	e043      	b.n	8005902 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	ee07 3a90 	vmov	s15, r3
 8005880:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005884:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80059c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8005888:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800588c:	4b47      	ldr	r3, [pc, #284]	; (80059ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800588e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005890:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005894:	ee07 3a90 	vmov	s15, r3
 8005898:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800589c:	ed97 6a03 	vldr	s12, [r7, #12]
 80058a0:	eddf 5a44 	vldr	s11, [pc, #272]	; 80059b4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80058a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058b8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80058bc:	e021      	b.n	8005902 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	ee07 3a90 	vmov	s15, r3
 80058c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058c8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80059b8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80058cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058d0:	4b36      	ldr	r3, [pc, #216]	; (80059ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80058d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058d8:	ee07 3a90 	vmov	s15, r3
 80058dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058e0:	ed97 6a03 	vldr	s12, [r7, #12]
 80058e4:	eddf 5a33 	vldr	s11, [pc, #204]	; 80059b4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80058e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058fc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005900:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8005902:	4b2a      	ldr	r3, [pc, #168]	; (80059ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005906:	0a5b      	lsrs	r3, r3, #9
 8005908:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800590c:	ee07 3a90 	vmov	s15, r3
 8005910:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005914:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005918:	ee37 7a87 	vadd.f32	s14, s15, s14
 800591c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005920:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005924:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005928:	ee17 2a90 	vmov	r2, s15
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8005930:	4b1e      	ldr	r3, [pc, #120]	; (80059ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005934:	0c1b      	lsrs	r3, r3, #16
 8005936:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800593a:	ee07 3a90 	vmov	s15, r3
 800593e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005942:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005946:	ee37 7a87 	vadd.f32	s14, s15, s14
 800594a:	edd7 6a07 	vldr	s13, [r7, #28]
 800594e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005952:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005956:	ee17 2a90 	vmov	r2, s15
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800595e:	4b13      	ldr	r3, [pc, #76]	; (80059ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005962:	0e1b      	lsrs	r3, r3, #24
 8005964:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005968:	ee07 3a90 	vmov	s15, r3
 800596c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005970:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005974:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005978:	edd7 6a07 	vldr	s13, [r7, #28]
 800597c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005980:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005984:	ee17 2a90 	vmov	r2, s15
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800598c:	e008      	b.n	80059a0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2200      	movs	r2, #0
 800599e:	609a      	str	r2, [r3, #8]
}
 80059a0:	bf00      	nop
 80059a2:	3724      	adds	r7, #36	; 0x24
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr
 80059ac:	58024400 	.word	0x58024400
 80059b0:	03d09000 	.word	0x03d09000
 80059b4:	46000000 	.word	0x46000000
 80059b8:	4c742400 	.word	0x4c742400
 80059bc:	4a742400 	.word	0x4a742400
 80059c0:	4af42400 	.word	0x4af42400

080059c4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80059ce:	2300      	movs	r3, #0
 80059d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80059d2:	4b53      	ldr	r3, [pc, #332]	; (8005b20 <RCCEx_PLL2_Config+0x15c>)
 80059d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059d6:	f003 0303 	and.w	r3, r3, #3
 80059da:	2b03      	cmp	r3, #3
 80059dc:	d101      	bne.n	80059e2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	e099      	b.n	8005b16 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80059e2:	4b4f      	ldr	r3, [pc, #316]	; (8005b20 <RCCEx_PLL2_Config+0x15c>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a4e      	ldr	r2, [pc, #312]	; (8005b20 <RCCEx_PLL2_Config+0x15c>)
 80059e8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80059ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059ee:	f7fb f8b9 	bl	8000b64 <HAL_GetTick>
 80059f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80059f4:	e008      	b.n	8005a08 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80059f6:	f7fb f8b5 	bl	8000b64 <HAL_GetTick>
 80059fa:	4602      	mov	r2, r0
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	1ad3      	subs	r3, r2, r3
 8005a00:	2b02      	cmp	r3, #2
 8005a02:	d901      	bls.n	8005a08 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005a04:	2303      	movs	r3, #3
 8005a06:	e086      	b.n	8005b16 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005a08:	4b45      	ldr	r3, [pc, #276]	; (8005b20 <RCCEx_PLL2_Config+0x15c>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d1f0      	bne.n	80059f6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005a14:	4b42      	ldr	r3, [pc, #264]	; (8005b20 <RCCEx_PLL2_Config+0x15c>)
 8005a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a18:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	031b      	lsls	r3, r3, #12
 8005a22:	493f      	ldr	r1, [pc, #252]	; (8005b20 <RCCEx_PLL2_Config+0x15c>)
 8005a24:	4313      	orrs	r3, r2
 8005a26:	628b      	str	r3, [r1, #40]	; 0x28
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	3b01      	subs	r3, #1
 8005a2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	3b01      	subs	r3, #1
 8005a38:	025b      	lsls	r3, r3, #9
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	431a      	orrs	r2, r3
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	3b01      	subs	r3, #1
 8005a44:	041b      	lsls	r3, r3, #16
 8005a46:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005a4a:	431a      	orrs	r2, r3
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	691b      	ldr	r3, [r3, #16]
 8005a50:	3b01      	subs	r3, #1
 8005a52:	061b      	lsls	r3, r3, #24
 8005a54:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005a58:	4931      	ldr	r1, [pc, #196]	; (8005b20 <RCCEx_PLL2_Config+0x15c>)
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005a5e:	4b30      	ldr	r3, [pc, #192]	; (8005b20 <RCCEx_PLL2_Config+0x15c>)
 8005a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a62:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	695b      	ldr	r3, [r3, #20]
 8005a6a:	492d      	ldr	r1, [pc, #180]	; (8005b20 <RCCEx_PLL2_Config+0x15c>)
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005a70:	4b2b      	ldr	r3, [pc, #172]	; (8005b20 <RCCEx_PLL2_Config+0x15c>)
 8005a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a74:	f023 0220 	bic.w	r2, r3, #32
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	699b      	ldr	r3, [r3, #24]
 8005a7c:	4928      	ldr	r1, [pc, #160]	; (8005b20 <RCCEx_PLL2_Config+0x15c>)
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005a82:	4b27      	ldr	r3, [pc, #156]	; (8005b20 <RCCEx_PLL2_Config+0x15c>)
 8005a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a86:	4a26      	ldr	r2, [pc, #152]	; (8005b20 <RCCEx_PLL2_Config+0x15c>)
 8005a88:	f023 0310 	bic.w	r3, r3, #16
 8005a8c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005a8e:	4b24      	ldr	r3, [pc, #144]	; (8005b20 <RCCEx_PLL2_Config+0x15c>)
 8005a90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a92:	4b24      	ldr	r3, [pc, #144]	; (8005b24 <RCCEx_PLL2_Config+0x160>)
 8005a94:	4013      	ands	r3, r2
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	69d2      	ldr	r2, [r2, #28]
 8005a9a:	00d2      	lsls	r2, r2, #3
 8005a9c:	4920      	ldr	r1, [pc, #128]	; (8005b20 <RCCEx_PLL2_Config+0x15c>)
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005aa2:	4b1f      	ldr	r3, [pc, #124]	; (8005b20 <RCCEx_PLL2_Config+0x15c>)
 8005aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa6:	4a1e      	ldr	r2, [pc, #120]	; (8005b20 <RCCEx_PLL2_Config+0x15c>)
 8005aa8:	f043 0310 	orr.w	r3, r3, #16
 8005aac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d106      	bne.n	8005ac2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005ab4:	4b1a      	ldr	r3, [pc, #104]	; (8005b20 <RCCEx_PLL2_Config+0x15c>)
 8005ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab8:	4a19      	ldr	r2, [pc, #100]	; (8005b20 <RCCEx_PLL2_Config+0x15c>)
 8005aba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005abe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005ac0:	e00f      	b.n	8005ae2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d106      	bne.n	8005ad6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005ac8:	4b15      	ldr	r3, [pc, #84]	; (8005b20 <RCCEx_PLL2_Config+0x15c>)
 8005aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005acc:	4a14      	ldr	r2, [pc, #80]	; (8005b20 <RCCEx_PLL2_Config+0x15c>)
 8005ace:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ad2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005ad4:	e005      	b.n	8005ae2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005ad6:	4b12      	ldr	r3, [pc, #72]	; (8005b20 <RCCEx_PLL2_Config+0x15c>)
 8005ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ada:	4a11      	ldr	r2, [pc, #68]	; (8005b20 <RCCEx_PLL2_Config+0x15c>)
 8005adc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005ae0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005ae2:	4b0f      	ldr	r3, [pc, #60]	; (8005b20 <RCCEx_PLL2_Config+0x15c>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a0e      	ldr	r2, [pc, #56]	; (8005b20 <RCCEx_PLL2_Config+0x15c>)
 8005ae8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005aec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005aee:	f7fb f839 	bl	8000b64 <HAL_GetTick>
 8005af2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005af4:	e008      	b.n	8005b08 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005af6:	f7fb f835 	bl	8000b64 <HAL_GetTick>
 8005afa:	4602      	mov	r2, r0
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	1ad3      	subs	r3, r2, r3
 8005b00:	2b02      	cmp	r3, #2
 8005b02:	d901      	bls.n	8005b08 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005b04:	2303      	movs	r3, #3
 8005b06:	e006      	b.n	8005b16 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005b08:	4b05      	ldr	r3, [pc, #20]	; (8005b20 <RCCEx_PLL2_Config+0x15c>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d0f0      	beq.n	8005af6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3710      	adds	r7, #16
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
 8005b1e:	bf00      	nop
 8005b20:	58024400 	.word	0x58024400
 8005b24:	ffff0007 	.word	0xffff0007

08005b28 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b084      	sub	sp, #16
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005b32:	2300      	movs	r3, #0
 8005b34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005b36:	4b53      	ldr	r3, [pc, #332]	; (8005c84 <RCCEx_PLL3_Config+0x15c>)
 8005b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b3a:	f003 0303 	and.w	r3, r3, #3
 8005b3e:	2b03      	cmp	r3, #3
 8005b40:	d101      	bne.n	8005b46 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	e099      	b.n	8005c7a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005b46:	4b4f      	ldr	r3, [pc, #316]	; (8005c84 <RCCEx_PLL3_Config+0x15c>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a4e      	ldr	r2, [pc, #312]	; (8005c84 <RCCEx_PLL3_Config+0x15c>)
 8005b4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b52:	f7fb f807 	bl	8000b64 <HAL_GetTick>
 8005b56:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005b58:	e008      	b.n	8005b6c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005b5a:	f7fb f803 	bl	8000b64 <HAL_GetTick>
 8005b5e:	4602      	mov	r2, r0
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	1ad3      	subs	r3, r2, r3
 8005b64:	2b02      	cmp	r3, #2
 8005b66:	d901      	bls.n	8005b6c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005b68:	2303      	movs	r3, #3
 8005b6a:	e086      	b.n	8005c7a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005b6c:	4b45      	ldr	r3, [pc, #276]	; (8005c84 <RCCEx_PLL3_Config+0x15c>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d1f0      	bne.n	8005b5a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005b78:	4b42      	ldr	r3, [pc, #264]	; (8005c84 <RCCEx_PLL3_Config+0x15c>)
 8005b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b7c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	051b      	lsls	r3, r3, #20
 8005b86:	493f      	ldr	r1, [pc, #252]	; (8005c84 <RCCEx_PLL3_Config+0x15c>)
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	628b      	str	r3, [r1, #40]	; 0x28
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	3b01      	subs	r3, #1
 8005b92:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	3b01      	subs	r3, #1
 8005b9c:	025b      	lsls	r3, r3, #9
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	431a      	orrs	r2, r3
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	3b01      	subs	r3, #1
 8005ba8:	041b      	lsls	r3, r3, #16
 8005baa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005bae:	431a      	orrs	r2, r3
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	691b      	ldr	r3, [r3, #16]
 8005bb4:	3b01      	subs	r3, #1
 8005bb6:	061b      	lsls	r3, r3, #24
 8005bb8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005bbc:	4931      	ldr	r1, [pc, #196]	; (8005c84 <RCCEx_PLL3_Config+0x15c>)
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005bc2:	4b30      	ldr	r3, [pc, #192]	; (8005c84 <RCCEx_PLL3_Config+0x15c>)
 8005bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	695b      	ldr	r3, [r3, #20]
 8005bce:	492d      	ldr	r1, [pc, #180]	; (8005c84 <RCCEx_PLL3_Config+0x15c>)
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005bd4:	4b2b      	ldr	r3, [pc, #172]	; (8005c84 <RCCEx_PLL3_Config+0x15c>)
 8005bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	699b      	ldr	r3, [r3, #24]
 8005be0:	4928      	ldr	r1, [pc, #160]	; (8005c84 <RCCEx_PLL3_Config+0x15c>)
 8005be2:	4313      	orrs	r3, r2
 8005be4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005be6:	4b27      	ldr	r3, [pc, #156]	; (8005c84 <RCCEx_PLL3_Config+0x15c>)
 8005be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bea:	4a26      	ldr	r2, [pc, #152]	; (8005c84 <RCCEx_PLL3_Config+0x15c>)
 8005bec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bf0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005bf2:	4b24      	ldr	r3, [pc, #144]	; (8005c84 <RCCEx_PLL3_Config+0x15c>)
 8005bf4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005bf6:	4b24      	ldr	r3, [pc, #144]	; (8005c88 <RCCEx_PLL3_Config+0x160>)
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	69d2      	ldr	r2, [r2, #28]
 8005bfe:	00d2      	lsls	r2, r2, #3
 8005c00:	4920      	ldr	r1, [pc, #128]	; (8005c84 <RCCEx_PLL3_Config+0x15c>)
 8005c02:	4313      	orrs	r3, r2
 8005c04:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005c06:	4b1f      	ldr	r3, [pc, #124]	; (8005c84 <RCCEx_PLL3_Config+0x15c>)
 8005c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c0a:	4a1e      	ldr	r2, [pc, #120]	; (8005c84 <RCCEx_PLL3_Config+0x15c>)
 8005c0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c10:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d106      	bne.n	8005c26 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005c18:	4b1a      	ldr	r3, [pc, #104]	; (8005c84 <RCCEx_PLL3_Config+0x15c>)
 8005c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c1c:	4a19      	ldr	r2, [pc, #100]	; (8005c84 <RCCEx_PLL3_Config+0x15c>)
 8005c1e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005c22:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005c24:	e00f      	b.n	8005c46 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d106      	bne.n	8005c3a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005c2c:	4b15      	ldr	r3, [pc, #84]	; (8005c84 <RCCEx_PLL3_Config+0x15c>)
 8005c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c30:	4a14      	ldr	r2, [pc, #80]	; (8005c84 <RCCEx_PLL3_Config+0x15c>)
 8005c32:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005c36:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005c38:	e005      	b.n	8005c46 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005c3a:	4b12      	ldr	r3, [pc, #72]	; (8005c84 <RCCEx_PLL3_Config+0x15c>)
 8005c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c3e:	4a11      	ldr	r2, [pc, #68]	; (8005c84 <RCCEx_PLL3_Config+0x15c>)
 8005c40:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c44:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005c46:	4b0f      	ldr	r3, [pc, #60]	; (8005c84 <RCCEx_PLL3_Config+0x15c>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a0e      	ldr	r2, [pc, #56]	; (8005c84 <RCCEx_PLL3_Config+0x15c>)
 8005c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c52:	f7fa ff87 	bl	8000b64 <HAL_GetTick>
 8005c56:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005c58:	e008      	b.n	8005c6c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005c5a:	f7fa ff83 	bl	8000b64 <HAL_GetTick>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	1ad3      	subs	r3, r2, r3
 8005c64:	2b02      	cmp	r3, #2
 8005c66:	d901      	bls.n	8005c6c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005c68:	2303      	movs	r3, #3
 8005c6a:	e006      	b.n	8005c7a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005c6c:	4b05      	ldr	r3, [pc, #20]	; (8005c84 <RCCEx_PLL3_Config+0x15c>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d0f0      	beq.n	8005c5a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3710      	adds	r7, #16
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
 8005c82:	bf00      	nop
 8005c84:	58024400 	.word	0x58024400
 8005c88:	ffff0007 	.word	0xffff0007

08005c8c <__libc_init_array>:
 8005c8c:	b570      	push	{r4, r5, r6, lr}
 8005c8e:	4d0d      	ldr	r5, [pc, #52]	; (8005cc4 <__libc_init_array+0x38>)
 8005c90:	4c0d      	ldr	r4, [pc, #52]	; (8005cc8 <__libc_init_array+0x3c>)
 8005c92:	1b64      	subs	r4, r4, r5
 8005c94:	10a4      	asrs	r4, r4, #2
 8005c96:	2600      	movs	r6, #0
 8005c98:	42a6      	cmp	r6, r4
 8005c9a:	d109      	bne.n	8005cb0 <__libc_init_array+0x24>
 8005c9c:	4d0b      	ldr	r5, [pc, #44]	; (8005ccc <__libc_init_array+0x40>)
 8005c9e:	4c0c      	ldr	r4, [pc, #48]	; (8005cd0 <__libc_init_array+0x44>)
 8005ca0:	f000 f820 	bl	8005ce4 <_init>
 8005ca4:	1b64      	subs	r4, r4, r5
 8005ca6:	10a4      	asrs	r4, r4, #2
 8005ca8:	2600      	movs	r6, #0
 8005caa:	42a6      	cmp	r6, r4
 8005cac:	d105      	bne.n	8005cba <__libc_init_array+0x2e>
 8005cae:	bd70      	pop	{r4, r5, r6, pc}
 8005cb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cb4:	4798      	blx	r3
 8005cb6:	3601      	adds	r6, #1
 8005cb8:	e7ee      	b.n	8005c98 <__libc_init_array+0xc>
 8005cba:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cbe:	4798      	blx	r3
 8005cc0:	3601      	adds	r6, #1
 8005cc2:	e7f2      	b.n	8005caa <__libc_init_array+0x1e>
 8005cc4:	08005d0c 	.word	0x08005d0c
 8005cc8:	08005d0c 	.word	0x08005d0c
 8005ccc:	08005d0c 	.word	0x08005d0c
 8005cd0:	08005d10 	.word	0x08005d10

08005cd4 <memset>:
 8005cd4:	4402      	add	r2, r0
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d100      	bne.n	8005cde <memset+0xa>
 8005cdc:	4770      	bx	lr
 8005cde:	f803 1b01 	strb.w	r1, [r3], #1
 8005ce2:	e7f9      	b.n	8005cd8 <memset+0x4>

08005ce4 <_init>:
 8005ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ce6:	bf00      	nop
 8005ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cea:	bc08      	pop	{r3}
 8005cec:	469e      	mov	lr, r3
 8005cee:	4770      	bx	lr

08005cf0 <_fini>:
 8005cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cf2:	bf00      	nop
 8005cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cf6:	bc08      	pop	{r3}
 8005cf8:	469e      	mov	lr, r3
 8005cfa:	4770      	bx	lr
